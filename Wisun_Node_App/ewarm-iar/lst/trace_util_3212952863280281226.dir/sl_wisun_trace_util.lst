###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         29/Mar/2025  15:53:20
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\sl_wisun_trace_util.c
#    Command line                 =
#        -f "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\trace_util_3212952863280281226.dir\sl_wisun_trace_util.o.rsp"
#        ("D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\sl_wisun_trace_util.c"
#        -D DEBUG_EFM=1 -D EFR32FG28B322F1024IM48=1 -D
#        configNUM_SDK_THREAD_LOCAL_STORAGE_POINTERS=2 -D
#        SL_COMPONENT_CATALOG_PRESENT=1 -D
#        MBEDTLS_CONFIG_FILE=<sl_mbedtls_config.h> -D
#        MBEDTLS_PSA_CRYPTO_CONFIG_FILE=<psa_crypto_config.h> -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -D
#        RTT_USE_ASM=0 -lC "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\lst\trace_util_3212952863280281226.dir"
#        --diag_suppress Pa050 -o "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\trace_util_3212952863280281226.dir"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M33 --cmse --cmse -e --fpu=VFPv5_sp --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        9.2\arm\inc\c\DLib_Config_Normal.h" -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\rail\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\wisun\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\.\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\Device\SiliconLabs\EFR32FG28\Include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_project_info\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\common\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\src\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\CMSIS\Core\Include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\CMSIS\RTOS2\Include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\device_init\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emdrv\common\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emlib\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\iostream\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\config\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\config\preset\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\cpu\include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\ports\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emdrv\nvm3\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\peripheral\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\printf\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\printf\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_psa_driver\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\common\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\ble\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\ieee802154\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\wmbus\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\zwave\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\chip\efr32\efr32xg2x\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\sidewalk\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\pa-conversions\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\pa-conversions\efr32xg28\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\rail_util_pti\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\se_manager\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\se_manager\src\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\segger\systemview\SEGGER\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\silicon_labs\silabs_core\memory_manager\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\common\toolchain\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\system\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_core\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_setting\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\cli_util\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\event_manager\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\ns_list\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\ping\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\nanostack\nanostack-libservice\mbed-client-libservice\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\udp_client\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\sleeptimer\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\plugin\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\stack\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\stack\inc\socket\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\autogen\\" -On
#        --use_c++_inline) --dependencies=n "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\trace_util_3212952863280281226.dir\sl_wisun_trace_util.o.iar_deps"
#    Locale                       =  C
#    List file                    =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\lst\trace_util_3212952863280281226.dir\sl_wisun_trace_util.lst
#    Object file                  =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\trace_util_3212952863280281226.dir\sl_wisun_trace_util.o
#    Runtime model:                  
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_file_descriptor     =  0
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#      __iar_require _Printf      =  flags,int_specials,widths
#
###############################################################################

D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\sl_wisun_trace_util.c
      1          /***************************************************************************//**
      2           * @file
      3           * @brief
      4           *******************************************************************************
      5           * # License
      6           * <b>Copyright 2021 Silicon Laboratories Inc. www.silabs.com</b>
      7           *******************************************************************************
      8           *
      9           * SPDX-License-Identifier: Zlib
     10           *
     11           * The licensor of this software is Silicon Laboratories Inc.
     12           *
     13           * This software is provided 'as-is', without any express or implied
     14           * warranty. In no event will the authors be held liable for any damages
     15           * arising from the use of this software.
     16           *
     17           * Permission is granted to anyone to use this software for any purpose,
     18           * including commercial applications, and to alter it and redistribute it
     19           * freely, subject to the following restrictions:
     20           *
     21           * 1. The origin of this software must not be misrepresented; you must not
     22           *    claim that you wrote the original software. If you use this software
     23           *    in a product, an acknowledgment in the product documentation would be
     24           *    appreciated but is not required.
     25           * 2. Altered source versions must be plainly marked as such, and must not be
     26           *    misrepresented as being the original software.
     27           * 3. This notice may not be removed or altered from any source distribution.
     28           *
     29           ******************************************************************************/
     30          
     31          // -----------------------------------------------------------------------------
     32          //                                   Includes
     33          // -----------------------------------------------------------------------------
     34          #include <assert.h>
     35          #include <string.h>
     36          #include <stdlib.h>
     37          #include "sl_sleeptimer.h"
     38          #include "sl_wisun_trace_util.h"

   \                                 In section .rodata, align 4
   \   static __absolute struct <unnamed>#204 const SL_WISUN_PARAMS_PROFILE_TEST
   \                     SL_WISUN_PARAMS_PROFILE_TEST:
   \        0x0   0x0000'0002        DC32 2
   \        0x4   0x0005 0x003C      DC16 5, 60
   \        0x8   0x01               DC8 1
   \        0x9                      DS8 3
   \        0xC   0x0005 0x000F      DC16 5, 15
   \       0x10   0x01               DC8 1
   \       0x11                      DS8 3
   \       0x14   0x72 0x01          DC8 114, 1
   \       0x16                      DS8 2
   \       0x18   0x0005 0x003C      DC16 5, 60
   \       0x1C   0x01               DC8 1
   \       0x1D                      DS8 3
   \       0x20   0x0005 0x000F      DC16 5, 15
   \       0x24   0x01               DC8 1
   \       0x25                      DS8 3
   \       0x28   0x003C 0x0078      DC16 60, 120
   \       0x2C   0x00               DC8 0
   \       0x2D                      DS8 3
   \       0x30   0x0002'A300        DC32 172'800, 86'400
   \              0x0001'5180
   \       0x38   0x01C2 0x0002      DC16 450, 2, 3, 180, 420, 420, 330, 1, 4, 64, 60
   \               0x0003 0x00B
   \              4 0x01A4 0x01
   \              A4 0x014A 0x0
   \              001 0x0004 0x
   \              0040 0x003C
   \       0x4E   0x04 0x02          DC8 4, 2, 1
   \              0x01
   \       0x51                      DS8 3
   \       0x54   0x0002 0x0005      DC16 2, 5, 1, 1
   \               0x0001 0x000
   \              1
   \       0x5C   0x01 0x04          DC8 1, 4, 5, 2
   \              0x05 0x02
   \       0x60   0x0001 0x000A      DC16 1, 10
   \       0x64   0x08               DC8 8
   \       0x65                      DS8 3
   \       0x68   0x00B4             DC16 180
   \       0x6A   0x02               DC8 2
   \       0x6B                      DS8 1
   \       0x6C   0x0104             DC16 260
   \       0x6E   0x1E               DC8 30
   \       0x6F                      DS8 1

   \                                 In section .rodata, align 4
   \   static __absolute struct <unnamed>#204 const SL_WISUN_PARAMS_PROFILE_SMALL
   \                     SL_WISUN_PARAMS_PROFILE_SMALL:
   \        0x0   0x0000'0002        DC32 2
   \        0x4   0x000F 0x003C      DC16 15, 60
   \        0x8   0x01               DC8 1
   \        0x9                      DS8 3
   \        0xC   0x000F 0x003C      DC16 15, 60
   \       0x10   0x01               DC8 1
   \       0x11                      DS8 3
   \       0x14   0x72 0x01          DC8 114, 1
   \       0x16                      DS8 2
   \       0x18   0x000F 0x003C      DC16 15, 60
   \       0x1C   0x01               DC8 1
   \       0x1D                      DS8 3
   \       0x20   0x000F 0x003C      DC16 15, 60
   \       0x24   0x01               DC8 1
   \       0x25                      DS8 3
   \       0x28   0x003C 0x0078      DC16 60, 120
   \       0x2C   0x00               DC8 0
   \       0x2D                      DS8 3
   \       0x30   0x0002'A300        DC32 172'800, 86'400
   \              0x0001'5180
   \       0x38   0x01C2 0x0003      DC16 450, 3, 30, 180, 420, 420, 330, 1, 4, 64, 60
   \               0x001E 0x00B
   \              4 0x01A4 0x01
   \              A4 0x014A 0x0
   \              001 0x0004 0x
   \              0040 0x003C
   \       0x4E   0x04 0x02          DC8 4, 2, 1
   \              0x01
   \       0x51                      DS8 3
   \       0x54   0x0002 0x00B4      DC16 2, 180, 10, 4
   \               0x000A 0x000
   \              4
   \       0x5C   0x01 0x04          DC8 1, 4, 5, 2
   \              0x05 0x02
   \       0x60   0x0001 0x000A      DC16 1, 10
   \       0x64   0x08               DC8 8
   \       0x65                      DS8 3
   \       0x68   0x00B4             DC16 180
   \       0x6A   0x02               DC8 2
   \       0x6B                      DS8 1
   \       0x6C   0x0104             DC16 260
   \       0x6E   0x1E               DC8 30
   \       0x6F                      DS8 1

   \                                 In section .rodata, align 4
   \   static __absolute struct <unnamed>#204 const SL_WISUN_PARAMS_PROFILE_MEDIUM
   \                     SL_WISUN_PARAMS_PROFILE_MEDIUM:
   \        0x0   0x0000'0002        DC32 2
   \        0x4   0x003C 0x03C0      DC16 60, 960
   \        0x8   0x01               DC8 1
   \        0x9                      DS8 3
   \        0xC   0x003C 0x03C0      DC16 60, 960
   \       0x10   0x01               DC8 1
   \       0x11                      DS8 3
   \       0x14   0x72 0x01          DC8 114, 1
   \       0x16                      DS8 2
   \       0x18   0x003C 0x03C0      DC16 60, 960
   \       0x1C   0x01               DC8 1
   \       0x1D                      DS8 3
   \       0x20   0x003C 0x03C0      DC16 60, 960
   \       0x24   0x01               DC8 1
   \       0x25                      DS8 3
   \       0x28   0x003C 0x0078      DC16 60, 120
   \       0x2C   0x00               DC8 0
   \       0x2D                      DS8 3
   \       0x30   0x0002'A300        DC32 172'800, 86'400
   \              0x0001'5180
   \       0x38   0x01C2 0x0003      DC16 450, 3, 30, 180, 420, 720, 330, 4, 64, 64, 60
   \               0x001E 0x00B
   \              4 0x01A4 0x02
   \              D0 0x014A 0x0
   \              004 0x0040 0x
   \              0040 0x003C
   \       0x4E   0x04 0x04          DC8 4, 4, 1
   \              0x01
   \       0x51                      DS8 3
   \       0x54   0x003C 0x00B4      DC16 60, 180, 10, 8
   \               0x000A 0x000
   \              8
   \       0x5C   0x01 0x04          DC8 1, 4, 5, 2
   \              0x05 0x02
   \       0x60   0x0001 0x0020      DC16 1, 32
   \       0x64   0x08               DC8 8
   \       0x65                      DS8 3
   \       0x68   0x0240             DC16 576
   \       0x6A   0x02               DC8 2
   \       0x6B                      DS8 1
   \       0x6C   0x0104             DC16 260
   \       0x6E   0x3C               DC8 60
   \       0x6F                      DS8 1

   \                                 In section .rodata, align 4
   \   static __absolute struct <unnamed>#204 const SL_WISUN_PARAMS_PROFILE_LARGE
   \                     SL_WISUN_PARAMS_PROFILE_LARGE:
   \        0x0   0x0000'0002        DC32 2
   \        0x4   0x0078 0x0600      DC16 120, 1'536
   \        0x8   0x01               DC8 1
   \        0x9                      DS8 3
   \        0xC   0x0078 0x0600      DC16 120, 1'536
   \       0x10   0x01               DC8 1
   \       0x11                      DS8 3
   \       0x14   0x72 0x01          DC8 114, 1
   \       0x16                      DS8 2
   \       0x18   0x0078 0x0600      DC16 120, 1'536
   \       0x1C   0x01               DC8 1
   \       0x1D                      DS8 3
   \       0x20   0x0078 0x0600      DC16 120, 1'536
   \       0x24   0x01               DC8 1
   \       0x25                      DS8 3
   \       0x28   0x003C 0x00F0      DC16 60, 240
   \       0x2C   0x00               DC8 0
   \       0x2D                      DS8 3
   \       0x30   0x0002'A300        DC32 172'800, 86'400
   \              0x0001'5180
   \       0x38   0x02EE 0x0003      DC16 750, 3, 30, 300, 600, 900, 750, 4, 64, 64, 60
   \               0x001E 0x012
   \              C 0x0258 0x03
   \              84 0x02EE 0x0
   \              004 0x0040 0x
   \              0040 0x003C
   \       0x4E   0x04 0x04          DC8 4, 4, 1
   \              0x01
   \       0x51                      DS8 3
   \       0x54   0x003C 0x00B4      DC16 60, 180, 10, 8
   \               0x000A 0x000
   \              8
   \       0x5C   0x01 0x04          DC8 1, 4, 5, 2
   \              0x05 0x02
   \       0x60   0x0005 0x0028      DC16 5, 40
   \       0x64   0x08               DC8 8
   \       0x65                      DS8 3
   \       0x68   0x02D0             DC16 720
   \       0x6A   0x02               DC8 2
   \       0x6B                      DS8 1
   \       0x6C   0x0208             DC16 520
   \       0x6E   0x5A               DC8 90
   \       0x6F                      DS8 1
     39          #include "sl_wisun_types.h"
     40          #include "rail_config.h"
     41          #include "cmsis_os2.h"
     42          
     43          #if defined(SL_CATALOG_FREERTOS_KERNEL_PRESENT)
     44          // FreeRTOS
     45            #include "FreeRTOS.h"
     46          #else
     47          // MicriumOS
     48            #include "sl_malloc.h"
     49          #endif
     50          
     51          // -----------------------------------------------------------------------------
     52          //                              Macros and Typedefs
     53          // -----------------------------------------------------------------------------
     54          
     55          ///  Size of the IPv6 string
     56          #define IPV6_STRING_SIZE                (40U)
     57          
     58          /// Empty IPv6 string
     59          #define IPV6_EMPTY_STRING               "::"
     60          
     61          /// Max length of the string of the phy
     62          #define PHY_STR_MAX_LENGTH              (24U)
     63          
     64          /// String of the FAN1.0
     65          #define FAN_1_0_STR                     "FAN1.0"
     66          
     67          /// String of the FAN1.1
     68          #define FAN_1_1_STR                     "FAN1.1"
     69          
     70          /// Print format string for FAN 1.0
     71          #define FAN10_FORMAT_STR                "%s-%u-%x (%s)"
     72          
     73          /// Print format string for FAN 1.0
     74          #define FAN11_FORMAT_STR                "%s-%u-%u (%s)"
     75          
     76          /// FAN 1.0 version
     77          #define VERSION_WISUN_FAN1_0             0U
     78          
     79          /// FAN 1.1 version
     80          #define VERSION_WISUN_FAN1_1             1U
     81          
     82          /// FSK PHY mode to operating mode table size
     83          #define FSK_PHY_MODE_TO_OPM_TABLE_SIZE   9U
     84          
     85          /// PHY mode minimum value
     86          #define PHY_MODE_MIN_VAL                 1U
     87          
     88          /// PHY mode minimum value
     89          #define PHY_MODE_MAX_VAL                 8U
     90          
     91          /// MAC address srting length
     92          #define MAC_ADDR_STR_LEN \
     93            ((SL_WISUN_MAC_ADDRESS_SIZE * 2) + SL_WISUN_MAC_ADDRESS_SIZE - 1)
     94          
     95          /// Allocate phy list element and return on error macro function
     96          #define __alloc_phy_list_element_and_check(__dst_ptr, __phy_cfg_ptr) \
     97            do {                                                               \
     98              (__dst_ptr) = _alloc_phy_list_element(__phy_cfg_ptr);            \
     99              if (__dst_ptr == NULL) {                                         \
    100                return NULL;                                                   \
    101              }                                                                \
    102            } while (0)
    103          
    104          /// Length of the timestamp buffer
    105          #define TIMESTAMP_BUF_LEN     32U
    106          
    107          /// Time stamp format string
    108          #define TIMESTAMP_FORMAT  "%03d-%02d:%02d:%02d"
    109          
    110          /// Milisecs in Secs
    111          #define MS_IN_SEC         1000U
    112          
    113          /// Secs in Day
    114          #define SEC_IN_DAY        86400U
    115          
    116          /// Secs in Hour
    117          #define SEC_IN_HOUR       3600U
    118          
    119          /// Secs in Minute
    120          #define SEC_IN_MINUTE     60U
    121          
    122          /// Trace util event notify max channel count
    123          #define APP_WISUN_TRACE_UTIL_EVT_NOTIFY_MAX_CHS         31U
    124          
    125          /// Trace util event notify error mask
    126          #define APP_WISUN_TRACE_UTIL_EVT_NOTIFY_ERROR_MSK       (1UL << 31U)
    127          
    128          /// Trace util event notify all flags mask
    129          #define APP_WISUN_TRACE_UTIL_EVT_NOTIFY_ALL_FLAGS_MSK   0x7FFFFFFFUL
    130          
    131          /// PHY type enumeration
    132          typedef enum phy_type {
    133            /// PHY type FSK
    134            PHY_TYPE_FSK = 0,
    135            /// PHY type FSK FEC
    136            PHY_TYPE_FSK_FEC,
    137            /// PHY type OFDM1
    138            PHY_TYPE_OFDM1,
    139            /// PHY type OFDM2
    140            PHY_TYPE_OFDM2,
    141            /// PHY type OFDM3
    142            PHY_TYPE_OFDM3,
    143            /// PHY type OFDM4
    144            PHY_TYPE_OFDM4,
    145          } phy_type_t;
    146          
    147          /// RAIL to Wi-SUN OFDM PHY mode ID map element
    148          typedef struct rail_ofdm_phy_mode_id {
    149            /// RAIL PHY mode ID
    150            uint8_t rail_phy_mode_id;
    151            /// Wi-SUN PHY mode ID min
    152            uint8_t wisun_phy_mode_id_min;
    153            /// Wi-SUN PHY mode ID max
    154            uint8_t wisun_phy_mode_id_max;
    155          } rail_ofdm_phy_mode_id_t;
    156          
    157          // -----------------------------------------------------------------------------
    158          //                          Static Function Declarations
    159          // -----------------------------------------------------------------------------
    160          
    161          /**************************************************************************//**
    162           * @brief Get string key by value from app_enum_t
    163           * @details Helper function
    164           * @param[in] app_enum Application enum storage
    165           * @param[in] val Reference value
    166           * @return const char* String value
    167           *****************************************************************************/
    168          static const char *_get_str_key_by_val_from_enum(const app_enum_t * const app_enum,
    169                                                           const uint32_t val);
    170          
    171          /**************************************************************************//**
    172           * @brief Allocate PHY list element
    173           * @details Helper function
    174           * @param[in] phy_cfg PHY config to copy
    175           * @return app_wisun_phy_list_t* Allocated element ptr or NULL on error
    176           *****************************************************************************/
    177          static app_wisun_phy_list_t *_alloc_phy_list_element(sl_wisun_phy_config_t *phy_cfg);
    178          
    179          /**************************************************************************//**
    180           * @brief Getting PHY config by channel config entry
    181           * @details Getting available PHY's configuration by channel config entry
    182           * @param[in] ch_config_entry channel config
    183           * @param[out] phy_config pointer of destination of getting
    184           * @return sl_status_t SL_STATUS_OK if it is successful, otherwise SL_STATUS_FAIL
    185           *****************************************************************************/
    186          static sl_status_t _get_phy_cfg_from_ch_cfg_entry(const RAIL_ChannelConfigEntry_t * const ch_config_entry,
    187                                                            sl_wisun_phy_config_t * const phy_config);
    188          
    189          /**************************************************************************//**
    190           * @brief Get PHY type
    191           * @details Helper function
    192           * @param[in] phy_mode_id PHY mode ID
    193           * @return uint8_t PHY type
    194           *****************************************************************************/
    195          __STATIC_INLINE uint8_t _get_phy_type(const uint8_t phy_mode_id);
    196          
    197          /**************************************************************************//**
    198           * @brief Get PHY mode
    199           * @details Helper function
    200           * @param[in] phy_mode_id PHY mode ID
    201           * @return uint8_t PHY mode
    202           *****************************************************************************/
    203          __STATIC_INLINE uint8_t _get_phy_mode(const uint8_t phy_mode_id);
    204          
    205          /**************************************************************************//**
    206           * @brief Is FSK PHY
    207           * @details Helper function
    208           * @param[in] phy_mode_id PHY mode ID
    209           * @return bool true ift it's FSK PHY, otherwise false
    210           *****************************************************************************/
    211          __STATIC_INLINE bool _is_fsk(const uint8_t phy_mode_id);
    212          
    213          /**************************************************************************//**
    214           * @brief Is OFDM PHY
    215           * @details Helper function
    216           * @param[in] phy_mode_id PHY mode ID
    217           * @return bool true ift it's OFDM PHY, otherwise false
    218           *****************************************************************************/
    219          __STATIC_INLINE bool _is_ofdm(const uint8_t phy_mode_id);
    220          
    221          /**************************************************************************//**
    222           * @brief Check PHY mode ID
    223           * @details Helper function
    224           * @param[in] phy_mode_id PHY mode ID
    225           * @return bool true ift it's valid value, otherwise false
    226           *****************************************************************************/
    227          __STATIC_INLINE bool _check_phy_mode(const uint8_t phy_mode);
    228          
    229          /**************************************************************************//**
    230           * @brief Get PHY options (Only for FAN1.1 OFDM)
    231           * @details Helper function. FAN1.1 PHY mode value will be replaced with
    232           *          Wi-SUN specific value for first option
    233           * @param[in,out] phy_cfg PHY mode ID
    234           * @return count onf options for FAN 1.1 OFDM PHYs, otherwise 1
    235           *****************************************************************************/
    236          static uint8_t _get_phy_options(sl_wisun_phy_config_t * const phy_cfg);
    237          
    238          // -----------------------------------------------------------------------------
    239          //                                Global Variables
    240          // -----------------------------------------------------------------------------
    241          
    242          /// Application enum for PHY config type

   \                                 In section .rodata, align 4
    243          const app_enum_t app_wisun_phy_config_type_enum[] =
   \                     app_wisun_phy_config_type_enum:
   \        0x0   0x....'....        DC32 ?_0, 0, ?_1, 1, ?_2, 2, 0x0, 0
   \              0x0000'0000  
   \              0x....'....  
   \              0x0000'0001  
   \              0x....'....  
   \              0x0000'0002  
   \              0x0000'0000  
   \              0x0000'0000
    244          {
    245            { "FAN 1.0", SL_WISUN_PHY_CONFIG_FAN10 },
    246            { "FAN 1.1", SL_WISUN_PHY_CONFIG_FAN11 },
    247            { "explicit", SL_WISUN_PHY_CONFIG_EXPLICIT },
    248            { NULL, 0 }
    249          };
    250          
    251          /// Application enum for connection status

   \                                 In section .rodata, align 4
    252          const app_enum_t app_wisun_conn_status_enum[] = {
   \                     app_wisun_conn_status_enum:
   \        0x0   0x....'....        DC32 ?_3, 0, ?_4, 1, ?_5, 2, ?_6, 3, ?_7, 4, ?_8, 5, 0x0, 0
   \              0x0000'0000  
   \              0x....'....  
   \              0x0000'0001  
   \              0x....'....  
   \              0x0000'0002  
   \              0x....'....  
   \              0x0000'0003  
   \              0x....'....  
   \              0x0000'0004  
   \              0x....'....  
   \              0x0000'0005  
   \              0x0000'0000  
   \              0x0000'0000
    253            { "Disconnected", SL_WISUN_JOIN_STATE_DISCONNECTED },
    254            { "Select PAN", SL_WISUN_JOIN_STATE_SELECT_PAN },
    255            { "Authenticate", SL_WISUN_JOIN_STATE_AUTHENTICATE },
    256            { "Acquire PAN Config", SL_WISUN_JOIN_STATE_ACQUIRE_PAN_CONFIG },
    257            { "Configure Routing", SL_WISUN_JOIN_STATE_CONFIGURE_ROUTING },
    258            { "Operational", SL_WISUN_JOIN_STATE_OPERATIONAL },
    259            { NULL, 0 }
    260          };
    261          
    262          /// Application enum for regulatory domains of first phy parameter

   \                                 In section .rodata, align 4
    263          const app_enum_t app_wisun_phy_reg_domain_enum[] = {
   \                     app_wisun_phy_reg_domain_enum:
   \        0x0   0x....'....        DC32 ?_9, 0, ?_10, 1, ?_11, 2, ?_12, 3, ?_13, 4, ?_14, 5, ?_15, 6, ?_16
   \              0x0000'0000  
   \              0x....'....  
   \              0x0000'0001  
   \              0x....'....  
   \              0x0000'0002  
   \              0x....'....  
   \              0x0000'0003  
   \              0x....'....  
   \              0x0000'0004  
   \              0x....'....  
   \              0x0000'0005  
   \              0x....'....  
   \              0x0000'0006  
   \              0x....'....
   \       0x3C   0x0000'0007        DC32 7, ?_17, 8, ?_18, 9, ?_19, 10, ?_20, 11, ?_21, 12, ?_22, 13, ?_23
   \              0x....'....  
   \              0x0000'0008  
   \              0x....'....  
   \              0x0000'0009  
   \              0x....'....  
   \              0x0000'000A  
   \              0x....'....  
   \              0x0000'000B  
   \              0x....'....  
   \              0x0000'000C  
   \              0x....'....  
   \              0x0000'000D  
   \              0x....'....
   \       0x74   0x0000'000E        DC32 14, ?_24, 15, ?_25, 255, 0x0, 0
   \              0x....'....  
   \              0x0000'000F  
   \              0x....'....  
   \              0x0000'00FF  
   \              0x0000'0000  
   \              0x0000'0000
    264            { "WW", SL_WISUN_REGULATORY_DOMAIN_WW },
    265            { "NA", SL_WISUN_REGULATORY_DOMAIN_NA },
    266            { "JP", SL_WISUN_REGULATORY_DOMAIN_JP },
    267            { "EU", SL_WISUN_REGULATORY_DOMAIN_EU },
    268            { "CN", SL_WISUN_REGULATORY_DOMAIN_CN },
    269            { "IN", SL_WISUN_REGULATORY_DOMAIN_IN },
    270            { "MX", SL_WISUN_REGULATORY_DOMAIN_MX },
    271            { "BZ", SL_WISUN_REGULATORY_DOMAIN_BZ },
    272            { "AZ/NZ", SL_WISUN_REGULATORY_DOMAIN_AZ },        // NZ also
    273            { "KR", SL_WISUN_REGULATORY_DOMAIN_KR },
    274            { "PH", SL_WISUN_REGULATORY_DOMAIN_PH },
    275            { "MY", SL_WISUN_REGULATORY_DOMAIN_MY },
    276            { "HK", SL_WISUN_REGULATORY_DOMAIN_HK },
    277            { "SG", SL_WISUN_REGULATORY_DOMAIN_SG },
    278            { "TH", SL_WISUN_REGULATORY_DOMAIN_TH },
    279            { "VN", SL_WISUN_REGULATORY_DOMAIN_VN },
    280            { "APPLICATION", SL_WISUN_REGULATORY_DOMAIN_APP },  // application specific domain
    281            { NULL, 0 }
    282          };
    283          
    284          /// Application enum for network size

   \                                 In section .rodata, align 4
    285          const app_enum_t app_wisun_nw_size_enum[] = {
   \                     app_wisun_nw_size_enum:
   \        0x0   0x....'....        DC32 ?_26, 0, ?_27, 1, ?_28, 2, ?_29, 3, ?_30, 4, ?_31, 5, 0x0, 0
   \              0x0000'0000  
   \              0x....'....  
   \              0x0000'0001  
   \              0x....'....  
   \              0x0000'0002  
   \              0x....'....  
   \              0x0000'0003  
   \              0x....'....  
   \              0x0000'0004  
   \              0x....'....  
   \              0x0000'0005  
   \              0x0000'0000  
   \              0x0000'0000
    286            { "automatic", SL_WISUN_NETWORK_SIZE_AUTOMATIC },
    287            { "small", SL_WISUN_NETWORK_SIZE_SMALL },
    288            { "medium", SL_WISUN_NETWORK_SIZE_MEDIUM },
    289            { "large", SL_WISUN_NETWORK_SIZE_LARGE },
    290            { "test", SL_WISUN_NETWORK_SIZE_TEST },
    291            { "certification", SL_WISUN_NETWORK_SIZE_CERTIFICATION },
    292            { NULL, 0 }
    293          };
    294          
    295          /// Application enum for regulation

   \                                 In section .rodata, align 4
    296          const app_enum_t app_regulation_enum[] = {
   \                     app_regulation_enum:
   \        0x0   0x....'....        DC32 ?_32, 0, ?_33, 1, ?_34, 2, 0x0, 0
   \              0x0000'0000  
   \              0x....'....  
   \              0x0000'0001  
   \              0x....'....  
   \              0x0000'0002  
   \              0x0000'0000  
   \              0x0000'0000
    297            { "none", SL_WISUN_REGULATION_NONE },
    298            { "arib", SL_WISUN_REGULATION_ARIB },
    299            { "wpc", SL_WISUN_REGULATION_WPC },
    300            { NULL, 0 }
    301          };
    302          

   \                                 In section .rodata, align 4
    303          const app_enum_t app_wisun_phy_channel_spacing_enum[] = {
   \                     app_wisun_phy_channel_spacing_enum:
   \        0x0   0x....'....        DC32 ?_35, 0, ?_36, 1, ?_37, 2, ?_38, 3, ?_39, 4, ?_40, 5, ?_41, 6, 0x0
   \              0x0000'0000  
   \              0x....'....  
   \              0x0000'0001  
   \              0x....'....  
   \              0x0000'0002  
   \              0x....'....  
   \              0x0000'0003  
   \              0x....'....  
   \              0x0000'0004  
   \              0x....'....  
   \              0x0000'0005  
   \              0x....'....  
   \              0x0000'0006  
   \              0x0000'0000
   \       0x3C   0x0000'0000        DC32 0
    304            { "100kHz", SL_WISUN_CHANNEL_SPACING_100KHZ },
    305            { "200kHz", SL_WISUN_CHANNEL_SPACING_200KHZ },
    306            { "400kHz", SL_WISUN_CHANNEL_SPACING_400KHZ },
    307            { "600kHz", SL_WISUN_CHANNEL_SPACING_600KHZ },
    308            { "250kHz", SL_WISUN_CHANNEL_SPACING_250KHZ },
    309            { "800kHz", SL_WISUN_CHANNEL_SPACING_800KHZ },
    310            { "1200kHz", SL_WISUN_CHANNEL_SPACING_1200KHZ },
    311            { NULL, 0 }
    312          };
    313          

   \                                 In section .rodata, align 4
    314          const app_enum_t app_wisun_device_type_enum[] =
   \                     app_wisun_device_type_enum:
   \        0x0   0x....'....        DC32 ?_42, 0, ?_43, 1, 0x0, 0
   \              0x0000'0000  
   \              0x....'....  
   \              0x0000'0001  
   \              0x0000'0000  
   \              0x0000'0000
    315          {
    316            { "FFN", SL_WISUN_ROUTER },
    317            { "LFN", SL_WISUN_LFN },
    318            { NULL, 0 }
    319          };
    320          

   \                                 In section .rodata, align 4
    321          const app_enum_t app_wisun_lfn_profile_enum[] =
   \                     app_wisun_lfn_profile_enum:
   \        0x0   0x....'....        DC32 ?_30, 0, ?_44, 1, ?_45, 2, 0x0, 0
   \              0x0000'0000  
   \              0x....'....  
   \              0x0000'0001  
   \              0x....'....  
   \              0x0000'0002  
   \              0x0000'0000  
   \              0x0000'0000
    322          {
    323            { "test", SL_WISUN_LFN_PROFILE_TEST },
    324            { "balanced", SL_WISUN_LFN_PROFILE_BALANCED },
    325            { "eco", SL_WISUN_LFN_PROFILE_ECO },
    326            { NULL, 0 }
    327          };
    328          
    329          // -----------------------------------------------------------------------------
    330          //                                Static Variables
    331          // -----------------------------------------------------------------------------
    332          
    333          /// FSK phy mode ID to operation mode table

   \                                 In section .rodata, align 4
    334          static const uint8_t _fsk_phy_mode_to_op_mode[FSK_PHY_MODE_TO_OPM_TABLE_SIZE] = {
   \                     _fsk_phy_mode_to_op_mode:
   \        0x0   0xFF 0x1A          DC8 255, 26, 27, 42, 43, 3, 74, 75, 5
   \              0x1B 0x2A    
   \              0x2B 0x03    
   \              0x4A 0x4B    
   \              0x05
   \        0x9                      DS8 3
    335            0xFF, 0x1a, 0x1b, 0x2a, 0x2b, 0x3, 0x4a, 0x4b, 0x5
    336          };
    337          
    338          /// Wi-SUN OFDM PHY mode ID map

   \                                 In section .rodata, align 4
    339          static const rail_ofdm_phy_mode_id_t _ofdm_phy_map[] = {
   \                     _ofdm_phy_map:
   \        0x0   0x20 0x22          DC8 32, 34, 39, 48, 51, 55, 64, 68, 71, 80, 84, 87
   \              0x27 0x30    
   \              0x33 0x37    
   \              0x40 0x44    
   \              0x47 0x50    
   \              0x54 0x57
    340            {
    341              .rail_phy_mode_id = 32,
    342              .wisun_phy_mode_id_min = 34,
    343              .wisun_phy_mode_id_max = 39
    344            },
    345            {
    346              .rail_phy_mode_id = 48,
    347              .wisun_phy_mode_id_min = 51,
    348              .wisun_phy_mode_id_max = 55
    349            },
    350            {
    351              .rail_phy_mode_id = 64,
    352              .wisun_phy_mode_id_min = 68,
    353              .wisun_phy_mode_id_max = 71
    354            },
    355            {
    356              .rail_phy_mode_id = 80,
    357              .wisun_phy_mode_id_min = 84,
    358              .wisun_phy_mode_id_max = 87
    359            }
    360          };
    361          
    362          // -----------------------------------------------------------------------------
    363          //                          Public Function Definitions
    364          // -----------------------------------------------------------------------------
    365          

   \                                 In section .text, align 2, keep-with-next
    366          void *app_wisun_malloc(size_t size)
    367          {
   \                     app_wisun_malloc: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0005             MOVS     R5,R0
    368            void *ptr = NULL;
   \        0x4   0x2400             MOVS     R4,#+0
    369          #if defined(SL_CATALOG_FREERTOS_KERNEL_PRESENT)
    370            // FreeRTOS
    371            ptr =  pvPortMalloc(size);
    372          #else
    373            // MicriumOS
    374            ptr = sl_malloc(size);
   \        0x6   0x0028             MOVS     R0,R5
   \        0x8   0x.... 0x....      BL       sl_malloc
    375          #endif
    376            return ptr;
   \        0xC   0xBD32             POP      {R1,R4,R5,PC}
    377          }
    378          

   \                                 In section .text, align 2, keep-with-next
    379          void app_wisun_free(void *addr)
    380          {
   \                     app_wisun_free: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    381          #if defined(SL_CATALOG_FREERTOS_KERNEL_PRESENT)
    382            // FreeRTOS
    383            vPortFree(addr);
    384          #else
    385            // MicriumOS
    386            sl_free(addr);
   \        0x4   0x0020             MOVS     R0,R4
   \        0x6   0x.... 0x....      BL       sl_free
    387          #endif
    388          }
   \        0xA   0xBD10             POP      {R4,PC}
    389          

   \                                 In section .text, align 2, keep-with-next
    390          const char* app_wisun_trace_util_get_ip_str(const void *const addr)
    391          {
   \                     app_wisun_trace_util_get_ip_str: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0004             MOVS     R4,R0
    392            char *dst = NULL;
   \        0x4   0x2700             MOVS     R7,#+0
    393            bool ipv6_res = false;
   \        0x6   0x2600             MOVS     R6,#+0
    394          
    395            if (addr == NULL) {
   \        0x8   0x2C00             CMP      R4,#+0
   \        0xA   0xD101             BNE.N    ??app_wisun_trace_util_get_ip_str_0
    396              return IPV6_EMPTY_STRING;
   \        0xC   0x....             ADR.N    R0,??DataTable11
   \        0xE   0xE015             B.N      ??app_wisun_trace_util_get_ip_str_1
    397            }
    398          
    399            // allocate string buffer
    400            dst = app_wisun_malloc(IPV6_STRING_SIZE);
   \                     ??app_wisun_trace_util_get_ip_str_0: (+1)
   \       0x10   0x2028             MOVS     R0,#+40
   \       0x12   0x.... 0x....      BL       app_wisun_malloc
   \       0x16   0x0005             MOVS     R5,R0
    401            if (dst == NULL) {
   \       0x18   0x2D00             CMP      R5,#+0
   \       0x1A   0xD101             BNE.N    ??app_wisun_trace_util_get_ip_str_2
    402              return IPV6_EMPTY_STRING;
   \       0x1C   0x....             ADR.N    R0,??DataTable11
   \       0x1E   0xE00D             B.N      ??app_wisun_trace_util_get_ip_str_1
    403            }
    404          
    405            ipv6_res = ip6tos(addr, dst);  // convert address binary to text for wisun and ipv6
   \                     ??app_wisun_trace_util_get_ip_str_2: (+1)
   \       0x20   0x0029             MOVS     R1,R5
   \       0x22   0x0020             MOVS     R0,R4
   \       0x24   0x.... 0x....      BL       ip6tos
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD001             BEQ.N    ??app_wisun_trace_util_get_ip_str_3
   \       0x2C   0x2001             MOVS     R0,#+1
   \       0x2E   0xE000             B.N      ??app_wisun_trace_util_get_ip_str_4
   \                     ??app_wisun_trace_util_get_ip_str_3: (+1)
   \       0x30   0x2000             MOVS     R0,#+0
    406            return ipv6_res ? dst : IPV6_EMPTY_STRING; // dst -> success, empty string -> error;
   \                     ??app_wisun_trace_util_get_ip_str_4: (+1)
   \       0x32   0xB2C0             UXTB     R0,R0
   \       0x34   0x2800             CMP      R0,#+0
   \       0x36   0xD100             BNE.N    ??app_wisun_trace_util_get_ip_str_5
   \                     ??app_wisun_trace_util_get_ip_str_6: (+1)
   \       0x38   0x....             ADR.N    R5,??DataTable11
   \                     ??app_wisun_trace_util_get_ip_str_5: (+1)
   \       0x3A   0x0028             MOVS     R0,R5
   \                     ??app_wisun_trace_util_get_ip_str_1: (+1)
   \       0x3C   0xBDF2             POP      {R1,R4-R7,PC}
    407          }
    408          

   \                                 In section .text, align 2, keep-with-next
    409          const char * app_wisun_trace_util_conn_state_to_str(const uint32_t val)
    410          {
   \                     app_wisun_trace_util_conn_state_to_str: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    411            return _get_str_key_by_val_from_enum(app_wisun_conn_status_enum, val);
   \        0x4   0x0021             MOVS     R1,R4
   \        0x6   0x.... 0x....      LDR.W    R0,??DataTable18
   \        0xA   0x.... 0x....      BL       _get_str_key_by_val_from_enum
   \        0xE   0xBD10             POP      {R4,PC}
    412          }
    413          

   \                                 In section .text, align 2, keep-with-next
    414          const char * app_wisun_trace_util_reg_domain_to_str(const uint32_t val)
    415          {
   \                     app_wisun_trace_util_reg_domain_to_str: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    416            return _get_str_key_by_val_from_enum(app_wisun_phy_reg_domain_enum, val);
   \        0x4   0x0021             MOVS     R1,R4
   \        0x6   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \        0xA   0x.... 0x....      BL       _get_str_key_by_val_from_enum
   \        0xE   0xBD10             POP      {R4,PC}
    417          }
    418          

   \                                 In section .text, align 2, keep-with-next
    419          const char * app_wisun_trace_util_nw_size_to_str(const uint32_t val)
    420          {
   \                     app_wisun_trace_util_nw_size_to_str: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    421            return _get_str_key_by_val_from_enum(app_wisun_nw_size_enum, val);
   \        0x4   0x0021             MOVS     R1,R4
   \        0x6   0x.... 0x....      LDR.W    R0,??DataTable18_2
   \        0xA   0x.... 0x....      BL       _get_str_key_by_val_from_enum
   \        0xE   0xBD10             POP      {R4,PC}
    422          }
    423          

   \                                 In section .text, align 2, keep-with-next
    424          const char * app_wisun_trace_util_phy_cfg_type_to_str(const uint32_t val)
    425          {
   \                     app_wisun_trace_util_phy_cfg_type_to_str: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    426            return _get_str_key_by_val_from_enum(app_wisun_phy_config_type_enum, val);
   \        0x4   0x0021             MOVS     R1,R4
   \        0x6   0x.... 0x....      LDR.W    R0,??DataTable18_3
   \        0xA   0x.... 0x....      BL       _get_str_key_by_val_from_enum
   \        0xE   0xBD10             POP      {R4,PC}
    427          }
    428          

   \                                 In section .text, align 2, keep-with-next
    429          const char * app_wisun_trace_util_ch_spacing_to_str(const uint32_t val)
    430          {
   \                     app_wisun_trace_util_ch_spacing_to_str: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    431            return _get_str_key_by_val_from_enum(app_wisun_phy_channel_spacing_enum, val);
   \        0x4   0x0021             MOVS     R1,R4
   \        0x6   0x.... 0x....      LDR.W    R0,??DataTable18_4
   \        0xA   0x.... 0x....      BL       _get_str_key_by_val_from_enum
   \        0xE   0xBD10             POP      {R4,PC}
    432          }
    433          

   \                                 In section .text, align 2, keep-with-next
    434          const char * app_wisun_trace_util_profile_to_str(const uint32_t val)
    435          {
   \                     app_wisun_trace_util_profile_to_str: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    436            return _get_str_key_by_val_from_enum(app_wisun_phy_config_type_enum, val);
   \        0x4   0x0021             MOVS     R1,R4
   \        0x6   0x.... 0x....      LDR.W    R0,??DataTable18_3
   \        0xA   0x.... 0x....      BL       _get_str_key_by_val_from_enum
   \        0xE   0xBD10             POP      {R4,PC}
    437          }
    438          

   \                                 In section .text, align 2, keep-with-next
    439          const char * app_wisun_trace_util_device_type_to_str(const uint32_t val)
    440          {
   \                     app_wisun_trace_util_device_type_to_str: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    441            return _get_str_key_by_val_from_enum(app_wisun_device_type_enum, val);
   \        0x4   0x0021             MOVS     R1,R4
   \        0x6   0x.... 0x....      LDR.W    R0,??DataTable18_5
   \        0xA   0x.... 0x....      BL       _get_str_key_by_val_from_enum
   \        0xE   0xBD10             POP      {R4,PC}
    442          }
    443          

   \                                 In section .text, align 2, keep-with-next
    444          const char * app_wisun_trace_util_lfn_profile_to_str(const uint32_t val)
    445          {
   \                     app_wisun_trace_util_lfn_profile_to_str: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    446            return _get_str_key_by_val_from_enum(app_wisun_lfn_profile_enum, val);
   \        0x4   0x0021             MOVS     R1,R4
   \        0x6   0x.... 0x....      LDR.W    R0,??DataTable18_6
   \        0xA   0x.... 0x....      BL       _get_str_key_by_val_from_enum
   \        0xE   0xBD10             POP      {R4,PC}
    447          }
    448          

   \                                 In section .text, align 2, keep-with-next
    449          app_wisun_phy_list_t *app_wisun_get_phy_list(app_wisun_phy_filter_t filter)
    450          {
   \                     app_wisun_get_phy_list: (+1)
   \        0x0   0xE92D 0x4FFE      PUSH     {R1-R11,LR}
   \        0x4   0x4683             MOV      R11,R0
    451            static sl_wisun_phy_config_t phy_cfg = { 0U };
    452            app_wisun_phy_list_t *head    = NULL;
   \        0x6   0x2400             MOVS     R4,#+0
    453            app_wisun_phy_list_t *tail    = NULL;
   \        0x8   0x2600             MOVS     R6,#+0
    454            app_wisun_phy_list_t *p       = NULL;
   \        0xA   0x2500             MOVS     R5,#+0
    455            sl_status_t status            = SL_STATUS_OK;
   \        0xC   0x2000             MOVS     R0,#+0
   \        0xE   0x9001             STR      R0,[SP, #+4]
    456            bool filter_res               = false;
   \       0x10   0x2000             MOVS     R0,#+0
   \       0x12   0xF88D 0x0001      STRB     R0,[SP, #+1]
    457            uint8_t phy_option_cnt        = 0U;
   \       0x16   0x2000             MOVS     R0,#+0
   \       0x18   0xF88D 0x0000      STRB     R0,[SP, #+0]
    458          
    459            // Iterate channel configs
    460            for (uint16_t idx = 0U; channelConfigs[idx] != NULL; ++idx) {
   \       0x1C   0x2700             MOVS     R7,#+0
   \                     ??app_wisun_get_phy_list_0: (+1)
   \       0x1E   0x.... 0x....      LDR.W    R1,??DataTable18_7
   \       0x22   0x0038             MOVS     R0,R7
   \       0x24   0xB280             UXTH     R0,R0
   \       0x26   0xF851 0x0020      LDR      R0,[R1, R0, LSL #+2]
   \       0x2A   0x2800             CMP      R0,#+0
   \       0x2C   0xD06C             BEQ.N    ??app_wisun_get_phy_list_1
    461              // Iterate channel config entries
    462              for (uint16_t ch_entry_idx = 0U; ch_entry_idx < channelConfigs[idx]->length; ++ch_entry_idx) {
   \       0x2E   0xF05F 0x0800      MOVS     R8,#+0
   \                     ??app_wisun_get_phy_list_2: (+1)
   \       0x32   0x.... 0x....      LDR.W    R0,??DataTable18_7
   \       0x36   0x4641             MOV      R1,R8
   \       0x38   0xB289             UXTH     R1,R1
   \       0x3A   0x003A             MOVS     R2,R7
   \       0x3C   0xB292             UXTH     R2,R2
   \       0x3E   0xF850 0x2022      LDR      R2,[R0, R2, LSL #+2]
   \       0x42   0x68D2             LDR      R2,[R2, #+12]
   \       0x44   0x4291             CMP      R1,R2
   \       0x46   0xD25D             BCS.N    ??app_wisun_get_phy_list_3
    463                // Get PHY CFG
    464                status = _get_phy_cfg_from_ch_cfg_entry(&channelConfigs[idx]->configs[ch_entry_idx], &phy_cfg);
   \       0x48   0x.... 0x....      LDR.W    R9,??DataTable18_8
   \       0x4C   0x4649             MOV      R1,R9
   \       0x4E   0x003A             MOVS     R2,R7
   \       0x50   0xB292             UXTH     R2,R2
   \       0x52   0xF850 0x0022      LDR      R0,[R0, R2, LSL #+2]
   \       0x56   0x6883             LDR      R3,[R0, #+8]
   \       0x58   0x4642             MOV      R2,R8
   \       0x5A   0xB292             UXTH     R2,R2
   \       0x5C   0x2024             MOVS     R0,#+36
   \       0x5E   0x4342             MULS     R2,R0,R2
   \       0x60   0xEB03 0x0002      ADD      R0,R3,R2
   \       0x64   0x.... 0x....      BL       _get_phy_cfg_from_ch_cfg_entry
   \       0x68   0x9001             STR      R0,[SP, #+4]
    465                if (status != SL_STATUS_OK) {
   \       0x6A   0x9801             LDR      R0,[SP, #+4]
   \       0x6C   0x2800             CMP      R0,#+0
   \       0x6E   0xD146             BNE.N    ??app_wisun_get_phy_list_4
    466                  continue;
    467                }
    468          
    469                // Get count of PHY options. Only FAN1.1 OFDM PHYs has more options
    470                phy_option_cnt = _get_phy_options(&phy_cfg);
   \                     ??app_wisun_get_phy_list_5: (+1)
   \       0x70   0x4648             MOV      R0,R9
   \       0x72   0x.... 0x....      BL       _get_phy_options
   \       0x76   0xF88D 0x0000      STRB     R0,[SP, #+0]
    471                for (uint8_t opt = 0U; opt < phy_option_cnt; ++opt) {
   \       0x7A   0xF05F 0x0A00      MOVS     R10,#+0
   \                     ??app_wisun_get_phy_list_6: (+1)
   \       0x7E   0x4650             MOV      R0,R10
   \       0x80   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \       0x84   0xB2C0             UXTB     R0,R0
   \       0x86   0x4288             CMP      R0,R1
   \       0x88   0xD239             BCS.N    ??app_wisun_get_phy_list_4
    472                  if (filter != NULL) {
   \       0x8A   0x4658             MOV      R0,R11
   \       0x8C   0x2800             CMP      R0,#+0
   \       0x8E   0xD007             BEQ.N    ??app_wisun_get_phy_list_7
    473                    filter_res = filter(&phy_cfg);
   \       0x90   0x4648             MOV      R0,R9
   \       0x92   0x47D8             BLX      R11
   \       0x94   0xF88D 0x0001      STRB     R0,[SP, #+1]
    474                    if (!filter_res) {
   \       0x98   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \       0x9C   0x2800             CMP      R0,#+0
   \       0x9E   0xD02B             BEQ.N    ??app_wisun_get_phy_list_8
    475                      continue;
    476                    }
    477                  }
    478          
    479                  // first element in the list
    480                  if (head == NULL) {
   \                     ??app_wisun_get_phy_list_7: (+1)
   \       0xA0   0x2C00             CMP      R4,#+0
   \       0xA2   0xD111             BNE.N    ??app_wisun_get_phy_list_9
    481                    __alloc_phy_list_element_and_check(head, &phy_cfg);
   \       0xA4   0x4648             MOV      R0,R9
   \       0xA6   0x.... 0x....      BL       _alloc_phy_list_element
   \       0xAA   0x0004             MOVS     R4,R0
   \       0xAC   0x2C00             CMP      R4,#+0
   \       0xAE   0xD101             BNE.N    ??app_wisun_get_phy_list_10
   \       0xB0   0x2000             MOVS     R0,#+0
   \       0xB2   0xE02A             B.N      ??app_wisun_get_phy_list_11
    482                    // increment PHY mode id for first FAN11 OFDM PHY
    483                    if (phy_cfg.type == SL_WISUN_PHY_CONFIG_FAN11) {
   \                     ??app_wisun_get_phy_list_10: (+1)
   \       0xB4   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \       0xB8   0x2801             CMP      R0,#+1
   \       0xBA   0xD104             BNE.N    ??app_wisun_get_phy_list_12
    484                      ++phy_cfg.config.fan11.phy_mode_id;
   \       0xBC   0xF899 0x0006      LDRB     R0,[R9, #+6]
   \       0xC0   0x1C40             ADDS     R0,R0,#+1
   \       0xC2   0xF889 0x0006      STRB     R0,[R9, #+6]
    485                    }
    486                    continue;
   \                     ??app_wisun_get_phy_list_12: (+1)
   \       0xC6   0xE017             B.N      ??app_wisun_get_phy_list_8
    487                  }
    488          
    489                  // allocate new element
    490                  __alloc_phy_list_element_and_check(p, &phy_cfg);
   \                     ??app_wisun_get_phy_list_9: (+1)
   \       0xC8   0x4648             MOV      R0,R9
   \       0xCA   0x.... 0x....      BL       _alloc_phy_list_element
   \       0xCE   0x0005             MOVS     R5,R0
   \       0xD0   0x2D00             CMP      R5,#+0
   \       0xD2   0xD101             BNE.N    ??app_wisun_get_phy_list_13
   \       0xD4   0x2000             MOVS     R0,#+0
   \       0xD6   0xE018             B.N      ??app_wisun_get_phy_list_11
    491          
    492                  // move tail to end of the list
    493                  tail = head;
   \                     ??app_wisun_get_phy_list_13: (+1)
   \       0xD8   0x0026             MOVS     R6,R4
    494                  while (tail->next != NULL) {
   \                     ??app_wisun_get_phy_list_14: (+1)
   \       0xDA   0x6970             LDR      R0,[R6, #+20]
   \       0xDC   0x2800             CMP      R0,#+0
   \       0xDE   0xD001             BEQ.N    ??app_wisun_get_phy_list_15
    495                    tail = tail->next;
   \       0xE0   0x6976             LDR      R6,[R6, #+20]
   \       0xE2   0xE7FA             B.N      ??app_wisun_get_phy_list_14
    496                  }
    497                  tail->next = p;
   \                     ??app_wisun_get_phy_list_15: (+1)
   \       0xE4   0x6175             STR      R5,[R6, #+20]
    498          
    499                  // increment PHY mode id for FAN11 OFDM PHYs
    500                  if (phy_cfg.type == SL_WISUN_PHY_CONFIG_FAN11) {
   \       0xE6   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \       0xEA   0x2801             CMP      R0,#+1
   \       0xEC   0xD104             BNE.N    ??app_wisun_get_phy_list_8
    501                    ++phy_cfg.config.fan11.phy_mode_id;
   \       0xEE   0xF899 0x0006      LDRB     R0,[R9, #+6]
   \       0xF2   0x1C40             ADDS     R0,R0,#+1
   \       0xF4   0xF889 0x0006      STRB     R0,[R9, #+6]
    502                  }
    503                }
   \                     ??app_wisun_get_phy_list_8: (+1)
   \       0xF8   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \       0xFC   0xE7BF             B.N      ??app_wisun_get_phy_list_6
    504              }
   \                     ??app_wisun_get_phy_list_4: (+1)
   \       0xFE   0xF118 0x0801      ADDS     R8,R8,#+1
   \      0x102   0xE796             B.N      ??app_wisun_get_phy_list_2
    505            }
   \                     ??app_wisun_get_phy_list_3: (+1)
   \      0x104   0x1C7F             ADDS     R7,R7,#+1
   \      0x106   0xE78A             B.N      ??app_wisun_get_phy_list_0
    506          
    507            return head;
   \                     ??app_wisun_get_phy_list_1: (+1)
   \      0x108   0x0020             MOVS     R0,R4
   \                     ??app_wisun_get_phy_list_11: (+1)
   \      0x10A   0xE8BD 0x8FFE      POP      {R1-R11,PC}
    508          }

   \                                 In section .bss, align 4
   \                     `app_wisun_get_phy_list::phy_cfg`:
   \        0x0                      DS8 16
    509          

   \                                 In section .text, align 2, keep-with-next
    510          app_wisun_phy_list_t *app_wisun_filter_phy_list(app_wisun_phy_list_t *list,
    511                                                          app_wisun_phy_filter_t filter)
    512          {
   \                     app_wisun_filter_phy_list: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0x0007             MOVS     R7,R0
   \        0x6   0x4689             MOV      R9,R1
    513            app_wisun_phy_list_t *head = NULL;
   \        0x8   0x2400             MOVS     R4,#+0
    514            app_wisun_phy_list_t *tail = NULL;
   \        0xA   0xF05F 0x0800      MOVS     R8,#+0
    515            app_wisun_phy_list_t *p    = NULL;
   \        0xE   0x2500             MOVS     R5,#+0
    516          
    517            if (list == NULL || filter == NULL) {
   \       0x10   0x2F00             CMP      R7,#+0
   \       0x12   0xD002             BEQ.N    ??app_wisun_filter_phy_list_0
   \       0x14   0x4648             MOV      R0,R9
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD101             BNE.N    ??app_wisun_filter_phy_list_1
    518              return NULL;
   \                     ??app_wisun_filter_phy_list_0: (+1)
   \       0x1A   0x2000             MOVS     R0,#+0
   \       0x1C   0xE026             B.N      ??app_wisun_filter_phy_list_2
    519            }
    520          
    521            for (app_wisun_phy_list_t *iter = list; iter != NULL; iter = iter->next) {
   \                     ??app_wisun_filter_phy_list_1: (+1)
   \       0x1E   0x003E             MOVS     R6,R7
   \                     ??app_wisun_filter_phy_list_3: (+1)
   \       0x20   0x2E00             CMP      R6,#+0
   \       0x22   0xD022             BEQ.N    ??app_wisun_filter_phy_list_4
    522              if (!filter(&iter->phy_cfg)) {
   \       0x24   0x1D30             ADDS     R0,R6,#+4
   \       0x26   0x47C8             BLX      R9
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD01C             BEQ.N    ??app_wisun_filter_phy_list_5
    523                continue;
    524              }
    525          
    526              // first element in the list
    527              if (head == NULL) {
   \                     ??app_wisun_filter_phy_list_6: (+1)
   \       0x2C   0x2C00             CMP      R4,#+0
   \       0x2E   0xD108             BNE.N    ??app_wisun_filter_phy_list_7
    528                __alloc_phy_list_element_and_check(head, &iter->phy_cfg);
   \       0x30   0x1D30             ADDS     R0,R6,#+4
   \       0x32   0x.... 0x....      BL       _alloc_phy_list_element
   \       0x36   0x0004             MOVS     R4,R0
   \       0x38   0x2C00             CMP      R4,#+0
   \       0x3A   0xD101             BNE.N    ??app_wisun_filter_phy_list_8
   \       0x3C   0x2000             MOVS     R0,#+0
   \       0x3E   0xE015             B.N      ??app_wisun_filter_phy_list_2
    529                continue;
   \                     ??app_wisun_filter_phy_list_8: (+1)
   \       0x40   0xE011             B.N      ??app_wisun_filter_phy_list_5
    530              }
    531          
    532              // allocate new element
    533              __alloc_phy_list_element_and_check(p, &iter->phy_cfg);
   \                     ??app_wisun_filter_phy_list_7: (+1)
   \       0x42   0x1D30             ADDS     R0,R6,#+4
   \       0x44   0x.... 0x....      BL       _alloc_phy_list_element
   \       0x48   0x0005             MOVS     R5,R0
   \       0x4A   0x2D00             CMP      R5,#+0
   \       0x4C   0xD101             BNE.N    ??app_wisun_filter_phy_list_9
   \       0x4E   0x2000             MOVS     R0,#+0
   \       0x50   0xE00C             B.N      ??app_wisun_filter_phy_list_2
    534          
    535              // move tail to end of the list
    536              tail = head;
   \                     ??app_wisun_filter_phy_list_9: (+1)
   \       0x52   0x46A0             MOV      R8,R4
    537              while (tail->next != NULL) {
   \                     ??app_wisun_filter_phy_list_10: (+1)
   \       0x54   0xF8D8 0x0014      LDR      R0,[R8, #+20]
   \       0x58   0x2800             CMP      R0,#+0
   \       0x5A   0xD002             BEQ.N    ??app_wisun_filter_phy_list_11
    538                tail = tail->next;
   \       0x5C   0xF8D8 0x8014      LDR      R8,[R8, #+20]
   \       0x60   0xE7F8             B.N      ??app_wisun_filter_phy_list_10
    539              }
    540              tail->next = p;
   \                     ??app_wisun_filter_phy_list_11: (+1)
   \       0x62   0xF8C8 0x5014      STR      R5,[R8, #+20]
    541            }
   \                     ??app_wisun_filter_phy_list_5: (+1)
   \       0x66   0x6976             LDR      R6,[R6, #+20]
   \       0x68   0xE7DA             B.N      ??app_wisun_filter_phy_list_3
    542          
    543            return head;
   \                     ??app_wisun_filter_phy_list_4: (+1)
   \       0x6A   0x0020             MOVS     R0,R4
   \                     ??app_wisun_filter_phy_list_2: (+1)
   \       0x6C   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}
    544          }
    545          

   \                                 In section .text, align 2, keep-with-next
    546          void app_wisun_destroy_phy_list(app_wisun_phy_list_t * list)
    547          {
   \                     app_wisun_destroy_phy_list: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
    548            app_wisun_phy_list_t *tmp = NULL;
   \        0x4   0x2500             MOVS     R5,#+0
    549            while (list != NULL) {
   \                     ??app_wisun_destroy_phy_list_0: (+1)
   \        0x6   0x2C00             CMP      R4,#+0
   \        0x8   0xD008             BEQ.N    ??app_wisun_destroy_phy_list_1
    550              tmp = list;
   \        0xA   0x0025             MOVS     R5,R4
    551              list = list->next;
   \        0xC   0x6964             LDR      R4,[R4, #+20]
    552              app_wisun_free((void *)tmp->name);
   \        0xE   0x6828             LDR      R0,[R5, #+0]
   \       0x10   0x.... 0x....      BL       app_wisun_free
    553              app_wisun_free((void *)tmp);
   \       0x14   0x0028             MOVS     R0,R5
   \       0x16   0x.... 0x....      BL       app_wisun_free
   \       0x1A   0xE7F4             B.N      ??app_wisun_destroy_phy_list_0
    554            }
    555          }
   \                     ??app_wisun_destroy_phy_list_1: (+1)
   \       0x1C   0xBD31             POP      {R0,R4,R5,PC}
    556          

   \                                 In section .text, align 2, keep-with-next
    557          const char *app_wisun_phy_to_str(sl_wisun_phy_config_t *phy_cfg)
    558          {
   \                     app_wisun_phy_to_str: (+1)
   \        0x0   0xB57F             PUSH     {R0-R6,LR}
   \        0x2   0x0005             MOVS     R5,R0
    559            char *str = NULL;
   \        0x4   0x2600             MOVS     R6,#+0
    560          
    561            str = app_wisun_malloc(PHY_STR_MAX_LENGTH);
   \        0x6   0x2018             MOVS     R0,#+24
   \        0x8   0x.... 0x....      BL       app_wisun_malloc
   \        0xC   0x0004             MOVS     R4,R0
    562          
    563            if (str == NULL) {
   \        0xE   0x2C00             CMP      R4,#+0
   \       0x10   0xD101             BNE.N    ??app_wisun_phy_to_str_0
    564              return NULL;
   \       0x12   0x2000             MOVS     R0,#+0
   \       0x14   0xE02D             B.N      ??app_wisun_phy_to_str_1
    565            }
    566          
    567            if (phy_cfg->type == SL_WISUN_PHY_CONFIG_FAN10) {
   \                     ??app_wisun_phy_to_str_0: (+1)
   \       0x16   0x6828             LDR      R0,[R5, #+0]
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD111             BNE.N    ??app_wisun_phy_to_str_2
    568              snprintf(str, PHY_STR_MAX_LENGTH, FAN10_FORMAT_STR,
    569                       app_wisun_trace_util_reg_domain_to_str(phy_cfg->config.fan10.reg_domain),
    570                       phy_cfg->config.fan10.op_class,
    571                       phy_cfg->config.fan10.op_mode,
    572                       FAN_1_0_STR);
   \       0x1C   0x7928             LDRB     R0,[R5, #+4]
   \       0x1E   0x.... 0x....      BL       app_wisun_trace_util_reg_domain_to_str
   \       0x22   0x0003             MOVS     R3,R0
   \       0x24   0x.... 0x....      LDR.W    R0,??DataTable18_9
   \       0x28   0x9002             STR      R0,[SP, #+8]
   \       0x2A   0x79A8             LDRB     R0,[R5, #+6]
   \       0x2C   0x9001             STR      R0,[SP, #+4]
   \       0x2E   0x7968             LDRB     R0,[R5, #+5]
   \       0x30   0x9000             STR      R0,[SP, #+0]
   \       0x32   0x.... 0x....      LDR.W    R2,??DataTable18_10
   \       0x36   0x2118             MOVS     R1,#+24
   \       0x38   0x0020             MOVS     R0,R4
   \       0x3A   0x.... 0x....      BL       snprintf
   \       0x3E   0xE017             B.N      ??app_wisun_phy_to_str_3
    573            } else if (phy_cfg->type == SL_WISUN_PHY_CONFIG_FAN11) {
   \                     ??app_wisun_phy_to_str_2: (+1)
   \       0x40   0x6828             LDR      R0,[R5, #+0]
   \       0x42   0x2801             CMP      R0,#+1
   \       0x44   0xD111             BNE.N    ??app_wisun_phy_to_str_4
    574              snprintf(str, PHY_STR_MAX_LENGTH, FAN11_FORMAT_STR,
    575                       app_wisun_trace_util_reg_domain_to_str(phy_cfg->config.fan11.reg_domain),
    576                       phy_cfg->config.fan11.chan_plan_id,
    577                       phy_cfg->config.fan11.phy_mode_id,
    578                       FAN_1_1_STR);
   \       0x46   0x7928             LDRB     R0,[R5, #+4]
   \       0x48   0x.... 0x....      BL       app_wisun_trace_util_reg_domain_to_str
   \       0x4C   0x.... 0x....      LDR.W    R1,??DataTable18_11
   \       0x50   0x9102             STR      R1,[SP, #+8]
   \       0x52   0x79A9             LDRB     R1,[R5, #+6]
   \       0x54   0x9101             STR      R1,[SP, #+4]
   \       0x56   0x7969             LDRB     R1,[R5, #+5]
   \       0x58   0x9100             STR      R1,[SP, #+0]
   \       0x5A   0x0003             MOVS     R3,R0
   \       0x5C   0x.... 0x....      LDR.W    R2,??DataTable18_12
   \       0x60   0x2118             MOVS     R1,#+24
   \       0x62   0x0020             MOVS     R0,R4
   \       0x64   0x.... 0x....      BL       snprintf
   \       0x68   0xE002             B.N      ??app_wisun_phy_to_str_3
    579            } else {
    580              app_wisun_free(str);
   \                     ??app_wisun_phy_to_str_4: (+1)
   \       0x6A   0x0020             MOVS     R0,R4
   \       0x6C   0x.... 0x....      BL       app_wisun_free
    581            }
    582          
    583            return (const char *) str;
   \                     ??app_wisun_phy_to_str_3: (+1)
   \       0x70   0x0020             MOVS     R0,R4
   \                     ??app_wisun_phy_to_str_1: (+1)
   \       0x72   0xB004             ADD      SP,SP,#+16
   \       0x74   0xBD70             POP      {R4-R6,PC}
    584          }
    585          

   \                                 In section .text, align 2, keep-with-next
    586          const char *app_wisun_mac_addr_to_str(const sl_wisun_mac_address_t *mac_addr)
    587          {
   \                     app_wisun_mac_addr_to_str: (+1)
   \        0x0   0xB578             PUSH     {R3-R6,LR}
   \        0x2   0xB087             SUB      SP,SP,#+28
   \        0x4   0x0005             MOVS     R5,R0
    588            char *buf = NULL;
   \        0x6   0x2600             MOVS     R6,#+0
    589          
    590            buf = app_wisun_malloc(MAC_ADDR_STR_LEN + 1);
   \        0x8   0x2018             MOVS     R0,#+24
   \        0xA   0x.... 0x....      BL       app_wisun_malloc
   \        0xE   0x0004             MOVS     R4,R0
    591            if (buf == NULL) {
   \       0x10   0x2C00             CMP      R4,#+0
   \       0x12   0xD101             BNE.N    ??app_wisun_mac_addr_to_str_0
    592              return NULL;
   \       0x14   0x2000             MOVS     R0,#+0
   \       0x16   0xE015             B.N      ??app_wisun_mac_addr_to_str_1
    593            }
    594          
    595            snprintf(buf, MAC_ADDR_STR_LEN + 1,
    596                     "%.2X:%.2X:%.2X:%.2X:%.2X:%.2X:%.2X:%.2X",
    597                     mac_addr->address[0],
    598                     mac_addr->address[1],
    599                     mac_addr->address[2],
    600                     mac_addr->address[3],
    601                     mac_addr->address[4],
    602                     mac_addr->address[5],
    603                     mac_addr->address[6],
    604                     mac_addr->address[7]);
   \                     ??app_wisun_mac_addr_to_str_0: (+1)
   \       0x18   0x79E8             LDRB     R0,[R5, #+7]
   \       0x1A   0x9006             STR      R0,[SP, #+24]
   \       0x1C   0x79A8             LDRB     R0,[R5, #+6]
   \       0x1E   0x9005             STR      R0,[SP, #+20]
   \       0x20   0x7968             LDRB     R0,[R5, #+5]
   \       0x22   0x9004             STR      R0,[SP, #+16]
   \       0x24   0x7928             LDRB     R0,[R5, #+4]
   \       0x26   0x9003             STR      R0,[SP, #+12]
   \       0x28   0x78E8             LDRB     R0,[R5, #+3]
   \       0x2A   0x9002             STR      R0,[SP, #+8]
   \       0x2C   0x78A8             LDRB     R0,[R5, #+2]
   \       0x2E   0x9001             STR      R0,[SP, #+4]
   \       0x30   0x7868             LDRB     R0,[R5, #+1]
   \       0x32   0x9000             STR      R0,[SP, #+0]
   \       0x34   0x782B             LDRB     R3,[R5, #+0]
   \       0x36   0x.... 0x....      LDR.W    R2,??DataTable18_13
   \       0x3A   0x2118             MOVS     R1,#+24
   \       0x3C   0x0020             MOVS     R0,R4
   \       0x3E   0x.... 0x....      BL       snprintf
    605            return (const char *)buf;
   \       0x42   0x0020             MOVS     R0,R4
   \                     ??app_wisun_mac_addr_to_str_1: (+1)
   \       0x44   0xB008             ADD      SP,SP,#+32
   \       0x46   0xBD70             POP      {R4-R6,PC}
    606          }
    607          
    608          #if !defined(SL_CATALOG_WISUN_NCP_PRESENT)

   \                                 In section .text, align 2, keep-with-next
    609          const sl_wisun_connection_params_t *sl_wisun_get_conn_param_by_nw_size(const sl_wisun_network_size_t nw_size)
    610          {
   \                     sl_wisun_get_conn_param_by_nw_size: (+1)
   \        0x0   0x0001             MOVS     R1,R0
    611            switch (nw_size) {
   \        0x2   0x0008             MOVS     R0,R1
   \        0x4   0xB2C0             UXTB     R0,R0
   \        0x6   0x2801             CMP      R0,#+1
   \        0x8   0xD006             BEQ.N    ??sl_wisun_get_conn_param_by_nw_size_0
   \        0xA   0xD311             BCC.N    ??sl_wisun_get_conn_param_by_nw_size_1
   \        0xC   0x2803             CMP      R0,#+3
   \        0xE   0xD009             BEQ.N    ??sl_wisun_get_conn_param_by_nw_size_2
   \       0x10   0xD305             BCC.N    ??sl_wisun_get_conn_param_by_nw_size_3
   \       0x12   0x2804             CMP      R0,#+4
   \       0x14   0xD009             BEQ.N    ??sl_wisun_get_conn_param_by_nw_size_4
   \       0x16   0xE00B             B.N      ??sl_wisun_get_conn_param_by_nw_size_1
    612              // Small
    613              case SL_WISUN_NETWORK_SIZE_SMALL:
    614                return &SL_WISUN_PARAMS_PROFILE_SMALL;
   \                     ??sl_wisun_get_conn_param_by_nw_size_0: (+1)
   \       0x18   0x.... 0x....      LDR.W    R0,??DataTable18_14
   \       0x1C   0xE009             B.N      ??sl_wisun_get_conn_param_by_nw_size_5
    615          
    616              // Medium
    617              case SL_WISUN_NETWORK_SIZE_MEDIUM:
    618                return &SL_WISUN_PARAMS_PROFILE_MEDIUM;
   \                     ??sl_wisun_get_conn_param_by_nw_size_3: (+1)
   \       0x1E   0x.... 0x....      LDR.W    R0,??DataTable18_15
   \       0x22   0xE006             B.N      ??sl_wisun_get_conn_param_by_nw_size_5
    619          
    620              // Large
    621              case SL_WISUN_NETWORK_SIZE_LARGE:
    622                return &SL_WISUN_PARAMS_PROFILE_LARGE;
   \                     ??sl_wisun_get_conn_param_by_nw_size_2: (+1)
   \       0x24   0x.... 0x....      LDR.W    R0,??DataTable18_16
   \       0x28   0xE003             B.N      ??sl_wisun_get_conn_param_by_nw_size_5
    623          
    624              // Test
    625              case SL_WISUN_NETWORK_SIZE_TEST:
    626                return &SL_WISUN_PARAMS_PROFILE_TEST;
   \                     ??sl_wisun_get_conn_param_by_nw_size_4: (+1)
   \       0x2A   0x.... 0x....      LDR.W    R0,??DataTable18_17
   \       0x2E   0xE000             B.N      ??sl_wisun_get_conn_param_by_nw_size_5
    627          
    628              // Certifacete and automatic size are not supported
    629              default:
    630                return NULL;
   \                     ??sl_wisun_get_conn_param_by_nw_size_1: (+1)
   \       0x30   0x2000             MOVS     R0,#+0
   \                     ??sl_wisun_get_conn_param_by_nw_size_5: (+1)
   \       0x32   0x4770             BX       LR
    631            }
    632          }
    633          #endif
    634          

   \                                 In section .text, align 2, keep-with-next
    635          void app_wisun_trace_util_timestamp_init(const uint64_t time_ms,
    636                                                   sl_wisun_trace_util_time_t * const time)
    637          {
   \                     app_wisun_trace_util_timestamp_init: (+1)
   \        0x0   0xE92D 0x4FD0      PUSH     {R4,R6-R11,LR}
   \        0x4   0x0006             MOVS     R6,R0
   \        0x6   0x000F             MOVS     R7,R1
   \        0x8   0x0014             MOVS     R4,R2
    638            uint64_t remaining_seconds = 0U;
   \        0xA   0xF05F 0x0800      MOVS     R8,#+0
   \        0xE   0xF05F 0x0900      MOVS     R9,#+0
    639          
    640            time->tot_milisecs = time_ms;
   \       0x12   0xE9C4 0x6700      STRD     R6,R7,[R4, #+0]
    641          
    642            remaining_seconds = time_ms / MS_IN_SEC;
   \       0x16   0x0030             MOVS     R0,R6
   \       0x18   0x0039             MOVS     R1,R7
   \       0x1A   0xF44F 0x727A      MOV      R2,#+1000
   \       0x1E   0x2300             MOVS     R3,#+0
   \       0x20   0x.... 0x....      BL       __aeabi_uldivmod
   \       0x24   0x4682             MOV      R10,R0
   \       0x26   0x468B             MOV      R11,R1
    643            time->days = (uint16_t)(remaining_seconds / SEC_IN_DAY);
   \       0x28   0x4650             MOV      R0,R10
   \       0x2A   0x4659             MOV      R1,R11
   \       0x2C   0x.... 0x....      LDR.W    R2,??DataTable18_18
   \       0x30   0x2300             MOVS     R3,#+0
   \       0x32   0x.... 0x....      BL       __aeabi_uldivmod
   \       0x36   0x8120             STRH     R0,[R4, #+8]
    644          
    645            remaining_seconds -= (time->days * SEC_IN_DAY);
   \       0x38   0x8920             LDRH     R0,[R4, #+8]
   \       0x3A   0x.... 0x....      LDR.W    R1,??DataTable18_18
   \       0x3E   0x4348             MULS     R0,R1,R0
   \       0x40   0x2100             MOVS     R1,#+0
   \       0x42   0xEBBA 0x0A00      SUBS     R10,R10,R0
   \       0x46   0xEB7B 0x0B01      SBCS     R11,R11,R1
    646            time->hours = (uint8_t)(remaining_seconds / SEC_IN_HOUR);
   \       0x4A   0x4650             MOV      R0,R10
   \       0x4C   0x4659             MOV      R1,R11
   \       0x4E   0xF44F 0x6261      MOV      R2,#+3600
   \       0x52   0x2300             MOVS     R3,#+0
   \       0x54   0x.... 0x....      BL       __aeabi_uldivmod
   \       0x58   0x72A0             STRB     R0,[R4, #+10]
    647          
    648            remaining_seconds -= (time->hours * SEC_IN_HOUR);
   \       0x5A   0x7AA0             LDRB     R0,[R4, #+10]
   \       0x5C   0xF44F 0x6161      MOV      R1,#+3600
   \       0x60   0x4348             MULS     R0,R1,R0
   \       0x62   0x2100             MOVS     R1,#+0
   \       0x64   0xEBBA 0x0A00      SUBS     R10,R10,R0
   \       0x68   0xEB7B 0x0B01      SBCS     R11,R11,R1
    649            time->minutes = (uint8_t)(remaining_seconds / SEC_IN_MINUTE);
   \       0x6C   0x4650             MOV      R0,R10
   \       0x6E   0x4659             MOV      R1,R11
   \       0x70   0x223C             MOVS     R2,#+60
   \       0x72   0x2300             MOVS     R3,#+0
   \       0x74   0x.... 0x....      BL       __aeabi_uldivmod
   \       0x78   0x72E0             STRB     R0,[R4, #+11]
    650          
    651            remaining_seconds -= (time->minutes * SEC_IN_MINUTE);
   \       0x7A   0x7AE0             LDRB     R0,[R4, #+11]
   \       0x7C   0x213C             MOVS     R1,#+60
   \       0x7E   0x4348             MULS     R0,R1,R0
   \       0x80   0x2100             MOVS     R1,#+0
   \       0x82   0xEBBA 0x0000      SUBS     R0,R10,R0
   \       0x86   0xEB7B 0x0101      SBCS     R1,R11,R1
    652            time->seconds = (uint8_t)remaining_seconds;
   \       0x8A   0x7320             STRB     R0,[R4, #+12]
    653          }
   \       0x8C   0xE8BD 0x8FD0      POP      {R4,R6-R11,PC}
    654          

   \                                 In section .text, align 2, keep-with-next
    655          const char *app_wisun_trace_util_time_to_str(const sl_wisun_trace_util_time_t * const time)
    656          {
   \                     app_wisun_trace_util_time_to_str: (+1)
   \        0x0   0xB57F             PUSH     {R0-R6,LR}
   \        0x2   0x0005             MOVS     R5,R0
    657            char *str = NULL;
   \        0x4   0x2600             MOVS     R6,#+0
    658          
    659            str = app_wisun_malloc(TIMESTAMP_BUF_LEN);
   \        0x6   0x2020             MOVS     R0,#+32
   \        0x8   0x.... 0x....      BL       app_wisun_malloc
   \        0xC   0x0004             MOVS     R4,R0
    660          
    661            if (str == NULL) {
   \        0xE   0x2C00             CMP      R4,#+0
   \       0x10   0xD101             BNE.N    ??app_wisun_trace_util_time_to_str_0
    662              return NULL;
   \       0x12   0x2000             MOVS     R0,#+0
   \       0x14   0xE00D             B.N      ??app_wisun_trace_util_time_to_str_1
    663            }
    664          
    665            (void) snprintf(str, TIMESTAMP_BUF_LEN, TIMESTAMP_FORMAT,
    666                            time->days, time->hours, time->minutes, time->seconds);
   \                     ??app_wisun_trace_util_time_to_str_0: (+1)
   \       0x16   0x7B28             LDRB     R0,[R5, #+12]
   \       0x18   0x9002             STR      R0,[SP, #+8]
   \       0x1A   0x7AE8             LDRB     R0,[R5, #+11]
   \       0x1C   0x9001             STR      R0,[SP, #+4]
   \       0x1E   0x7AA8             LDRB     R0,[R5, #+10]
   \       0x20   0x9000             STR      R0,[SP, #+0]
   \       0x22   0x892B             LDRH     R3,[R5, #+8]
   \       0x24   0x.... 0x....      LDR.W    R2,??DataTable18_19
   \       0x28   0x2120             MOVS     R1,#+32
   \       0x2A   0x0020             MOVS     R0,R4
   \       0x2C   0x.... 0x....      BL       snprintf
    667          
    668            return (const char *) str;
   \       0x30   0x0020             MOVS     R0,R4
   \                     ??app_wisun_trace_util_time_to_str_1: (+1)
   \       0x32   0xB004             ADD      SP,SP,#+16
   \       0x34   0xBD70             POP      {R4-R6,PC}
    669          }
    670          
    671          

   \                                 In section .text, align 2, keep-with-next
    672          sl_status_t app_wisun_trace_util_evt_notify_init(app_wisun_trace_util_evt_notify_t * const evt_notify,
    673                                                           const uint32_t wait_opt)
    674          {
   \                     app_wisun_trace_util_evt_notify_init: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
    675            static const osEventFlagsAttr_t evt_attr = {
    676              .name = "EvtNotify",
    677              .cb_mem = NULL,
    678              .cb_size = 0,
    679              .attr_bits = 0
    680            };
    681          
    682            if (evt_notify == NULL) {
   \        0x6   0x2C00             CMP      R4,#+0
   \        0x8   0xD101             BNE.N    ??app_wisun_trace_util_evt_notify_init_0
    683              return SL_STATUS_FAIL;
   \        0xA   0x2001             MOVS     R0,#+1
   \        0xC   0xE00C             B.N      ??app_wisun_trace_util_evt_notify_init_1
    684            }
    685          
    686            evt_notify->evt_chs = 0UL;
   \                     ??app_wisun_trace_util_evt_notify_init_0: (+1)
   \        0xE   0x2000             MOVS     R0,#+0
   \       0x10   0x6060             STR      R0,[R4, #+4]
    687            evt_notify->wait_opt = wait_opt;
   \       0x12   0x60A5             STR      R5,[R4, #+8]
    688            evt_notify->evt_id = osEventFlagsNew(&evt_attr);
   \       0x14   0x....             LDR.N    R0,??DataTable18_20
   \       0x16   0x.... 0x....      BL       osEventFlagsNew
   \       0x1A   0x6020             STR      R0,[R4, #+0]
    689            
    690            if (evt_notify->evt_id == NULL) {
   \       0x1C   0x6820             LDR      R0,[R4, #+0]
   \       0x1E   0x2800             CMP      R0,#+0
   \       0x20   0xD101             BNE.N    ??app_wisun_trace_util_evt_notify_init_2
    691              return SL_STATUS_FAIL;
   \       0x22   0x2001             MOVS     R0,#+1
   \       0x24   0xE000             B.N      ??app_wisun_trace_util_evt_notify_init_1
    692            }
    693          
    694            return SL_STATUS_OK;
   \                     ??app_wisun_trace_util_evt_notify_init_2: (+1)
   \       0x26   0x2000             MOVS     R0,#+0
   \                     ??app_wisun_trace_util_evt_notify_init_1: (+1)
   \       0x28   0xBD32             POP      {R1,R4,R5,PC}
    695          }

   \                                 In section .rodata, align 4
   \                     `app_wisun_trace_util_evt_notify_init::evt_attr`:
   \        0x0   0x....'....        DC32 ?_53, 0, 0x0, 0
   \              0x0000'0000  
   \              0x0000'0000  
   \              0x0000'0000
    696          

   \                                 In section .text, align 2, keep-with-next
    697          sl_status_t app_wisun_trace_util_evt_notify_clear(app_wisun_trace_util_evt_notify_t * const evt_notify)
    698          {
   \                     app_wisun_trace_util_evt_notify_clear: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
    699            uint32_t flags = 0UL;
   \        0x4   0x2500             MOVS     R5,#+0
    700          
    701            flags = osEventFlagsClear(evt_notify->evt_id, APP_WISUN_TRACE_UTIL_EVT_NOTIFY_ALL_FLAGS_MSK);
   \        0x6   0xF07F 0x4100      MVNS     R1,#+2147483648
   \        0xA   0x6820             LDR      R0,[R4, #+0]
   \        0xC   0x.... 0x....      BL       osEventFlagsClear
   \       0x10   0x0001             MOVS     R1,R0
    702          
    703            if (flags & APP_WISUN_TRACE_UTIL_EVT_NOTIFY_ERROR_MSK) {
   \       0x12   0x2900             CMP      R1,#+0
   \       0x14   0xD501             BPL.N    ??app_wisun_trace_util_evt_notify_clear_0
    704              return SL_STATUS_FAIL;
   \       0x16   0x2001             MOVS     R0,#+1
   \       0x18   0xE000             B.N      ??app_wisun_trace_util_evt_notify_clear_1
    705            }
    706          
    707            return SL_STATUS_OK;
   \                     ??app_wisun_trace_util_evt_notify_clear_0: (+1)
   \       0x1A   0x2000             MOVS     R0,#+0
   \                     ??app_wisun_trace_util_evt_notify_clear_1: (+1)
   \       0x1C   0xBD32             POP      {R1,R4,R5,PC}
    708          }
    709          
    710          

   \                                 In section .text, align 2, keep-with-next
    711          sl_status_t app_wisun_trace_util_evt_notify_subscribe_ch(app_wisun_trace_util_evt_notify_t * const evt_notify, 
    712                                                                   uint8_t * const evt_ch)
    713          {
   \                     app_wisun_trace_util_evt_notify_subscribe_ch: (+1)
   \        0x0   0xB410             PUSH     {R4}
   \        0x2   0x0002             MOVS     R2,R0
    714            for (uint8_t ch_idx = 0; ch_idx < APP_WISUN_TRACE_UTIL_EVT_NOTIFY_MAX_CHS; ch_idx++) {
   \        0x4   0x2300             MOVS     R3,#+0
   \                     ??app_wisun_trace_util_evt_notify_subscribe_ch_0: (+1)
   \        0x6   0x0018             MOVS     R0,R3
   \        0x8   0xB2C0             UXTB     R0,R0
   \        0xA   0x281F             CMP      R0,#+31
   \        0xC   0xD20D             BCS.N    ??app_wisun_trace_util_evt_notify_subscribe_ch_1
    715              if (!(evt_notify->evt_chs & (1UL << ch_idx))) {
   \        0xE   0x6850             LDR      R0,[R2, #+4]
   \       0x10   0x40D8             LSRS     R0,R0,R3
   \       0x12   0x07C0             LSLS     R0,R0,#+31
   \       0x14   0xD407             BMI.N    ??app_wisun_trace_util_evt_notify_subscribe_ch_2
    716                *evt_ch = ch_idx;
   \       0x16   0x700B             STRB     R3,[R1, #+0]
    717                evt_notify->evt_chs |= (1UL << ch_idx);
   \       0x18   0x6854             LDR      R4,[R2, #+4]
   \       0x1A   0x2001             MOVS     R0,#+1
   \       0x1C   0x4098             LSLS     R0,R0,R3
   \       0x1E   0x4304             ORRS     R4,R0,R4
   \       0x20   0x6054             STR      R4,[R2, #+4]
    718                return SL_STATUS_OK;
   \       0x22   0x2000             MOVS     R0,#+0
   \       0x24   0xE002             B.N      ??app_wisun_trace_util_evt_notify_subscribe_ch_3
    719              }
    720            }
   \                     ??app_wisun_trace_util_evt_notify_subscribe_ch_2: (+1)
   \       0x26   0x1C5B             ADDS     R3,R3,#+1
   \       0x28   0xE7ED             B.N      ??app_wisun_trace_util_evt_notify_subscribe_ch_0
    721            return SL_STATUS_FAIL;
   \                     ??app_wisun_trace_util_evt_notify_subscribe_ch_1: (+1)
   \       0x2A   0x2001             MOVS     R0,#+1
   \                     ??app_wisun_trace_util_evt_notify_subscribe_ch_3: (+1)
   \       0x2C   0xBC10             POP      {R4}
   \       0x2E   0x4770             BX       LR
    722          }
    723          

   \                                 In section .text, align 2, keep-with-next
    724          sl_status_t app_wisun_trace_util_evt_notify_unsubscribe_ch(app_wisun_trace_util_evt_notify_t * const evt_notify, 
    725                                                                     const uint8_t evt_ch)
    726          {
   \                     app_wisun_trace_util_evt_notify_unsubscribe_ch: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
    727          
    728            if (!(evt_notify->evt_chs & (1UL << evt_ch))) {
   \        0x6   0x6860             LDR      R0,[R4, #+4]
   \        0x8   0x40E8             LSRS     R0,R0,R5
   \        0xA   0x07C0             LSLS     R0,R0,#+31
   \        0xC   0xD401             BMI.N    ??app_wisun_trace_util_evt_notify_unsubscribe_c_0
    729              return SL_STATUS_FAIL;
   \        0xE   0x2001             MOVS     R0,#+1
   \       0x10   0xE00B             B.N      ??app_wisun_trace_util_evt_notify_unsubscribe_c_1
    730            }
    731          
    732            (void) osEventFlagsClear(evt_notify->evt_id, 1UL << evt_ch);
   \                     ??app_wisun_trace_util_evt_notify_unsubscribe_c_0: (+1)
   \       0x12   0x2601             MOVS     R6,#+1
   \       0x14   0xFA16 0xF105      LSLS     R1,R6,R5
   \       0x18   0x6820             LDR      R0,[R4, #+0]
   \       0x1A   0x.... 0x....      BL       osEventFlagsClear
    733            evt_notify->evt_chs &= ~(1UL << evt_ch);
   \       0x1E   0x6860             LDR      R0,[R4, #+4]
   \       0x20   0x40AE             LSLS     R6,R6,R5
   \       0x22   0xEA30 0x0606      BICS     R6,R0,R6
   \       0x26   0x6066             STR      R6,[R4, #+4]
    734          
    735          
    736            return SL_STATUS_OK;
   \       0x28   0x2000             MOVS     R0,#+0
   \                     ??app_wisun_trace_util_evt_notify_unsubscribe_c_1: (+1)
   \       0x2A   0xBD70             POP      {R4-R6,PC}
    737          }
    738          

   \                                 In section .text, align 2, keep-with-next
    739          sl_status_t app_wisun_trace_util_evt_notfiy_chs(const app_wisun_trace_util_evt_notify_t * const evt_notify)
    740          {
   \                     app_wisun_trace_util_evt_notfiy_chs: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
    741            uint32_t flags = 0UL;
   \        0x4   0x2500             MOVS     R5,#+0
    742          
    743            flags = osEventFlagsSet(evt_notify->evt_id, evt_notify->evt_chs);
   \        0x6   0x6861             LDR      R1,[R4, #+4]
   \        0x8   0x6820             LDR      R0,[R4, #+0]
   \        0xA   0x.... 0x....      BL       osEventFlagsSet
   \        0xE   0x0001             MOVS     R1,R0
    744          
    745            if (flags & APP_WISUN_TRACE_UTIL_EVT_NOTIFY_ERROR_MSK) {
   \       0x10   0x2900             CMP      R1,#+0
   \       0x12   0xD501             BPL.N    ??app_wisun_trace_util_evt_notfiy_chs_0
    746              return SL_STATUS_FAIL;
   \       0x14   0x2001             MOVS     R0,#+1
   \       0x16   0xE000             B.N      ??app_wisun_trace_util_evt_notfiy_chs_1
    747            }
    748          
    749            return SL_STATUS_OK;
   \                     ??app_wisun_trace_util_evt_notfiy_chs_0: (+1)
   \       0x18   0x2000             MOVS     R0,#+0
   \                     ??app_wisun_trace_util_evt_notfiy_chs_1: (+1)
   \       0x1A   0xBD32             POP      {R1,R4,R5,PC}
    750          }
    751          
    752          

   \                                 In section .text, align 2, keep-with-next
    753          sl_status_t app_wisun_trace_util_evt_notify_wait(const app_wisun_trace_util_evt_notify_t * const evt_notify,
    754                                                           const uint32_t ch_mask,
    755                                                           const uint32_t timeout)
    756          {
   \                     app_wisun_trace_util_evt_notify_wait: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0x0016             MOVS     R6,R2
    757            uint32_t flags = 0UL;
   \        0x8   0x2700             MOVS     R7,#+0
    758          
    759            if (!(evt_notify->evt_chs & ch_mask)) {
   \        0xA   0x6860             LDR      R0,[R4, #+4]
   \        0xC   0x4228             TST      R0,R5
   \        0xE   0xD101             BNE.N    ??app_wisun_trace_util_evt_notify_wait_0
    760              return SL_STATUS_FAIL;
   \       0x10   0x2001             MOVS     R0,#+1
   \       0x12   0xE00B             B.N      ??app_wisun_trace_util_evt_notify_wait_1
    761            }
    762          
    763            flags = osEventFlagsWait(evt_notify->evt_id, ch_mask, evt_notify->wait_opt, timeout);
   \                     ??app_wisun_trace_util_evt_notify_wait_0: (+1)
   \       0x14   0x0033             MOVS     R3,R6
   \       0x16   0x68A2             LDR      R2,[R4, #+8]
   \       0x18   0x0029             MOVS     R1,R5
   \       0x1A   0x6820             LDR      R0,[R4, #+0]
   \       0x1C   0x.... 0x....      BL       osEventFlagsWait
   \       0x20   0x0001             MOVS     R1,R0
    764          
    765            if (flags & APP_WISUN_TRACE_UTIL_EVT_NOTIFY_ERROR_MSK) {
   \       0x22   0x2900             CMP      R1,#+0
   \       0x24   0xD501             BPL.N    ??app_wisun_trace_util_evt_notify_wait_2
    766              return SL_STATUS_FAIL;
   \       0x26   0x2001             MOVS     R0,#+1
   \       0x28   0xE000             B.N      ??app_wisun_trace_util_evt_notify_wait_1
    767            }
    768          
    769            return SL_STATUS_OK;
   \                     ??app_wisun_trace_util_evt_notify_wait_2: (+1)
   \       0x2A   0x2000             MOVS     R0,#+0
   \                     ??app_wisun_trace_util_evt_notify_wait_1: (+1)
   \       0x2C   0xBDF2             POP      {R1,R4-R7,PC}
    770          }
    771          
    772          
    773          
    774          // -----------------------------------------------------------------------------
    775          //                          Static Function Definitions
    776          // -----------------------------------------------------------------------------
    777          

   \                                 In section .text, align 2, keep-with-next
    778          static const char *_get_str_key_by_val_from_enum(const app_enum_t * const app_enum,
    779                                                           const uint32_t val)
    780          {
   \                     _get_str_key_by_val_from_enum: (+1)
   \        0x0   0x0002             MOVS     R2,R0
    781            const app_enum_t *p = NULL;
   \        0x2   0x2000             MOVS     R0,#+0
    782          
    783            p = app_enum;
   \        0x4   0x0013             MOVS     R3,R2
    784            while (p->value_str != NULL) {
   \                     ??_get_str_key_by_val_from_enum_0: (+1)
   \        0x6   0x6818             LDR      R0,[R3, #+0]
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD006             BEQ.N    ??_get_str_key_by_val_from_enum_1
    785              if (p->value == val) {
   \        0xC   0x6858             LDR      R0,[R3, #+4]
   \        0xE   0x4288             CMP      R0,R1
   \       0x10   0xD101             BNE.N    ??_get_str_key_by_val_from_enum_2
    786                return p->value_str;
   \       0x12   0x6818             LDR      R0,[R3, #+0]
   \       0x14   0xE002             B.N      ??_get_str_key_by_val_from_enum_3
    787              }
    788              ++p;
   \                     ??_get_str_key_by_val_from_enum_2: (+1)
   \       0x16   0x3308             ADDS     R3,R3,#+8
   \       0x18   0xE7F5             B.N      ??_get_str_key_by_val_from_enum_0
    789            }
    790            return NULL;
   \                     ??_get_str_key_by_val_from_enum_1: (+1)
   \       0x1A   0x2000             MOVS     R0,#+0
   \                     ??_get_str_key_by_val_from_enum_3: (+1)
   \       0x1C   0x4770             BX       LR
    791          }
    792          

   \                                 In section .text, align 2, keep-with-next
    793          static app_wisun_phy_list_t *_alloc_phy_list_element(sl_wisun_phy_config_t *phy_cfg)
    794          {
   \                     _alloc_phy_list_element: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0x0005             MOVS     R5,R0
    795            app_wisun_phy_list_t *p = NULL;
   \        0x6   0x2600             MOVS     R6,#+0
    796          
    797            p = app_wisun_malloc(sizeof(app_wisun_phy_list_t));
   \        0x8   0x2018             MOVS     R0,#+24
   \        0xA   0x.... 0x....      BL       app_wisun_malloc
   \        0xE   0x0004             MOVS     R4,R0
    798            if (p == NULL) {
   \       0x10   0x2C00             CMP      R4,#+0
   \       0x12   0xD101             BNE.N    ??_alloc_phy_list_element_0
    799              return NULL;
   \       0x14   0x2000             MOVS     R0,#+0
   \       0x16   0xE00F             B.N      ??_alloc_phy_list_element_1
    800            }
    801          
    802            p->name = app_wisun_phy_to_str(phy_cfg);
   \                     ??_alloc_phy_list_element_0: (+1)
   \       0x18   0x0028             MOVS     R0,R5
   \       0x1A   0x.... 0x....      BL       app_wisun_phy_to_str
   \       0x1E   0x6020             STR      R0,[R4, #+0]
    803            memcpy(&p->phy_cfg, phy_cfg, sizeof(sl_wisun_phy_config_t));
   \       0x20   0x2610             MOVS     R6,#+16
   \       0x22   0x002F             MOVS     R7,R5
   \       0x24   0xF114 0x0804      ADDS     R8,R4,#+4
   \       0x28   0x0032             MOVS     R2,R6
   \       0x2A   0x0039             MOVS     R1,R7
   \       0x2C   0x4640             MOV      R0,R8
   \       0x2E   0x.... 0x....      BL       __aeabi_memcpy
    804            p->next = NULL;
   \       0x32   0x2000             MOVS     R0,#+0
   \       0x34   0x6160             STR      R0,[R4, #+20]
    805            return p;
   \       0x36   0x0020             MOVS     R0,R4
   \                     ??_alloc_phy_list_element_1: (+1)
   \       0x38   0xE8BD 0x81F0      POP      {R4-R8,PC}
    806          }
    807          

   \                                 In section .text, align 2, keep-with-next
    808          static sl_status_t _get_phy_cfg_from_ch_cfg_entry(const RAIL_ChannelConfigEntry_t * const ch_config_entry,
    809                                                            sl_wisun_phy_config_t * const phy_config)
    810          {
   \                     _get_phy_cfg_from_ch_cfg_entry: (+1)
   \        0x0   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x000D             MOVS     R5,R1
    811            const uint8_t *stack_info = NULL;
   \        0x8   0x2100             MOVS     R1,#+0
    812            uint8_t phy_mode = 0U;
   \        0xA   0x2600             MOVS     R6,#+0
    813            uint8_t phy_type = 0U;
   \        0xC   0x2700             MOVS     R7,#+0
    814          
    815            if (ch_config_entry == NULL) {
   \        0xE   0x2C00             CMP      R4,#+0
   \       0x10   0xD101             BNE.N    ??_get_phy_cfg_from_ch_cfg_entry_0
    816              return SL_STATUS_FAIL;
   \       0x12   0x2001             MOVS     R0,#+1
   \       0x14   0xE059             B.N      ??_get_phy_cfg_from_ch_cfg_entry_1
    817            }
    818          
    819            stack_info = ch_config_entry->stackInfo;
   \                     ??_get_phy_cfg_from_ch_cfg_entry_0: (+1)
   \       0x16   0xF8D4 0x801C      LDR      R8,[R4, #+28]
    820            if (stack_info[0] != RAIL_PTI_PROTOCOL_WISUN) {
   \       0x1A   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \       0x1E   0x2807             CMP      R0,#+7
   \       0x20   0xD001             BEQ.N    ??_get_phy_cfg_from_ch_cfg_entry_2
    821              // Not a Wi-SUN configuration
    822              return SL_STATUS_FAIL;
   \       0x22   0x2001             MOVS     R0,#+1
   \       0x24   0xE051             B.N      ??_get_phy_cfg_from_ch_cfg_entry_1
    823            }
    824          
    825            phy_type = _get_phy_type(stack_info[1]);
   \                     ??_get_phy_cfg_from_ch_cfg_entry_2: (+1)
   \       0x26   0xF898 0x0001      LDRB     R0,[R8, #+1]
   \       0x2A   0x.... 0x....      BL       _get_phy_type
   \       0x2E   0x4681             MOV      R9,R0
    826            phy_mode = _get_phy_mode(stack_info[1]);
   \       0x30   0xF898 0x0001      LDRB     R0,[R8, #+1]
   \       0x34   0x.... 0x....      BL       _get_phy_mode
   \       0x38   0x4682             MOV      R10,R0
    827          
    828            switch (stack_info[2]) {
   \       0x3A   0xF898 0x0002      LDRB     R0,[R8, #+2]
   \       0x3E   0x2800             CMP      R0,#+0
   \       0x40   0xD002             BEQ.N    ??_get_phy_cfg_from_ch_cfg_entry_3
   \       0x42   0x2801             CMP      R0,#+1
   \       0x44   0xD024             BEQ.N    ??_get_phy_cfg_from_ch_cfg_entry_4
   \       0x46   0xE03D             B.N      ??_get_phy_cfg_from_ch_cfg_entry_5
    829              case VERSION_WISUN_FAN1_0:
    830                if (!_is_fsk(stack_info[1]) || !_check_phy_mode(phy_mode)) {
   \                     ??_get_phy_cfg_from_ch_cfg_entry_3: (+1)
   \       0x48   0xF898 0x0001      LDRB     R0,[R8, #+1]
   \       0x4C   0x.... 0x....      BL       _is_fsk
   \       0x50   0x2800             CMP      R0,#+0
   \       0x52   0xD005             BEQ.N    ??_get_phy_cfg_from_ch_cfg_entry_6
   \       0x54   0x4650             MOV      R0,R10
   \       0x56   0xB2C0             UXTB     R0,R0
   \       0x58   0x.... 0x....      BL       _check_phy_mode
   \       0x5C   0x2800             CMP      R0,#+0
   \       0x5E   0xD101             BNE.N    ??_get_phy_cfg_from_ch_cfg_entry_7
    831                  return SL_STATUS_FAIL;
   \                     ??_get_phy_cfg_from_ch_cfg_entry_6: (+1)
   \       0x60   0x2001             MOVS     R0,#+1
   \       0x62   0xE032             B.N      ??_get_phy_cfg_from_ch_cfg_entry_1
    832                }
    833                phy_config->type = SL_WISUN_PHY_CONFIG_FAN10;
   \                     ??_get_phy_cfg_from_ch_cfg_entry_7: (+1)
   \       0x64   0x2000             MOVS     R0,#+0
   \       0x66   0x6028             STR      R0,[R5, #+0]
    834                phy_config->config.fan10.reg_domain = stack_info[4];
   \       0x68   0xF898 0x0004      LDRB     R0,[R8, #+4]
   \       0x6C   0x7128             STRB     R0,[R5, #+4]
    835                phy_config->config.fan10.op_class = stack_info[3];
   \       0x6E   0xF898 0x0003      LDRB     R0,[R8, #+3]
   \       0x72   0x7168             STRB     R0,[R5, #+5]
    836                phy_config->config.fan10.op_mode = _fsk_phy_mode_to_op_mode[phy_mode];
   \       0x74   0x....             LDR.N    R1,??DataTable18_21
   \       0x76   0x4650             MOV      R0,R10
   \       0x78   0xB2C0             UXTB     R0,R0
   \       0x7A   0x5C08             LDRB     R0,[R1, R0]
   \       0x7C   0x71A8             STRB     R0,[R5, #+6]
    837                phy_config->config.fan10.fec = phy_type == PHY_TYPE_FSK_FEC;
   \       0x7E   0x4648             MOV      R0,R9
   \       0x80   0xB2C0             UXTB     R0,R0
   \       0x82   0x2801             CMP      R0,#+1
   \       0x84   0xD101             BNE.N    ??_get_phy_cfg_from_ch_cfg_entry_8
   \       0x86   0x2001             MOVS     R0,#+1
   \       0x88   0xE000             B.N      ??_get_phy_cfg_from_ch_cfg_entry_9
   \                     ??_get_phy_cfg_from_ch_cfg_entry_8: (+1)
   \       0x8A   0x2000             MOVS     R0,#+0
   \                     ??_get_phy_cfg_from_ch_cfg_entry_9: (+1)
   \       0x8C   0x71E8             STRB     R0,[R5, #+7]
    838                break;
   \       0x8E   0xE01B             B.N      ??_get_phy_cfg_from_ch_cfg_entry_10
    839              case VERSION_WISUN_FAN1_1:
    840                if (!(_is_fsk(stack_info[1]) || _is_ofdm(stack_info[1]))) {
   \                     ??_get_phy_cfg_from_ch_cfg_entry_4: (+1)
   \       0x90   0xF898 0x0001      LDRB     R0,[R8, #+1]
   \       0x94   0x.... 0x....      BL       _is_fsk
   \       0x98   0x2800             CMP      R0,#+0
   \       0x9A   0xD107             BNE.N    ??_get_phy_cfg_from_ch_cfg_entry_11
   \       0x9C   0xF898 0x0001      LDRB     R0,[R8, #+1]
   \       0xA0   0x.... 0x....      BL       _is_ofdm
   \       0xA4   0x2800             CMP      R0,#+0
   \       0xA6   0xD101             BNE.N    ??_get_phy_cfg_from_ch_cfg_entry_11
    841                  return SL_STATUS_FAIL;
   \       0xA8   0x2001             MOVS     R0,#+1
   \       0xAA   0xE00E             B.N      ??_get_phy_cfg_from_ch_cfg_entry_1
    842                }
    843                phy_config->type = SL_WISUN_PHY_CONFIG_FAN11;
   \                     ??_get_phy_cfg_from_ch_cfg_entry_11: (+1)
   \       0xAC   0x2001             MOVS     R0,#+1
   \       0xAE   0x6028             STR      R0,[R5, #+0]
    844                phy_config->config.fan11.reg_domain = stack_info[4];
   \       0xB0   0xF898 0x0004      LDRB     R0,[R8, #+4]
   \       0xB4   0x7128             STRB     R0,[R5, #+4]
    845                phy_config->config.fan11.chan_plan_id = stack_info[3];
   \       0xB6   0xF898 0x0003      LDRB     R0,[R8, #+3]
   \       0xBA   0x7168             STRB     R0,[R5, #+5]
    846                phy_config->config.fan11.phy_mode_id = stack_info[1];
   \       0xBC   0xF898 0x0001      LDRB     R0,[R8, #+1]
   \       0xC0   0x71A8             STRB     R0,[R5, #+6]
    847                break;
   \       0xC2   0xE001             B.N      ??_get_phy_cfg_from_ch_cfg_entry_10
    848              default:
    849                // Unsupported version.
    850                return SL_STATUS_FAIL;
   \                     ??_get_phy_cfg_from_ch_cfg_entry_5: (+1)
   \       0xC4   0x2001             MOVS     R0,#+1
   \       0xC6   0xE000             B.N      ??_get_phy_cfg_from_ch_cfg_entry_1
    851            }
    852          
    853            return SL_STATUS_OK;
   \                     ??_get_phy_cfg_from_ch_cfg_entry_10: (+1)
   \       0xC8   0x2000             MOVS     R0,#+0
   \                     ??_get_phy_cfg_from_ch_cfg_entry_1: (+1)
   \       0xCA   0xE8BD 0x87F0      POP      {R4-R10,PC}
    854          }
    855          

   \                                 In section .text, align 2, keep-with-next
    856          __STATIC_INLINE uint8_t _get_phy_type(const uint8_t phy_mode_id)
    857          {
    858            return (phy_mode_id >> 4U) & 0x0FU;
   \                     _get_phy_type: (+1)
   \        0x0   0xB2C0             UXTB     R0,R0
   \        0x2   0x0900             LSRS     R0,R0,#+4
   \        0x4   0x4770             BX       LR
    859          }
    860          

   \                                 In section .text, align 2, keep-with-next
    861          __STATIC_INLINE uint8_t _get_phy_mode(const uint8_t phy_mode_id)
    862          {
    863            return phy_mode_id & 0x0FU;
   \                     _get_phy_mode: (+1)
   \        0x0   0xF010 0x000F      ANDS     R0,R0,#0xF
   \        0x4   0x4770             BX       LR
    864          }
    865          

   \                                 In section .text, align 2, keep-with-next
    866          __STATIC_INLINE bool _is_fsk(const uint8_t phy_mode_id)
    867          {
   \                     _is_fsk: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    868            return (bool)((_get_phy_type(phy_mode_id) == PHY_TYPE_FSK)
    869                          || (_get_phy_type(phy_mode_id) == PHY_TYPE_FSK_FEC));
   \        0x4   0x0020             MOVS     R0,R4
   \        0x6   0xB2C0             UXTB     R0,R0
   \        0x8   0x.... 0x....      BL       _get_phy_type
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD005             BEQ.N    ??_is_fsk_0
   \       0x10   0x0020             MOVS     R0,R4
   \       0x12   0xB2C0             UXTB     R0,R0
   \       0x14   0x.... 0x....      BL       _get_phy_type
   \       0x18   0x2801             CMP      R0,#+1
   \       0x1A   0xD101             BNE.N    ??_is_fsk_1
   \                     ??_is_fsk_0: (+1)
   \       0x1C   0x2001             MOVS     R0,#+1
   \       0x1E   0xE000             B.N      ??_is_fsk_2
   \                     ??_is_fsk_1: (+1)
   \       0x20   0x2000             MOVS     R0,#+0
   \                     ??_is_fsk_2: (+1)
   \       0x22   0xB2C0             UXTB     R0,R0
   \       0x24   0xBD10             POP      {R4,PC}
    870          }
    871          

   \                                 In section .text, align 2, keep-with-next
    872          __STATIC_INLINE bool _is_ofdm(const uint8_t phy_mode_id)
    873          {
   \                     _is_ofdm: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    874            return (bool)((_get_phy_type(phy_mode_id) >= PHY_TYPE_OFDM1)
    875                          && (_get_phy_type(phy_mode_id) <= PHY_TYPE_OFDM4));
   \        0x4   0x0020             MOVS     R0,R4
   \        0x6   0xB2C0             UXTB     R0,R0
   \        0x8   0x.... 0x....      BL       _get_phy_type
   \        0xC   0x2802             CMP      R0,#+2
   \        0xE   0xDB07             BLT.N    ??_is_ofdm_0
   \       0x10   0x0020             MOVS     R0,R4
   \       0x12   0xB2C0             UXTB     R0,R0
   \       0x14   0x.... 0x....      BL       _get_phy_type
   \       0x18   0x2806             CMP      R0,#+6
   \       0x1A   0xDA01             BGE.N    ??_is_ofdm_0
   \       0x1C   0x2001             MOVS     R0,#+1
   \       0x1E   0xE000             B.N      ??_is_ofdm_1
   \                     ??_is_ofdm_0: (+1)
   \       0x20   0x2000             MOVS     R0,#+0
   \                     ??_is_ofdm_1: (+1)
   \       0x22   0xB2C0             UXTB     R0,R0
   \       0x24   0xBD10             POP      {R4,PC}
    876          }
    877          

   \                                 In section .text, align 2, keep-with-next
    878          __STATIC_INLINE bool _check_phy_mode(const uint8_t phy_mode)
    879          {
    880            return (bool)(phy_mode >= PHY_MODE_MIN_VAL && phy_mode <= PHY_MODE_MAX_VAL);
   \                     _check_phy_mode: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0xB2C9             UXTB     R1,R1
   \        0x4   0x2900             CMP      R1,#+0
   \        0x6   0xD004             BEQ.N    ??_check_phy_mode_0
   \        0x8   0xB2C0             UXTB     R0,R0
   \        0xA   0x2809             CMP      R0,#+9
   \        0xC   0xD201             BCS.N    ??_check_phy_mode_0
   \        0xE   0x2001             MOVS     R0,#+1
   \       0x10   0xE000             B.N      ??_check_phy_mode_1
   \                     ??_check_phy_mode_0: (+1)
   \       0x12   0x2000             MOVS     R0,#+0
   \                     ??_check_phy_mode_1: (+1)
   \       0x14   0xB2C0             UXTB     R0,R0
   \       0x16   0x4770             BX       LR
    881          }
    882          

   \                                 In section .text, align 2, keep-with-next
    883          static uint8_t _get_phy_options(sl_wisun_phy_config_t * const phy_cfg)
    884          {
   \                     _get_phy_options: (+1)
   \        0x0   0xB430             PUSH     {R4,R5}
   \        0x2   0x0002             MOVS     R2,R0
    885            uint8_t phy_option_cnt = 1U;
   \        0x4   0x2301             MOVS     R3,#+1
    886          
    887            if (phy_cfg->type != SL_WISUN_PHY_CONFIG_FAN11) {
   \        0x6   0x6810             LDR      R0,[R2, #+0]
   \        0x8   0x2801             CMP      R0,#+1
   \        0xA   0xD002             BEQ.N    ??_get_phy_options_0
    888              return phy_option_cnt;
   \        0xC   0x0018             MOVS     R0,R3
   \        0xE   0xB2C0             UXTB     R0,R0
   \       0x10   0xE022             B.N      ??_get_phy_options_1
    889            }
    890          
    891            for (uint32_t map_idx = 0; map_idx < (sizeof(_ofdm_phy_map) / sizeof(rail_ofdm_phy_mode_id_t)); ++map_idx) {
   \                     ??_get_phy_options_0: (+1)
   \       0x12   0x2400             MOVS     R4,#+0
   \                     ??_get_phy_options_2: (+1)
   \       0x14   0x2C04             CMP      R4,#+4
   \       0x16   0xD21D             BCS.N    ??_get_phy_options_3
    892              if (phy_cfg->config.fan11.phy_mode_id == _ofdm_phy_map[map_idx].rail_phy_mode_id) {
   \       0x18   0x....             LDR.N    R5,??DataTable18_22
   \       0x1A   0x7990             LDRB     R0,[R2, #+6]
   \       0x1C   0x2103             MOVS     R1,#+3
   \       0x1E   0xFB01 0xF104      MUL      R1,R1,R4
   \       0x22   0x5C69             LDRB     R1,[R5, R1]
   \       0x24   0x4288             CMP      R0,R1
   \       0x26   0xD113             BNE.N    ??_get_phy_options_4
    893                // Corrigate first PHY mode ID
    894                phy_cfg->config.fan11.phy_mode_id = _ofdm_phy_map[map_idx].wisun_phy_mode_id_min;
   \       0x28   0x2003             MOVS     R0,#+3
   \       0x2A   0xFB00 0xF004      MUL      R0,R0,R4
   \       0x2E   0x4428             ADD      R0,R5,R0
   \       0x30   0x7840             LDRB     R0,[R0, #+1]
   \       0x32   0x7190             STRB     R0,[R2, #+6]
    895                return _ofdm_phy_map[map_idx].wisun_phy_mode_id_max - _ofdm_phy_map[map_idx].wisun_phy_mode_id_min + 1U;
   \       0x34   0x2003             MOVS     R0,#+3
   \       0x36   0xFB00 0xF004      MUL      R0,R0,R4
   \       0x3A   0x4428             ADD      R0,R5,R0
   \       0x3C   0x7880             LDRB     R0,[R0, #+2]
   \       0x3E   0x2103             MOVS     R1,#+3
   \       0x40   0x434C             MULS     R4,R1,R4
   \       0x42   0xEB05 0x0104      ADD      R1,R5,R4
   \       0x46   0x7849             LDRB     R1,[R1, #+1]
   \       0x48   0x1A40             SUBS     R0,R0,R1
   \       0x4A   0x1C40             ADDS     R0,R0,#+1
   \       0x4C   0xB2C0             UXTB     R0,R0
   \       0x4E   0xE003             B.N      ??_get_phy_options_1
    896              }
    897            }
   \                     ??_get_phy_options_4: (+1)
   \       0x50   0x1C64             ADDS     R4,R4,#+1
   \       0x52   0xE7DF             B.N      ??_get_phy_options_2
    898          
    899            return phy_option_cnt;
   \                     ??_get_phy_options_3: (+1)
   \       0x54   0x0018             MOVS     R0,R3
   \       0x56   0xB2C0             UXTB     R0,R0
   \                     ??_get_phy_options_1: (+1)
   \       0x58   0xBC30             POP      {R4,R5}
   \       0x5A   0x4770             BX       LR
    900          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \        0x0   0x3A 0x3A          DC8      0x3A, 0x3A, 0x00, 0x00
   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18:
   \        0x0   0x....'....        DC32     app_wisun_conn_status_enum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_1:
   \        0x0   0x....'....        DC32     app_wisun_phy_reg_domain_enum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_2:
   \        0x0   0x....'....        DC32     app_wisun_nw_size_enum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_3:
   \        0x0   0x....'....        DC32     app_wisun_phy_config_type_enum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_4:
   \        0x0   0x....'....        DC32     app_wisun_phy_channel_spacing_enum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_5:
   \        0x0   0x....'....        DC32     app_wisun_device_type_enum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_6:
   \        0x0   0x....'....        DC32     app_wisun_lfn_profile_enum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_7:
   \        0x0   0x....'....        DC32     channelConfigs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_8:
   \        0x0   0x....'....        DC32     `app_wisun_get_phy_list::phy_cfg`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_9:
   \        0x0   0x....'....        DC32     ?_48

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_10:
   \        0x0   0x....'....        DC32     ?_47

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_11:
   \        0x0   0x....'....        DC32     ?_50

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_12:
   \        0x0   0x....'....        DC32     ?_49

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_13:
   \        0x0   0x....'....        DC32     ?_51

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_14:
   \        0x0   0x....'....        DC32     SL_WISUN_PARAMS_PROFILE_SMALL

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_15:
   \        0x0   0x....'....        DC32     SL_WISUN_PARAMS_PROFILE_MEDIUM

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_16:
   \        0x0   0x....'....        DC32     SL_WISUN_PARAMS_PROFILE_LARGE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_17:
   \        0x0   0x....'....        DC32     SL_WISUN_PARAMS_PROFILE_TEST

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_18:
   \        0x0   0x0001'5180        DC32     0x15180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_19:
   \        0x0   0x....'....        DC32     ?_52

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_20:
   \        0x0   0x....'....        DC32     `app_wisun_trace_util_evt_notify_init::evt_attr`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_21:
   \        0x0   0x....'....        DC32     _fsk_phy_mode_to_op_mode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_22:
   \        0x0   0x....'....        DC32     _ofdm_phy_map

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x46 0x41          DC8 "FAN 1.0"
   \              0x4E 0x20    
   \              0x31 0x2E    
   \              0x30 0x00

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x46 0x41          DC8 "FAN 1.1"
   \              0x4E 0x20    
   \              0x31 0x2E    
   \              0x31 0x00

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x65 0x78          DC8 "explicit"
   \              0x70 0x6C    
   \              0x69 0x63    
   \              0x69 0x74    
   \              0x00
   \        0x9                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x44 0x69          DC8 "Disconnected"
   \              0x73 0x63    
   \              0x6F 0x6E    
   \              0x6E 0x65    
   \              0x63 0x74    
   \              0x65 0x64    
   \              0x00
   \        0xD                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0x53 0x65          DC8 "Select PAN"
   \              0x6C 0x65    
   \              0x63 0x74    
   \              0x20 0x50    
   \              0x41 0x4E    
   \              0x00
   \        0xB                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_5:
   \        0x0   0x41 0x75          DC8 "Authenticate"
   \              0x74 0x68    
   \              0x65 0x6E    
   \              0x74 0x69    
   \              0x63 0x61    
   \              0x74 0x65    
   \              0x00
   \        0xD                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_6:
   \        0x0   0x41 0x63          DC8 "Acquire PAN Config"
   \              0x71 0x75    
   \              0x69 0x72    
   \              0x65 0x20    
   \              0x50 0x41    
   \              0x4E 0x20    
   \              0x43 0x6F    
   \              0x6E 0x66    
   \              0x69 0x67    
   \              0x00
   \       0x13                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_7:
   \        0x0   0x43 0x6F          DC8 "Configure Routing"
   \              0x6E 0x66    
   \              0x69 0x67    
   \              0x75 0x72    
   \              0x65 0x20    
   \              0x52 0x6F    
   \              0x75 0x74    
   \              0x69 0x6E    
   \              0x67 0x00
   \       0x12                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_8:
   \        0x0   0x4F 0x70          DC8 "Operational"
   \              0x65 0x72    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x61    
   \              0x6C 0x00

   \                                 In section .rodata, align 4
   \                     ?_9:
   \        0x0   0x57 0x57          DC8 "WW"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_10:
   \        0x0   0x4E 0x41          DC8 "NA"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_11:
   \        0x0   0x4A 0x50          DC8 "JP"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_12:
   \        0x0   0x45 0x55          DC8 "EU"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_13:
   \        0x0   0x43 0x4E          DC8 "CN"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_14:
   \        0x0   0x49 0x4E          DC8 "IN"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_15:
   \        0x0   0x4D 0x58          DC8 "MX"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_16:
   \        0x0   0x42 0x5A          DC8 "BZ"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_17:
   \        0x0   0x41 0x5A          DC8 "AZ/NZ"
   \              0x2F 0x4E    
   \              0x5A 0x00
   \        0x6                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_18:
   \        0x0   0x4B 0x52          DC8 "KR"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_19:
   \        0x0   0x50 0x48          DC8 "PH"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_20:
   \        0x0   0x4D 0x59          DC8 "MY"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_21:
   \        0x0   0x48 0x4B          DC8 "HK"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_22:
   \        0x0   0x53 0x47          DC8 "SG"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_23:
   \        0x0   0x54 0x48          DC8 "TH"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_24:
   \        0x0   0x56 0x4E          DC8 "VN"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_25:
   \        0x0   0x41 0x50          DC8 "APPLICATION"
   \              0x50 0x4C    
   \              0x49 0x43    
   \              0x41 0x54    
   \              0x49 0x4F    
   \              0x4E 0x00

   \                                 In section .rodata, align 4
   \                     ?_26:
   \        0x0   0x61 0x75          DC8 "automatic"
   \              0x74 0x6F    
   \              0x6D 0x61    
   \              0x74 0x69    
   \              0x63 0x00
   \        0xA                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_27:
   \        0x0   0x73 0x6D          DC8 "small"
   \              0x61 0x6C    
   \              0x6C 0x00
   \        0x6                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_28:
   \        0x0   0x6D 0x65          DC8 "medium"
   \              0x64 0x69    
   \              0x75 0x6D    
   \              0x00
   \        0x7                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_29:
   \        0x0   0x6C 0x61          DC8 "large"
   \              0x72 0x67    
   \              0x65 0x00
   \        0x6                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_30:
   \        0x0   0x74 0x65          DC8 "test"
   \              0x73 0x74    
   \              0x00
   \        0x5                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_31:
   \        0x0   0x63 0x65          DC8 "certification"
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x00
   \        0xE                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_32:
   \        0x0   0x6E 0x6F          DC8 "none"
   \              0x6E 0x65    
   \              0x00
   \        0x5                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_33:
   \        0x0   0x61 0x72          DC8 "arib"
   \              0x69 0x62    
   \              0x00
   \        0x5                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_34:
   \        0x0   0x77 0x70          DC8 "wpc"
   \              0x63 0x00

   \                                 In section .rodata, align 4
   \                     ?_35:
   \        0x0   0x31 0x30          DC8 "100kHz"
   \              0x30 0x6B    
   \              0x48 0x7A    
   \              0x00
   \        0x7                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_36:
   \        0x0   0x32 0x30          DC8 "200kHz"
   \              0x30 0x6B    
   \              0x48 0x7A    
   \              0x00
   \        0x7                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_37:
   \        0x0   0x34 0x30          DC8 "400kHz"
   \              0x30 0x6B    
   \              0x48 0x7A    
   \              0x00
   \        0x7                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_38:
   \        0x0   0x36 0x30          DC8 "600kHz"
   \              0x30 0x6B    
   \              0x48 0x7A    
   \              0x00
   \        0x7                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_39:
   \        0x0   0x32 0x35          DC8 "250kHz"
   \              0x30 0x6B    
   \              0x48 0x7A    
   \              0x00
   \        0x7                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_40:
   \        0x0   0x38 0x30          DC8 "800kHz"
   \              0x30 0x6B    
   \              0x48 0x7A    
   \              0x00
   \        0x7                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_41:
   \        0x0   0x31 0x32          DC8 "1200kHz"
   \              0x30 0x30    
   \              0x6B 0x48    
   \              0x7A 0x00

   \                                 In section .rodata, align 4
   \                     ?_42:
   \        0x0   0x46 0x46          DC8 "FFN"
   \              0x4E 0x00

   \                                 In section .rodata, align 4
   \                     ?_43:
   \        0x0   0x4C 0x46          DC8 "LFN"
   \              0x4E 0x00

   \                                 In section .rodata, align 4
   \                     ?_44:
   \        0x0   0x62 0x61          DC8 "balanced"
   \              0x6C 0x61    
   \              0x6E 0x63    
   \              0x65 0x64    
   \              0x00
   \        0x9                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_45:
   \        0x0   0x65 0x63          DC8 "eco"
   \              0x6F 0x00

   \                                 In section .rodata, align 4
   \        0x0   0x3A 0x3A          DC8 "::"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_47:
   \        0x0   0x25 0x73          DC8 "%s-%u-%x (%s)"
   \              0x2D 0x25    
   \              0x75 0x2D    
   \              0x25 0x78    
   \              0x20 0x28    
   \              0x25 0x73    
   \              0x29 0x00
   \        0xE                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_48:
   \        0x0   0x46 0x41          DC8 "FAN1.0"
   \              0x4E 0x31    
   \              0x2E 0x30    
   \              0x00
   \        0x7                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_49:
   \        0x0   0x25 0x73          DC8 "%s-%u-%u (%s)"
   \              0x2D 0x25    
   \              0x75 0x2D    
   \              0x25 0x75    
   \              0x20 0x28    
   \              0x25 0x73    
   \              0x29 0x00
   \        0xE                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_50:
   \        0x0   0x46 0x41          DC8 "FAN1.1"
   \              0x4E 0x31    
   \              0x2E 0x31    
   \              0x00
   \        0x7                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_51:
   \        0x0   0x25 0x2E          DC8 "%.2X:%.2X:%.2X:%.2X:%.2X:%.2X:%.2X:%.2X"
   \              0x32 0x58    
   \              0x3A 0x25    
   \              0x2E 0x32    
   \              0x58 0x3A    
   \              0x25 0x2E    
   \              0x32 0x58    
   \              0x3A 0x25    
   \              0x2E 0x32    
   \              0x58 0x3A    
   \              0x25 0x2E    
   \              0x32 0x58    
   \              0x3A 0x25    
   \              0x2E 0x32    
   \              0x58 0x3A    
   \              0x25 0x2E    
   \              0x32 0x58    
   \              0x3A 0x25    
   \              0x2E 0x32    
   \              0x58 0x00

   \                                 In section .rodata, align 4
   \                     ?_52:
   \        0x0   0x25 0x30          DC8 "%03d-%02d:%02d:%02d"
   \              0x33 0x64    
   \              0x2D 0x25    
   \              0x30 0x32    
   \              0x64 0x3A    
   \              0x25 0x30    
   \              0x32 0x64    
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x64 0x00

   \                                 In section .rodata, align 4
   \                     ?_53:
   \        0x0   0x45 0x76          DC8 "EvtNotify"
   \              0x74 0x4E    
   \              0x6F 0x74    
   \              0x69 0x66    
   \              0x79 0x00
   \        0xA                      DS8 2

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   _alloc_phy_list_element
        24   -> __aeabi_memcpy
        24   -> app_wisun_malloc
        24   -> app_wisun_phy_to_str
       0   _check_phy_mode
      32   _get_phy_cfg_from_ch_cfg_entry
        32   -> _check_phy_mode
        32   -> _get_phy_mode
        32   -> _get_phy_type
        32   -> _is_fsk
        32   -> _is_ofdm
       0   _get_phy_mode
       8   _get_phy_options
       0   _get_phy_type
       0   _get_str_key_by_val_from_enum
       8   _is_fsk
         8   -> _get_phy_type
       8   _is_ofdm
         8   -> _get_phy_type
      16   app_wisun_destroy_phy_list
        16   -> app_wisun_free
      32   app_wisun_filter_phy_list
        32   -- Indirect call
        32   -> _alloc_phy_list_element
       8   app_wisun_free
         8   -> sl_free
      48   app_wisun_get_phy_list
        48   -- Indirect call
        48   -> _alloc_phy_list_element
        48   -> _get_phy_cfg_from_ch_cfg_entry
        48   -> _get_phy_options
      48   app_wisun_mac_addr_to_str
        48   -> app_wisun_malloc
        48   -> snprintf
      16   app_wisun_malloc
        16   -> sl_malloc
      32   app_wisun_phy_to_str
        32   -> app_wisun_free
        32   -> app_wisun_malloc
        32   -> app_wisun_trace_util_reg_domain_to_str
        32   -> snprintf
       8   app_wisun_trace_util_ch_spacing_to_str
         8   -> _get_str_key_by_val_from_enum
       8   app_wisun_trace_util_conn_state_to_str
         8   -> _get_str_key_by_val_from_enum
       8   app_wisun_trace_util_device_type_to_str
         8   -> _get_str_key_by_val_from_enum
      16   app_wisun_trace_util_evt_notfiy_chs
        16   -> osEventFlagsSet
      16   app_wisun_trace_util_evt_notify_clear
        16   -> osEventFlagsClear
      16   app_wisun_trace_util_evt_notify_init
        16   -> osEventFlagsNew
       4   app_wisun_trace_util_evt_notify_subscribe_ch
      16   app_wisun_trace_util_evt_notify_unsubscribe_ch
        16   -> osEventFlagsClear
      24   app_wisun_trace_util_evt_notify_wait
        24   -> osEventFlagsWait
      24   app_wisun_trace_util_get_ip_str
        24   -> app_wisun_malloc
        24   -> ip6tos
       8   app_wisun_trace_util_lfn_profile_to_str
         8   -> _get_str_key_by_val_from_enum
       8   app_wisun_trace_util_nw_size_to_str
         8   -> _get_str_key_by_val_from_enum
       8   app_wisun_trace_util_phy_cfg_type_to_str
         8   -> _get_str_key_by_val_from_enum
       8   app_wisun_trace_util_profile_to_str
         8   -> _get_str_key_by_val_from_enum
       8   app_wisun_trace_util_reg_domain_to_str
         8   -> _get_str_key_by_val_from_enum
      32   app_wisun_trace_util_time_to_str
        32   -> app_wisun_malloc
        32   -> snprintf
      32   app_wisun_trace_util_timestamp_init
        32 __aeabi_uldivmod
       0   sl_wisun_get_conn_param_by_nw_size


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable11
       4  ??DataTable18
       4  ??DataTable18_1
       4  ??DataTable18_10
       4  ??DataTable18_11
       4  ??DataTable18_12
       4  ??DataTable18_13
       4  ??DataTable18_14
       4  ??DataTable18_15
       4  ??DataTable18_16
       4  ??DataTable18_17
       4  ??DataTable18_18
       4  ??DataTable18_19
       4  ??DataTable18_2
       4  ??DataTable18_20
       4  ??DataTable18_21
       4  ??DataTable18_22
       4  ??DataTable18_3
       4  ??DataTable18_4
       4  ??DataTable18_5
       4  ??DataTable18_6
       4  ??DataTable18_7
       4  ??DataTable18_8
       4  ??DataTable18_9
       8  ?_0
       8  ?_1
       4  ?_10
       4  ?_11
       4  ?_12
       4  ?_13
       4  ?_14
       4  ?_15
       4  ?_16
       8  ?_17
       4  ?_18
       4  ?_19
      12  ?_2
       4  ?_20
       4  ?_21
       4  ?_22
       4  ?_23
       4  ?_24
      12  ?_25
      12  ?_26
       8  ?_27
       8  ?_28
       8  ?_29
      16  ?_3
       8  ?_30
      16  ?_31
       8  ?_32
       8  ?_33
       4  ?_34
       8  ?_35
       8  ?_36
       8  ?_37
       8  ?_38
       8  ?_39
      12  ?_4
       8  ?_40
       8  ?_41
       4  ?_42
       4  ?_43
      12  ?_44
       4  ?_45
       4  ?_46
      16  ?_47
       8  ?_48
      16  ?_49
      16  ?_5
       8  ?_50
      40  ?_51
      20  ?_52
      12  ?_53
      20  ?_6
      20  ?_7
      12  ?_8
       4  ?_9
     112  SL_WISUN_PARAMS_PROFILE_LARGE
     112  SL_WISUN_PARAMS_PROFILE_MEDIUM
     112  SL_WISUN_PARAMS_PROFILE_SMALL
     112  SL_WISUN_PARAMS_PROFILE_TEST
      60  _alloc_phy_list_element
      24  _check_phy_mode
      12  _fsk_phy_mode_to_op_mode
     206  _get_phy_cfg_from_ch_cfg_entry
       6  _get_phy_mode
      92  _get_phy_options
       6  _get_phy_type
      30  _get_str_key_by_val_from_enum
      38  _is_fsk
      38  _is_ofdm
      12  _ofdm_phy_map
      32  app_regulation_enum
      56  app_wisun_conn_status_enum
      30  app_wisun_destroy_phy_list
      24  app_wisun_device_type_enum
     112  app_wisun_filter_phy_list
      12  app_wisun_free
     270  app_wisun_get_phy_list
      32  app_wisun_lfn_profile_enum
      72  app_wisun_mac_addr_to_str
      14  app_wisun_malloc
      56  app_wisun_nw_size_enum
      64  app_wisun_phy_channel_spacing_enum
      32  app_wisun_phy_config_type_enum
     144  app_wisun_phy_reg_domain_enum
     118  app_wisun_phy_to_str
      16  app_wisun_trace_util_ch_spacing_to_str
      16  app_wisun_trace_util_conn_state_to_str
      16  app_wisun_trace_util_device_type_to_str
      28  app_wisun_trace_util_evt_notfiy_chs
      30  app_wisun_trace_util_evt_notify_clear
      42  app_wisun_trace_util_evt_notify_init
      48  app_wisun_trace_util_evt_notify_subscribe_ch
      44  app_wisun_trace_util_evt_notify_unsubscribe_ch
      46  app_wisun_trace_util_evt_notify_wait
      62  app_wisun_trace_util_get_ip_str
      16  app_wisun_trace_util_lfn_profile_to_str
      16  app_wisun_trace_util_nw_size_to_str
      16  app_wisun_trace_util_phy_cfg_type_to_str
      16  app_wisun_trace_util_profile_to_str
      16  app_wisun_trace_util_reg_domain_to_str
      54  app_wisun_trace_util_time_to_str
     144  app_wisun_trace_util_timestamp_init
      16  evt_attr
      16  phy_cfg
      52  sl_wisun_get_conn_param_by_nw_size

 
    16 bytes in section .bss
 1'416 bytes in section .rodata
 1'902 bytes in section .text
 
 1'902 bytes of CODE  memory
 1'416 bytes of CONST memory
    16 bytes of DATA  memory

Errors: none
Warnings: none
