###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         29/Mar/2025  15:53:10
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\src\mbedtls_ccm.c
#    Command line      =
#        -f "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\src_11618913122678718351.dir\mbedtls_ccm.o.rsp"
#        ("D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\src\mbedtls_ccm.c"
#        -D DEBUG_EFM=1 -D EFR32FG28B322F1024IM48=1 -D
#        configNUM_SDK_THREAD_LOCAL_STORAGE_POINTERS=2 -D
#        SL_COMPONENT_CATALOG_PRESENT=1 -D
#        MBEDTLS_CONFIG_FILE=<sl_mbedtls_config.h> -D
#        MBEDTLS_PSA_CRYPTO_CONFIG_FILE=<psa_crypto_config.h> -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -D
#        RTT_USE_ASM=0 -lC "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\lst\src_11618913122678718351.dir"
#        --diag_suppress Pa050 -o "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\src_11618913122678718351.dir" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M33 --cmse --cmse
#        -e --fpu=VFPv5_sp --dlib_config "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.2\arm\inc\c\DLib_Config_Normal.h" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\src\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\rail\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\wisun\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\.\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\Device\SiliconLabs\EFR32FG28\Include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_project_info\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\common\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\src\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\CMSIS\Core\Include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\CMSIS\RTOS2\Include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\device_init\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emdrv\common\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emlib\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\iostream\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\config\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\config\preset\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\cpu\include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\ports\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emdrv\nvm3\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\peripheral\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\printf\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\printf\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_psa_driver\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\common\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\ble\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\ieee802154\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\wmbus\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\zwave\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\chip\efr32\efr32xg2x\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\sidewalk\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\pa-conversions\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\pa-conversions\efr32xg28\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\rail_util_pti\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\se_manager\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\se_manager\src\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\segger\systemview\SEGGER\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\silicon_labs\silabs_core\memory_manager\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\common\toolchain\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\system\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_core\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_setting\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\cli_util\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\event_manager\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\ns_list\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\ping\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\nanostack\nanostack-libservice\mbed-client-libservice\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\udp_client\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\sleeptimer\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\plugin\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\stack\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\stack\inc\socket\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\autogen\\" -On
#        --use_c++_inline) --dependencies=n "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\src_11618913122678718351.dir\mbedtls_ccm.o.iar_deps"
#    Locale            =  C
#    List file         =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\lst\src_11618913122678718351.dir\mbedtls_ccm.lst
#    Object file       =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\src_11618913122678718351.dir\mbedtls_ccm.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\src\mbedtls_ccm.c
      1          /***************************************************************************//**
      2           * @file
      3           * @brief AES-CCM abstraction based on PSA accelerators
      4           *******************************************************************************
      5           * # License
      6           * <b>Copyright 2021 Silicon Laboratories Inc. www.silabs.com</b>
      7           *******************************************************************************
      8           *
      9           * SPDX-License-Identifier: Zlib
     10           *
     11           * The licensor of this software is Silicon Laboratories Inc.
     12           *
     13           * This software is provided 'as-is', without any express or implied
     14           * warranty. In no event will the authors be held liable for any damages
     15           * arising from the use of this software.
     16           *
     17           * Permission is granted to anyone to use this software for any purpose,
     18           * including commercial applications, and to alter it and redistribute it
     19           * freely, subject to the following restrictions:
     20           *
     21           * 1. The origin of this software must not be misrepresented; you must not
     22           *    claim that you wrote the original software. If you use this software
     23           *    in a product, an acknowledgment in the product documentation would be
     24           *    appreciated but is not required.
     25           * 2. Altered source versions must be plainly marked as such, and must not be
     26           *    misrepresented as being the original software.
     27           * 3. This notice may not be removed or altered from any source distribution.
     28           *
     29           ******************************************************************************/
     30          
     31          /**
     32           * This file includes an alternative implementation of various functions in
     33           * ccm.c, using the accelerators incorporated in devices from Silicon Labs.
     34           *
     35           * This alternative implementation calls the PSA Crypto drivers provided
     36           * by Silicon Labs. For details on these drivers, see \ref sl_psa_drivers.
     37           */
     38          
     39          #include <mbedtls/build_info.h>
     40          
     41          #if defined(MBEDTLS_AES_C) && defined(MBEDTLS_CCM_C) && defined(MBEDTLS_CCM_ALT)
     42          
     43          #include "mbedtls/ccm.h"
     44          #include "mbedtls/error.h"
     45          
     46          #if defined(MBEDTLS_PLATFORM_C)
     47          #include "mbedtls/platform.h"
     48          #else
     49          #include <stdlib.h>
     50          #define mbedtls_calloc     calloc
     51          #define mbedtls_free       free
     52          #if defined(MBEDTLS_SELF_TEST)
     53          #include <stdio.h>
     54          #define mbedtls_printf     printf
     55          #endif /* MBEDTLS_SELF_TEST */
     56          #endif /* MBEDTLS_PLATFORM_C */
     57          
     58          #include "psa/crypto.h"
     59          
     60          #include "em_device.h"
     61          
     62          #if defined(SEMAILBOX_PRESENT)
     63          #include "sli_se_transparent_functions.h"
     64          #define AEAD_IMPLEMENTATION_PRESENT
     65          #define SLI_DEVICE_HAS_AES_192
     66          #define AEAD_ENCRYPT_TAG_FCT    sli_se_driver_aead_encrypt_tag
     67          #define AEAD_DECRYPT_TAG_FCT    sli_se_driver_aead_decrypt_tag
     68          #elif defined(CRYPTO_PRESENT)
     69          #include "sli_crypto_transparent_functions.h"
     70          #define AEAD_IMPLEMENTATION_PRESENT
     71          #define AEAD_ENCRYPT_TAG_FCT    sli_crypto_transparent_aead_encrypt_tag
     72          #define AEAD_DECRYPT_TAG_FCT    sli_crypto_transparent_aead_decrypt_tag
     73          #elif defined(CRYPTOACC_PRESENT)
     74          #include "sli_cryptoacc_transparent_functions.h"
     75          #define AEAD_IMPLEMENTATION_PRESENT
     76          #define SLI_DEVICE_HAS_AES_192
     77          #define AEAD_ENCRYPT_TAG_FCT    sli_cryptoacc_transparent_aead_encrypt_tag
     78          #define AEAD_DECRYPT_TAG_FCT    sli_cryptoacc_transparent_aead_decrypt_tag
     79          #elif defined(SLI_CRYPTOACC_PRESENT_SI91X)
     80          #include "sli_si91x_crypto_driver_functions.h"
     81          #define AEAD_IMPLEMENTATION_PRESENT
     82          #define AEAD_ENCRYPT_TAG_FCT    sl_si91x_crypto_aead_encrypt
     83          #define AEAD_DECRYPT_TAG_FCT    sl_si91x_crypto_aead_decrypt
     84          #endif
     85          
     86          #if defined(AEAD_IMPLEMENTATION_PRESENT)
     87          
     88          #include <string.h>
     89          
     90          static int psa_status_to_mbedtls(psa_status_t status)
     91          {
     92            switch ( status ) {
     93              case PSA_SUCCESS:
     94                return 0;
     95              case PSA_ERROR_INVALID_SIGNATURE:
     96                return MBEDTLS_ERR_CCM_AUTH_FAILED;
     97              case PSA_ERROR_HARDWARE_FAILURE:
     98                return MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED;
     99              case PSA_ERROR_NOT_SUPPORTED:
    100                return MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED;
    101              default:
    102                return MBEDTLS_ERR_CCM_BAD_INPUT;
    103            }
    104          }
    105          
    106          /*
    107           * Initialize CCM context
    108           */
    109          void mbedtls_ccm_init(mbedtls_ccm_context *ctx)
    110          {
    111            if ( ctx == NULL ) {
    112              return;
    113            }
    114          
    115            memset(ctx, 0, sizeof(mbedtls_ccm_context) );
    116          }
    117          
    118          /*
    119           * Clear CCM context
    120           */
    121          void mbedtls_ccm_free(mbedtls_ccm_context *ctx)
    122          {
    123            if ( ctx == NULL ) {
    124              return;
    125            }
    126          
    127            memset(ctx, 0, sizeof(mbedtls_ccm_context) );
    128          }
    129          
    130          /*
    131           * CCM key schedule
    132           */
    133          int mbedtls_ccm_setkey(mbedtls_ccm_context *ctx,
    134                                 mbedtls_cipher_id_t cipher,
    135                                 const unsigned char *key,
    136                                 unsigned int keybits)
    137          {
    138            if (ctx == NULL || key == NULL) {
    139              return MBEDTLS_ERR_CCM_BAD_INPUT;
    140            }
    141          
    142            memset(ctx, 0, sizeof(mbedtls_ccm_context) );
    143          
    144            if ( cipher != MBEDTLS_CIPHER_ID_AES ) {
    145              return MBEDTLS_ERR_CCM_BAD_INPUT;
    146            }
    147          
    148            if ( (128UL != keybits) && (192UL != keybits) && (256UL != keybits) ) {
    149              /* Unsupported key size */
    150              return MBEDTLS_ERR_CCM_BAD_INPUT;
    151            }
    152          
    153            #if !defined(SLI_DEVICE_HAS_AES_192)
    154            if (192UL == keybits) {
    155              return MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED;
    156            }
    157            #endif
    158          
    159            ctx->keybits = keybits;
    160            memcpy(ctx->key, key, keybits / 8);
    161          
    162            return 0;
    163          }
    164          
    165          int mbedtls_ccm_encrypt_and_tag(mbedtls_ccm_context *ctx, size_t length,
    166                                          const unsigned char *iv, size_t iv_len,
    167                                          const unsigned char *add, size_t add_len,
    168                                          const unsigned char *input, unsigned char *output,
    169                                          unsigned char *tag, size_t tag_len)
    170          {
    171            // 'Regular' CCM always outputs a tag of at least 4 bytes
    172            if (tag_len < 4) {
    173              return MBEDTLS_ERR_CCM_BAD_INPUT;
    174            }
    175          
    176            return mbedtls_ccm_star_encrypt_and_tag(ctx, length, iv, iv_len, add, add_len,
    177                                                    input, output, tag, tag_len);
    178          }
    179          
    180          int mbedtls_ccm_auth_decrypt(mbedtls_ccm_context *ctx, size_t length,
    181                                       const unsigned char *iv, size_t iv_len,
    182                                       const unsigned char *add, size_t add_len,
    183                                       const unsigned char *input, unsigned char *output,
    184                                       const unsigned char *tag, size_t tag_len)
    185          {
    186            // 'Regular' CCM always verifies a tag of at least 4 bytes
    187            if (tag_len < 4) {
    188              return MBEDTLS_ERR_CCM_BAD_INPUT;
    189            }
    190          
    191            return mbedtls_ccm_star_auth_decrypt(ctx, length, iv, iv_len, add, add_len,
    192                                                 input, output, tag, tag_len);
    193          }
    194          
    195          int mbedtls_ccm_star_encrypt_and_tag(mbedtls_ccm_context *ctx, size_t length,
    196                                               const unsigned char *iv, size_t iv_len,
    197                                               const unsigned char *add, size_t add_len,
    198                                               const unsigned char *input, unsigned char *output,
    199                                               unsigned char *tag, size_t tag_len)
    200          {
    201            if ( ctx == NULL || iv == NULL || iv_len == 0
    202                 || (add_len > 0 && add == NULL) || add_len >= 0xFF00
    203                 || (length > 0 && input == NULL) || length >= 0xFF00
    204                 || (length > 0 && output == NULL)
    205                 || (tag_len > 0 && tag == NULL) ) {
    206              return MBEDTLS_ERR_CCM_BAD_INPUT;
    207            }
    208          
    209            psa_status_t psa_status;
    210            psa_key_attributes_t attr = PSA_KEY_ATTRIBUTES_INIT;
    211            psa_set_key_type(&attr, PSA_KEY_TYPE_AES);
    212            psa_set_key_bits(&attr, ctx->keybits);
    213          
    214            if (tag_len > 0) {
    215              psa_status = AEAD_ENCRYPT_TAG_FCT(
    216                &attr, ctx->key, ctx->keybits / 8,
    217                PSA_ALG_AEAD_WITH_SHORTENED_TAG(PSA_ALG_CCM, tag_len),
    218                iv, iv_len,
    219                add, add_len,
    220                input, length,
    221                output, length, &length,
    222                tag, tag_len, &tag_len);
    223            } else {
    224              (void) tag;
    225              uint8_t dummy_tag[4];
    226              psa_status = AEAD_ENCRYPT_TAG_FCT(
    227                &attr, ctx->key, ctx->keybits / 8,
    228                PSA_ALG_AEAD_WITH_SHORTENED_TAG(PSA_ALG_CCM, sizeof(dummy_tag)),
    229                iv, iv_len,
    230                add, add_len,
    231                input, length,
    232                output, length, &length,
    233                dummy_tag, sizeof(dummy_tag), &tag_len);
    234            }
    235          
    236            psa_reset_key_attributes(&attr);
    237            return psa_status_to_mbedtls(psa_status);
    238          }
    239          
    240          int mbedtls_ccm_star_auth_decrypt(mbedtls_ccm_context *ctx, size_t length,
    241                                            const unsigned char *iv, size_t iv_len,
    242                                            const unsigned char *add, size_t add_len,
    243                                            const unsigned char *input, unsigned char *output,
    244                                            const unsigned char *tag, size_t tag_len)
    245          {
    246            if ( ctx == NULL || iv == NULL || iv_len == 0
    247                 || (add_len > 0 && add == NULL) || add_len >= 0xFF00
    248                 || (length > 0 && input == NULL) || length >= 0xFF00
    249                 || (length > 0 && output == NULL)
    250                 || (tag_len > 0 && tag == NULL) ) {
    251              return MBEDTLS_ERR_CCM_BAD_INPUT;
    252            }
    253          
    254            psa_status_t psa_status;
    255            psa_key_attributes_t attr = PSA_KEY_ATTRIBUTES_INIT;
    256            psa_set_key_type(&attr, PSA_KEY_TYPE_AES);
    257            psa_set_key_bits(&attr, ctx->keybits);
    258          
    259            if (tag_len > 0) {
    260              psa_status = AEAD_DECRYPT_TAG_FCT(
    261                &attr, ctx->key, ctx->keybits / 8,
    262                PSA_ALG_AEAD_WITH_SHORTENED_TAG(PSA_ALG_CCM, tag_len),
    263                iv, iv_len,
    264                add, add_len,
    265                input, length,
    266                tag, tag_len,
    267                output, length, &length);
    268            } else {
    269              // CCM(*) is symmetric in encryption/decryption of the data, so if we don't have
    270              // to verify a tag we can transform ciphertext to plaintext by running an
    271              // 'encrypt' operation and throwing away the tag.
    272              (void) tag;
    273              uint8_t dummy_tag[4];
    274              psa_status = AEAD_ENCRYPT_TAG_FCT(
    275                &attr, ctx->key, ctx->keybits / 8,
    276                PSA_ALG_AEAD_WITH_SHORTENED_TAG(PSA_ALG_CCM, sizeof(dummy_tag)),
    277                iv, iv_len,
    278                add, add_len,
    279                input, length,
    280                output, length, &length,
    281                dummy_tag, sizeof(dummy_tag), &tag_len);
    282            }
    283          
    284            psa_reset_key_attributes(&attr);
    285            return psa_status_to_mbedtls(psa_status);
    286          }
    287          
    288          /* Provide stubs for linkage purposes. To be implemented when implementing
    289           * support for multipart AEAD in the PSA drivers, see [PSEC-3221] */
    290          int mbedtls_ccm_starts(mbedtls_ccm_context *ctx,
    291                                 int mode,
    292                                 const unsigned char *iv,
    293                                 size_t iv_len)
    294          {
    295            (void) ctx;
    296            (void) mode;
    297            (void) iv;
    298            (void) iv_len;
    299            return MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED;
    300          }
    301          
    302          int mbedtls_ccm_set_lengths(mbedtls_ccm_context *ctx,
    303                                      size_t total_ad_len,
    304                                      size_t plaintext_len,
    305                                      size_t tag_len)
    306          {
    307            (void) ctx;
    308            (void) total_ad_len;
    309            (void) plaintext_len;
    310            (void) tag_len;
    311            return MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED;
    312          }
    313          
    314          int mbedtls_ccm_update_ad(mbedtls_ccm_context *ctx,
    315                                    const unsigned char *ad,
    316                                    size_t ad_len)
    317          {
    318            (void) ctx;
    319            (void) ad;
    320            (void) ad_len;
    321            return MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED;
    322          }
    323          
    324          int mbedtls_ccm_update(mbedtls_ccm_context *ctx,
    325                                 const unsigned char *input, size_t input_len,
    326                                 unsigned char *output, size_t output_size,
    327                                 size_t *output_len)
    328          {
    329            (void) ctx;
    330            (void) input;
    331            (void) input_len;
    332            (void) output;
    333            (void) output_size;
    334            (void) output_len;
    335            return MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED;
    336          }
    337          
    338          int mbedtls_ccm_finish(mbedtls_ccm_context *ctx,
    339                                 unsigned char *tag, size_t tag_len)
    340          {
    341            (void) ctx;
    342            (void) tag;
    343            (void) tag_len;
    344            return MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED;
    345          }
    346          
    347          #endif /* AEAD_IMPLEMENTATION_PRESENT */
    348          
    349          #endif /* MBEDTLS_AES_C && MBEDTLS_CCM_C && MBEDTLS_CCM_ALT */


 
 
 0 bytes of memory

Errors: none
Warnings: none
