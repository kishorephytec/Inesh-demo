###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         29/Mar/2025  15:53:23
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\ports\source\generic\arm_cpu_dwt_ts.c
#    Command line      =
#        -f "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\generic_16260127170197122828.dir\arm_cpu_dwt_ts.o.rsp"
#        ("D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\ports\source\generic\arm_cpu_dwt_ts.c"
#        -D DEBUG_EFM=1 -D EFR32FG28B322F1024IM48=1 -D
#        configNUM_SDK_THREAD_LOCAL_STORAGE_POINTERS=2 -D
#        SL_COMPONENT_CATALOG_PRESENT=1 -D
#        MBEDTLS_CONFIG_FILE=<sl_mbedtls_config.h> -D
#        MBEDTLS_PSA_CRYPTO_CONFIG_FILE=<psa_crypto_config.h> -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -D
#        RTT_USE_ASM=0 -lC "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\lst\generic_16260127170197122828.dir"
#        --diag_suppress Pa050 -o "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\generic_16260127170197122828.dir"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M33 --cmse --cmse -e --fpu=VFPv5_sp --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        9.2\arm\inc\c\DLib_Config_Normal.h" -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\ports\source\generic\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\rail\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\wisun\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\.\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\Device\SiliconLabs\EFR32FG28\Include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_project_info\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\common\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\src\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\CMSIS\Core\Include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\CMSIS\RTOS2\Include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\device_init\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emdrv\common\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emlib\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\iostream\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\config\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\config\preset\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\cpu\include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\ports\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emdrv\nvm3\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\peripheral\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\printf\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\printf\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_psa_driver\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\common\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\ble\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\ieee802154\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\wmbus\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\zwave\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\chip\efr32\efr32xg2x\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\sidewalk\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\pa-conversions\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\pa-conversions\efr32xg28\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\rail_util_pti\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\se_manager\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\se_manager\src\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\segger\systemview\SEGGER\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\silicon_labs\silabs_core\memory_manager\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\common\toolchain\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\system\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_core\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_setting\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\cli_util\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\event_manager\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\ns_list\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\ping\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\nanostack\nanostack-libservice\mbed-client-libservice\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\udp_client\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\sleeptimer\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\plugin\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\stack\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\stack\inc\socket\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\autogen\\" -On
#        --use_c++_inline) --dependencies=n "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\generic_16260127170197122828.dir\arm_cpu_dwt_ts.o.iar_deps"
#    Locale            =  C
#    List file         =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\lst\generic_16260127170197122828.dir\arm_cpu_dwt_ts.lst
#    Object file       =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\generic_16260127170197122828.dir\arm_cpu_dwt_ts.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\ports\source\generic\arm_cpu_dwt_ts.c
      1          /***************************************************************************//**
      2           * @file
      3           * @brief CPU Ts Operations BSP
      4           *******************************************************************************
      5           * # License
      6           * <b>Copyright 2018 Silicon Laboratories Inc. www.silabs.com</b>
      7           *******************************************************************************
      8           *
      9           * The licensor of this software is Silicon Laboratories Inc.  Your use of this
     10           * software is governed by the terms of Silicon Labs Master Software License
     11           * Agreement (MSLA) available at
     12           * www.silabs.com/about-us/legal/master-software-license-agreement.  This
     13           * software is distributed to you in Source Code format and is governed by the
     14           * sections of the MSLA applicable to Source Code.
     15           *
     16           ******************************************************************************/
     17          
     18          /********************************************************************************************************
     19           ********************************************************************************************************
     20           *                                             INCLUDE FILES
     21           ********************************************************************************************************
     22           *******************************************************************************************************/
     23          
     24          #include  <cpu/include/cpu.h>
     25          #include  <common/include/lib_def.h>
     26          #include  <common/include/lib_utils.h>
     27          
     28          //                                                                 Third Party Library Includes
     29          #include "em_device.h"
     30          
     31          /********************************************************************************************************
     32           ********************************************************************************************************
     33           *                                             LOCAL DEFINES
     34           ********************************************************************************************************
     35           *******************************************************************************************************/
     36          
     37          #define  CPU_REG_DEMCR             (*(CPU_REG32 *)(0xE000EDFCu))
     38          #define  CPU_REG_DWT_CR            (*(CPU_REG32 *)(0xE0001000u))
     39          #define  CPU_REG_DWT_CYCCNT        (*(CPU_REG32 *)(0xE0001004u))
     40          #define  CPU_REG_DWT_LAR           (*(CPU_REG32 *)(0xE0001FB0u))
     41          #define  CPU_REG_DWT_LSR           (*(CPU_REG32 *)(0xE0001FB4u))
     42          
     43          /********************************************************************************************************
     44           ********************************************************************************************************
     45           *                                           GLOBAL FUNCTIONS
     46           ********************************************************************************************************
     47           *******************************************************************************************************/
     48          
     49          /********************************************************************************************************
     50           *                                           CPU_TS_TmrInit()
     51           *
     52           * Description : Initialize & start CPU timestamp timer.
     53           *
     54           * Argument(s) : none.
     55           *
     56           * Return(s)   : none.
     57           *
     58           * Note(s)     : (1) CPU_TS_TmrInit() is an application function that MUST be defined by the developer
     59           *                   if either of the following CPU features is enabled :
     60           *
     61           *                   (a) CPU timestamps
     62           *                   (b) CPU interrupts disabled time measurements
     63           *
     64           *                   See 'cpu_cfg.h  CPU TIMESTAMP CONFIGURATION  Note #1'
     65           *                     & 'cpu_cfg.h  CPU INTERRUPTS DISABLED TIME MEASUREMENT CONFIGURATION  Note #1a'.
     66           *
     67           *               (2) (a) Timer count values MUST be returned via word-size-configurable 'CPU_TS_TMR'
     68           *                       data type.
     69           *
     70           *                       (1) If timer has more bits, truncate timer values' higher-order bits greater
     71           *                           than the configured 'CPU_TS_TMR' timestamp timer data type word size.
     72           *
     73           *                       (2) Since the timer MUST NOT have less bits than the configured 'CPU_TS_TMR'
     74           *                           timestamp timer data type word size; 'CPU_CFG_TS_TMR_SIZE' MUST be
     75           *                           configured so that ALL bits in 'CPU_TS_TMR' data type are significant.
     76           *
     77           *                           In other words, if timer size is not a binary-multiple of 8-bit octets
     78           *                           (e.g. 20-bits or even 24-bits), then the next lower, binary-multiple
     79           *                           octet word size SHOULD be configured (e.g. to 16-bits).  However, the
     80           *                           minimum supported word size for CPU timestamp timers is 8-bits.
     81           *
     82           *                       See also 'cpu_cfg.h   CPU TIMESTAMP CONFIGURATION  Note #2'
     83           *                              & 'cpu_core.h  CPU TIMESTAMP DATA TYPES     Note #1'.
     84           *
     85           *                   (b) Timer SHOULD be an 'up'  counter whose values increase with each time count.
     86           *
     87           *                   (c) When applicable, timer period SHOULD be less than the typical measured time
     88           *                       but MUST be less than the maximum measured time; otherwise, timer resolution
     89           *                       inadequate to measure desired times.
     90           *
     91           *                   See also 'CPU_TS_TmrRd()  Note #2'.
     92           *
     93           *               (3) This function is an INTERNAL CPU module function & MUST be implemented by application/
     94           *                   BSP function(s) but MUST NOT be called by application function(s).
     95           *******************************************************************************************************/
     96          
     97          #if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
     98          void CPU_TS_TmrInit(void)
     99          {
    100            CPU_INT32U fclk_freq;
    101          
    102            fclk_freq = SystemCoreClockGet();
    103          
    104            CPU_REG_DEMCR |= DEF_BIT_24;                              // Set DEM_CR_TRCENA
    105            CPU_REG_DWT_CYCCNT = 0u;
    106            CPU_REG_DWT_CR |= DEF_BIT_00;                             // Set DWT_CR_CYCCNTENA
    107          
    108            CPU_TS_TmrFreqSet((CPU_TS_TMR_FREQ)fclk_freq);
    109          }
    110          #endif
    111          
    112          /********************************************************************************************************
    113           *                                            CPU_TS_TmrRd()
    114           *
    115           * Description : Get current CPU timestamp timer count value.
    116           *
    117           * Argument(s) : none.
    118           *
    119           * Return(s)   : Timestamp timer count (see Notes #2a & #2b).
    120           *
    121           * Note(s)     : (1) CPU_TS_TmrRd() is an application function that MUST be defined by the developer
    122           *                   if either of the following CPU features is enabled :
    123           *
    124           *                   (a) CPU timestamps
    125           *                   (b) CPU interrupts disabled time measurements
    126           *
    127           *                   See 'cpu_cfg.h  CPU TIMESTAMP CONFIGURATION  Note #1'
    128           *                     & 'cpu_cfg.h  CPU INTERRUPTS DISABLED TIME MEASUREMENT CONFIGURATION  Note #1a'.
    129           *
    130           *               (2) (a) Timer count values MUST be returned via word-size-configurable 'CPU_TS_TMR'
    131           *                       data type.
    132           *
    133           *                       (1) If timer has more bits, truncate timer values' higher-order bits greater
    134           *                           than the configured 'CPU_TS_TMR' timestamp timer data type word size.
    135           *
    136           *                       (2) Since the timer MUST NOT have less bits than the configured 'CPU_TS_TMR'
    137           *                           timestamp timer data type word size; 'CPU_CFG_TS_TMR_SIZE' MUST be
    138           *                           configured so that ALL bits in 'CPU_TS_TMR' data type are significant.
    139           *
    140           *                           In other words, if timer size is not a binary-multiple of 8-bit octets
    141           *                           (e.g. 20-bits or even 24-bits), then the next lower, binary-multiple
    142           *                           octet word size SHOULD be configured (e.g. to 16-bits).  However, the
    143           *                           minimum supported word size for CPU timestamp timers is 8-bits.
    144           *
    145           *                       See also 'cpu_cfg.h   CPU TIMESTAMP CONFIGURATION  Note #2'
    146           *                              & 'cpu_core.h  CPU TIMESTAMP DATA TYPES     Note #1'.
    147           *
    148           *                   (b) Timer SHOULD be an 'up'  counter whose values increase with each time count.
    149           *
    150           *                       (1) If timer is a 'down' counter whose values decrease with each time count,
    151           *                           then the returned timer value MUST be ones-complemented.
    152           *
    153           *                   (c) (1) When applicable, the amount of time measured by CPU timestamps is
    154           *                           calculated by either of the following equations :
    155           *
    156           *                           (A) Time measured  =  Number timer counts  *  Timer period
    157           *
    158           *                                   where
    159           *
    160           *                                       Number timer counts     Number of timer counts measured
    161           *                                       Timer period            Timer's period in some units of
    162           *                                                                   (fractional) seconds
    163           *                                       Time measured           Amount of time measured, in same
    164           *                                                                   units of (fractional) seconds
    165           *                                                                   as the Timer period
    166           *
    167           *                                                  Number timer counts
    168           *                           (B) Time measured  =  ---------------------
    169           *                                                    Timer frequency
    170           *
    171           *                                   where
    172           *
    173           *                                       Number timer counts     Number of timer counts measured
    174           *                                       Timer frequency         Timer's frequency in some units
    175           *                                                                   of counts per second
    176           *                                       Time measured           Amount of time measured, in seconds
    177           *
    178           *                       (2) Timer period SHOULD be less than the typical measured time but MUST be less
    179           *                           than the maximum measured time; otherwise, timer resolution inadequate to
    180           *                           measure desired times.
    181           *
    182           *               (3) This function is an INTERNAL CPU module function & MUST be implemented by application/
    183           *                   BSP function(s) but SHOULD NOT be called by application function(s).
    184           *******************************************************************************************************/
    185          
    186          #if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
    187          CPU_TS_TMR CPU_TS_TmrRd(void)
    188          {
    189            CPU_TS_TMR ts_tmr_cnts;
    190          
    191            ts_tmr_cnts = (CPU_TS_TMR)CPU_REG_DWT_CYCCNT;
    192          
    193            return (ts_tmr_cnts);
    194          }
    195          #endif
    196          
    197          /********************************************************************************************************
    198           *                                          CPU_TS32_to_uSec()
    199           *
    200           * Description : Convert a 32-bit CPU timestamp from timer counts to microseconds.
    201           *
    202           * Argument(s) : ts_cnts   CPU timestamp (in timestamp timer counts [see Note #2aA]).
    203           *
    204           * Return(s)   : Converted CPU timestamp (in microseconds           [see Note #2aD]).
    205           *
    206           * Note(s)     : (1) CPU_TS32_to_uSec()/CPU_TS64_to_uSec() are application/BSP functions that MAY be
    207           *                   optionally defined by the developer when either of the following CPU features is
    208           *                   enabled :
    209           *
    210           *                   (a) CPU timestamps
    211           *                   (b) CPU interrupts disabled time measurements
    212           *
    213           *                   See 'cpu_cfg.h  CPU TIMESTAMP CONFIGURATION  Note #1'
    214           *                     & 'cpu_cfg.h  CPU INTERRUPTS DISABLED TIME MEASUREMENT CONFIGURATION  Note #1a'.
    215           *
    216           *               (2) (a) The amount of time measured by CPU timestamps is calculated by either of
    217           *                       the following equations :
    218           *
    219           *                                                                        10^6 microseconds
    220           *                       (1) Time measured  =   Number timer counts   *  -------------------  *  Timer period
    221           *                                                                            1 second
    222           *
    223           *                                              Number timer counts       10^6 microseconds
    224           *                       (2) Time measured  =  ---------------------  *  -------------------
    225           *                                                Timer frequency             1 second
    226           *
    227           *                               where
    228           *
    229           *                                   (A) Number timer counts     Number of timer counts measured
    230           *                                   (B) Timer frequency         Timer's frequency in some units
    231           *                                                                   of counts per second
    232           *                                   (C) Timer period            Timer's period in some units of
    233           *                                                                   (fractional)  seconds
    234           *                                   (D) Time measured           Amount of time measured,
    235           *                                                                   in microseconds
    236           *
    237           *                   (b) Timer period SHOULD be less than the typical measured time but MUST be less
    238           *                       than the maximum measured time; otherwise, timer resolution inadequate to
    239           *                       measure desired times.
    240           *
    241           *                   (c) Specific implementations may convert any number of CPU_TS32 or CPU_TS64 bits
    242           *                       -- up to 32 or 64, respectively -- into microseconds.
    243           *******************************************************************************************************/
    244          
    245          #if (CPU_CFG_TS_32_EN == DEF_ENABLED)
    246          CPU_INT64U CPU_TS32_to_uSec(CPU_TS32 ts_cnts)
    247          {
    248            CPU_INT64U ts_us;
    249            CPU_INT64U fclk_freq;
    250          
    251            fclk_freq = SystemCoreClockGet();
    252            ts_us = ts_cnts / (fclk_freq / DEF_TIME_NBR_uS_PER_SEC);
    253          
    254            return (ts_us);
    255          }
    256          #endif
    257          
    258          /********************************************************************************************************
    259           *                                          CPU_TS64_to_uSec()
    260           *
    261           * Description : Convert a 64-bit CPU timestamp from timer counts to microseconds.
    262           *
    263           * Argument(s) : ts_cnts   CPU timestamp (in timestamp timer counts [see Note #2aA]).
    264           *
    265           * Return(s)   : Converted CPU timestamp (in microseconds           [see Note #2aD]).
    266           *
    267           * Note(s)     : (1) CPU_TS32_to_uSec()/CPU_TS64_to_uSec() are application/BSP functions that MAY be
    268           *                   optionally defined by the developer when either of the following CPU features is
    269           *                   enabled :
    270           *
    271           *                   (a) CPU timestamps
    272           *                   (b) CPU interrupts disabled time measurements
    273           *
    274           *                   See 'cpu_cfg.h  CPU TIMESTAMP CONFIGURATION  Note #1'
    275           *                     & 'cpu_cfg.h  CPU INTERRUPTS DISABLED TIME MEASUREMENT CONFIGURATION  Note #1a'.
    276           *
    277           *               (2) (a) The amount of time measured by CPU timestamps is calculated by either of
    278           *                       the following equations :
    279           *
    280           *                                                                        10^6 microseconds
    281           *                       (1) Time measured  =   Number timer counts   *  -------------------  *  Timer period
    282           *                                                                            1 second
    283           *
    284           *                                              Number timer counts       10^6 microseconds
    285           *                       (2) Time measured  =  ---------------------  *  -------------------
    286           *                                                Timer frequency             1 second
    287           *
    288           *                               where
    289           *
    290           *                                   (A) Number timer counts     Number of timer counts measured
    291           *                                   (B) Timer frequency         Timer's frequency in some units
    292           *                                                                   of counts per second
    293           *                                   (C) Timer period            Timer's period in some units of
    294           *                                                                   (fractional)  seconds
    295           *                                   (D) Time measured           Amount of time measured,
    296           *                                                                   in microseconds
    297           *
    298           *                   (b) Timer period SHOULD be less than the typical measured time but MUST be less
    299           *                       than the maximum measured time; otherwise, timer resolution inadequate to
    300           *                       measure desired times.
    301           *
    302           *                   (c) Specific implementations may convert any number of CPU_TS32 or CPU_TS64 bits
    303           *                       -- up to 32 or 64, respectively -- into microseconds.
    304           *******************************************************************************************************/
    305          
    306          #if (CPU_CFG_TS_64_EN == DEF_ENABLED)
    307          CPU_INT64U CPU_TS64_to_uSec(CPU_TS64 ts_cnts)
    308          {
    309            CPU_INT64U ts_us;
    310            CPU_INT64U fclk_freq;
    311          
    312            fclk_freq = SystemCoreClockGet();
    313            ts_us = ts_cnts / (fclk_freq / DEF_TIME_NBR_uS_PER_SEC);
    314          
    315            return (ts_us);
    316          }
    317          #endif


 
 
 0 bytes of memory

Errors: none
Warnings: none
