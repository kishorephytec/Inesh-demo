###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         21/Jan/2025  17:21:04
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\src\sl_cli_command.c
#    Command line                 =
#        -f
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\ewarm-iar\obj\src_15860922140008369996.dir\sl_cli_command.o.rsp
#        (C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\src\sl_cli_command.c
#        -D DEBUG_EFM=1 -D EFR32FG28B322F1024IM48=1 -D
#        configNUM_SDK_THREAD_LOCAL_STORAGE_POINTERS=2 -D
#        SL_COMPONENT_CATALOG_PRESENT=1 -D
#        MBEDTLS_CONFIG_FILE=<sl_mbedtls_config.h> -D
#        MBEDTLS_PSA_CRYPTO_CONFIG_FILE=<psa_crypto_config.h> -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -D
#        RTT_USE_ASM=0 -lC
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\ewarm-iar\lst\src_15860922140008369996.dir
#        --diag_suppress Pa050 -o
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\ewarm-iar\obj\src_15860922140008369996.dir
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M33 --cmse --cmse -e --fpu=VFPv5_sp --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        9.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\src\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\autogen\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\config\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\config\rail\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\config\wisun\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\.\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\Device\SiliconLabs\EFR32FG28\Include\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_project_info\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\common\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\src\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\CMSIS\Core\Include\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\CMSIS\RTOS2\Include\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\device_init\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\emdrv\common\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\emlib\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\iostream\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\config\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\config\preset\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\include\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\source\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\include\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\cpu\include\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\ports\source\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\source\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\include\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\emdrv\nvm3\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\peripheral\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\printf\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\printf\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_psa_driver\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\common\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\wmbus\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\sidewalk\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\pa-conversions\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\pa-conversions\efr32xg28\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\rail_util_pti\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\se_manager\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\se_manager\src\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\segger\systemview\SEGGER\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\util\silicon_labs\silabs_core\memory_manager\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\common\toolchain\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\system\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_core\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_setting\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\cli_util\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\event_manager\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\ns_list\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\ping\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\nanostack\nanostack-libservice\mbed-client-libservice\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\udp_client\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\sleeptimer\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\plugin\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\stack\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\stack\inc\socket\
#        -On --use_c++_inline) --dependencies=n
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\ewarm-iar\obj\src_15860922140008369996.dir\sl_cli_command.o.iar_deps
#    Locale                       =  C
#    List file                    =
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\ewarm-iar\lst\src_15860922140008369996.dir\sl_cli_command.lst
#    Object file                  =
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\ewarm-iar\obj\src_15860922140008369996.dir\sl_cli_command.o
#    Runtime model:                  
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_file_descriptor     =  0
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#
###############################################################################

C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\src\sl_cli_command.c
      1          /***************************************************************************//**
      2           * @file
      3           * @brief Functions to find and execute cli commands.
      4           * @version x.y.z
      5           *******************************************************************************
      6           * # License
      7           * <b>Copyright 2018 Silicon Laboratories Inc. www.silabs.com</b>
      8           *******************************************************************************
      9           *
     10           * SPDX-License-Identifier: Zlib
     11           *
     12           * The licensor of this software is Silicon Laboratories Inc.
     13           *
     14           * This software is provided 'as-is', without any express or implied
     15           * warranty. In no event will the authors be held liable for any damages
     16           * arising from the use of this software.
     17           *
     18           * Permission is granted to anyone to use this software for any purpose,
     19           * including commercial applications, and to alter it and redistribute it
     20           * freely, subject to the following restrictions:
     21           *
     22           * 1. The origin of this software must not be misrepresented; you must not
     23           *    claim that you wrote the original software. If you use this software
     24           *    in a product, an acknowledgment in the product documentation would be
     25           *    appreciated but is not required.
     26           * 2. Altered source versions must be plainly marked as such, and must not be
     27           *    misrepresented as being the original software.
     28           * 3. This notice may not be removed or altered from any source distribution.
     29           *
     30           ******************************************************************************/
     31          
     32          #include "sl_cli.h"
     33          #include "sl_cli_command.h"
     34          #include "sl_cli_tokenize.h"
     35          #include "sli_cli_io.h"
     36          #include "sli_cli_arguments.h"
     37          #include "sl_string.h"
     38          #include "sl_common.h"
     39          #include <stdlib.h>
     40          #include <string.h>
     41          #include <ctype.h>
     42          #include <math.h>
     43          #include <stdio.h>
     44          
     45          #define SL_CLI_TERMINAL_LINE_LENGTH  (80)
     46          
     47          /***************************************************************************//**
     48           * @brief
     49           *   Hook executed before the command. Unless specifically redefined to
     50           *   something, this hook does nothing.
     51           *
     52           * @param[in] arguments     The arguments passed to the command handler.
     53           *
     54           ******************************************************************************/

   \                                 In section .text, align 2
     55          SL_WEAK void sli_cli_pre_cmd_hook(sl_cli_command_arg_t* arguments)
     56          {
     57            (void) arguments;
     58          }
   \                     sli_cli_pre_cmd_hook: (+1)
   \        0x0   0x4770             BX       LR
     59          
     60          /***************************************************************************//**
     61           * @brief
     62           *   Hook executed after the command. Unless specifically redefined to
     63           *   something, this hook does nothing.
     64           *
     65           * @param[in] arguments     The arguments passed to the command handler.
     66           *
     67           ******************************************************************************/

   \                                 In section .text, align 2
     68          SL_WEAK void sli_cli_post_cmd_hook(sl_cli_command_arg_t* arguments)
     69          {
     70            (void) arguments;
     71          }
   \                     sli_cli_post_cmd_hook: (+1)
   \        0x0   0x4770             BX       LR
     72          
     73          /***************************************************************************//**
     74           * @brief
     75           *   Compare two command strings. If the comparison shall be case sensitive or
     76           *   not can be configured with SL_CLI_IGNORE_COMMAND_CASE.
     77           *
     78           * @param[in] a         String to compare.
     79           *
     80           * @param[in] b         String to compare.
     81           *
     82           * @return              An integer greater than, or less than 0 if the strings
     83           *                      are not equal. 0 if the strings are equal.
     84           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     85          static int cmd_strcmp(const char *a, const char *b)
     86          {
   \                     cmd_strcmp: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0005             MOVS     R5,R0
   \        0x4   0x000C             MOVS     R4,R1
     87          #if SL_CLI_IGNORE_COMMAND_CASE
     88            return sl_strcasecmp(a, b);
   \        0x6   0x0021             MOVS     R1,R4
   \        0x8   0x0028             MOVS     R0,R5
   \        0xA   0x.... 0x....      BL       sl_strcasecmp
   \        0xE   0xBD32             POP      {R1,R4,R5,PC}
     89          #else
     90            return strcmp(a, b);
     91          #endif
     92          }
     93          
     94          #if SL_CLI_HELP_DESCRIPTION_ENABLED
     95          /***************************************************************************//**
     96           * @brief
     97           *   Print a string and append spaces until the total length is reached.
     98           *
     99           * @param[in] string
    100           *   A pointer to the string that shall be printed.
    101           *
    102           * @param[in] total_lenght
    103           *   The total length of the string. If the length of the string is equal or
    104           *  larger than total_length, no spaces are appended.
    105           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    106          static void print_and_pad(const char *string,
    107                                    size_t total_length)
    108          {
   \                     print_and_pad: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0006             MOVS     R6,R0
   \        0x4   0x000C             MOVS     R4,R1
    109            size_t string_length = strlen(string);
   \        0x6   0x0030             MOVS     R0,R6
   \        0x8   0x.... 0x....      BL       strlen
   \        0xC   0x0005             MOVS     R5,R0
    110            sli_cli_io_printf(string);
   \        0xE   0x0030             MOVS     R0,R6
   \       0x10   0x.... 0x....      BL       sli_cli_io_printf
    111            for (; string_length < total_length; string_length++) {
   \                     ??print_and_pad_0: (+1)
   \       0x14   0x42A5             CMP      R5,R4
   \       0x16   0xD204             BCS.N    ??print_and_pad_1
    112              sli_cli_io_printf(" ");
   \       0x18   0x....             ADR.N    R0,??DataTable3
   \       0x1A   0x.... 0x....      BL       sli_cli_io_printf
    113            }
   \       0x1E   0x1C6D             ADDS     R5,R5,#+1
   \       0x20   0xE7F8             B.N      ??print_and_pad_0
    114          }
   \                     ??print_and_pad_1: (+1)
   \       0x22   0xBD70             POP      {R4-R6,PC}
    115          
    116          /***************************************************************************//**
    117           * @brief
    118           *   Get a string representation of an argument type
    119           *
    120           * @param[in] type
    121           *   The argument type to be translated.
    122           *
    123           * @return
    124           *   A pointer to the string.
    125           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    126          static const char *get_arg_type_string(sl_cli_argument_type_t type)
    127          {
   \                     get_arg_type_string: (+1)
   \        0x0   0x0001             MOVS     R1,R0
    128            const char *str;
    129          
    130            switch (type) {
   \        0x2   0x0008             MOVS     R0,R1
   \        0x4   0xB2C0             UXTB     R0,R0
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD026             BEQ.N    ??get_arg_type_string_0
   \        0xA   0x2801             CMP      R0,#+1
   \        0xC   0xD027             BEQ.N    ??get_arg_type_string_1
   \        0xE   0x2802             CMP      R0,#+2
   \       0x10   0xD028             BEQ.N    ??get_arg_type_string_2
   \       0x12   0x2803             CMP      R0,#+3
   \       0x14   0xD029             BEQ.N    ??get_arg_type_string_3
   \       0x16   0x2804             CMP      R0,#+4
   \       0x18   0xD02A             BEQ.N    ??get_arg_type_string_4
   \       0x1A   0x2805             CMP      R0,#+5
   \       0x1C   0xD02B             BEQ.N    ??get_arg_type_string_5
   \       0x1E   0x2806             CMP      R0,#+6
   \       0x20   0xD02C             BEQ.N    ??get_arg_type_string_6
   \       0x22   0x2807             CMP      R0,#+7
   \       0x24   0xD02D             BEQ.N    ??get_arg_type_string_7
   \       0x26   0x2810             CMP      R0,#+16
   \       0x28   0xD02D             BEQ.N    ??get_arg_type_string_8
   \       0x2A   0x2811             CMP      R0,#+17
   \       0x2C   0xD02E             BEQ.N    ??get_arg_type_string_9
   \       0x2E   0x2812             CMP      R0,#+18
   \       0x30   0xD02F             BEQ.N    ??get_arg_type_string_10
   \       0x32   0x2813             CMP      R0,#+19
   \       0x34   0xD030             BEQ.N    ??get_arg_type_string_11
   \       0x36   0x2814             CMP      R0,#+20
   \       0x38   0xD031             BEQ.N    ??get_arg_type_string_12
   \       0x3A   0x2815             CMP      R0,#+21
   \       0x3C   0xD032             BEQ.N    ??get_arg_type_string_13
   \       0x3E   0x2816             CMP      R0,#+22
   \       0x40   0xD033             BEQ.N    ??get_arg_type_string_14
   \       0x42   0x2817             CMP      R0,#+23
   \       0x44   0xD034             BEQ.N    ??get_arg_type_string_15
   \       0x46   0x2820             CMP      R0,#+32
   \       0x48   0xD035             BEQ.N    ??get_arg_type_string_16
   \       0x4A   0x2821             CMP      R0,#+33
   \       0x4C   0xD036             BEQ.N    ??get_arg_type_string_17
   \       0x4E   0x28FE             CMP      R0,#+254
   \       0x50   0xD037             BEQ.N    ??get_arg_type_string_18
   \       0x52   0x28FF             CMP      R0,#+255
   \       0x54   0xD038             BEQ.N    ??get_arg_type_string_19
   \       0x56   0xE039             B.N      ??get_arg_type_string_20
    131              case SL_CLI_ARG_UINT8:
    132                str = "uint8";
   \                     ??get_arg_type_string_0: (+1)
   \       0x58   0x.... 0x....      LDR.W    R0,??DataTable5_1
    133                break;
   \       0x5C   0xE038             B.N      ??get_arg_type_string_21
    134              case SL_CLI_ARG_UINT16:
    135                str = "uint16";
   \                     ??get_arg_type_string_1: (+1)
   \       0x5E   0x.... 0x....      LDR.W    R0,??DataTable5_2
    136                break;
   \       0x62   0xE035             B.N      ??get_arg_type_string_21
    137              case SL_CLI_ARG_UINT32:
    138                str = "uint32";
   \                     ??get_arg_type_string_2: (+1)
   \       0x64   0x.... 0x....      LDR.W    R0,??DataTable5_3
    139                break;
   \       0x68   0xE032             B.N      ??get_arg_type_string_21
    140              case SL_CLI_ARG_INT8:
    141                str = "int8";
   \                     ??get_arg_type_string_3: (+1)
   \       0x6A   0x.... 0x....      LDR.W    R0,??DataTable5_4
    142                break;
   \       0x6E   0xE02F             B.N      ??get_arg_type_string_21
    143              case SL_CLI_ARG_INT16:
    144                str = "int16";
   \                     ??get_arg_type_string_4: (+1)
   \       0x70   0x.... 0x....      LDR.W    R0,??DataTable5_5
    145                break;
   \       0x74   0xE02C             B.N      ??get_arg_type_string_21
    146              case SL_CLI_ARG_INT32:
    147                str = "int32";
   \                     ??get_arg_type_string_5: (+1)
   \       0x76   0x.... 0x....      LDR.W    R0,??DataTable5_6
    148                break;
   \       0x7A   0xE029             B.N      ??get_arg_type_string_21
    149              case SL_CLI_ARG_STRING:
    150                str = "string";
   \                     ??get_arg_type_string_6: (+1)
   \       0x7C   0x.... 0x....      LDR.W    R0,??DataTable5_7
    151                break;
   \       0x80   0xE026             B.N      ??get_arg_type_string_21
    152              case SL_CLI_ARG_HEX:
    153                str = "hex";
   \                     ??get_arg_type_string_7: (+1)
   \       0x82   0x....             ADR.N    R0,??DataTable3_1
    154                break;
   \       0x84   0xE024             B.N      ??get_arg_type_string_21
    155              case SL_CLI_ARG_UINT8OPT:
    156                str = "uint8opt";
   \                     ??get_arg_type_string_8: (+1)
   \       0x86   0x.... 0x....      LDR.W    R0,??DataTable5_8
    157                break;
   \       0x8A   0xE021             B.N      ??get_arg_type_string_21
    158              case SL_CLI_ARG_UINT16OPT:
    159                str = "uint16opt";
   \                     ??get_arg_type_string_9: (+1)
   \       0x8C   0x.... 0x....      LDR.W    R0,??DataTable5_9
    160                break;
   \       0x90   0xE01E             B.N      ??get_arg_type_string_21
    161              case SL_CLI_ARG_UINT32OPT:
    162                str = "uint32opt";
   \                     ??get_arg_type_string_10: (+1)
   \       0x92   0x.... 0x....      LDR.W    R0,??DataTable5_10
    163                break;
   \       0x96   0xE01B             B.N      ??get_arg_type_string_21
    164              case SL_CLI_ARG_INT8OPT:
    165                str = "int8opt";
   \                     ??get_arg_type_string_11: (+1)
   \       0x98   0x.... 0x....      LDR.W    R0,??DataTable5_11
    166                break;
   \       0x9C   0xE018             B.N      ??get_arg_type_string_21
    167              case SL_CLI_ARG_INT16OPT:
    168                str = "int16opt";
   \                     ??get_arg_type_string_12: (+1)
   \       0x9E   0x.... 0x....      LDR.W    R0,??DataTable5_12
    169                break;
   \       0xA2   0xE015             B.N      ??get_arg_type_string_21
    170              case SL_CLI_ARG_INT32OPT:
    171                str = "int32opt";
   \                     ??get_arg_type_string_13: (+1)
   \       0xA4   0x.... 0x....      LDR.W    R0,??DataTable5_13
    172                break;
   \       0xA8   0xE012             B.N      ??get_arg_type_string_21
    173              case SL_CLI_ARG_STRINGOPT:
    174                str = "stringopt";
   \                     ??get_arg_type_string_14: (+1)
   \       0xAA   0x.... 0x....      LDR.W    R0,??DataTable5_14
    175                break;
   \       0xAE   0xE00F             B.N      ??get_arg_type_string_21
    176              case SL_CLI_ARG_HEXOPT:
    177                str = "hexopt";
   \                     ??get_arg_type_string_15: (+1)
   \       0xB0   0x.... 0x....      LDR.W    R0,??DataTable5_15
    178                break;
   \       0xB4   0xE00C             B.N      ??get_arg_type_string_21
    179              case SL_CLI_ARG_ADDITIONAL:
    180                str = "additional";
   \                     ??get_arg_type_string_16: (+1)
   \       0xB6   0x.... 0x....      LDR.W    R0,??DataTable5_16
    181                break;
   \       0xBA   0xE009             B.N      ??get_arg_type_string_21
    182              case SL_CLI_ARG_WILDCARD:
    183                str = "wildcard";
   \                     ??get_arg_type_string_17: (+1)
   \       0xBC   0x.... 0x....      LDR.W    R0,??DataTable5_17
    184                break;
   \       0xC0   0xE006             B.N      ??get_arg_type_string_21
    185              case SL_CLI_ARG_GROUP:
    186                str = "group";
   \                     ??get_arg_type_string_18: (+1)
   \       0xC2   0x.... 0x....      LDR.W    R0,??DataTable5_18
    187                break;
   \       0xC6   0xE003             B.N      ??get_arg_type_string_21
    188              case SL_CLI_ARG_END:
    189                str = "end";
   \                     ??get_arg_type_string_19: (+1)
   \       0xC8   0x....             ADR.N    R0,??DataTable3_2
    190                break;
   \       0xCA   0xE001             B.N      ??get_arg_type_string_21
    191              default:
    192                str = "unknown";
   \                     ??get_arg_type_string_20: (+1)
   \       0xCC   0x.... 0x....      LDR.W    R0,??DataTable5_19
    193                break;
    194            }
    195          
    196            return str;
   \                     ??get_arg_type_string_21: (+1)
   \       0xD0   0x4770             BX       LR
    197          }
    198          
    199          /***************************************************************************//**
    200           * @brief
    201           *   Print out the available commands in the given command table and their
    202           *   argument list and help description. Line length on terminal is assumed to
    203           *   be given by the SL_CLI_TERMINAL_LINE_LENGTH #define or larger.
    204           *
    205           * @param[in] command_table
    206           *   sl_cli_command_entry_t array that is {NULL, NULL}-terminated. Can be both
    207           *   root command table and group command table
    208           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    209          static void cmd_help_command(const sl_cli_command_entry_t *cmd_entry)
    210          {
   \                     cmd_help_command: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0x4683             MOV      R11,R0
    211            print_and_pad("", SL_CLI_HELP_CMD_PRE);
   \        0x6   0x....             ADR.N    R4,??DataTable3_3
   \        0x8   0x2102             MOVS     R1,#+2
   \        0xA   0x0020             MOVS     R0,R4
   \        0xC   0x.... 0x....      BL       print_and_pad
    212            print_and_pad(cmd_entry->name, SL_CLI_HELP_CMD_SIZE);
   \       0x10   0x211E             MOVS     R1,#+30
   \       0x12   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \       0x16   0x.... 0x....      BL       print_and_pad
    213            sli_cli_io_printf(cmd_entry->command->help);
   \       0x1A   0xF8DB 0x0004      LDR      R0,[R11, #+4]
   \       0x1E   0x6840             LDR      R0,[R0, #+4]
   \       0x20   0x.... 0x....      BL       sli_cli_io_printf
    214            sli_cli_io_printf("\n");
   \       0x24   0x....             ADR.N    R0,??DataTable3_4
   \       0x26   0x.... 0x....      BL       sli_cli_io_printf
    215          
    216            // Print argument list
    217            const sl_cli_argument_type_t *arg_type_list;
    218            arg_type_list = cmd_entry->command->arg_type_list;
   \       0x2A   0xF8DB 0x0004      LDR      R0,[R11, #+4]
   \       0x2E   0xF110 0x050C      ADDS     R5,R0,#+12
    219            if (arg_type_list[0] == SL_CLI_ARG_GROUP ||  arg_type_list[0] == SL_CLI_ARG_END) {
   \       0x32   0x7828             LDRB     R0,[R5, #+0]
   \       0x34   0x28FE             CMP      R0,#+254
   \       0x36   0xD057             BEQ.N    ??cmd_help_command_0
   \       0x38   0x7828             LDRB     R0,[R5, #+0]
   \       0x3A   0x28FF             CMP      R0,#+255
   \       0x3C   0xD054             BEQ.N    ??cmd_help_command_0
    220              // Do not do anything. No arguments to print
    221            } else {
    222              char *arg_help = cmd_entry->command->arg_help;
   \       0x3E   0xF8DB 0x0004      LDR      R0,[R11, #+4]
   \       0x42   0x6886             LDR      R6,[R0, #+8]
    223              int arg_no = 0;
   \       0x44   0x2700             MOVS     R7,#+0
    224              int arg_help_ofs = -1;
   \       0x46   0xF05F 0x38FF      MOVS     R8,#+4294967295
    225              int arg_help_length = strlen(arg_help);
   \       0x4A   0x0030             MOVS     R0,R6
   \       0x4C   0x.... 0x....      BL       strlen
   \       0x50   0x4681             MOV      R9,R0
    226              while (arg_type_list[arg_no] != SL_CLI_ARG_END) {
   \                     ??cmd_help_command_1: (+1)
   \       0x52   0x5DE8             LDRB     R0,[R5, R7]
   \       0x54   0x28FF             CMP      R0,#+255
   \       0x56   0xD047             BEQ.N    ??cmd_help_command_0
    227                const char *arg_str;
    228                arg_str = get_arg_type_string(arg_type_list[arg_no]);
   \       0x58   0x5DE8             LDRB     R0,[R5, R7]
   \       0x5A   0x.... 0x....      BL       get_arg_type_string
   \       0x5E   0x4682             MOV      R10,R0
    229                if (arg_help_length > 0) {
   \       0x60   0xF1B9 0x0F01      CMP      R9,#+1
   \       0x64   0xDB01             BLT.N    ??cmd_help_command_2
    230                  arg_help_ofs++;
   \       0x66   0xF118 0x0801      ADDS     R8,R8,#+1
    231                }
    232                if (arg_type_list[arg_no] != SL_CLI_ARG_ADDITIONAL) {
   \                     ??cmd_help_command_2: (+1)
   \       0x6A   0x5DE8             LDRB     R0,[R5, R7]
   \       0x6C   0x2820             CMP      R0,#+32
   \       0x6E   0xD039             BEQ.N    ??cmd_help_command_3
    233                  print_and_pad("", SL_CLI_HELP_CMD_PRE);
   \       0x70   0x2102             MOVS     R1,#+2
   \       0x72   0x0020             MOVS     R0,R4
   \       0x74   0x.... 0x....      BL       print_and_pad
    234                  print_and_pad("", SL_CLI_HELP_CMD_SIZE);
   \       0x78   0x211E             MOVS     R1,#+30
   \       0x7A   0x0020             MOVS     R0,R4
   \       0x7C   0x.... 0x....      BL       print_and_pad
    235                  sli_cli_io_printf("[");
   \       0x80   0x....             ADR.N    R0,??DataTable3_5
   \       0x82   0x.... 0x....      BL       sli_cli_io_printf
    236                  sli_cli_io_printf("%s", (strcmp(arg_str, "wildcard") == 0) ? "*" : arg_str);
   \       0x86   0x.... 0x....      LDR.W    R1,??DataTable5_17
   \       0x8A   0x4650             MOV      R0,R10
   \       0x8C   0x.... 0x....      BL       strcmp
   \       0x90   0x2800             CMP      R0,#+0
   \       0x92   0xD101             BNE.N    ??cmd_help_command_4
   \       0x94   0x....             ADR.N    R1,??DataTable3_6
   \       0x96   0xE000             B.N      ??cmd_help_command_5
   \                     ??cmd_help_command_4: (+1)
   \       0x98   0x4651             MOV      R1,R10
   \                     ??cmd_help_command_5: (+1)
   \       0x9A   0x....             ADR.N    R0,??DataTable3_7
   \       0x9C   0x.... 0x....      BL       sli_cli_io_printf
    237                  if (arg_type_list[arg_no + 1] == SL_CLI_ARG_ADDITIONAL) {
   \       0xA0   0xEB05 0x0007      ADD      R0,R5,R7
   \       0xA4   0x7840             LDRB     R0,[R0, #+1]
   \       0xA6   0x2820             CMP      R0,#+32
   \       0xA8   0xD102             BNE.N    ??cmd_help_command_6
    238                    sli_cli_io_putchar('+');
   \       0xAA   0x202B             MOVS     R0,#+43
   \       0xAC   0x.... 0x....      BL       sli_cli_io_putchar
    239                  }
    240                  sli_cli_io_printf("] ");
   \                     ??cmd_help_command_6: (+1)
   \       0xB0   0x....             ADR.N    R0,??DataTable3_8
   \       0xB2   0x.... 0x....      BL       sli_cli_io_printf
    241                  if ((arg_help_length > 0) && (arg_help[arg_help_ofs] != SL_CLI_UNIT_SEPARATOR_CHAR)) {
   \       0xB6   0xF1B9 0x0F01      CMP      R9,#+1
   \       0xBA   0xDB10             BLT.N    ??cmd_help_command_7
   \       0xBC   0xF816 0x0008      LDRB     R0,[R6, R8]
   \       0xC0   0x281F             CMP      R0,#+31
   \       0xC2   0xD00C             BEQ.N    ??cmd_help_command_7
    242                    while ((arg_help[arg_help_ofs] != SL_CLI_UNIT_SEPARATOR_CHAR) &&  (arg_help_ofs < arg_help_length)) {
   \                     ??cmd_help_command_8: (+1)
   \       0xC4   0xF816 0x0008      LDRB     R0,[R6, R8]
   \       0xC8   0x281F             CMP      R0,#+31
   \       0xCA   0xD008             BEQ.N    ??cmd_help_command_7
   \       0xCC   0x45C8             CMP      R8,R9
   \       0xCE   0xDA06             BGE.N    ??cmd_help_command_7
    243                      sli_cli_io_putchar(arg_help[arg_help_ofs]);
   \       0xD0   0xF816 0x0008      LDRB     R0,[R6, R8]
   \       0xD4   0x.... 0x....      BL       sli_cli_io_putchar
    244                      arg_help_ofs++;
   \       0xD8   0xF118 0x0801      ADDS     R8,R8,#+1
   \       0xDC   0xE7F2             B.N      ??cmd_help_command_8
    245                    }
    246                  }
    247                  sli_cli_io_printf("\n");
   \                     ??cmd_help_command_7: (+1)
   \       0xDE   0x....             ADR.N    R0,??DataTable3_4
   \       0xE0   0x.... 0x....      BL       sli_cli_io_printf
    248                }
    249                arg_no++;
   \                     ??cmd_help_command_3: (+1)
   \       0xE4   0x1C7F             ADDS     R7,R7,#+1
   \       0xE6   0xE7B4             B.N      ??cmd_help_command_1
    250              }
    251            }
    252          }
   \                     ??cmd_help_command_0: (+1)
   \       0xE8   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}
    253          
    254          #else
    255          /***************************************************************************//**
    256           * @brief
    257           *   Print out the available commands in the given command table.
    258           *
    259           * @param[in] command_table
    260           *   sl_cli_command_entry_t array that is {NULL, NULL}-terminated. Can be both
    261           *   root command table and group command table
    262           ******************************************************************************/
    263          static void cmd_help_command(const sl_cli_command_entry_t *cmd_entry)
    264          {
    265            sli_cli_io_printf("  %s\n", cmd_entry->name);
    266          }
    267          
    268          #endif // SL_CLI_HELP_DESCRIPTION_ENABLED
    269          

   \                                 In section .text, align 2, keep-with-next
    270          static void cmd_help_group(const sl_cli_command_entry_t command_table[])
    271          {
   \                     cmd_help_group: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
    272            int i = 0;
   \        0x4   0x2500             MOVS     R5,#+0
    273          
    274            //printf("---------------\n");
    275            while (command_table[i].name) {
   \                     ??cmd_help_group_0: (+1)
   \        0x6   0x210C             MOVS     R1,#+12
   \        0x8   0xFB01 0xF005      MUL      R0,R1,R5
   \        0xC   0x5820             LDR      R0,[R4, R0]
   \        0xE   0x2800             CMP      R0,#+0
   \       0x10   0xD00F             BEQ.N    ??cmd_help_group_1
    276              if (command_table[i].is_shortcut) {
   \       0x12   0xFB01 0xF005      MUL      R0,R1,R5
   \       0x16   0x4420             ADD      R0,R4,R0
   \       0x18   0x7A00             LDRB     R0,[R0, #+8]
   \       0x1A   0x2800             CMP      R0,#+0
   \       0x1C   0xD001             BEQ.N    ??cmd_help_group_2
    277                i++;
   \       0x1E   0x1C6D             ADDS     R5,R5,#+1
    278                continue;
   \       0x20   0xE7F1             B.N      ??cmd_help_group_0
    279              }
    280              cmd_help_command(&command_table[i]);
   \                     ??cmd_help_group_2: (+1)
   \       0x22   0xFB01 0xF105      MUL      R1,R1,R5
   \       0x26   0xEB04 0x0001      ADD      R0,R4,R1
   \       0x2A   0x.... 0x....      BL       cmd_help_command
    281              i++;
   \       0x2E   0x1C6D             ADDS     R5,R5,#+1
   \       0x30   0xE7E9             B.N      ??cmd_help_group_0
    282            }
    283          }
   \                     ??cmd_help_group_1: (+1)
   \       0x32   0xBD31             POP      {R0,R4,R5,PC}
    284          

   \                                 In section .text, align 2, keep-with-next
    285          static void cmd_help(sl_cli_handle_t handle, const sl_cli_command_entry_t *cmd_table, bool single)
    286          {
   \                     cmd_help: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0x0007             MOVS     R7,R0
   \        0x6   0x000E             MOVS     R6,R1
   \        0x8   0x4690             MOV      R8,R2
    287            if (cmd_table != NULL) {
   \        0xA   0x2E00             CMP      R6,#+0
   \        0xC   0xD00B             BEQ.N    ??cmd_help_0
    288              if (single) {
   \        0xE   0x4640             MOV      R0,R8
   \       0x10   0xB2C0             UXTB     R0,R0
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0xD003             BEQ.N    ??cmd_help_1
    289                cmd_help_command(cmd_table);
   \       0x16   0x0030             MOVS     R0,R6
   \       0x18   0x.... 0x....      BL       cmd_help_command
   \       0x1C   0xE010             B.N      ??cmd_help_2
    290              } else {
    291                cmd_help_group(cmd_table);
   \                     ??cmd_help_1: (+1)
   \       0x1E   0x0030             MOVS     R0,R6
   \       0x20   0x.... 0x....      BL       cmd_help_group
   \       0x24   0xE00C             B.N      ??cmd_help_2
    292              }
    293            } else {
    294              sl_cli_command_group_t *cmd_group;
    295              const sl_cli_command_entry_t *table;
    296          
    297              SL_SLIST_FOR_EACH_ENTRY(handle->command_group, cmd_group, sl_cli_command_group_t, node) {
   \                     ??cmd_help_0: (+1)
   \       0x26   0xF8D7 0x509C      LDR      R5,[R7, #+156]
   \                     ??cmd_help_3: (+1)
   \       0x2A   0x2D00             CMP      R5,#+0
   \       0x2C   0xD008             BEQ.N    ??cmd_help_2
    298                table = cmd_group->command_table;
   \       0x2E   0x68A8             LDR      R0,[R5, #+8]
   \       0x30   0x0004             MOVS     R4,R0
    299                if (table != NULL) {
   \       0x32   0x2C00             CMP      R4,#+0
   \       0x34   0xD002             BEQ.N    ??cmd_help_4
    300                  cmd_help_group(table);
   \       0x36   0x0020             MOVS     R0,R4
   \       0x38   0x.... 0x....      BL       cmd_help_group
    301                }
    302              }
   \                     ??cmd_help_4: (+1)
   \       0x3C   0x682D             LDR      R5,[R5, #+0]
   \       0x3E   0xE7F4             B.N      ??cmd_help_3
    303            }
    304          }
   \                     ??cmd_help_2: (+1)
   \       0x40   0xE8BD 0x81F0      POP      {R4-R8,PC}
    305          
    306          /*******************************************************************************
    307           ****************************   GLOBAL FUNCTIONS   *****************************
    308           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    309          bool sl_cli_command_add_command_group(sl_cli_handle_t handle, sl_cli_command_group_t *command_group)
    310          {
   \                     sl_cli_command_add_command_group: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0005             MOVS     R5,R0
   \        0x4   0x000C             MOVS     R4,R1
    311            bool status = false;
   \        0x6   0x2600             MOVS     R6,#+0
    312          
    313            if (command_group != NULL) {
   \        0x8   0x2C00             CMP      R4,#+0
   \        0xA   0xD00B             BEQ.N    ??sl_cli_command_add_command_group_0
    314              if (!command_group->in_use) {
   \        0xC   0x7920             LDRB     R0,[R4, #+4]
   \        0xE   0x2800             CMP      R0,#+0
   \       0x10   0xD108             BNE.N    ??sl_cli_command_add_command_group_0
    315                command_group->in_use = true;
   \       0x12   0x2001             MOVS     R0,#+1
   \       0x14   0x7120             STRB     R0,[R4, #+4]
    316                sl_slist_push(&handle->command_group, &command_group->node);
   \       0x16   0x0021             MOVS     R1,R4
   \       0x18   0xF115 0x009C      ADDS     R0,R5,#+156
   \       0x1C   0x.... 0x....      BL       sl_slist_push
    317                status = true;
   \       0x20   0x2001             MOVS     R0,#+1
   \       0x22   0x0006             MOVS     R6,R0
    318              }
    319            }
    320            return status;
   \                     ??sl_cli_command_add_command_group_0: (+1)
   \       0x24   0x0030             MOVS     R0,R6
   \       0x26   0xB2C0             UXTB     R0,R0
   \       0x28   0xBD70             POP      {R4-R6,PC}
    321          }
    322          

   \                                 In section .text, align 2, keep-with-next
    323          bool sl_cli_command_remove_command_group(sl_cli_handle_t handle, sl_cli_command_group_t *command_group)
    324          {
   \                     sl_cli_command_remove_command_group: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0005             MOVS     R5,R0
   \        0x4   0x000C             MOVS     R4,R1
    325            bool status = false;
   \        0x6   0x2600             MOVS     R6,#+0
    326          
    327            if (command_group != NULL) {
   \        0x8   0x2C00             CMP      R4,#+0
   \        0xA   0xD00D             BEQ.N    ??sl_cli_command_remove_command_group_0
    328              if (command_group->in_use) {
   \        0xC   0x7920             LDRB     R0,[R4, #+4]
   \        0xE   0x2800             CMP      R0,#+0
   \       0x10   0xD00A             BEQ.N    ??sl_cli_command_remove_command_group_0
    329                command_group->in_use = false;
   \       0x12   0x2000             MOVS     R0,#+0
   \       0x14   0x7120             STRB     R0,[R4, #+4]
    330                sl_slist_remove(&handle->command_group, &command_group->node);
   \       0x16   0x0021             MOVS     R1,R4
   \       0x18   0xF115 0x009C      ADDS     R0,R5,#+156
   \       0x1C   0x.... 0x....      BL       sl_slist_remove
    331                command_group->node.node = NULL;
   \       0x20   0x2000             MOVS     R0,#+0
   \       0x22   0x6020             STR      R0,[R4, #+0]
    332                status = true;
   \       0x24   0x2001             MOVS     R0,#+1
   \       0x26   0x0006             MOVS     R6,R0
    333              }
    334            }
    335            return status;
   \                     ??sl_cli_command_remove_command_group_0: (+1)
   \       0x28   0x0030             MOVS     R0,R6
   \       0x2A   0xB2C0             UXTB     R0,R0
   \       0x2C   0xBD70             POP      {R4-R6,PC}
    336          }
    337          
    338          // The following function is only needed if advanced input handling is enabled
    339          #if !defined(SL_CLI_DUT) && (SL_CLI_ADVANCED_INPUT_HANDLING == 1)

   \                                 In section .text, align 2, keep-with-next
    340          int sl_cli_command_find_matches(sl_cli_handle_t handle,
    341                                          char *possible_matches,
    342                                          size_t possible_matches_size,
    343                                          int *input_length,
    344                                          int *input_position)
    345          {
   \                     sl_cli_command_find_matches: (+1)
   \        0x0   0xE92D 0x4FFF      PUSH     {R0-R11,LR}
   \        0x4   0xB08F             SUB      SP,SP,#+60
   \        0x6   0x9E1C             LDR      R6,[SP, #+112]
    346            int len;
    347            int original_input_buffer_len = strlen(handle->input_buffer);
   \        0x8   0x980F             LDR      R0,[SP, #+60]
   \        0xA   0x.... 0x....      BL       strlen
   \        0xE   0x9003             STR      R0,[SP, #+12]
    348            char *token_v[SL_CLI_MAX_INPUT_ARGUMENTS];
    349            char *buf;
    350            int token_c;
    351          
    352            *input_length = 0;
   \       0x10   0x2100             MOVS     R1,#+0
   \       0x12   0x9812             LDR      R0,[SP, #+72]
   \       0x14   0x6001             STR      R1,[R0, #+0]
    353            *input_position = 0;
   \       0x16   0x2000             MOVS     R0,#+0
   \       0x18   0x6030             STR      R0,[R6, #+0]
    354            sl_status_t status = sl_cli_tokenize(handle->input_buffer, &token_c, token_v);
   \       0x1A   0xAA06             ADD      R2,SP,#+24
   \       0x1C   0xA901             ADD      R1,SP,#+4
   \       0x1E   0x980F             LDR      R0,[SP, #+60]
   \       0x20   0x.... 0x....      BL       sl_cli_tokenize
   \       0x24   0x9004             STR      R0,[SP, #+16]
    355            if (status != SL_STATUS_OK) {
   \       0x26   0x9804             LDR      R0,[SP, #+16]
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD001             BEQ.N    ??sl_cli_command_find_matches_0
    356              return 0;
   \       0x2C   0x2000             MOVS     R0,#+0
   \       0x2E   0xE0EA             B.N      ??sl_cli_command_find_matches_1
    357            }
    358          
    359            int i = 0;
   \                     ??sl_cli_command_find_matches_0: (+1)
   \       0x30   0x2700             MOVS     R7,#+0
    360            int arg_ofs = 0;
   \       0x32   0xF05F 0x0800      MOVS     R8,#+0
    361            int number_of_matches = 0;
   \       0x36   0xF05F 0x0900      MOVS     R9,#+0
    362            *input_length = strlen(token_v[0]);
   \       0x3A   0x9806             LDR      R0,[SP, #+24]
   \       0x3C   0x.... 0x....      BL       strlen
   \       0x40   0x9912             LDR      R1,[SP, #+72]
   \       0x42   0x6008             STR      R0,[R1, #+0]
    363          
    364            sl_cli_command_group_t *cmd_group;
    365            const sl_cli_command_entry_t *table;
    366            SL_SLIST_FOR_EACH_ENTRY(handle->command_group, cmd_group, sl_cli_command_group_t, node) {
   \       0x44   0x980F             LDR      R0,[SP, #+60]
   \       0x46   0xF8D0 0x009C      LDR      R0,[R0, #+156]
   \       0x4A   0x9000             STR      R0,[SP, #+0]
   \                     ??sl_cli_command_find_matches_2: (+1)
   \       0x4C   0x9800             LDR      R0,[SP, #+0]
   \       0x4E   0x2800             CMP      R0,#+0
   \       0x50   0xF000 0x80D8      BEQ.W    ??sl_cli_command_find_matches_3
    367              table = cmd_group->command_table;
   \       0x54   0x9800             LDR      R0,[SP, #+0]
   \       0x56   0x6880             LDR      R0,[R0, #+8]
   \       0x58   0x0004             MOVS     R4,R0
    368              if (table == NULL) {
   \       0x5A   0x2C00             CMP      R4,#+0
   \       0x5C   0xF000 0x80CE      BEQ.W    ??sl_cli_command_find_matches_4
    369                continue;
    370              }
    371          
    372              // If input buffer begins with spaces, increment input position to match
    373              while (handle->input_buffer[i] == ' ') {
   \                     ??sl_cli_command_find_matches_5: (+1)
   \       0x60   0x980F             LDR      R0,[SP, #+60]
   \       0x62   0x5DC0             LDRB     R0,[R0, R7]
   \       0x64   0x2820             CMP      R0,#+32
   \       0x66   0xD104             BNE.N    ??sl_cli_command_find_matches_6
    374                *input_position = *input_position + 1;
   \       0x68   0x6830             LDR      R0,[R6, #+0]
   \       0x6A   0x1C40             ADDS     R0,R0,#+1
   \       0x6C   0x6030             STR      R0,[R6, #+0]
    375                i++;
   \       0x6E   0x1C7F             ADDS     R7,R7,#+1
   \       0x70   0xE7F6             B.N      ??sl_cli_command_find_matches_5
    376              }
    377          
    378              // Look for possible command matches in command table and within groups.
    379              // Add all possible matches to possible_matches string
    380              i = 0;
   \                     ??sl_cli_command_find_matches_6: (+1)
   \       0x72   0x2000             MOVS     R0,#+0
   \       0x74   0x0007             MOVS     R7,R0
    381              while ((table[i].name != NULL) && (arg_ofs <= token_c)) {
   \                     ??sl_cli_command_find_matches_7: (+1)
   \       0x76   0xF05F 0x0B0C      MOVS     R11,#+12
   \       0x7A   0xFB0B 0xF007      MUL      R0,R11,R7
   \       0x7E   0x5820             LDR      R0,[R4, R0]
   \       0x80   0x2800             CMP      R0,#+0
   \       0x82   0xF000 0x80AA      BEQ.W    ??sl_cli_command_find_matches_8
   \       0x86   0x9801             LDR      R0,[SP, #+4]
   \       0x88   0x4540             CMP      R0,R8
   \       0x8A   0xF2C0 0x80A6      BLT.W    ??sl_cli_command_find_matches_8
    382                if (table[i].is_shortcut) {
   \       0x8E   0xFB0B 0xF007      MUL      R0,R11,R7
   \       0x92   0x4420             ADD      R0,R4,R0
   \       0x94   0x7A00             LDRB     R0,[R0, #+8]
   \       0x96   0x2800             CMP      R0,#+0
   \       0x98   0xD001             BEQ.N    ??sl_cli_command_find_matches_9
    383                  // Ignore shortcuts
    384                  i++;
   \       0x9A   0x1C7F             ADDS     R7,R7,#+1
    385                  continue;
   \       0x9C   0xE7EB             B.N      ??sl_cli_command_find_matches_7
    386                }
    387                *input_length = handle->input_len - *input_position;
   \                     ??sl_cli_command_find_matches_9: (+1)
   \       0x9E   0x980F             LDR      R0,[SP, #+60]
   \       0xA0   0xF8D0 0x1094      LDR      R1,[R0, #+148]
   \       0xA4   0x6830             LDR      R0,[R6, #+0]
   \       0xA6   0x1A09             SUBS     R1,R1,R0
   \       0xA8   0x9812             LDR      R0,[SP, #+72]
   \       0xAA   0x6001             STR      R1,[R0, #+0]
    388                if (strncmp(token_v[arg_ofs], table[i].name, *input_length) == 0) {
   \       0xAC   0xF10D 0x0A18      ADD      R10,SP,#+24
   \       0xB0   0x9812             LDR      R0,[SP, #+72]
   \       0xB2   0x6802             LDR      R2,[R0, #+0]
   \       0xB4   0xFB0B 0xF007      MUL      R0,R11,R7
   \       0xB8   0x5821             LDR      R1,[R4, R0]
   \       0xBA   0xF85A 0x0028      LDR      R0,[R10, R8, LSL #+2]
   \       0xBE   0x.... 0x....      BL       strncmp
   \       0xC2   0x2800             CMP      R0,#+0
   \       0xC4   0xF040 0x8087      BNE.W    ??sl_cli_command_find_matches_10
    389                  int table_entry_length = strlen(table[i].name);
   \       0xC8   0xFB0B 0xF007      MUL      R0,R11,R7
   \       0xCC   0x5820             LDR      R0,[R4, R0]
   \       0xCE   0x.... 0x....      BL       strlen
   \       0xD2   0x9005             STR      R0,[SP, #+20]
    390                  if ((table[i].command->arg_type_list[0] == SL_CLI_ARG_GROUP) && (arg_ofs != (token_c - 1))) {
   \       0xD4   0xFB0B 0xF007      MUL      R0,R11,R7
   \       0xD8   0x4420             ADD      R0,R4,R0
   \       0xDA   0x6840             LDR      R0,[R0, #+4]
   \       0xDC   0x7B00             LDRB     R0,[R0, #+12]
   \       0xDE   0x28FE             CMP      R0,#+254
   \       0xE0   0xD11F             BNE.N    ??sl_cli_command_find_matches_11
   \       0xE2   0x9801             LDR      R0,[SP, #+4]
   \       0xE4   0x1E40             SUBS     R0,R0,#+1
   \       0xE6   0x4580             CMP      R8,R0
   \       0xE8   0xD01B             BEQ.N    ??sl_cli_command_find_matches_11
    391                    table = (sl_cli_command_entry_t *)(table[i].command->function);
   \       0xEA   0xFB0B 0xFB07      MUL      R11,R11,R7
   \       0xEE   0xEB04 0x000B      ADD      R0,R4,R11
   \       0xF2   0x6840             LDR      R0,[R0, #+4]
   \       0xF4   0x6804             LDR      R4,[R0, #+0]
    392                    i = 0;
   \       0xF6   0x2000             MOVS     R0,#+0
   \       0xF8   0x0007             MOVS     R7,R0
    393                    *input_position += strlen(token_v[arg_ofs]) + 1;
   \       0xFA   0xF85A 0x0028      LDR      R0,[R10, R8, LSL #+2]
   \       0xFE   0x.... 0x....      BL       strlen
   \      0x102   0x6831             LDR      R1,[R6, #+0]
   \      0x104   0x1840             ADDS     R0,R0,R1
   \      0x106   0x1C40             ADDS     R0,R0,#+1
   \      0x108   0x6030             STR      R0,[R6, #+0]
    394                    while (handle->input_buffer[*input_position] == '\0') {
   \                     ??sl_cli_command_find_matches_12: (+1)
   \      0x10A   0x980F             LDR      R0,[SP, #+60]
   \      0x10C   0x6831             LDR      R1,[R6, #+0]
   \      0x10E   0x5C40             LDRB     R0,[R0, R1]
   \      0x110   0x2800             CMP      R0,#+0
   \      0x112   0xD103             BNE.N    ??sl_cli_command_find_matches_13
    395                      *input_position = *input_position + 1;
   \      0x114   0x6830             LDR      R0,[R6, #+0]
   \      0x116   0x1C40             ADDS     R0,R0,#+1
   \      0x118   0x6030             STR      R0,[R6, #+0]
   \      0x11A   0xE7F6             B.N      ??sl_cli_command_find_matches_12
    396                    }
    397                    arg_ofs++;
   \                     ??sl_cli_command_find_matches_13: (+1)
   \      0x11C   0xF118 0x0801      ADDS     R8,R8,#+1
    398                    continue;
   \      0x120   0xE7A9             B.N      ??sl_cli_command_find_matches_7
    399                  } else if (handle->input_len - *input_position <= table_entry_length) {
   \                     ??sl_cli_command_find_matches_11: (+1)
   \      0x122   0x9905             LDR      R1,[SP, #+20]
   \      0x124   0x980F             LDR      R0,[SP, #+60]
   \      0x126   0xF8D0 0x2094      LDR      R2,[R0, #+148]
   \      0x12A   0x6830             LDR      R0,[R6, #+0]
   \      0x12C   0x1A12             SUBS     R2,R2,R0
   \      0x12E   0x4291             CMP      R1,R2
   \      0x130   0xDB23             BLT.N    ??sl_cli_command_find_matches_14
    400                    // Will only show the total possible matches up to length of the
    401                    // input buffer, and add "..." if there are more possible matches
    402                    if (strlen(possible_matches) + strlen(table[i].name)
    403                        >= SL_CLI_INPUT_BUFFER_SIZE - 4) {
   \      0x132   0x9810             LDR      R0,[SP, #+64]
   \      0x134   0x.... 0x....      BL       strlen
   \      0x138   0x4682             MOV      R10,R0
   \      0x13A   0xFB0B 0xF007      MUL      R0,R11,R7
   \      0x13E   0x5820             LDR      R0,[R4, R0]
   \      0x140   0x.... 0x....      BL       strlen
   \      0x144   0xEB10 0x0A0A      ADDS     R10,R0,R10
   \      0x148   0xF1BA 0x0F7C      CMP      R10,#+124
   \      0x14C   0xD305             BCC.N    ??sl_cli_command_find_matches_15
    404                      sl_strcat_s(possible_matches, possible_matches_size, "... ");
   \      0x14E   0x....             LDR.N    R2,??DataTable5_20
   \      0x150   0x9911             LDR      R1,[SP, #+68]
   \      0x152   0x9810             LDR      R0,[SP, #+64]
   \      0x154   0x.... 0x....      BL       sl_strcat_s
    405                      break;
   \      0x158   0xE03F             B.N      ??sl_cli_command_find_matches_8
    406                    }
    407                    number_of_matches++;
   \                     ??sl_cli_command_find_matches_15: (+1)
   \      0x15A   0xF119 0x0901      ADDS     R9,R9,#+1
    408                    sl_strcat_s(possible_matches, possible_matches_size, table[i].name);
   \      0x15E   0xFB0B 0xFB07      MUL      R11,R11,R7
   \      0x162   0xF854 0x200B      LDR      R2,[R4, R11]
   \      0x166   0x9911             LDR      R1,[SP, #+68]
   \      0x168   0x9810             LDR      R0,[SP, #+64]
   \      0x16A   0x.... 0x....      BL       sl_strcat_s
    409                    sl_strcat_s(possible_matches, possible_matches_size, " ");
   \      0x16E   0x....             ADR.N    R2,??DataTable5
   \      0x170   0x9911             LDR      R1,[SP, #+68]
   \      0x172   0x9810             LDR      R0,[SP, #+64]
   \      0x174   0x.... 0x....      BL       sl_strcat_s
   \      0x178   0xE02D             B.N      ??sl_cli_command_find_matches_10
    410                  } else if ((table[i].command->arg_type_list[0] == SL_CLI_ARG_GROUP) && (arg_ofs == (token_c - 1))) {
   \                     ??sl_cli_command_find_matches_14: (+1)
   \      0x17A   0xFB0B 0xF007      MUL      R0,R11,R7
   \      0x17E   0x4420             ADD      R0,R4,R0
   \      0x180   0x6840             LDR      R0,[R0, #+4]
   \      0x182   0x7B00             LDRB     R0,[R0, #+12]
   \      0x184   0x28FE             CMP      R0,#+254
   \      0x186   0xD126             BNE.N    ??sl_cli_command_find_matches_10
   \      0x188   0x9801             LDR      R0,[SP, #+4]
   \      0x18A   0x1E40             SUBS     R0,R0,#+1
   \      0x18C   0x4580             CMP      R8,R0
   \      0x18E   0xD122             BNE.N    ??sl_cli_command_find_matches_10
    411                    int k = 0;
   \      0x190   0xF05F 0x0A00      MOVS     R10,#+0
    412                    table = (sl_cli_command_entry_t *)(table[i].command->function);
   \      0x194   0xFB0B 0xF007      MUL      R0,R11,R7
   \      0x198   0x4420             ADD      R0,R4,R0
   \      0x19A   0x6840             LDR      R0,[R0, #+4]
   \      0x19C   0x6804             LDR      R4,[R0, #+0]
    413                    while (table[k].name) {
   \                     ??sl_cli_command_find_matches_16: (+1)
   \      0x19E   0xFB0B 0xF00A      MUL      R0,R11,R10
   \      0x1A2   0x5820             LDR      R0,[R4, R0]
   \      0x1A4   0x2800             CMP      R0,#+0
   \      0x1A6   0xD010             BEQ.N    ??sl_cli_command_find_matches_17
    414                      sl_strcat_s(possible_matches, possible_matches_size, table[k].name);
   \      0x1A8   0xFB0B 0xF00A      MUL      R0,R11,R10
   \      0x1AC   0x5822             LDR      R2,[R4, R0]
   \      0x1AE   0x9911             LDR      R1,[SP, #+68]
   \      0x1B0   0x9810             LDR      R0,[SP, #+64]
   \      0x1B2   0x.... 0x....      BL       sl_strcat_s
    415                      sl_strcat_s(possible_matches, possible_matches_size, " ");
   \      0x1B6   0x....             ADR.N    R2,??DataTable5
   \      0x1B8   0x9911             LDR      R1,[SP, #+68]
   \      0x1BA   0x9810             LDR      R0,[SP, #+64]
   \      0x1BC   0x.... 0x....      BL       sl_strcat_s
    416                      number_of_matches++;
   \      0x1C0   0xF119 0x0901      ADDS     R9,R9,#+1
    417                      k++;
   \      0x1C4   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \      0x1C8   0xE7E9             B.N      ??sl_cli_command_find_matches_16
    418                    }
    419                    *input_position = original_input_buffer_len;
   \                     ??sl_cli_command_find_matches_17: (+1)
   \      0x1CA   0x9803             LDR      R0,[SP, #+12]
   \      0x1CC   0x6030             STR      R0,[R6, #+0]
    420                    *input_length = 0;
   \      0x1CE   0x2100             MOVS     R1,#+0
   \      0x1D0   0x9812             LDR      R0,[SP, #+72]
   \      0x1D2   0x6001             STR      R1,[R0, #+0]
    421                    break;
   \      0x1D4   0xE001             B.N      ??sl_cli_command_find_matches_8
    422                  }
    423                }
    424                i++;
   \                     ??sl_cli_command_find_matches_10: (+1)
   \      0x1D6   0x1C7F             ADDS     R7,R7,#+1
   \      0x1D8   0xE74D             B.N      ??sl_cli_command_find_matches_7
    425              }
    426          
    427              // The tokenizer will replace all spaces with '\0' in the input buffer,
    428              // these need to be converted back to spaces
    429              buf = handle->input_buffer;
   \                     ??sl_cli_command_find_matches_8: (+1)
   \      0x1DA   0x980F             LDR      R0,[SP, #+60]
   \      0x1DC   0x0005             MOVS     R5,R0
    430              len = original_input_buffer_len;
   \      0x1DE   0x9803             LDR      R0,[SP, #+12]
   \      0x1E0   0x9002             STR      R0,[SP, #+8]
    431              while (len > 0) {
   \                     ??sl_cli_command_find_matches_18: (+1)
   \      0x1E2   0x9802             LDR      R0,[SP, #+8]
   \      0x1E4   0x2801             CMP      R0,#+1
   \      0x1E6   0xDB09             BLT.N    ??sl_cli_command_find_matches_4
    432                if (*buf == '\0') {
   \      0x1E8   0x7828             LDRB     R0,[R5, #+0]
   \      0x1EA   0x2800             CMP      R0,#+0
   \      0x1EC   0xD101             BNE.N    ??sl_cli_command_find_matches_19
    433                  *buf = ' ';
   \      0x1EE   0x2020             MOVS     R0,#+32
   \      0x1F0   0x7028             STRB     R0,[R5, #+0]
    434                }
    435                buf++;
   \                     ??sl_cli_command_find_matches_19: (+1)
   \      0x1F2   0x1C6D             ADDS     R5,R5,#+1
    436                len--;
   \      0x1F4   0x9802             LDR      R0,[SP, #+8]
   \      0x1F6   0x1E40             SUBS     R0,R0,#+1
   \      0x1F8   0x9002             STR      R0,[SP, #+8]
   \      0x1FA   0xE7F2             B.N      ??sl_cli_command_find_matches_18
    437              }
    438            }
   \                     ??sl_cli_command_find_matches_4: (+1)
   \      0x1FC   0x9800             LDR      R0,[SP, #+0]
   \      0x1FE   0x6800             LDR      R0,[R0, #+0]
   \      0x200   0x9000             STR      R0,[SP, #+0]
   \      0x202   0xE723             B.N      ??sl_cli_command_find_matches_2
    439          
    440            return number_of_matches;
   \                     ??sl_cli_command_find_matches_3: (+1)
   \      0x204   0x4648             MOV      R0,R9
   \                     ??sl_cli_command_find_matches_1: (+1)
   \      0x206   0xB013             ADD      SP,SP,#+76
   \      0x208   0xE8BD 0x8FF0      POP      {R4-R11,PC}
    441          }
    442          #endif // SL_CLI_ADVANCED_INPUT_HANDLING
    443          

   \                                 In section .text, align 2, keep-with-next
    444          static const sl_cli_command_entry_t *scan_entry(const sl_cli_command_entry_t *cmd_entry_in,
    445                                                          bool group,
    446                                                          bool *found,
    447                                                          int *token_c,
    448                                                          char *token_v[],
    449                                                          int *arg_ofs,
    450                                                          bool *single_flag,
    451                                                          bool *help_flag)
    452          {
   \                     scan_entry: (+1)
   \        0x0   0xE92D 0x4FF3      PUSH     {R0,R1,R4-R11,LR}
   \        0x4   0xB085             SUB      SP,SP,#+20
   \        0x6   0x4683             MOV      R11,R0
   \        0x8   0x0014             MOVS     R4,R2
   \        0xA   0x001D             MOVS     R5,R3
   \        0xC   0x9E10             LDR      R6,[SP, #+64]
   \        0xE   0x9F11             LDR      R7,[SP, #+68]
   \       0x10   0xF8DD 0x8048      LDR      R8,[SP, #+72]
   \       0x14   0xF8DD 0x904C      LDR      R9,[SP, #+76]
    453            const sl_cli_command_entry_t *cmd_entry = cmd_entry_in;
   \       0x18   0x46DA             MOV      R10,R11
    454          
    455            while ((cmd_entry->name != NULL) && (*arg_ofs < *token_c)) {
   \                     ??scan_entry_0: (+1)
   \       0x1A   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \       0x1E   0x2800             CMP      R0,#+0
   \       0x20   0xD02F             BEQ.N    ??scan_entry_1
   \       0x22   0x6839             LDR      R1,[R7, #+0]
   \       0x24   0x6828             LDR      R0,[R5, #+0]
   \       0x26   0x4281             CMP      R1,R0
   \       0x28   0xDA2B             BGE.N    ??scan_entry_1
    456              if (cmd_strcmp(cmd_entry->name, token_v[*arg_ofs]) == 0) {
   \       0x2A   0x6838             LDR      R0,[R7, #+0]
   \       0x2C   0xF856 0x1020      LDR      R1,[R6, R0, LSL #+2]
   \       0x30   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \       0x34   0x.... 0x....      BL       cmd_strcmp
   \       0x38   0x2800             CMP      R0,#+0
   \       0x3A   0xD11F             BNE.N    ??scan_entry_2
    457                // Command or group found
    458                (*arg_ofs)++;
   \       0x3C   0x6838             LDR      R0,[R7, #+0]
   \       0x3E   0x1C40             ADDS     R0,R0,#+1
   \       0x40   0x6038             STR      R0,[R7, #+0]
    459                if (cmd_entry->command->arg_type_list[0] == SL_CLI_ARG_GROUP) {
   \       0x42   0xF8DA 0x0004      LDR      R0,[R10, #+4]
   \       0x46   0x7B00             LDRB     R0,[R0, #+12]
   \       0x48   0x28FE             CMP      R0,#+254
   \       0x4A   0xD111             BNE.N    ??scan_entry_3
    460                  // Group found, continue search
    461                  cmd_entry = (sl_cli_command_entry_t *)(cmd_entry->command->function);
   \       0x4C   0xF8DA 0x0004      LDR      R0,[R10, #+4]
   \       0x50   0x6800             LDR      R0,[R0, #+0]
   \       0x52   0x9004             STR      R0,[SP, #+16]
    462                  cmd_entry = scan_entry(cmd_entry, true, found, token_c, token_v, arg_ofs, single_flag, help_flag);
   \       0x54   0xF8CD 0x900C      STR      R9,[SP, #+12]
   \       0x58   0xF8CD 0x8008      STR      R8,[SP, #+8]
   \       0x5C   0x9701             STR      R7,[SP, #+4]
   \       0x5E   0x9600             STR      R6,[SP, #+0]
   \       0x60   0x002B             MOVS     R3,R5
   \       0x62   0x0022             MOVS     R2,R4
   \       0x64   0x2101             MOVS     R1,#+1
   \       0x66   0x9804             LDR      R0,[SP, #+16]
   \       0x68   0xF7FF 0xFFCA      BL       scan_entry
   \       0x6C   0x4682             MOV      R10,R0
    463                  break;
   \       0x6E   0xE008             B.N      ??scan_entry_1
    464                } else {
    465                  // Command found, stop search
    466                  *single_flag = true;
   \                     ??scan_entry_3: (+1)
   \       0x70   0x2001             MOVS     R0,#+1
   \       0x72   0xF888 0x0000      STRB     R0,[R8, #+0]
    467                  *found = true;
   \       0x76   0x2001             MOVS     R0,#+1
   \       0x78   0x7020             STRB     R0,[R4, #+0]
    468                  break;
   \       0x7A   0xE002             B.N      ??scan_entry_1
    469                }
    470              }
    471              cmd_entry++;
   \                     ??scan_entry_2: (+1)
   \       0x7C   0xF11A 0x0A0C      ADDS     R10,R10,#+12
   \       0x80   0xE7CB             B.N      ??scan_entry_0
    472            }
    473          
    474            if (!(*found) && (!(*help_flag))) {
   \                     ??scan_entry_1: (+1)
   \       0x82   0x7820             LDRB     R0,[R4, #+0]
   \       0x84   0x2800             CMP      R0,#+0
   \       0x86   0xD110             BNE.N    ??scan_entry_4
   \       0x88   0xF899 0x0000      LDRB     R0,[R9, #+0]
   \       0x8C   0x2800             CMP      R0,#+0
   \       0x8E   0xD10C             BNE.N    ??scan_entry_4
    475              if (group) {
   \       0x90   0xF89D 0x0018      LDRB     R0,[SP, #+24]
   \       0x94   0x2800             CMP      R0,#+0
   \       0x96   0xD006             BEQ.N    ??scan_entry_5
    476                *help_flag = true;
   \       0x98   0x2001             MOVS     R0,#+1
   \       0x9A   0xF889 0x0000      STRB     R0,[R9, #+0]
    477                cmd_entry = cmd_entry_in;
   \       0x9E   0x46DA             MOV      R10,R11
    478                *found = true;
   \       0xA0   0x2001             MOVS     R0,#+1
   \       0xA2   0x7020             STRB     R0,[R4, #+0]
   \       0xA4   0xE001             B.N      ??scan_entry_4
    479              } else {
    480                cmd_entry = NULL;
   \                     ??scan_entry_5: (+1)
   \       0xA6   0x2000             MOVS     R0,#+0
   \       0xA8   0x4682             MOV      R10,R0
    481              }
    482            }
    483          
    484            return cmd_entry;
   \                     ??scan_entry_4: (+1)
   \       0xAA   0x4650             MOV      R0,R10
   \       0xAC   0xB007             ADD      SP,SP,#+28
   \       0xAE   0xE8BD 0x8FF0      POP      {R4-R11,PC}
    485          }
    486          

   \                                 In section .text, align 2, keep-with-next
    487          const sl_cli_command_entry_t *sl_cli_command_find(sl_cli_handle_t handle,
    488                                                            int *token_c,
    489                                                            char *token_v[],
    490                                                            int *arg_ofs,
    491                                                            bool *single_flag,
    492                                                            bool *help_flag)
    493          {
   \                     sl_cli_command_find: (+1)
   \        0x0   0xE92D 0x4FF1      PUSH     {R0,R4-R11,LR}
   \        0x4   0xB086             SUB      SP,SP,#+24
   \        0x6   0x468B             MOV      R11,R1
   \        0x8   0x0016             MOVS     R6,R2
   \        0xA   0x001F             MOVS     R7,R3
   \        0xC   0xF8DD 0x8040      LDR      R8,[SP, #+64]
   \       0x10   0xF8DD 0x9044      LDR      R9,[SP, #+68]
    494            const sl_cli_command_entry_t *cmd_entry = NULL;
   \       0x14   0x2400             MOVS     R4,#+0
    495            bool help = false;
   \       0x16   0xF05F 0x0A00      MOVS     R10,#+0
    496            bool found = false;
   \       0x1A   0x2000             MOVS     R0,#+0
   \       0x1C   0xF88D 0x0010      STRB     R0,[SP, #+16]
    497          
    498            *arg_ofs = 0;
   \       0x20   0x2000             MOVS     R0,#+0
   \       0x22   0x6038             STR      R0,[R7, #+0]
    499            *single_flag = false;
   \       0x24   0x2000             MOVS     R0,#+0
   \       0x26   0xF888 0x0000      STRB     R0,[R8, #+0]
    500            *help_flag = false;
   \       0x2A   0x2000             MOVS     R0,#+0
   \       0x2C   0xF889 0x0000      STRB     R0,[R9, #+0]
    501          
    502            if (cmd_strcmp("help", token_v[*arg_ofs]) == 0) {
   \       0x30   0x6838             LDR      R0,[R7, #+0]
   \       0x32   0xF856 0x1020      LDR      R1,[R6, R0, LSL #+2]
   \       0x36   0x....             LDR.N    R0,??DataTable5_21
   \       0x38   0x.... 0x....      BL       cmd_strcmp
   \       0x3C   0x2800             CMP      R0,#+0
   \       0x3E   0xD104             BNE.N    ??sl_cli_command_find_0
    503              help = true;
   \       0x40   0x2001             MOVS     R0,#+1
   \       0x42   0x4682             MOV      R10,R0
    504              (*arg_ofs)++;
   \       0x44   0x6838             LDR      R0,[R7, #+0]
   \       0x46   0x1C40             ADDS     R0,R0,#+1
   \       0x48   0x6038             STR      R0,[R7, #+0]
    505            }
    506          
    507            sl_cli_command_group_t *cmd_group;
    508            SL_SLIST_FOR_EACH_ENTRY(handle->command_group, cmd_group, sl_cli_command_group_t, node) {
   \                     ??sl_cli_command_find_0: (+1)
   \       0x4A   0x9806             LDR      R0,[SP, #+24]
   \       0x4C   0xF8D0 0x509C      LDR      R5,[R0, #+156]
   \                     ??sl_cli_command_find_1: (+1)
   \       0x50   0x2D00             CMP      R5,#+0
   \       0x52   0xD016             BEQ.N    ??sl_cli_command_find_2
    509              cmd_entry = cmd_group->command_table;
   \       0x54   0x68A8             LDR      R0,[R5, #+8]
   \       0x56   0x0004             MOVS     R4,R0
    510              if (cmd_entry == NULL) {
   \       0x58   0x2C00             CMP      R4,#+0
   \       0x5A   0xD010             BEQ.N    ??sl_cli_command_find_3
    511                continue;
    512              }
    513              cmd_entry = scan_entry(cmd_entry, false, &found, token_c, token_v, arg_ofs, single_flag, help_flag);
   \                     ??sl_cli_command_find_4: (+1)
   \       0x5C   0xF8CD 0x900C      STR      R9,[SP, #+12]
   \       0x60   0xF8CD 0x8008      STR      R8,[SP, #+8]
   \       0x64   0x9701             STR      R7,[SP, #+4]
   \       0x66   0x9600             STR      R6,[SP, #+0]
   \       0x68   0x465B             MOV      R3,R11
   \       0x6A   0xAA04             ADD      R2,SP,#+16
   \       0x6C   0x2100             MOVS     R1,#+0
   \       0x6E   0x0020             MOVS     R0,R4
   \       0x70   0x.... 0x....      BL       scan_entry
   \       0x74   0x0004             MOVS     R4,R0
    514              if (found) {
   \       0x76   0xF89D 0x0010      LDRB     R0,[SP, #+16]
   \       0x7A   0x2800             CMP      R0,#+0
   \       0x7C   0xD101             BNE.N    ??sl_cli_command_find_2
    515                break;
    516              }
    517            }
   \                     ??sl_cli_command_find_3: (+1)
   \       0x7E   0x682D             LDR      R5,[R5, #+0]
   \       0x80   0xE7E6             B.N      ??sl_cli_command_find_1
    518            if (help) {
   \                     ??sl_cli_command_find_2: (+1)
   \       0x82   0x4650             MOV      R0,R10
   \       0x84   0xB2C0             UXTB     R0,R0
   \       0x86   0x2800             CMP      R0,#+0
   \       0x88   0xD002             BEQ.N    ??sl_cli_command_find_5
    519              *help_flag = true;
   \       0x8A   0x2001             MOVS     R0,#+1
   \       0x8C   0xF889 0x0000      STRB     R0,[R9, #+0]
    520            }
    521          
    522            return cmd_entry;
   \                     ??sl_cli_command_find_5: (+1)
   \       0x90   0x0020             MOVS     R0,R4
   \       0x92   0xB007             ADD      SP,SP,#+28
   \       0x94   0xE8BD 0x8FF0      POP      {R4-R11,PC}
    523          }
    524          

   \                                 In section .text, align 2, keep-with-next
    525          sl_status_t sl_cli_command_execute(sl_cli_handle_t handle,
    526                                             char *input)
    527          {
   \                     sl_cli_command_execute: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0xB0A2             SUB      SP,SP,#+136
   \        0x6   0x4680             MOV      R8,R0
   \        0x8   0x000F             MOVS     R7,R1
    528            char *token_v[SL_CLI_MAX_INPUT_ARGUMENTS];
    529            int token_c;
    530            uint32_t memory_array[SL_CLI_MAX_INPUT_ARGUMENTS];
    531            void *argv[SL_CLI_MAX_INPUT_ARGUMENTS];
    532            sl_cli_command_arg_t arguments;
    533            int arg_ofs;
    534          
    535            // Split input string
    536            sl_status_t status = sl_cli_tokenize(input, &token_c, token_v);
   \        0xA   0xAA0A             ADD      R2,SP,#+40
   \        0xC   0xA903             ADD      R1,SP,#+12
   \        0xE   0x0038             MOVS     R0,R7
   \       0x10   0x.... 0x....      BL       sl_cli_tokenize
   \       0x14   0x0004             MOVS     R4,R0
    537            if (status != SL_STATUS_OK) {
   \       0x16   0x2C00             CMP      R4,#+0
   \       0x18   0xD001             BEQ.N    ??sl_cli_command_execute_0
    538              return status;
   \       0x1A   0x0020             MOVS     R0,R4
   \       0x1C   0xE046             B.N      ??sl_cli_command_execute_1
    539            }
    540          
    541            // Find command
    542            bool help_flag = false;
   \                     ??sl_cli_command_execute_0: (+1)
   \       0x1E   0x2000             MOVS     R0,#+0
   \       0x20   0xF88D 0x0008      STRB     R0,[SP, #+8]
    543            bool single_flag;
    544            const sl_cli_command_entry_t *cmd_table = sl_cli_command_find(handle,
    545                                                                          &token_c,
    546                                                                          token_v,
    547                                                                          &arg_ofs,
    548                                                                          &single_flag,
    549                                                                          &help_flag);
   \       0x24   0xA802             ADD      R0,SP,#+8
   \       0x26   0x9001             STR      R0,[SP, #+4]
   \       0x28   0xF10D 0x0009      ADD      R0,SP,#+9
   \       0x2C   0x9000             STR      R0,[SP, #+0]
   \       0x2E   0xAB04             ADD      R3,SP,#+16
   \       0x30   0xAA0A             ADD      R2,SP,#+40
   \       0x32   0xA903             ADD      R1,SP,#+12
   \       0x34   0x4640             MOV      R0,R8
   \       0x36   0x.... 0x....      BL       sl_cli_command_find
   \       0x3A   0x0005             MOVS     R5,R0
    550            if (help_flag) {
   \       0x3C   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \       0x40   0x2800             CMP      R0,#+0
   \       0x42   0xD007             BEQ.N    ??sl_cli_command_execute_2
    551              cmd_help(handle, cmd_table, single_flag);
   \       0x44   0xF89D 0x2009      LDRB     R2,[SP, #+9]
   \       0x48   0x0029             MOVS     R1,R5
   \       0x4A   0x4640             MOV      R0,R8
   \       0x4C   0x.... 0x....      BL       cmd_help
    552              return SL_STATUS_OK;
   \       0x50   0x2000             MOVS     R0,#+0
   \       0x52   0xE02B             B.N      ??sl_cli_command_execute_1
    553            } else if (cmd_table == NULL) {
   \                     ??sl_cli_command_execute_2: (+1)
   \       0x54   0x2D00             CMP      R5,#+0
   \       0x56   0xD101             BNE.N    ??sl_cli_command_execute_3
    554              return SL_STATUS_NOT_FOUND;
   \       0x58   0x202D             MOVS     R0,#+45
   \       0x5A   0xE027             B.N      ??sl_cli_command_execute_1
    555            }
    556          
    557            // Convert arguments to correct type
    558            const sl_cli_command_info_t *cmd_info = cmd_table->command;
   \                     ??sl_cli_command_execute_3: (+1)
   \       0x5C   0xF8D5 0x9004      LDR      R9,[R5, #+4]
    559            status = sli_cli_arguments_convert_multiple(cmd_info->arg_type_list,
    560                                                        token_c,
    561                                                        token_v,
    562                                                        arg_ofs,
    563                                                        argv,
    564                                                        memory_array);
   \       0x60   0xA81A             ADD      R0,SP,#+104
   \       0x62   0x9001             STR      R0,[SP, #+4]
   \       0x64   0xA812             ADD      R0,SP,#+72
   \       0x66   0x9000             STR      R0,[SP, #+0]
   \       0x68   0x9B04             LDR      R3,[SP, #+16]
   \       0x6A   0xAA0A             ADD      R2,SP,#+40
   \       0x6C   0x9903             LDR      R1,[SP, #+12]
   \       0x6E   0xF119 0x000C      ADDS     R0,R9,#+12
   \       0x72   0x.... 0x....      BL       sli_cli_arguments_convert_multiple
   \       0x76   0x0006             MOVS     R6,R0
    565            if (status != SL_STATUS_OK) {
   \       0x78   0x2E00             CMP      R6,#+0
   \       0x7A   0xD001             BEQ.N    ??sl_cli_command_execute_4
    566              return status;
   \       0x7C   0x0030             MOVS     R0,R6
   \       0x7E   0xE015             B.N      ??sl_cli_command_execute_1
    567            }
    568          
    569            // Call function
    570            arguments.handle = handle;
   \                     ??sl_cli_command_execute_4: (+1)
   \       0x80   0xF8CD 0x8014      STR      R8,[SP, #+20]
    571            arguments.argc = token_c;
   \       0x84   0x9803             LDR      R0,[SP, #+12]
   \       0x86   0x9006             STR      R0,[SP, #+24]
    572            arguments.argv = argv;
   \       0x88   0xA812             ADD      R0,SP,#+72
   \       0x8A   0x9007             STR      R0,[SP, #+28]
    573            arguments.arg_ofs = arg_ofs;
   \       0x8C   0x9804             LDR      R0,[SP, #+16]
   \       0x8E   0x9008             STR      R0,[SP, #+32]
    574            arguments.arg_type_list = cmd_info->arg_type_list;
   \       0x90   0xF119 0x000C      ADDS     R0,R9,#+12
   \       0x94   0x9009             STR      R0,[SP, #+36]
    575          
    576            sli_cli_pre_cmd_hook(&arguments);
   \       0x96   0xA805             ADD      R0,SP,#+20
   \       0x98   0x.... 0x....      BL       sli_cli_pre_cmd_hook
    577            cmd_info->function(&arguments);
   \       0x9C   0xA805             ADD      R0,SP,#+20
   \       0x9E   0xF8D9 0x1000      LDR      R1,[R9, #+0]
   \       0xA2   0x4788             BLX      R1
    578            sli_cli_post_cmd_hook(&arguments);
   \       0xA4   0xA805             ADD      R0,SP,#+20
   \       0xA6   0x.... 0x....      BL       sli_cli_post_cmd_hook
    579          
    580            // Command executed, return status that in this case is success
    581            return status;
   \       0xAA   0x0030             MOVS     R0,R6
   \                     ??sl_cli_command_execute_1: (+1)
   \       0xAC   0xB023             ADD      SP,SP,#+140
   \       0xAE   0xE8BD 0x83F0      POP      {R4-R9,PC}
    582          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \        0x0   0x20 0x00          DC8      " ",0x0,0x0    
   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \        0x0   0x68 0x65          DC8      "hex"          
   \              0x78 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \        0x0   0x65 0x6E          DC8      "end"          
   \              0x64 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \        0x0   0x00 0x00          DC8      "",0x0,0x0,0x0 
   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \        0x0   0x0A 0x00          DC8      "\n",0x0,0x0   
   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \        0x0   0x5B 0x00          DC8      "[",0x0,0x0    
   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \        0x0   0x2A 0x00          DC8      "*",0x0,0x0    
   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \        0x0   0x25 0x73          DC8      0x25, 0x73, 0x00, 0x00
   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \        0x0   0x5D 0x20          DC8      0x5D, 0x20, 0x00, 0x00
   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \        0x0   0x20 0x00          DC8      " ",0x0,0x0    
   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \        0x0   0x....'....        DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \        0x0   0x....'....        DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \        0x0   0x....'....        DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \        0x0   0x....'....        DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \        0x0   0x....'....        DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \        0x0   0x....'....        DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \        0x0   0x....'....        DC32     ?_10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \        0x0   0x....'....        DC32     ?_11

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \        0x0   0x....'....        DC32     ?_12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_12:
   \        0x0   0x....'....        DC32     ?_13

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_13:
   \        0x0   0x....'....        DC32     ?_14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_14:
   \        0x0   0x....'....        DC32     ?_15

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_15:
   \        0x0   0x....'....        DC32     ?_16

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_16:
   \        0x0   0x....'....        DC32     ?_17

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_17:
   \        0x0   0x....'....        DC32     ?_18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_18:
   \        0x0   0x....'....        DC32     ?_19

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_19:
   \        0x0   0x....'....        DC32     ?_21

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_20:
   \        0x0   0x....'....        DC32     ?_28

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_21:
   \        0x0   0x....'....        DC32     ?_29

   \                                 In section .rodata, align 2
   \        0x0   0x20 0x00          DC8 " "

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x75 0x69          DC8 "uint8"
   \              0x6E 0x74    
   \              0x38 0x00
   \        0x6                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x75 0x69          DC8 "uint16"
   \              0x6E 0x74    
   \              0x31 0x36    
   \              0x00
   \        0x7                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x75 0x69          DC8 "uint32"
   \              0x6E 0x74    
   \              0x33 0x32    
   \              0x00
   \        0x7                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0x69 0x6E          DC8 "int8"
   \              0x74 0x38    
   \              0x00
   \        0x5                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_5:
   \        0x0   0x69 0x6E          DC8 "int16"
   \              0x74 0x31    
   \              0x36 0x00
   \        0x6                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_6:
   \        0x0   0x69 0x6E          DC8 "int32"
   \              0x74 0x33    
   \              0x32 0x00
   \        0x6                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_7:
   \        0x0   0x73 0x74          DC8 "string"
   \              0x72 0x69    
   \              0x6E 0x67    
   \              0x00
   \        0x7                      DS8 1

   \                                 In section .rodata, align 4
   \        0x0   0x68 0x65          DC8 "hex"
   \              0x78 0x00

   \                                 In section .rodata, align 4
   \                     ?_9:
   \        0x0   0x75 0x69          DC8 "uint8opt"
   \              0x6E 0x74    
   \              0x38 0x6F    
   \              0x70 0x74    
   \              0x00
   \        0x9                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_10:
   \        0x0   0x75 0x69          DC8 "uint16opt"
   \              0x6E 0x74    
   \              0x31 0x36    
   \              0x6F 0x70    
   \              0x74 0x00
   \        0xA                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_11:
   \        0x0   0x75 0x69          DC8 "uint32opt"
   \              0x6E 0x74    
   \              0x33 0x32    
   \              0x6F 0x70    
   \              0x74 0x00
   \        0xA                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_12:
   \        0x0   0x69 0x6E          DC8 "int8opt"
   \              0x74 0x38    
   \              0x6F 0x70    
   \              0x74 0x00

   \                                 In section .rodata, align 4
   \                     ?_13:
   \        0x0   0x69 0x6E          DC8 "int16opt"
   \              0x74 0x31    
   \              0x36 0x6F    
   \              0x70 0x74    
   \              0x00
   \        0x9                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_14:
   \        0x0   0x69 0x6E          DC8 "int32opt"
   \              0x74 0x33    
   \              0x32 0x6F    
   \              0x70 0x74    
   \              0x00
   \        0x9                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_15:
   \        0x0   0x73 0x74          DC8 "stringopt"
   \              0x72 0x69    
   \              0x6E 0x67    
   \              0x6F 0x70    
   \              0x74 0x00
   \        0xA                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_16:
   \        0x0   0x68 0x65          DC8 "hexopt"
   \              0x78 0x6F    
   \              0x70 0x74    
   \              0x00
   \        0x7                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_17:
   \        0x0   0x61 0x64          DC8 "additional"
   \              0x64 0x69    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x61 0x6C    
   \              0x00
   \        0xB                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_18:
   \        0x0   0x77 0x69          DC8 "wildcard"
   \              0x6C 0x64    
   \              0x63 0x61    
   \              0x72 0x64    
   \              0x00
   \        0x9                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_19:
   \        0x0   0x67 0x72          DC8 "group"
   \              0x6F 0x75    
   \              0x70 0x00
   \        0x6                      DS8 2

   \                                 In section .rodata, align 4
   \        0x0   0x65 0x6E          DC8 "end"
   \              0x64 0x00

   \                                 In section .rodata, align 4
   \                     ?_21:
   \        0x0   0x75 0x6E          DC8 "unknown"
   \              0x6B 0x6E    
   \              0x6F 0x77    
   \              0x6E 0x00

   \                                 In section .rodata, align 1
   \        0x0   0x00               DC8 ""

   \                                 In section .rodata, align 2
   \        0x0   0x0A 0x00          DC8 "\012"

   \                                 In section .rodata, align 2
   \        0x0   0x5B 0x00          DC8 "["

   \                                 In section .rodata, align 4
   \        0x0   0x25 0x73          DC8 "%s"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 2
   \        0x0   0x2A 0x00          DC8 "*"

   \                                 In section .rodata, align 4
   \        0x0   0x5D 0x20          DC8 "] "
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_28:
   \        0x0   0x2E 0x2E          DC8 "... "
   \              0x2E 0x20    
   \              0x00
   \        0x5                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_29:
   \        0x0   0x68 0x65          DC8 "help"
   \              0x6C 0x70    
   \              0x00
   \        0x5                      DS8 3

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   cmd_help
        24   -> cmd_help_command
        24   -> cmd_help_group
      40   cmd_help_command
        40   -> get_arg_type_string
        40   -> print_and_pad
        40   -> sli_cli_io_printf
        40   -> sli_cli_io_putchar
        40   -> strcmp
        40   -> strlen
      16   cmd_help_group
        16   -> cmd_help_command
      16   cmd_strcmp
        16   -> sl_strcasecmp
       0   get_arg_type_string
      16   print_and_pad
        16   -> sli_cli_io_printf
        16   -> strlen
      64   scan_entry
        64   -> cmd_strcmp
        64   -> scan_entry
      16   sl_cli_command_add_command_group
        16   -> sl_slist_push
     168   sl_cli_command_execute
       168   -- Indirect call
       168   -> cmd_help
       168   -> sl_cli_command_find
       168   -> sl_cli_tokenize
       168   -> sli_cli_arguments_convert_multiple
       168   -> sli_cli_post_cmd_hook
       168   -> sli_cli_pre_cmd_hook
      64   sl_cli_command_find
        64   -> cmd_strcmp
        64   -> scan_entry
     112   sl_cli_command_find_matches
       112   -> sl_cli_tokenize
       112   -> sl_strcat_s
       112   -> strlen
       112   -> strncmp
      16   sl_cli_command_remove_command_group
        16   -> sl_slist_remove
       0   sli_cli_post_cmd_hook
       0   sli_cli_pre_cmd_hook


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_13
       4  ??DataTable5_14
       4  ??DataTable5_15
       4  ??DataTable5_16
       4  ??DataTable5_17
       4  ??DataTable5_18
       4  ??DataTable5_19
       4  ??DataTable5_2
       4  ??DataTable5_20
       4  ??DataTable5_21
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
       2  ?_0
       8  ?_1
      12  ?_10
      12  ?_11
       8  ?_12
      12  ?_13
      12  ?_14
      12  ?_15
       8  ?_16
      12  ?_17
      12  ?_18
       8  ?_19
       8  ?_2
       4  ?_20
       8  ?_21
       1  ?_22
       2  ?_23
       2  ?_24
       4  ?_25
       2  ?_26
       4  ?_27
       8  ?_28
       8  ?_29
       8  ?_3
       8  ?_4
       8  ?_5
       8  ?_6
       8  ?_7
       4  ?_8
      12  ?_9
      68  cmd_help
     236  cmd_help_command
      52  cmd_help_group
      16  cmd_strcmp
     210  get_arg_type_string
      36  print_and_pad
     178  scan_entry
      42  sl_cli_command_add_command_group
     178  sl_cli_command_execute
     152  sl_cli_command_find
     524  sl_cli_command_find_matches
      46  sl_cli_command_remove_command_group
       2  sli_cli_post_cmd_hook
       2  sli_cli_pre_cmd_hook

 
   225 bytes in section .rodata
 1'866 bytes in section .text
 
 1'862 bytes of CODE  memory (+ 4 bytes shared)
   225 bytes of CONST memory

Errors: none
Warnings: none
