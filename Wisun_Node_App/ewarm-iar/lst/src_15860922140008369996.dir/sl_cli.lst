###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         21/Jan/2025  17:21:05
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\src\sl_cli.c
#    Command line                 =
#        -f
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\ewarm-iar\obj\src_15860922140008369996.dir\sl_cli.o.rsp
#        (C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\src\sl_cli.c
#        -D DEBUG_EFM=1 -D EFR32FG28B322F1024IM48=1 -D
#        configNUM_SDK_THREAD_LOCAL_STORAGE_POINTERS=2 -D
#        SL_COMPONENT_CATALOG_PRESENT=1 -D
#        MBEDTLS_CONFIG_FILE=<sl_mbedtls_config.h> -D
#        MBEDTLS_PSA_CRYPTO_CONFIG_FILE=<psa_crypto_config.h> -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -D
#        RTT_USE_ASM=0 -lC
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\ewarm-iar\lst\src_15860922140008369996.dir
#        --diag_suppress Pa050 -o
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\ewarm-iar\obj\src_15860922140008369996.dir
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M33 --cmse --cmse -e --fpu=VFPv5_sp --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        9.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\src\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\autogen\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\config\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\config\rail\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\config\wisun\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\.\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\Device\SiliconLabs\EFR32FG28\Include\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_project_info\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\common\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\src\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\CMSIS\Core\Include\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\CMSIS\RTOS2\Include\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\device_init\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\emdrv\common\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\emlib\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\iostream\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\config\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\config\preset\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\include\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\source\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\include\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\cpu\include\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\ports\source\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\source\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\include\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\emdrv\nvm3\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\peripheral\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\printf\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\printf\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_psa_driver\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\common\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\wmbus\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\sidewalk\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\pa-conversions\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\pa-conversions\efr32xg28\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\rail_util_pti\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\se_manager\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\se_manager\src\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\segger\systemview\SEGGER\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\util\silicon_labs\silabs_core\memory_manager\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\common\toolchain\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\system\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_core\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_setting\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\cli_util\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\event_manager\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\ns_list\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\ping\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\nanostack\nanostack-libservice\mbed-client-libservice\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\udp_client\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\sleeptimer\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\plugin\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\stack\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\stack\inc\socket\
#        -On --use_c++_inline) --dependencies=n
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\ewarm-iar\obj\src_15860922140008369996.dir\sl_cli.o.iar_deps
#    Locale                       =  C
#    List file                    =
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\ewarm-iar\lst\src_15860922140008369996.dir\sl_cli.lst
#    Object file                  =
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\ewarm-iar\obj\src_15860922140008369996.dir\sl_cli.o
#    Runtime model:                  
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_file_descriptor     =  0
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#
###############################################################################

C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\src\sl_cli.c
      1          /***************************************************************************//**
      2           * @file
      3           * @brief Backbone of CLI framework
      4           * @version x.y.z
      5           *******************************************************************************
      6           * # License
      7           * <b>Copyright 2018 Silicon Laboratories Inc. www.silabs.com</b>
      8           *******************************************************************************
      9           *
     10           * SPDX-License-Identifier: Zlib
     11           *
     12           * The licensor of this software is Silicon Laboratories Inc.
     13           *
     14           * This software is provided 'as-is', without any express or implied
     15           * warranty. In no event will the authors be held liable for any damages
     16           * arising from the use of this software.
     17           *
     18           * Permission is granted to anyone to use this software for any purpose,
     19           * including commercial applications, and to alter it and redistribute it
     20           * freely, subject to the following restrictions:
     21           *
     22           * 1. The origin of this software must not be misrepresented; you must not
     23           *    claim that you wrote the original software. If you use this software
     24           *    in a product, an acknowledgment in the product documentation would be
     25           *    appreciated but is not required.
     26           * 2. Altered source versions must be plainly marked as such, and must not be
     27           *    misrepresented as being the original software.
     28           * 3. This notice may not be removed or altered from any source distribution.
     29           *
     30           ******************************************************************************/
     31          
     32          #if defined(SL_COMPONENT_CATALOG_PRESENT)
     33          #include "sl_component_catalog.h"
     34          #endif
     35          #if defined(SL_CATALOG_KERNEL_PRESENT)
     36          #include "cmsis_os2.h"
     37          #include "sl_cmsis_os2_common.h"
     38          #else
     39          #if defined(SL_CATALOG_CLI_DELAY_PRESENT)
     40          #include "sl_cli_delay.h"
     41          #endif
     42          #if defined(SL_CATALOG_CLI_STORAGE_RAM_PRESENT)
     43          #include "sl_cli_storage_ram.h"
     44          #endif
     45          #endif
     46          #include "sl_cli.h"
     47          #include "sli_cli_io.h"
     48          #include "sl_cli_input.h"
     49          #include "sli_cli_input.h"
     50          #include <string.h>
     51          
     52          #if !defined(__linux__)
     53          #include "em_device.h"
     54          #endif
     55          
     56          #if defined(SL_CATALOG_CLI_STORAGE_NVM3_PRESENT)
     57          #include "sl_cli_storage_nvm3.h"
     58          #endif
     59          
     60          #ifndef __WEAK
     61          #define __WEAK          __attribute__((weak))
     62          #endif
     63          
     64          /*******************************************************************************
     65           ****************************   HOOK REFERENCES   ******************************
     66           ******************************************************************************/
     67          
     68          /***************************************************************************//**
     69           * @brief
     70           *   Notify activity on the session (data received).
     71           *
     72           * @details
     73           *   This function should be used to reset the session inactivity, if implemented.
     74           *
     75           * @param[in] handle
     76           *   A handle to a CLI instance; Use session_data pointer for accessing instance's
     77           *   session data.
     78           *
     79           * @return SL_STATUS_OK if user can access the CLI instance, an error code otherwise .
     80           ******************************************************************************/

   \                                 In section .text, align 2
     81          __WEAK void sli_cli_session_activity_notification(sl_cli_handle_t handle)
     82          {
     83            (void) handle;
     84          }
   \                     sli_cli_session_activity_notification: (+1)
   \        0x0   0x4770             BX       LR
     85          
     86          /*******************************************************************************
     87           ****************************   STATIC VARIABLES   *****************************
     88           ******************************************************************************/
     89          
     90          /*******************************************************************************
     91           **************************   GLOBAL VARIABLES   *******************************
     92           ******************************************************************************/
     93          

   \                                 In section .bss, align 4
     94          sl_cli_handle_t sl_cli_default_handle;
   \                     sl_cli_default_handle:
   \        0x0                      DS8 4

   \                                 In section .bss, align 4
     95          sl_cli_command_group_t *sl_cli_default_command_group;
   \                     sl_cli_default_command_group:
   \        0x0                      DS8 4
     96          
     97          //****************************************************************************
     98          // Local functions
     99          
    100          /***************************************************************************//**
    101           * @brief
    102           *  Get a string that explain the status code in ascii text.
    103           *
    104           * @param[in] status
    105           *   A status code.
    106           *
    107           * @return
    108           *   A pointer to the string.
    109           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    110          static const char *status_to_string(sl_status_t status)
    111          {
   \                     status_to_string: (+1)
   \        0x0   0x0001             MOVS     R1,R0
    112            const char *string;
    113          
    114            switch (status) {
   \        0x2   0x0008             MOVS     R0,R1
   \        0x4   0x2800             CMP      R0,#+0
   \        0x6   0xD00A             BEQ.N    ??status_to_string_0
   \        0x8   0x281E             CMP      R0,#+30
   \        0xA   0xD00E             BEQ.N    ??status_to_string_1
   \        0xC   0x2821             CMP      R0,#+33
   \        0xE   0xD008             BEQ.N    ??status_to_string_2
   \       0x10   0x2826             CMP      R0,#+38
   \       0x12   0xD00C             BEQ.N    ??status_to_string_3
   \       0x14   0x282B             CMP      R0,#+43
   \       0x16   0xD00C             BEQ.N    ??status_to_string_4
   \       0x18   0x282D             CMP      R0,#+45
   \       0x1A   0xD004             BEQ.N    ??status_to_string_5
   \       0x1C   0xE00B             B.N      ??status_to_string_6
    115              case SL_STATUS_OK:
    116                string = "";
   \                     ??status_to_string_0: (+1)
   \       0x1E   0x....             ADR.N    R0,??DataTable5
    117                break;
   \       0x20   0xE00A             B.N      ??status_to_string_7
    118              case SL_STATUS_INVALID_PARAMETER:
    119                string = "The argument is not formatted correctly";
   \                     ??status_to_string_2: (+1)
   \       0x22   0x....             LDR.N    R0,??DataTable5_3
    120                break;
   \       0x24   0xE008             B.N      ??status_to_string_7
    121              case SL_STATUS_NOT_FOUND:
    122                string = "No command found";
   \                     ??status_to_string_5: (+1)
   \       0x26   0x....             LDR.N    R0,??DataTable5_4
    123                break;
   \       0x28   0xE006             B.N      ??status_to_string_7
    124              case SL_STATUS_HAS_OVERFLOWED:
    125                string = "Maximum number of arguments exceeded";
   \                     ??status_to_string_1: (+1)
   \       0x2A   0x....             LDR.N    R0,??DataTable5_5
    126                break;
   \       0x2C   0xE004             B.N      ??status_to_string_7
    127              case SL_STATUS_INVALID_TYPE:
    128                string = "Incorrect argument type";
   \                     ??status_to_string_3: (+1)
   \       0x2E   0x....             LDR.N    R0,??DataTable5_6
    129                break;
   \       0x30   0xE002             B.N      ??status_to_string_7
    130              case SL_STATUS_INVALID_COUNT:
    131                string = "Incorrect number of arguments";
   \                     ??status_to_string_4: (+1)
   \       0x32   0x....             LDR.N    R0,??DataTable5_7
    132                break;
   \       0x34   0xE000             B.N      ??status_to_string_7
    133              default:
    134                string = "Unknown error";
   \                     ??status_to_string_6: (+1)
   \       0x36   0x....             LDR.N    R0,??DataTable5_8
    135                break;
    136            }
    137          
    138            return string;
   \                     ??status_to_string_7: (+1)
   \       0x38   0x4770             BX       LR
    139          }
    140          
    141          /***************************************************************************//**
    142           * @brief
    143           *   Handle sli_cli_handle_input_and_history.
    144           *   Updates the history buffer, executes the function and clears the input
    145           *   string.
    146           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    147          void sli_cli_handle_input_and_history(sl_cli_handle_t handle)
    148          {
   \                     sli_cli_handle_input_and_history: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    149            handle->req_prompt = true;
   \        0x4   0x2001             MOVS     R0,#+1
   \        0x6   0xF884 0x0088      STRB     R0,[R4, #+136]
    150            if (strlen(handle->input_buffer) > 0) {
   \        0xA   0x0020             MOVS     R0,R4
   \        0xC   0x.... 0x....      BL       strlen
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD009             BEQ.N    ??sli_cli_handle_input_and_history_0
    151              sli_cli_input_update_history(handle);
   \       0x14   0x0020             MOVS     R0,R4
   \       0x16   0x.... 0x....      BL       sli_cli_input_update_history
    152              sl_cli_handle_input(handle, handle->input_buffer);
   \       0x1A   0x0021             MOVS     R1,R4
   \       0x1C   0x0020             MOVS     R0,R4
   \       0x1E   0x.... 0x....      BL       sl_cli_handle_input
    153              sl_cli_input_clear(handle);
   \       0x22   0x0020             MOVS     R0,R4
   \       0x24   0x.... 0x....      BL       sl_cli_input_clear
    154            }
    155          }
   \                     ??sli_cli_handle_input_and_history_0: (+1)
   \       0x28   0xBD10             POP      {R4,PC}
    156          
    157          /***************************************************************************//**
    158           * @brief
    159           *   Initialize session for a CLI instance.
    160           *
    161           * @details
    162           *   This function is called when initializing a CLI instance. It allows a security
    163           *   submodule to initialize its data, retrieve information and set state before the
    164           *   cli instance start.
    165           *
    166           * @param[in, out] handle
    167           *   A handle to a CLI instance;
    168           *   Should set session_data pointer for storing data which can be retrieved in the
    169           *   subsequent calls. The same function is called for all instances, the function must
    170           *   handle the different instance.
    171           *
    172           * @return SL_STATUS_OK if successful, an error code otherwise .
    173           ******************************************************************************/

   \                                 In section .text, align 2
    174          __WEAK sl_status_t sli_cli_session_init(sl_cli_handle_t handle)
    175          {
   \                     sli_cli_session_init: (+1)
   \        0x0   0x0001             MOVS     R1,R0
    176            (void)handle;
    177            return SL_STATUS_OK;
   \        0x2   0x2000             MOVS     R0,#+0
   \        0x4   0x4770             BX       LR
    178          }
    179          
    180          /***************************************************************************//**
    181           * @brief
    182           *   Handle Session; Authentication/logging/logout/lockup, etc.
    183           *
    184           * @details
    185           *   This function is called everytime the CLI tick function is executed. It doesn't
    186           *   mean an activity occured on the session (data received). This function can write
    187           *   and read iostream and the default stream. The CLI takes care of switching the default
    188           *   stream for every instance.
    189           *
    190           * @param[in] handle
    191           *   A handle to a CLI instance; Use session_data pointer for accessing instance's
    192           *   session data.
    193           *
    194           * @return SL_STATUS_OK if user can access the CLI instance, an error code otherwise .
    195           ******************************************************************************/

   \                                 In section .text, align 2
    196          __WEAK sl_status_t sli_cli_session_handler(sl_cli_handle_t handle)
    197          {
   \                     sli_cli_session_handler: (+1)
   \        0x0   0x0001             MOVS     R1,R0
    198            (void)handle;
    199            return SL_STATUS_OK;
   \        0x2   0x2000             MOVS     R0,#+0
   \        0x4   0x4770             BX       LR
    200          }
    201          
    202          /***************************************************************************//**
    203           * @brief
    204           *   Common tick function.
    205           *   Checks for new input, and acts according to the possible input.
    206           ******************************************************************************/

   \                                 In section .text, align 4
    207          __WEAK bool sli_cli_tick(sl_cli_handle_t handle)
    208          {
   \                     sli_cli_tick: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0007             MOVS     R7,R0
    209            int c;
    210            bool newline = false;
   \        0x4   0x2500             MOVS     R5,#+0
    211            bool no_valid_input = false;
   \        0x6   0x2600             MOVS     R6,#+0
    212          
    213            if (handle->tick_in_progress) {
   \        0x8   0xF897 0x0080      LDRB     R0,[R7, #+128]
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD001             BEQ.N    ??sli_cli_tick_1
    214              return false;
   \       0x10   0x2000             MOVS     R0,#+0
   \       0x12   0xE04B             B.N      ??sli_cli_tick_2
    215            }
    216          
    217            if (sli_cli_session_handler(handle) != SL_STATUS_OK) {
   \                     ??sli_cli_tick_1: (+1)
   \       0x14   0x0038             MOVS     R0,R7
   \       0x16   0x.... 0x....      BL       sli_cli_session_handler
   \       0x1A   0x2800             CMP      R0,#+0
   \       0x1C   0xD001             BEQ.N    ??sli_cli_tick_3
    218              return false;
   \       0x1E   0x2000             MOVS     R0,#+0
   \       0x20   0xE044             B.N      ??sli_cli_tick_2
    219            }
    220          
    221            handle->tick_in_progress = true;
   \                     ??sli_cli_tick_3: (+1)
   \       0x22   0x2001             MOVS     R0,#+1
   \       0x24   0xF887 0x0080      STRB     R0,[R7, #+128]
    222          
    223            if (handle->req_prompt) {
   \       0x28   0xF897 0x0088      LDRB     R0,[R7, #+136]
   \       0x2C   0x2800             CMP      R0,#+0
   \       0x2E   0xD007             BEQ.N    ??sli_cli_tick_4
    224              handle->req_prompt = false;
   \       0x30   0x2000             MOVS     R0,#+0
   \       0x32   0xF887 0x0088      STRB     R0,[R7, #+136]
    225              sli_cli_io_printf("%s", handle->prompt_string);
   \       0x36   0xF8D7 0x1084      LDR      R1,[R7, #+132]
   \       0x3A   0xA01D             ADR.N    R0,??sli_cli_tick_0
   \       0x3C   0x.... 0x....      BL       sli_cli_io_printf
    226            }
    227          #if defined(SL_CLI_ACTIVE_FLAG_EN)
    228            handle->active = false;
    229          #endif
    230          
    231            do {
    232          #if !defined(SL_CATALOG_KERNEL_PRESENT)
    233              if (handle->input_char != EOF) {
    234                c = handle->input_char;
    235                handle->input_char = EOF;
    236              } else
    237          #endif
    238              {
    239                c = sli_cli_io_getchar();
   \                     ??sli_cli_tick_4: (+1)
   \       0x40   0x.... 0x....      BL       sli_cli_io_getchar
   \       0x44   0x0004             MOVS     R4,R0
    240              }
    241              if ((c != EOF) && ((char)c != '\0')) {
   \       0x46   0xF114 0x0F01      CMN      R4,#+1
   \       0x4A   0xD00E             BEQ.N    ??sli_cli_tick_5
   \       0x4C   0x0020             MOVS     R0,R4
   \       0x4E   0xB2C0             UXTB     R0,R0
   \       0x50   0x2800             CMP      R0,#+0
   \       0x52   0xD00A             BEQ.N    ??sli_cli_tick_5
    242                sli_cli_session_activity_notification(handle);
   \       0x54   0x0038             MOVS     R0,R7
   \       0x56   0x.... 0x....      BL       sli_cli_session_activity_notification
    243                newline = sl_cli_input_char(handle, (char)c);
   \       0x5A   0x0020             MOVS     R0,R4
   \       0x5C   0x0001             MOVS     R1,R0
   \       0x5E   0xB2C9             UXTB     R1,R1
   \       0x60   0x0038             MOVS     R0,R7
   \       0x62   0x.... 0x....      BL       sl_cli_input_char
   \       0x66   0x0005             MOVS     R5,R0
   \       0x68   0xE001             B.N      ??sli_cli_tick_6
    244              } else {
    245                no_valid_input = true;
   \                     ??sli_cli_tick_5: (+1)
   \       0x6A   0x2001             MOVS     R0,#+1
   \       0x6C   0x0006             MOVS     R6,R0
    246              }
    247            } while ((c != EOF) && (!newline));
   \                     ??sli_cli_tick_6: (+1)
   \       0x6E   0xF114 0x0F01      CMN      R4,#+1
   \       0x72   0xD003             BEQ.N    ??sli_cli_tick_7
   \       0x74   0x0028             MOVS     R0,R5
   \       0x76   0xB2C0             UXTB     R0,R0
   \       0x78   0x2800             CMP      R0,#+0
   \       0x7A   0xD0E1             BEQ.N    ??sli_cli_tick_4
    248          
    249            if (newline) {
   \                     ??sli_cli_tick_7: (+1)
   \       0x7C   0x0028             MOVS     R0,R5
   \       0x7E   0xB2C0             UXTB     R0,R0
   \       0x80   0x2800             CMP      R0,#+0
   \       0x82   0xD00E             BEQ.N    ??sli_cli_tick_8
    250              sli_cli_handle_input_and_history(handle);
   \       0x84   0x0038             MOVS     R0,R7
   \       0x86   0x.... 0x....      BL       sli_cli_handle_input_and_history
    251          #if defined(SL_CLI_ACTIVE_FLAG_EN)
    252              handle->req_prompt = true;
    253              handle->active = true;
    254          #else
    255              if (handle->req_prompt) {
   \       0x8A   0xF897 0x0088      LDRB     R0,[R7, #+136]
   \       0x8E   0x2800             CMP      R0,#+0
   \       0x90   0xD007             BEQ.N    ??sli_cli_tick_8
    256                sli_cli_io_printf("%s", handle->prompt_string);
   \       0x92   0xF8D7 0x1084      LDR      R1,[R7, #+132]
   \       0x96   0xA006             ADR.N    R0,??sli_cli_tick_0
   \       0x98   0x.... 0x....      BL       sli_cli_io_printf
    257                handle->req_prompt = false;
   \       0x9C   0x2000             MOVS     R0,#+0
   \       0x9E   0xF887 0x0088      STRB     R0,[R7, #+136]
    258              }
    259          #endif
    260            }
    261            handle->tick_in_progress = false;
   \                     ??sli_cli_tick_8: (+1)
   \       0xA2   0x2000             MOVS     R0,#+0
   \       0xA4   0xF887 0x0080      STRB     R0,[R7, #+128]
    262          
    263            return no_valid_input;
   \       0xA8   0x0030             MOVS     R0,R6
   \       0xAA   0xB2C0             UXTB     R0,R0
   \                     ??sli_cli_tick_2: (+1)
   \       0xAC   0xBDF2             POP      {R1,R4-R7,PC}
   \       0xAE   0xBF00             Nop
   \                     ??sli_cli_tick_0:
   \       0xB0   0x25 0x73          DC8      0x25, 0x73, 0x00, 0x00
   \              0x00 0x00
    264          }
    265          
    266          #if defined(SL_CATALOG_KERNEL_PRESENT)
    267          /***************************************************************************//**
    268           * @brief
    269           *   The kernel tick function.
    270           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    271          static void tick_task(void *arg)
    272          {
   \                     tick_task: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0006             MOVS     R6,R0
    273            sl_cli_handle_t handle = (sl_cli_handle_t) arg;
   \        0x4   0x0034             MOVS     R4,R6
    274          
    275            sl_iostream_set_default(handle->iostream_handle);
   \        0x6   0xF8D4 0x02B0      LDR      R0,[R4, #+688]
   \        0xA   0x.... 0x....      BL       sl_iostream_set_default
    276          
    277            EFM_ASSERT(osDelay(handle->start_delay_tick) == osOK);
   \        0xE   0xF8D4 0x02B4      LDR      R0,[R4, #+692]
   \       0x12   0x.... 0x....      BL       osDelay
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD004             BEQ.N    ??tick_task_0
   \       0x1A   0xF240 0x1115      MOVW     R1,#+277
   \       0x1E   0x....             LDR.N    R0,??DataTable5_9
   \       0x20   0x.... 0x....      BL       assertEFM
    278          
    279          #if defined(SL_CATALOG_CLI_STORAGE_NVM3_PRESENT)
    280            sl_cli_storage_nvm3_tick(handle);
    281          #endif
    282          
    283            while (1) {
    284              bool no_valid_input;
    285          
    286              no_valid_input = sli_cli_tick(handle);
   \                     ??tick_task_0: (+1)
   \       0x24   0x0020             MOVS     R0,R4
   \       0x26   0x.... 0x....      BL       sli_cli_tick
   \       0x2A   0x0005             MOVS     R5,R0
    287              if (no_valid_input) {
   \       0x2C   0x0028             MOVS     R0,R5
   \       0x2E   0xB2C0             UXTB     R0,R0
   \       0x30   0x2800             CMP      R0,#+0
   \       0x32   0xD0F7             BEQ.N    ??tick_task_0
    288                EFM_ASSERT(osDelay(handle->loop_delay_tick) == osOK);
   \       0x34   0xF8D4 0x02B8      LDR      R0,[R4, #+696]
   \       0x38   0x.... 0x....      BL       osDelay
   \       0x3C   0x2800             CMP      R0,#+0
   \       0x3E   0xD0F1             BEQ.N    ??tick_task_0
   \       0x40   0xF44F 0x7190      MOV      R1,#+288
   \       0x44   0x....             LDR.N    R0,??DataTable5_9
   \       0x46   0x.... 0x....      BL       assertEFM
   \       0x4A   0xE7EB             B.N      ??tick_task_0
    289              }
    290            }
    291          }
    292          
    293          /***************************************************************************//**
    294           * @brief
    295           *   The kernel create task function.
    296           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    297          static sl_status_t create_task(sl_cli_handle_t handle,
    298                                         sl_cli_instance_parameters_t *parameters)
    299          {
   \                     create_task: (+1)
   \        0x0   0xB530             PUSH     {R4,R5,LR}
   \        0x2   0xB089             SUB      SP,SP,#+36
   \        0x4   0x0005             MOVS     R5,R0
   \        0x6   0x000C             MOVS     R4,R1
    300            osThreadAttr_t attr;
    301          
    302            attr.name = parameters->task_name;
   \        0x8   0x6820             LDR      R0,[R4, #+0]
   \        0xA   0x9000             STR      R0,[SP, #+0]
    303            attr.priority = parameters->prio;
   \        0xC   0x69E0             LDR      R0,[R4, #+28]
   \        0xE   0x9006             STR      R0,[SP, #+24]
    304            attr.stack_mem = parameters->stack;  // Will allocate dynamically if set to NULL
   \       0x10   0x6960             LDR      R0,[R4, #+20]
   \       0x12   0x9004             STR      R0,[SP, #+16]
    305            attr.stack_size = parameters->stack_size;
   \       0x14   0x69A0             LDR      R0,[R4, #+24]
   \       0x16   0x9005             STR      R0,[SP, #+20]
    306            attr.cb_mem = parameters->thread_cb; // Will allocate dynamically if set to NULL
   \       0x18   0x6920             LDR      R0,[R4, #+16]
   \       0x1A   0x9002             STR      R0,[SP, #+8]
    307            attr.cb_size = osThreadCbSize;
   \       0x1C   0x20CC             MOVS     R0,#+204
   \       0x1E   0x9003             STR      R0,[SP, #+12]
    308            attr.attr_bits = 0u;
   \       0x20   0x2000             MOVS     R0,#+0
   \       0x22   0x9001             STR      R0,[SP, #+4]
    309            attr.tz_module = 0u;
   \       0x24   0x2000             MOVS     R0,#+0
   \       0x26   0x9007             STR      R0,[SP, #+28]
    310          
    311            parameters->thread_id = osThreadNew(&tick_task, handle, &attr);
   \       0x28   0x466A             MOV      R2,SP
   \       0x2A   0x0029             MOVS     R1,R5
   \       0x2C   0x....             LDR.N    R0,??DataTable5_10
   \       0x2E   0x.... 0x....      BL       osThreadNew
   \       0x32   0x60E0             STR      R0,[R4, #+12]
    312            EFM_ASSERT(parameters->thread_id != NULL);
   \       0x34   0x68E0             LDR      R0,[R4, #+12]
   \       0x36   0x2800             CMP      R0,#+0
   \       0x38   0xD104             BNE.N    ??create_task_0
   \       0x3A   0xF44F 0x719C      MOV      R1,#+312
   \       0x3E   0x....             LDR.N    R0,??DataTable5_9
   \       0x40   0x.... 0x....      BL       assertEFM
    313          
    314            return SL_STATUS_OK;
   \                     ??create_task_0: (+1)
   \       0x44   0x2000             MOVS     R0,#+0
   \       0x46   0xB009             ADD      SP,SP,#+36
   \       0x48   0xBD30             POP      {R4,R5,PC}
    315          }
    316          #endif
    317          
    318          /*******************************************************************************
    319           ****************************   GLOBAL FUNCTIONS   *****************************
    320           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    321          uint8_t *sl_cli_get_argument_hex(sl_cli_command_arg_t *a, size_t n, size_t *l)
    322          {
   \                     sl_cli_get_argument_hex: (+1)
   \        0x0   0xB470             PUSH     {R4-R6}
   \        0x2   0x0003             MOVS     R3,R0
    323            // Byte 0 and 1 contains the length, while 2..n contains the data.
    324            uint8_t *ptr;
    325            uint8_t lo, hi;
    326          
    327            ptr = (uint8_t *)(a->argv[a->arg_ofs + n]);
   \        0x4   0x689C             LDR      R4,[R3, #+8]
   \        0x6   0x68D8             LDR      R0,[R3, #+12]
   \        0x8   0x1808             ADDS     R0,R1,R0
   \        0xA   0xF854 0x0020      LDR      R0,[R4, R0, LSL #+2]
    328            lo = *ptr++;
   \        0xE   0x7804             LDRB     R4,[R0, #+0]
   \       0x10   0x1C40             ADDS     R0,R0,#+1
    329            hi = *ptr++;
   \       0x12   0x7805             LDRB     R5,[R0, #+0]
   \       0x14   0x1C40             ADDS     R0,R0,#+1
    330            *l = (size_t)lo + ((size_t)hi << 8);
   \       0x16   0x002E             MOVS     R6,R5
   \       0x18   0xB2F6             UXTB     R6,R6
   \       0x1A   0x0236             LSLS     R6,R6,#+8
   \       0x1C   0xFA56 0xF684      UXTAB    R6,R6,R4
   \       0x20   0x6016             STR      R6,[R2, #+0]
    331            return ptr;
   \       0x22   0xBC70             POP      {R4-R6}
   \       0x24   0x4770             BX       LR
    332          }
    333          

   \                                 In section .text, align 2, keep-with-next
    334          void sl_cli_clear(sl_cli_handle_t handle)
    335          {
   \                     sl_cli_clear: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0004             MOVS     R4,R0
    336            // Clear and initialize handle
    337            memset(handle, 0, sizeof(sl_cli_t));
   \        0x4   0xF44F 0x752F      MOV      R5,#+700
   \        0x8   0x2600             MOVS     R6,#+0
   \        0xA   0x0027             MOVS     R7,R4
   \        0xC   0x0032             MOVS     R2,R6
   \        0xE   0x0029             MOVS     R1,R5
   \       0x10   0x0038             MOVS     R0,R7
   \       0x12   0x.... 0x....      BL       __aeabi_memset
    338            handle->input_size = SL_CLI_INPUT_BUFFER_SIZE;
   \       0x16   0x2080             MOVS     R0,#+128
   \       0x18   0xF8C4 0x008C      STR      R0,[R4, #+140]
    339            handle->input_pos = 0;
   \       0x1C   0x2000             MOVS     R0,#+0
   \       0x1E   0xF8C4 0x0090      STR      R0,[R4, #+144]
    340            handle->input_len = 0;
   \       0x22   0x2000             MOVS     R0,#+0
   \       0x24   0xF8C4 0x0094      STR      R0,[R4, #+148]
    341            handle->last_input_type = SL_CLI_INPUT_ORDINARY;
   \       0x28   0x2000             MOVS     R0,#+0
   \       0x2A   0xF884 0x0098      STRB     R0,[R4, #+152]
    342            handle->prompt_string = SL_CLI_PROMPT_STRING;
   \       0x2E   0x....             ADR.N    R0,??DataTable5_1
   \       0x30   0xF8C4 0x0084      STR      R0,[R4, #+132]
    343            handle->req_prompt = true;
   \       0x34   0x2001             MOVS     R0,#+1
   \       0x36   0xF884 0x0088      STRB     R0,[R4, #+136]
    344          #if SL_CLI_NUM_HISTORY_BYTES
    345            handle->history_pos = 0;
   \       0x3A   0x2000             MOVS     R0,#+0
   \       0x3C   0xF8C4 0x02AC      STR      R0,[R4, #+684]
    346          #endif
    347            sl_slist_init(&handle->command_group);
   \       0x40   0xF114 0x009C      ADDS     R0,R4,#+156
   \       0x44   0x.... 0x....      BL       sl_slist_init
    348          }
   \       0x48   0xBDF1             POP      {R0,R4-R7,PC}
    349          

   \                                 In section .text, align 2, keep-with-next
    350          void sl_cli_redirect_command(sl_cli_handle_t handle, sl_cli_command_function_t command_function, const char *prompt, void *user)
    351          {
   \                     sl_cli_redirect_command: (+1)
   \        0x0   0xB430             PUSH     {R4,R5}
    352            if ((handle->command_function == NULL) != (command_function == NULL)) {
   \        0x2   0xF8D0 0x40A0      LDR      R4,[R0, #+160]
   \        0x6   0x2C00             CMP      R4,#+0
   \        0x8   0xD101             BNE.N    ??sl_cli_redirect_command_0
   \        0xA   0x2401             MOVS     R4,#+1
   \        0xC   0xE000             B.N      ??sl_cli_redirect_command_1
   \                     ??sl_cli_redirect_command_0: (+1)
   \        0xE   0x2400             MOVS     R4,#+0
   \                     ??sl_cli_redirect_command_1: (+1)
   \       0x10   0x000D             MOVS     R5,R1
   \       0x12   0x2D00             CMP      R5,#+0
   \       0x14   0xD101             BNE.N    ??sl_cli_redirect_command_2
   \       0x16   0x2501             MOVS     R5,#+1
   \       0x18   0xE000             B.N      ??sl_cli_redirect_command_3
   \                     ??sl_cli_redirect_command_2: (+1)
   \       0x1A   0x2500             MOVS     R5,#+0
   \                     ??sl_cli_redirect_command_3: (+1)
   \       0x1C   0xB2E4             UXTB     R4,R4
   \       0x1E   0xB2ED             UXTB     R5,R5
   \       0x20   0x42AC             CMP      R4,R5
   \       0x22   0xD00A             BEQ.N    ??sl_cli_redirect_command_4
    353              handle->command_function = command_function;
   \       0x24   0xF8C0 0x10A0      STR      R1,[R0, #+160]
    354              handle->aux_argument = user;
   \       0x28   0xF8C0 0x30A4      STR      R3,[R0, #+164]
    355              handle->prompt_string = (prompt == NULL) ? SL_CLI_PROMPT_STRING : (char *)prompt;
   \       0x2C   0x2A00             CMP      R2,#+0
   \       0x2E   0xD101             BNE.N    ??sl_cli_redirect_command_5
   \       0x30   0x....             ADR.N    R4,??DataTable5_1
   \       0x32   0xE000             B.N      ??sl_cli_redirect_command_6
   \                     ??sl_cli_redirect_command_5: (+1)
   \       0x34   0x0014             MOVS     R4,R2
   \                     ??sl_cli_redirect_command_6: (+1)
   \       0x36   0xF8C0 0x4084      STR      R4,[R0, #+132]
    356            }
    357          }
   \                     ??sl_cli_redirect_command_4: (+1)
   \       0x3A   0xBC30             POP      {R4,R5}
   \       0x3C   0x4770             BX       LR
    358          

   \                                 In section .text, align 2, keep-with-next
    359          sl_status_t sl_cli_handle_input(sl_cli_handle_t handle, char *string)
    360          {
   \                     sl_cli_handle_input: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0005             MOVS     R5,R0
   \        0x4   0x000E             MOVS     R6,R1
    361            sl_status_t status = SL_STATUS_OK;
   \        0x6   0x2400             MOVS     R4,#+0
    362          
    363            if (handle->command_function == NULL) {
   \        0x8   0xF8D5 0x00A0      LDR      R0,[R5, #+160]
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD10E             BNE.N    ??sl_cli_handle_input_0
    364              status = sl_cli_command_execute(handle, string);
   \       0x10   0x0031             MOVS     R1,R6
   \       0x12   0x0028             MOVS     R0,R5
   \       0x14   0x.... 0x....      BL       sl_cli_command_execute
   \       0x18   0x0004             MOVS     R4,R0
    365              if (status != SL_STATUS_OK) {
   \       0x1A   0x2C00             CMP      R4,#+0
   \       0x1C   0xD00D             BEQ.N    ??sl_cli_handle_input_1
    366                sli_cli_io_printf("%s\n", status_to_string(status));
   \       0x1E   0x0020             MOVS     R0,R4
   \       0x20   0x.... 0x....      BL       status_to_string
   \       0x24   0x0001             MOVS     R1,R0
   \       0x26   0x....             ADR.N    R0,??DataTable5_2
   \       0x28   0x.... 0x....      BL       sli_cli_io_printf
   \       0x2C   0xE005             B.N      ??sl_cli_handle_input_1
    367              }
    368            } else {
    369              handle->command_function(string, handle->aux_argument);
   \                     ??sl_cli_handle_input_0: (+1)
   \       0x2E   0xF8D5 0x10A4      LDR      R1,[R5, #+164]
   \       0x32   0x0030             MOVS     R0,R6
   \       0x34   0xF8D5 0x20A0      LDR      R2,[R5, #+160]
   \       0x38   0x4790             BLX      R2
    370            }
    371          
    372            return status;
   \                     ??sl_cli_handle_input_1: (+1)
   \       0x3A   0x0020             MOVS     R0,R4
   \       0x3C   0xBD70             POP      {R4-R6,PC}
    373          }
    374          

   \                                 In section .text, align 2, keep-with-next
    375          sl_status_t sl_cli_instance_init(sl_cli_handle_t handle,
    376                                           sl_cli_instance_parameters_t *parameters)
    377          {
   \                     sl_cli_instance_init: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0006             MOVS     R6,R0
   \        0x4   0x000D             MOVS     R5,R1
    378            sl_status_t status = SL_STATUS_OK;
   \        0x6   0x2700             MOVS     R7,#+0
    379          
    380            sl_cli_clear(handle);
   \        0x8   0x0030             MOVS     R0,R6
   \        0xA   0x.... 0x....      BL       sl_cli_clear
    381            handle->iostream_handle = parameters->iostream_handle;
   \        0xE   0x6868             LDR      R0,[R5, #+4]
   \       0x10   0xF8C6 0x02B0      STR      R0,[R6, #+688]
    382            sl_cli_command_add_command_group(handle, parameters->default_command_group);
   \       0x14   0x68A9             LDR      R1,[R5, #+8]
   \       0x16   0x0030             MOVS     R0,R6
   \       0x18   0x.... 0x....      BL       sl_cli_command_add_command_group
    383          #if defined(SL_CATALOG_KERNEL_PRESENT)
    384            handle->start_delay_tick = ((uint64_t)osKernelGetTickFreq() * parameters->start_delay_ms) / 1000;
   \       0x1C   0x.... 0x....      BL       osKernelGetTickFreq
   \       0x20   0x6A29             LDR      R1,[R5, #+32]
   \       0x22   0xFBA1 0x0100      UMULL    R0,R1,R1,R0
   \       0x26   0xF44F 0x727A      MOV      R2,#+1000
   \       0x2A   0x2300             MOVS     R3,#+0
   \       0x2C   0x.... 0x....      BL       __aeabi_uldivmod
   \       0x30   0xF8C6 0x02B4      STR      R0,[R6, #+692]
    385            handle->loop_delay_tick = ((uint64_t)osKernelGetTickFreq() * parameters->loop_delay_ms) / 1000;
   \       0x34   0x.... 0x....      BL       osKernelGetTickFreq
   \       0x38   0x6A69             LDR      R1,[R5, #+36]
   \       0x3A   0xFBA1 0x0100      UMULL    R0,R1,R1,R0
   \       0x3E   0xF44F 0x727A      MOV      R2,#+1000
   \       0x42   0x2300             MOVS     R3,#+0
   \       0x44   0x.... 0x....      BL       __aeabi_uldivmod
   \       0x48   0xF8C6 0x02B8      STR      R0,[R6, #+696]
    386            status = create_task(handle, parameters);
   \       0x4C   0x0029             MOVS     R1,R5
   \       0x4E   0x0030             MOVS     R0,R6
   \       0x50   0x.... 0x....      BL       create_task
   \       0x54   0x0004             MOVS     R4,R0
    387            if (status != SL_STATUS_OK) {
   \       0x56   0x2C00             CMP      R4,#+0
   \       0x58   0xD001             BEQ.N    ??sl_cli_instance_init_0
    388              return status;
   \       0x5A   0x0020             MOVS     R0,R4
   \       0x5C   0xE004             B.N      ??sl_cli_instance_init_1
    389            }
    390          #else
    391            handle->input_char = EOF;
    392          #endif
    393          
    394            status = sli_cli_session_init(handle);
   \                     ??sl_cli_instance_init_0: (+1)
   \       0x5E   0x0030             MOVS     R0,R6
   \       0x60   0x.... 0x....      BL       sli_cli_session_init
    395            if (status != SL_STATUS_OK) {
   \       0x64   0x2800             CMP      R0,#+0
   \       0x66   0xD1FF             BNE.N    ??sl_cli_instance_init_1
    396              return status;
    397            }
    398          
    399          #if defined(SL_CLI_ACTIVE_FLAG_EN)
    400            handle->active = true;
    401          #endif
    402          
    403            return status;
   \                     ??sl_cli_instance_init_2: (+1)
   \                     ??sl_cli_instance_init_1: (+1)
   \       0x68   0xBDF2             POP      {R1,R4-R7,PC}
    404          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \        0x0   0x00 0x00          DC8      "",0x0,0x0,0x0 
   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \        0x0   0x3E 0x20          DC8      0x3E, 0x20, 0x00, 0x00
   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \        0x0   0x25 0x73          DC8      "%s\n"         
   \              0x0A 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \        0x0   0x....'....        DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \        0x0   0x....'....        DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \        0x0   0x....'....        DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \        0x0   0x....'....        DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \        0x0   0x....'....        DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \        0x0   0x....'....        DC32     tick_task

   \                                 In section .rodata, align 1
   \        0x0   0x00               DC8 ""

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x54 0x68          DC8 "The argument is not formatted correctly"
   \              0x65 0x20    
   \              0x61 0x72    
   \              0x67 0x75    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x74 0x65    
   \              0x64 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x6C    
   \              0x79 0x00

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x4E 0x6F          DC8 "No command found"
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x20 0x66    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x00
   \       0x11                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x4D 0x61          DC8 "Maximum number of arguments exceeded"
   \              0x78 0x69    
   \              0x6D 0x75    
   \              0x6D 0x20    
   \              0x6E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x61 0x72    
   \              0x67 0x75    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x65 0x78    
   \              0x63 0x65    
   \              0x65 0x64    
   \              0x65 0x64    
   \              0x00
   \       0x25                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0x49 0x6E          DC8 "Incorrect argument type"
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x61 0x72    
   \              0x67 0x75    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x20 0x74    
   \              0x79 0x70    
   \              0x65 0x00

   \                                 In section .rodata, align 4
   \                     ?_5:
   \        0x0   0x49 0x6E          DC8 "Incorrect number of arguments"
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x6E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x61 0x72    
   \              0x67 0x75    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x73 0x00
   \       0x1E                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_6:
   \        0x0   0x55 0x6E          DC8 "Unknown error"
   \              0x6B 0x6E    
   \              0x6F 0x77    
   \              0x6E 0x20    
   \              0x65 0x72    
   \              0x72 0x6F    
   \              0x72 0x00
   \        0xE                      DS8 2

   \                                 In section .rodata, align 4
   \        0x0   0x25 0x73          DC8 "%s"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_8:
   \        0x0   0x43 0x3A          DC8 0x43, 0x3A, 0x5C, 0x55, 0x73, 0x65, 0x72, 0x73
   \              0x5C 0x55    
   \              0x73 0x65    
   \              0x72 0x73
   \        0x8   0x5C 0x74          DC8 0x5C, 0x74, 0x72, 0x61, 0x69, 0x6E, 0x5C, 0x4F
   \              0x72 0x61    
   \              0x69 0x6E    
   \              0x5C 0x4F
   \       0x10   0x6E 0x65          DC8 0x6E, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x5C
   \              0x44 0x72    
   \              0x69 0x76    
   \              0x65 0x5C
   \       0x18   0x44 0x65          DC8 0x44, 0x65, 0x73, 0x6B, 0x74, 0x6F, 0x70, 0x5C
   \              0x73 0x6B    
   \              0x74 0x6F    
   \              0x70 0x5C
   \       0x20   0x50 0x72          DC8 0x50, 0x72, 0x6F, 0x6A, 0x65, 0x63, 0x74, 0x73
   \              0x6F 0x6A    
   \              0x65 0x63    
   \              0x74 0x73
   \       0x28   0x5C 0x57          DC8 0x5C, 0x57, 0x69, 0x73, 0x75, 0x5C, 0x57, 0x69
   \              0x69 0x73    
   \              0x75 0x5C    
   \              0x57 0x69
   \       0x30   0x73 0x75          DC8 0x73, 0x75, 0x6E, 0x5F, 0x4E, 0x6F, 0x64, 0x65
   \              0x6E 0x5F    
   \              0x4E 0x6F    
   \              0x64 0x65
   \       0x38   0x5F 0x41          DC8 0x5F, 0x41, 0x70, 0x70, 0x5C, 0x57, 0x69, 0x73
   \              0x70 0x70    
   \              0x5C 0x57    
   \              0x69 0x73
   \       0x40   0x75 0x6E          DC8 0x75, 0x6E, 0x5F, 0x4E, 0x6F, 0x64, 0x65, 0x5F
   \              0x5F 0x4E    
   \              0x6F 0x64    
   \              0x65 0x5F
   \       0x48   0x41 0x70          DC8 0x41, 0x70, 0x70, 0x5C, 0x67, 0x65, 0x63, 0x6B
   \              0x70 0x5C    
   \              0x67 0x65    
   \              0x63 0x6B
   \       0x50   0x6F 0x5F          DC8 0x6F, 0x5F, 0x73, 0x64, 0x6B, 0x5F, 0x34, 0x2E
   \              0x73 0x64    
   \              0x6B 0x5F    
   \              0x34 0x2E
   \       0x58   0x34 0x2E          DC8 0x34, 0x2E, 0x35, 0x5C, 0x70, 0x6C, 0x61, 0x74
   \              0x35 0x5C    
   \              0x70 0x6C    
   \              0x61 0x74
   \       0x60   0x66 0x6F          DC8 0x66, 0x6F, 0x72, 0x6D, 0x5C, 0x73, 0x65, 0x72
   \              0x72 0x6D    
   \              0x5C 0x73    
   \              0x65 0x72
   \       0x68   0x76 0x69          DC8 0x76, 0x69, 0x63, 0x65, 0x5C, 0x63, 0x6C, 0x69
   \              0x63 0x65    
   \              0x5C 0x63    
   \              0x6C 0x69
   \       0x70   0x5C 0x73          DC8 0x5C, 0x73, 0x72, 0x63, 0x5C, 0x73, 0x6C, 0x5F
   \              0x72 0x63    
   \              0x5C 0x73    
   \              0x6C 0x5F
   \       0x78   0x63 0x6C          DC8 0x63, 0x6C, 0x69, 0x2E, 0x63, 0
   \              0x69 0x2E    
   \              0x63 0x00
   \       0x7E                      DS8 2

   \                                 In section .rodata, align 4
   \        0x0   0x3E 0x20          DC8 "> "
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \        0x0   0x25 0x73          DC8 "%s\012"
   \              0x0A 0x00
    405          
    406          #if !defined(SL_CATALOG_KERNEL_PRESENT)
    407          bool sl_cli_is_ok_to_sleep(sl_cli_handle_t handle)
    408          {
    409            if (handle->input_char == EOF) {
    410              handle->input_char = sli_cli_io_getchar();
    411            }
    412            if (handle->input_char != EOF) {
    413              return false;
    414            }
    415            if (handle->block_sleep) {
    416              return false;
    417            }
    418          
    419          #if defined(SL_CLI_ACTIVE_FLAG_EN)
    420            return !handle->active;
    421          #else
    422            return true;
    423          #endif
    424          }
    425          
    426          void sl_cli_tick_instance(sl_cli_handle_t handle)
    427          {
    428          #if defined(SL_CATALOG_CLI_DELAY_PRESENT)
    429            if (sl_cli_delay_tick(handle)) {
    430              return;
    431            }
    432          #endif
    433          #if defined(SL_CATALOG_CLI_STORAGE_NVM3_PRESENT)
    434            if (sl_cli_storage_nvm3_tick(handle)) {
    435              return;
    436            }
    437          #endif
    438          #if defined(SL_CATALOG_CLI_STORAGE_RAM_PRESENT)
    439            if (sl_cli_storage_ram_tick(handle)) {
    440              return;
    441            }
    442          #endif
    443            sli_cli_tick(handle);
    444          }
    445          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      48   create_task
        48   -> assertEFM
        48   -> osThreadNew
      24   sl_cli_clear
        24   -> __aeabi_memset
        24   -> sl_slist_init
      12   sl_cli_get_argument_hex
      16   sl_cli_handle_input
        16   -- Indirect call
        16   -> sl_cli_command_execute
        16   -> sli_cli_io_printf
        16   -> status_to_string
      24   sl_cli_instance_init
        24   -> create_task
        24   -> osKernelGetTickFreq
        24   -> sl_cli_clear
        24   -> sl_cli_command_add_command_group
        24   -> sli_cli_session_init
        24 __aeabi_uldivmod
       8   sl_cli_redirect_command
       8   sli_cli_handle_input_and_history
         8   -> sl_cli_handle_input
         8   -> sl_cli_input_clear
         8   -> sli_cli_input_update_history
         8   -> strlen
       0   sli_cli_session_activity_notification
       0   sli_cli_session_handler
       0   sli_cli_session_init
      24   sli_cli_tick
        24   -> sl_cli_input_char
        24   -> sli_cli_handle_input_and_history
        24   -> sli_cli_io_getchar
        24   -> sli_cli_io_printf
        24   -> sli_cli_session_activity_notification
        24   -> sli_cli_session_handler
       0   status_to_string
      16   tick_task
        16   -> assertEFM
        16   -> osDelay
        16   -> sl_iostream_set_default
        16   -> sli_cli_tick


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
       1  ?_0
      40  ?_1
       4  ?_10
      20  ?_2
      40  ?_3
      24  ?_4
      32  ?_5
      16  ?_6
       4  ?_7
     128  ?_8
       4  ?_9
      74  create_task
      74  sl_cli_clear
       4  sl_cli_default_command_group
       4  sl_cli_default_handle
      38  sl_cli_get_argument_hex
      62  sl_cli_handle_input
     106  sl_cli_instance_init
      62  sl_cli_redirect_command
      42  sli_cli_handle_input_and_history
       2  sli_cli_session_activity_notification
       6  sli_cli_session_handler
       6  sli_cli_session_init
     180  sli_cli_tick
      58  status_to_string
      76  tick_task

 
   8 bytes in section .bss
 313 bytes in section .rodata
 830 bytes in section .text
 
 636 bytes of CODE  memory (+ 194 bytes shared)
 313 bytes of CONST memory
   8 bytes of DATA  memory

Errors: none
Warnings: none
