###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         21/Jan/2025  18:13:16
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_cli\sl_wisun_app_cli.c
#    Command line                 =
#        -f
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\ewarm-iar\obj\app_cli_18096498541576967472.dir\sl_wisun_app_cli.o.rsp
#        (C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_cli\sl_wisun_app_cli.c
#        -D DEBUG_EFM=1 -D EFR32FG28B322F1024IM48=1 -D
#        configNUM_SDK_THREAD_LOCAL_STORAGE_POINTERS=2 -D
#        SL_COMPONENT_CATALOG_PRESENT=1 -D
#        MBEDTLS_CONFIG_FILE=<sl_mbedtls_config.h> -D
#        MBEDTLS_PSA_CRYPTO_CONFIG_FILE=<psa_crypto_config.h> -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -D
#        RTT_USE_ASM=0 -lC
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\ewarm-iar\lst\app_cli_18096498541576967472.dir
#        --diag_suppress Pa050 -o
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\ewarm-iar\obj\app_cli_18096498541576967472.dir
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M33 --cmse --cmse -e --fpu=VFPv5_sp --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        9.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_cli\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\autogen\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\config\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\config\rail\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\config\wisun\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\.\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\Device\SiliconLabs\EFR32FG28\Include\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_project_info\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\common\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\src\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\CMSIS\Core\Include\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\CMSIS\RTOS2\Include\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\device_init\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\emdrv\common\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\emlib\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\iostream\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\config\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\config\preset\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\include\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\source\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\include\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\cpu\include\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\ports\source\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\source\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\include\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\emdrv\nvm3\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\peripheral\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\printf\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\printf\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_psa_driver\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\common\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\wmbus\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\sidewalk\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\pa-conversions\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\pa-conversions\efr32xg28\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\rail_util_pti\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\se_manager\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\se_manager\src\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\segger\systemview\SEGGER\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\util\silicon_labs\silabs_core\memory_manager\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\common\toolchain\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\system\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_core\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_setting\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\cli_util\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\event_manager\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\ns_list\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\ping\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\nanostack\nanostack-libservice\mbed-client-libservice\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\udp_client\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\sleeptimer\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\plugin\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\stack\inc\
#        -I
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\stack\inc\socket\
#        -On --use_c++_inline) --dependencies=n
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\ewarm-iar\obj\app_cli_18096498541576967472.dir\sl_wisun_app_cli.o.iar_deps
#    Locale                       =  C
#    List file                    =
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\ewarm-iar\lst\app_cli_18096498541576967472.dir\sl_wisun_app_cli.lst
#    Object file                  =
#        C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\ewarm-iar\obj\app_cli_18096498541576967472.dir\sl_wisun_app_cli.o
#    Runtime model:                  
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_file_descriptor     =  0
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#      __iar_require _Printf      =  int_specials,qualifiers
#
###############################################################################

C:\Users\train\OneDrive\Desktop\Projects\Wisu\Wisun_Node_App\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_cli\sl_wisun_app_cli.c
      1          /***************************************************************************//**
      2           * @file
      3           * @brief
      4           *******************************************************************************
      5           * # License
      6           * <b>Copyright 2021 Silicon Laboratories Inc. www.silabs.com</b>
      7           *******************************************************************************
      8           *
      9           * SPDX-License-Identifier: Zlib
     10           *
     11           * The licensor of this software is Silicon Laboratories Inc.
     12           *
     13           * This software is provided 'as-is', without any express or implied
     14           * warranty. In no event will the authors be held liable for any damages
     15           * arising from the use of this software.
     16           *
     17           * Permission is granted to anyone to use this software for any purpose,
     18           * including commercial applications, and to alter it and redistribute it
     19           * freely, subject to the following restrictions:
     20           *
     21           * 1. The origin of this software must not be misrepresented; you must not
     22           *    claim that you wrote the original software. If you use this software
     23           *    in a product, an acknowledgment in the product documentation would be
     24           *    appreciated but is not required.
     25           * 2. Altered source versions must be plainly marked as such, and must not be
     26           *    misrepresented as being the original software.
     27           * 3. This notice may not be removed or altered from any source distribution.
     28           *
     29           ******************************************************************************/
     30          
     31          // -----------------------------------------------------------------------------
     32          //                                   Includes
     33          // -----------------------------------------------------------------------------
     34          #include <stdio.h>
     35          #include <string.h>
     36          #include <assert.h>
     37          #include "sl_component_catalog.h"
     38          #include "sl_cli.h"
     39          #include "sl_wisun_api.h"
     40          #include "sl_wisun_trace_util.h"
     41          #include "sl_wisun_cli_settings.h"
     42          #include "sl_wisun_app_setting.h"
     43          #include "sl_wisun_cli_util.h"
     44          #include "sl_wisun_cli_core.h"
     45          #if defined(SL_CATALOG_WISUN_APP_CORE_PRESENT)
     46            #include "sl_wisun_app_core_util.h"
     47            #include "sl_wisun_app_core_config.h"
     48          #endif
     49          
     50          // -----------------------------------------------------------------------------
     51          //                              Macros and Typedefs
     52          // -----------------------------------------------------------------------------
     53          
     54          /// Internal Config: Enable FAN 1.1 configuration
     55          #define APP_CLI_ENABLE_FAN11_CONFIG          1U
     56          
     57          /// Internal Config: Enable Explicit configuration
     58          #define APP_CLI_ENABLE_EXPLICIT_CONFIG       1U
     59          
     60          /// Wisun CLI domain ID
     61          #define APP_CLI_WISUN_DOMAIN_ID              0U
     62          
     63          /// App CLI input flag: None
     64          #define APP_CLI_INPUT_FLAG_NONE              APP_SETTINGS_INPUT_FLAG_NONE
     65          
     66          /// App CLI input flag: Signed
     67          #define APP_CLI_INPUT_FLAG_SIGNED            APP_SETTINGS_INPUT_FLAG_SIGNED
     68          
     69          /// App CLI input flag: Default
     70          #define APP_CLI_INPUT_FLAG_DEFAULT           APP_SETTINGS_INPUT_FLAG_DEFAULT
     71          
     72          /// App CLI output flag: None
     73          #define APP_CLI_OUTPUT_FLAG_NONE             APP_SETTINGS_OUTPUT_FLAG_NONE
     74          
     75          /// App CLI output flag: Signed
     76          #define APP_CLI_OUTPUT_FLAG_SIGNED           APP_SETTINGS_OUTPUT_FLAG_SIGNED
     77          
     78          /// App CLI output flag: Hex
     79          #define APP_CLI_OUTPUT_FLAG_HEX              APP_SETTINGS_OUTPUT_FLAG_HEX
     80          
     81          /// App CLI output flag: Fixed size
     82          #define APP_CLI_OUTPUT_FLAG_FIXEDSIZE        APP_SETTINGS_OUTPUT_FLAG_FIXEDSIZE
     83          
     84          /// App CLI output flag: Default
     85          #define APP_CLI_OUTPUT_FLAG_DEFAULT          APP_SETTINGS_OUTPUT_FLAG_DEFAULT
     86          
     87          /// App CLI value: None
     88          #define APP_CLI_VALUE_SIZE_NONE              APP_SETTINGS_VALUE_SIZE_NONE
     89          
     90          /// App CLI output flag: uint8
     91          #define APP_CLI_VALUE_SIZE_UINT8             APP_SETTINGS_VALUE_SIZE_UINT8
     92          
     93          /// App CLI output flag: uint16
     94          #define APP_CLI_VALUE_SIZE_UINT16            APP_SETTINGS_VALUE_SIZE_UINT16
     95          
     96          /// App CLI output flag: uint32
     97          #define APP_CLI_VALUE_SIZE_UINT32            APP_SETTINGS_VALUE_SIZE_UINT32
     98          
     99          /// App CLI string value length
    100          #define APP_CLI_STR_VALUE_LENGTH             APP_SETTINGS_STR_VALUE_LENGTH
    101          
    102          /// App CLI paramater string name: regulatory domain
    103          #define APP_CLI_PHY_PARAM_REG_DOMAIN_STR    "regulatory_domain"
    104          
    105          /// App CLI paramater string name: operating mode
    106          #define APP_CLI_PHY_PARAM_OP_MODE_STR       "operating_mode"
    107          
    108          /// App CLI paramater string name: operating class
    109          #define APP_CLI_PHY_PARAM_OP_CLASS_STR      "operating_class"
    110          
    111          #if APP_CLI_ENABLE_EXPLICIT_CONFIG
    112          /// App CLI paramater string name: number of channels
    113          #define APP_CLI_PHY_PARAM_NUM_OF_CH_STR     "number_of_channels"
    114          
    115          /// App CLI paramater string name: CH0 frequency
    116          #define APP_CLI_PHY_PARAM_CH0_FREQ_STR      "ch0_frequency"
    117          
    118          /// App CLI paramater string name: channel spacing
    119          #define APP_CLI_PHY_PARAM_CH_SPACING_STR    "channel_spacing"
    120          #endif
    121          
    122          #if APP_CLI_ENABLE_EXPLICIT_CONFIG || APP_CLI_ENABLE_FAN11_CONFIG
    123          /// App CLI paramater string name: PHY mode ID
    124          #define APP_CLI_PHY_PARAM_PHY_MODE_ID_STR   "phy_mode_id"
    125          #endif
    126          
    127          #if APP_CLI_ENABLE_FAN11_CONFIG
    128          /// App CLI paramater string name: channel plan ID
    129          #define APP_CLI_PHY_PARAM_CH_PLAN_ID_STR    "chan_plan_id"
    130          #endif
    131          
    132          /// App CLI paramater string name: PHY config type
    133          #define APP_CLI_PHY_PARAM_PHY_CFG_TYPE_STR  "phy_config_type"
    134          
    135          /// App CLI entry
    136          typedef app_settings_entry_t app_cli_entry_t;
    137          
    138          /// Structure typedef to store common PHY parameters, like reg. domain and PHY mode ID
    139          typedef struct app_cli_phy_common_params {
    140            /// Regulatory domain
    141            uint8_t regulatory_domain;
    142            /// Operating class
    143            uint8_t operating_class;
    144            /// Operating mode
    145            uint16_t operating_mode;
    146          #if APP_CLI_ENABLE_EXPLICIT_CONFIG
    147            /// Number of channels
    148            uint16_t number_of_channels;
    149            /// CH0 frequency
    150            uint32_t ch0_frequency;
    151            /// Channel spacing
    152            uint8_t channel_spacing;
    153          #endif
    154          #if APP_CLI_ENABLE_FAN11_CONFIG
    155            /// Channel plan ID
    156            uint8_t chan_plan_id;
    157          #endif
    158          #if APP_CLI_ENABLE_EXPLICIT_CONFIG || APP_CLI_ENABLE_FAN11_CONFIG
    159            /// PHY mode ID
    160            uint8_t phy_mode_id;
    161          #endif
    162            /// PHY config type
    163            uint8_t phy_config_type;
    164          } app_cli_phy_common_params_t;
    165          
    166          // -----------------------------------------------------------------------------
    167          //                          Static Function Declarations
    168          // -----------------------------------------------------------------------------
    169          
    170          /**************************************************************************//**
    171           * @brief Set CLI common PHY parameters from PHY config
    172           * @details Synchronization is required because of common parameters,
    173           *          like reg. domain and PHY mode ID
    174           * @return sl_status_t SL_STATUS_OK on succes, SL_STATUS_FAIL otherwise
    175           *****************************************************************************/
    176          static sl_status_t _load_common_params_from_phy_cfg(void);
    177          
    178          /**************************************************************************//**
    179           * @brief Store CLI common PHY parameters to PHY config
    180           * @details Synchronization is required because of common parameters,
    181           *          like reg domain and phy mode id
    182           * @return sl_status_t SL_STATUS_OK on succes, SL_STATUS_FAIL otherwise
    183           *****************************************************************************/
    184          static sl_status_t _store_common_params_to_phy_cfg(void);
    185          
    186          /**************************************************************************//**
    187           * @brief Helper to get connection status for getter
    188           * @param[out] *value_str is the desired value string
    189           * @param[in] *key_str is the key string of the set command
    190           * @param[in] *entry is the settings entry
    191           * @return SL_STATUS_OK if the setting is success.
    192           * @return SL_STATUS_FAIL if setting failed.
    193           *****************************************************************************/
    194          static sl_status_t _app_cli_get_connection(char *value_str,
    195                                                     const char *key_str,
    196                                                     const app_cli_entry_t *entry);
    197          
    198          /**************************************************************************//**
    199           * @brief Helper to set network name for setter
    200           * @param[out] *value_str is the desired value string
    201           * @param[in] *key_str is the key string of the set command
    202           * @param[in] *entry is the settings entry
    203           * @return SL_STATUS_OK if the setting is success.
    204           * @return SL_STATUS_FAIL if setting failed.
    205           *****************************************************************************/
    206          static sl_status_t _app_cli_set_network_name(const char *value_str,
    207                                                       const char *key_str,
    208                                                       const app_cli_entry_t *entry);
    209          
    210          /**************************************************************************//**
    211           * @brief Helper to set network size for setter
    212           * @param[out] *value_str is the desired value string
    213           * @param[in] *key_str is the key string of the set command
    214           * @param[in] *entry is the settings entry
    215           * @return SL_STATUS_OK if the setting is success.
    216           * @return SL_STATUS_FAIL if setting failed.
    217           *****************************************************************************/
    218          static sl_status_t _app_cli_set_network_size(const char *value_str,
    219                                                       const char *key_str,
    220                                                       const app_cli_entry_t *entry);
    221          
    222          /**************************************************************************//**
    223           * @brief Helper to set TX power for getter
    224           * @param[out] *value_str is the desired value string
    225           * @param[in] *key_str is the key string of the set command
    226           * @param[in] *entry is the settings entry
    227           * @return SL_STATUS_OK if the setting is success.
    228           * @return SL_STATUS_FAIL if setting failed.
    229           *****************************************************************************/
    230          static sl_status_t _app_cli_set_tx_power(const char *value_str,
    231                                                   const char *key_str,
    232                                                   const app_cli_entry_t *entry);
    233          
    234          /**************************************************************************//**
    235           * @brief Helper to get network name for getter
    236           * @param[out] *value_str is the desired value string
    237           * @param[in] *key_str is the key string of the set command
    238           * @param[in] *entry is the settings entry
    239           * @return SL_STATUS_OK if the setting is success.
    240           * @return SL_STATUS_FAIL if setting failed.
    241           *****************************************************************************/
    242          static sl_status_t _app_cli_get_network_name(char *value_str,
    243                                                       const char *key_str,
    244                                                       const app_cli_entry_t *entry);
    245          
    246          /**************************************************************************//**
    247           * @brief Helper to get network size for getter
    248           * @param[out] *value_str is the desired value string
    249           * @param[in] *key_str is the key string of the set command
    250           * @param[in] *entry is the settings entry
    251           * @return SL_STATUS_OK if the setting is success.
    252           * @return SL_STATUS_FAIL if setting failed.
    253           *****************************************************************************/
    254          static sl_status_t _app_cli_get_network_size(char *value_str,
    255                                                       const char *key_str,
    256                                                       const app_cli_entry_t *entry);
    257          
    258          /**************************************************************************//**
    259           * @brief Helper to get TX power for getter
    260           * @param[out] *value_str is the desired value string
    261           * @param[in] *key_str is the key string of the set command
    262           * @param[in] *entry is the settings entry
    263           * @return SL_STATUS_OK if the setting is success.
    264           * @return SL_STATUS_FAIL if setting failed.
    265           *****************************************************************************/
    266          static sl_status_t _app_cli_get_tx_power(char *value_str,
    267                                                   const char *key_str,
    268                                                   const app_cli_entry_t *entry);
    269          
    270          /**************************************************************************//**
    271           * @brief Is CLI setting parameter is used.
    272           * @details It indicates the parameteris used in the current setup.
    273           * @param param_str Parameter string.
    274           * @return true Parameter is used.
    275           * @return false Parameter is not used.
    276           *****************************************************************************/
    277          static bool _is_param_used(const char *param_str);
    278          
    279          /**************************************************************************//**
    280           * @brief Get param used string flag
    281           * @details Helper function to get string representation of parameter usage
    282           * @return const char*
    283           *****************************************************************************/
    284          __STATIC_INLINE const char *_param_used_flag_str(const char *param_str);
    285          
    286          /**************************************************************************//**
    287           * @brief Helper to get wisun phy for getter
    288           * @param[out] *value_str is the desired value string
    289           * @param[in] *key_str is the key string of the set command
    290           * @param[in] *entry is the settings entry
    291           * @return SL_STATUS_OK if the setting is success.
    292           * @return SL_STATUS_FAIL if setting failed.
    293           *****************************************************************************/
    294          static sl_status_t _app_cli_get_phy(char *value_str,
    295                                              const char *key_str,
    296                                              const app_cli_entry_t *entry);
    297          
    298          #if defined(SL_CATALOG_WISUN_MODE_SWITCH_PRESENT)
    299          /**************************************************************************//**
    300           * @brief Helper to get wisun mode switch counters for getter
    301           * @param[out] *value_str is the desired value string
    302           * @param[in] *key_str is the key string of the set command
    303           * @param[in] *entry is the settings entry
    304           * @return SL_STATUS_OK if the setting is success.
    305           * @return SL_STATUS_FAIL if setting failed.
    306           *****************************************************************************/
    307          static sl_status_t _app_ms_get_counters(char *value_str,
    308                                                  const char *key_str,
    309                                                  const app_cli_entry_t *entry);
    310          #endif
    311          
    312          /**************************************************************************//**
    313           * @brief Helper to set TX power for getter
    314           * @param[out] *value_str is the desired value string
    315           * @param[in] *key_str is the key string of the set command
    316           * @param[in] *entry is the settings entry
    317           * @return SL_STATUS_OK if the setting is success.
    318           * @return SL_STATUS_FAIL if setting failed.
    319           *****************************************************************************/
    320          static sl_status_t _app_cli_set_phy(const char *value_str,
    321                                              const char *key_str,
    322                                              const app_settings_entry_t *entry);
    323          
    324          #if defined(SL_CATALOG_WISUN_APP_CORE_PRESENT)
    325          /**************************************************************************//**
    326           * @brief Helper to set regulation for setter
    327           * @param[out] *value_str is the desired value string
    328           * @param[in] *key_str is the key string of the set command
    329           * @param[in] *entry is the settings entry
    330           * @return SL_STATUS_OK if the setting is success.
    331           * @return SL_STATUS_FAIL if setting failed.
    332           *****************************************************************************/
    333          static sl_status_t _app_set_regulation(const char *value_str,
    334                                                 const char *key_str,
    335                                                 const app_settings_entry_t *entry);
    336          
    337          /**************************************************************************//**
    338           * @brief Helper to set regulation warning threshold for setter
    339           * @param[out] *value_str is the desired value string
    340           * @param[in] *key_str is the key string of the set command
    341           * @param[in] *entry is the settings entry
    342           * @return SL_STATUS_OK if the setting is success.
    343           * @return SL_STATUS_FAIL if setting failed.
    344           *****************************************************************************/
    345          static sl_status_t _app_set_regulation_warning_threshold(const char *value_str,
    346                                                                   const char *key_str,
    347                                                                   const app_settings_entry_t *entry);
    348          
    349          /**************************************************************************//**
    350           * @brief Helper to set regulation alert threshold for setter
    351           * @param[out] *value_str is the desired value string
    352           * @param[in] *key_str is the key string of the set command
    353           * @param[in] *entry is the settings entry
    354           * @return SL_STATUS_OK if the setting is success.
    355           * @return SL_STATUS_FAIL if setting failed.
    356           *****************************************************************************/
    357          static sl_status_t _app_set_regulation_alert_threshold(const char *value_str,
    358                                                                 const char *key_str,
    359                                                                 const app_settings_entry_t *entry);
    360          
    361          /**************************************************************************//**
    362           * @brief Helper to get regulation for getter
    363           * @param[out] *value_str is the desired value string
    364           * @param[in] *key_str is the key string of the set command
    365           * @param[in] *entry is the settings entry
    366           * @return SL_STATUS_OK if the setting is success.
    367           * @return SL_STATUS_FAIL if setting failed.
    368           *****************************************************************************/
    369          static sl_status_t _app_get_regulation(char *value_str,
    370                                                 const char *key_str,
    371                                                 const app_cli_entry_t *entry);
    372          
    373          /**************************************************************************//**
    374           * @brief Helper to get regulation warning threshold for setter
    375           * @param[out] *value_str is the desired value string
    376           * @param[in] *key_str is the key string of the set command
    377           * @param[in] *entry is the settings entry
    378           * @return SL_STATUS_OK if the setting is success.
    379           * @return SL_STATUS_FAIL if setting failed.
    380           *****************************************************************************/
    381          static sl_status_t _app_get_regulation_warning_threshold(char *value_str,
    382                                                                   const char *key_str,
    383                                                                   const app_cli_entry_t *entry);
    384          
    385          /**************************************************************************//**
    386           * @brief Helper to get regulation alert threshold for setter
    387           * @param[out] *value_str is the desired value string
    388           * @param[in] *key_str is the key string of the set command
    389           * @param[in] *entry is the settings entry
    390           * @return SL_STATUS_OK if the setting is success.
    391           * @return SL_STATUS_FAIL if setting failed.
    392           *****************************************************************************/
    393          static sl_status_t _app_get_regulation_alert_threshold(char *value_str,
    394                                                                 const char *key_str,
    395                                                                 const app_cli_entry_t *entry);
    396          
    397          #endif
    398          
    399          #if defined(SL_CATALOG_WISUN_LFN_DEVICE_SUPPORT_PRESENT)
    400          /**************************************************************************//**
    401           * @brief Helper to get device type
    402           * @param[out] *value_str is the desired value string
    403           * @param[in] *key_str is the key string of the set command
    404           * @param[in] *entry is the settings entry
    405           * @return SL_STATUS_OK if the setting is success.
    406           * @return SL_STATUS_FAIL if setting failed.
    407           *****************************************************************************/
    408          static sl_status_t _app_get_device_type(char *value_str,
    409                                                  const char *key_str,
    410                                                  const app_cli_entry_t *entry);
    411          
    412          /**************************************************************************//**
    413           * @brief Helper to get LFN profile
    414           * @param[out] *value_str is the desired value string
    415           * @param[in] *key_str is the key string of the set command
    416           * @param[in] *entry is the settings entry
    417           * @return SL_STATUS_OK if the setting is success.
    418           * @return SL_STATUS_FAIL if setting failed.
    419           *****************************************************************************/
    420          static sl_status_t _app_get_lfn_profile(char *value_str,
    421                                                  const char *key_str,
    422                                                  const app_cli_entry_t *entry);
    423          #endif
    424          
    425          /**************************************************************************//**
    426           * @brief Connect to Wi-SUN network by PHY configuration type
    427           * @details CLI callback helper function
    428           * @param config_type PHY Configuration type
    429           *****************************************************************************/
    430          static void _app_connect(const sl_wisun_phy_config_type_t config_type);
    431          
    432          // -----------------------------------------------------------------------------
    433          //                                Static Variables
    434          // -----------------------------------------------------------------------------
    435          
    436          #if defined(SL_CATALOG_WISUN_APP_CORE_PRESENT)
    437          /// Wi-SUN application regulation

   \                                 In section .bss, align 1
    438          static sl_wisun_regulation_t app_regulation = (sl_wisun_regulation_t)SL_WISUN_APP_CORE_REGULATION;
   \                     app_regulation:
   \        0x0                      DS8 1
    439          #endif
    440          
    441          /// Common PHY parameters for CLI setter/getter

   \                                 In section .bss, align 4
    442          static app_cli_phy_common_params_t _phy_common_params = { 0U };
   \                     _phy_common_params:
   \        0x0                      DS8 16
    443          
    444          /// Mapping PHY config parameters by PHY config type

   \                                 In section .rodata, align 4
    445          static const app_enum_t _phy_cfg_map[] = {
   \                     _phy_cfg_map:
   \        0x0   0x....'....        DC32 ?_0, 0, ?_1, 0, ?_2, 0, ?_0, 1, ?_3, 1, ?_4, 1, ?_5, 2, ?_6, 2
   \              0x0000'0000  
   \              0x....'....  
   \              0x0000'0000  
   \              0x....'....  
   \              0x0000'0000  
   \              0x....'....  
   \              0x0000'0001  
   \              0x....'....  
   \              0x0000'0001  
   \              0x....'....  
   \              0x0000'0001  
   \              0x....'....  
   \              0x0000'0002  
   \              0x....'....  
   \              0x0000'0002
   \       0x40   0x....'....        DC32 ?_7, 2, ?_4, 2, 0x0, 0
   \              0x0000'0002  
   \              0x....'....  
   \              0x0000'0002  
   \              0x0000'0000  
   \              0x0000'0000
    446            // FAN 1.0 parameters
    447            { APP_CLI_PHY_PARAM_REG_DOMAIN_STR, SL_WISUN_PHY_CONFIG_FAN10 },
    448            { APP_CLI_PHY_PARAM_OP_CLASS_STR, SL_WISUN_PHY_CONFIG_FAN10 },
    449            { APP_CLI_PHY_PARAM_OP_MODE_STR, SL_WISUN_PHY_CONFIG_FAN10 },
    450          
    451            // FAN 1.1 parameters
    452          #if APP_CLI_ENABLE_FAN11_CONFIG
    453            { APP_CLI_PHY_PARAM_REG_DOMAIN_STR, SL_WISUN_PHY_CONFIG_FAN11 },
    454            { APP_CLI_PHY_PARAM_CH_PLAN_ID_STR, SL_WISUN_PHY_CONFIG_FAN11 },
    455            { APP_CLI_PHY_PARAM_PHY_MODE_ID_STR, SL_WISUN_PHY_CONFIG_FAN11 },
    456          #endif
    457          
    458            // Explicit parameters
    459          #if APP_CLI_ENABLE_EXPLICIT_CONFIG
    460            { APP_CLI_PHY_PARAM_CH0_FREQ_STR, SL_WISUN_PHY_CONFIG_EXPLICIT },
    461            { APP_CLI_PHY_PARAM_NUM_OF_CH_STR, SL_WISUN_PHY_CONFIG_EXPLICIT },
    462            { APP_CLI_PHY_PARAM_CH_SPACING_STR, SL_WISUN_PHY_CONFIG_EXPLICIT },
    463            { APP_CLI_PHY_PARAM_PHY_MODE_ID_STR, SL_WISUN_PHY_CONFIG_EXPLICIT },
    464          #endif
    465            // End list
    466            { NULL, 0 }
    467          };
    468          
    469          // -----------------------------------------------------------------------------
    470          //                                Global Variables
    471          // -----------------------------------------------------------------------------
    472          
    473          /// Wi-SUN application settings domain string

   \                                 In section .data, align 4
    474          const char *app_settings_domain_str[] = {
   \                     app_settings_domain_str:
   \        0x0   0x....'....        DC32 ?_8, 0x0
   \              0x0000'0000
    475            "wisun",
    476            NULL,
    477          };
    478          
    479          ///  Wi-SUN application settings entry/entries

   \                                 In section .rodata, align 4
    480          const app_cli_entry_t app_settings_entries[] =
   \                     app_settings_entries:
   \        0x0   0x....'....        DC32 ?_9
   \        0x4   0x00 0x21          DC8 0, 33, 0, 0
   \              0x00 0x00
   \        0x8   0x0000'0000        DC32 0x0, 0x0, 0x0, _app_cli_set_network_name
   \              0x0000'0000  
   \              0x0000'0000  
   \              0x....'....
   \       0x18   0x....'....        DC32 _app_cli_get_network_name, ?_10, ?_11
   \              0x....'....  
   \              0x....'....
   \       0x24   0x00 0x01          DC8 0, 1, 0, 0
   \              0x00 0x00
   \       0x28   0x0000'0000        DC32 0x0, 0x0, app_wisun_phy_config_type_enum, 0x0, _app_cli_get_phy
   \              0x0000'0000  
   \              0x....'....  
   \              0x0000'0000  
   \              0x....'....
   \       0x3C   0x....'....        DC32 ?_12, ?_13
   \              0x....'....
   \       0x44   0x00 0x01          DC8 0, 1, 0, 0
   \              0x00 0x00
   \       0x48   0x0000'0000        DC32 0x0, app_wisun_nw_size_enum, app_wisun_nw_size_enum
   \              0x....'....  
   \              0x....'....
   \       0x54   0x....'....        DC32 _app_cli_set_network_size, _app_cli_get_network_size, ?_14, ?_15
   \              0x....'....  
   \              0x....'....  
   \              0x....'....
   \       0x64   0x00 0x01          DC8 0, 1, 1, 1
   \              0x01 0x01
   \       0x68   0x0000'0000        DC32 0x0, 0x0, 0x0, _app_cli_set_tx_power, _app_cli_get_tx_power, ?_16
   \              0x0000'0000  
   \              0x0000'0000  
   \              0x....'....  
   \              0x....'....  
   \              0x....'....
   \       0x80   0x....'....        DC32 ?_0
   \       0x84   0x00 0x01          DC8 0, 1, 0, 0
   \              0x00 0x00
   \       0x88   0x0000'0000        DC32 0x0, app_wisun_phy_reg_domain_enum, app_wisun_phy_reg_domain_enum
   \              0x....'....  
   \              0x....'....
   \       0x94   0x....'....        DC32 _app_cli_set_phy, _app_cli_get_phy, ?_17, ?_1
   \              0x....'....  
   \              0x....'....  
   \              0x....'....
   \       0xA4   0x00 0x01          DC8 0, 1, 0, 0
   \              0x00 0x00
   \       0xA8   0x0000'0000        DC32 0x0, 0x0, 0x0, _app_cli_set_phy, _app_cli_get_phy, ?_18, ?_2
   \              0x0000'0000  
   \              0x0000'0000  
   \              0x....'....  
   \              0x....'....  
   \              0x....'....  
   \              0x....'....
   \       0xC4   0x00 0x01          DC8 0, 1, 0, 0
   \              0x00 0x00
   \       0xC8   0x0000'0000        DC32 0x0, 0x0, 0x0, _app_cli_set_phy, _app_cli_get_phy, ?_19, ?_3
   \              0x0000'0000  
   \              0x0000'0000  
   \              0x....'....  
   \              0x....'....  
   \              0x....'....  
   \              0x....'....
   \       0xE4   0x00 0x01          DC8 0, 1, 0, 0
   \              0x00 0x00
   \       0xE8   0x0000'0000        DC32 0x0, 0x0, 0x0, _app_cli_set_phy, _app_cli_get_phy, ?_20, ?_4
   \              0x0000'0000  
   \              0x0000'0000  
   \              0x....'....  
   \              0x....'....  
   \              0x....'....  
   \              0x....'....
   \      0x104   0x00 0x01          DC8 0, 1, 0, 0
   \              0x00 0x00
   \      0x108   0x0000'0000        DC32 0x0, 0x0, 0x0, _app_cli_set_phy, _app_cli_get_phy, ?_21, ?_5
   \              0x0000'0000  
   \              0x0000'0000  
   \              0x....'....  
   \              0x....'....  
   \              0x....'....  
   \              0x....'....
   \      0x124   0x00 0x04          DC8 0, 4, 0, 0
   \              0x00 0x00
   \      0x128   0x0000'0000        DC32 0x0, 0x0, 0x0, _app_cli_set_phy, _app_cli_get_phy, ?_22, ?_6
   \              0x0000'0000  
   \              0x0000'0000  
   \              0x....'....  
   \              0x....'....  
   \              0x....'....  
   \              0x....'....
   \      0x144   0x00 0x02          DC8 0, 2, 0, 0
   \              0x00 0x00
   \      0x148   0x0000'0000        DC32 0x0, 0x0, 0x0, _app_cli_set_phy, _app_cli_get_phy, ?_23, ?_7
   \              0x0000'0000  
   \              0x0000'0000  
   \              0x....'....  
   \              0x....'....  
   \              0x....'....  
   \              0x....'....
   \      0x164   0x00 0x01          DC8 0, 1, 0, 0
   \              0x00 0x00
   \      0x168   0x0000'0000        DC32 0x0, app_wisun_phy_channel_spacing_enum
   \              0x....'....
   \      0x170   0x....'....        DC32 app_wisun_phy_channel_spacing_enum, _app_cli_set_phy
   \              0x....'....
   \      0x178   0x....'....        DC32 _app_cli_get_phy, ?_24, ?_25
   \              0x....'....  
   \              0x....'....
   \      0x184   0x00 0x01          DC8 0, 1, 0, 0
   \              0x00 0x00
   \      0x188   0x0000'0000        DC32 0x0, app_wisun_conn_status_enum, app_wisun_conn_status_enum, 0x0
   \              0x....'....  
   \              0x....'....  
   \              0x0000'0000
   \      0x198   0x....'....        DC32 _app_cli_get_connection, ?_26, ?_27
   \              0x....'....  
   \              0x....'....
   \      0x1A4   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00
   \      0x1A8   0x0000'0000        DC32 0x0, 0x0, 0x0, 0x0, app_settings_get_ip_address, ?_28, ?_29
   \              0x0000'0000  
   \              0x0000'0000  
   \              0x0000'0000  
   \              0x....'....  
   \              0x....'....  
   \              0x....'....
   \      0x1C4   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00
   \      0x1C8   0x0000'0000        DC32 0x0, 0x0, 0x0, 0x0, app_settings_get_ip_address, ?_30, ?_31
   \              0x0000'0000  
   \              0x0000'0000  
   \              0x0000'0000  
   \              0x....'....  
   \              0x....'....  
   \              0x....'....
   \      0x1E4   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00
   \      0x1E8   0x0000'0000        DC32 0x0, 0x0, 0x0, 0x0, app_settings_get_ip_address, ?_32, ?_33
   \              0x0000'0000  
   \              0x0000'0000  
   \              0x0000'0000  
   \              0x....'....  
   \              0x....'....  
   \              0x....'....
   \      0x204   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00
   \      0x208   0x0000'0000        DC32 0x0, 0x0, 0x0, 0x0, app_settings_get_ip_address, ?_34, ?_35
   \              0x0000'0000  
   \              0x0000'0000  
   \              0x0000'0000  
   \              0x....'....  
   \              0x....'....  
   \              0x....'....
   \      0x224   0x00 0x01          DC8 0, 1, 0, 0
   \              0x00 0x00
   \      0x228   0x0000'0000        DC32 0x0, app_regulation_enum, app_regulation_enum, _app_set_regulation
   \              0x....'....  
   \              0x....'....  
   \              0x....'....
   \      0x238   0x....'....        DC32 _app_get_regulation, ?_36, ?_37
   \              0x....'....  
   \              0x....'....
   \      0x244   0x00 0x01          DC8 0, 1, 1, 1
   \              0x01 0x01
   \      0x248   0x0000'0000        DC32 0x0, 0x0, 0x0, _app_set_regulation_warning_threshold
   \              0x0000'0000  
   \              0x0000'0000  
   \              0x....'....
   \      0x258   0x....'....        DC32 _app_get_regulation_warning_threshold, ?_38, ?_39
   \              0x....'....  
   \              0x....'....
   \      0x264   0x00 0x01          DC8 0, 1, 1, 1
   \              0x01 0x01
   \      0x268   0x0000'0000        DC32 0x0, 0x0, 0x0, _app_set_regulation_alert_threshold
   \              0x0000'0000  
   \              0x0000'0000  
   \              0x....'....
   \      0x278   0x....'....        DC32 _app_get_regulation_alert_threshold, ?_40, 0x0
   \              0x....'....  
   \              0x0000'0000
   \      0x284   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00
   \      0x288   0x0000'0000        DC32 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
   \              0x0000'0000  
   \              0x0000'0000  
   \              0x0000'0000  
   \              0x0000'0000  
   \              0x0000'0000
    481          {
    482            {
    483              .key = "network_name",
    484              .domain = APP_CLI_WISUN_DOMAIN_ID,
    485              .value_size = SL_WISUN_NETWORK_NAME_SIZE + 1,
    486              .input = APP_CLI_INPUT_FLAG_DEFAULT,
    487              .output = APP_CLI_OUTPUT_FLAG_DEFAULT,
    488              .value = NULL,
    489              .input_enum_list = NULL,
    490              .output_enum_list = NULL,
    491              .set_handler = _app_cli_set_network_name,
    492              .get_handler = _app_cli_get_network_name,
    493              .description = "Wi-SUN network [string] max 32"
    494            },
    495            {
    496              .key = APP_CLI_PHY_PARAM_PHY_CFG_TYPE_STR,
    497              .domain = APP_CLI_WISUN_DOMAIN_ID,
    498              .value_size = APP_SETTINGS_VALUE_SIZE_UINT8,
    499              .input = APP_SETTINGS_INPUT_FLAG_DEFAULT,
    500              .output = APP_SETTINGS_OUTPUT_FLAG_DEFAULT,
    501              .value = NULL,
    502              .input_enum_list = NULL,
    503              .output_enum_list = app_wisun_phy_config_type_enum,
    504              .set_handler = NULL,
    505              .get_handler = _app_cli_get_phy,
    506              .description = "PHY configuration type (FAN 1.0|FAN 1.1|explicit)"
    507            },
    508            {
    509              .key = "network_size",
    510              .domain = APP_CLI_WISUN_DOMAIN_ID,
    511              .value_size = APP_CLI_VALUE_SIZE_UINT8,
    512              .input = APP_CLI_INPUT_FLAG_DEFAULT,
    513              .output = APP_CLI_OUTPUT_FLAG_DEFAULT,
    514              .value = NULL,
    515              .input_enum_list = app_wisun_nw_size_enum,
    516              .output_enum_list = app_wisun_nw_size_enum,
    517              .set_handler = _app_cli_set_network_size,
    518              .get_handler = _app_cli_get_network_size,
    519              .description = "Wi-SUN network size [uint8]"
    520            },
    521            {
    522              .key = "tx_power",
    523              .domain = APP_CLI_WISUN_DOMAIN_ID,
    524              .value_size = APP_CLI_VALUE_SIZE_UINT8,
    525              .input = APP_CLI_INPUT_FLAG_DEFAULT | APP_CLI_INPUT_FLAG_SIGNED,
    526              .output = APP_CLI_OUTPUT_FLAG_DEFAULT | APP_CLI_OUTPUT_FLAG_SIGNED,
    527              .value = NULL,
    528              .input_enum_list = NULL,
    529              .output_enum_list = NULL,
    530              .set_handler = _app_cli_set_tx_power,
    531              .get_handler = _app_cli_get_tx_power,
    532              .description = "TX power in dBm [uint8]"
    533            },
    534            {
    535              .key = APP_CLI_PHY_PARAM_REG_DOMAIN_STR,
    536              .domain = APP_CLI_WISUN_DOMAIN_ID,
    537              .value_size = APP_CLI_VALUE_SIZE_UINT8,
    538              .input = APP_CLI_INPUT_FLAG_DEFAULT,
    539              .output = APP_CLI_OUTPUT_FLAG_DEFAULT,
    540              .value = NULL,
    541              .input_enum_list = app_wisun_phy_reg_domain_enum,
    542              .output_enum_list = app_wisun_phy_reg_domain_enum,
    543              .set_handler = _app_cli_set_phy,
    544              .get_handler = _app_cli_get_phy,
    545              .description = "Wi-SUN regulatory domain [uint8]"
    546            },
    547            {
    548              .key = APP_CLI_PHY_PARAM_OP_CLASS_STR,
    549              .domain = APP_CLI_WISUN_DOMAIN_ID,
    550              .value_size = APP_CLI_VALUE_SIZE_UINT8,
    551              .input = APP_CLI_INPUT_FLAG_DEFAULT,
    552              .output = APP_CLI_OUTPUT_FLAG_DEFAULT,
    553              .value = NULL,
    554              .input_enum_list = NULL,
    555              .output_enum_list = NULL,
    556              .set_handler = _app_cli_set_phy,
    557              .get_handler = _app_cli_get_phy,
    558              .description = "Wi-SUN operation class [uint8]"
    559            },
    560            {
    561              .key = APP_CLI_PHY_PARAM_OP_MODE_STR,
    562              .domain = APP_CLI_WISUN_DOMAIN_ID,
    563              .value_size = APP_CLI_VALUE_SIZE_UINT8,
    564              .input = APP_CLI_INPUT_FLAG_DEFAULT,
    565              .output = APP_CLI_OUTPUT_FLAG_DEFAULT,
    566              .value = NULL,
    567              .input_enum_list = NULL,
    568              .output_enum_list = NULL,
    569              .set_handler = _app_cli_set_phy,
    570              .get_handler = _app_cli_get_phy,
    571              .description = "Wi-SUN operating mode [uint16]"
    572            },
    573          #if APP_CLI_ENABLE_FAN11_CONFIG
    574            {
    575              .key = APP_CLI_PHY_PARAM_CH_PLAN_ID_STR,
    576              .domain = APP_CLI_WISUN_DOMAIN_ID,
    577              .value_size = APP_SETTINGS_VALUE_SIZE_UINT8,
    578              .input = APP_SETTINGS_INPUT_FLAG_DEFAULT,
    579              .output = APP_SETTINGS_OUTPUT_FLAG_DEFAULT,
    580              .value = NULL,
    581              .input_enum_list = NULL,
    582              .output_enum_list = NULL,
    583              .set_handler = _app_cli_set_phy,
    584              .get_handler = _app_cli_get_phy,
    585              .description = "Wi-SUN channel plan ID [uint8]"
    586            },
    587          #endif
    588          #if APP_CLI_ENABLE_FAN11_CONFIG || APP_CLI_ENABLE_EXPLICIT_CONFIG
    589            {
    590              .key = APP_CLI_PHY_PARAM_PHY_MODE_ID_STR,
    591              .domain = APP_CLI_WISUN_DOMAIN_ID,
    592              .value_size = APP_SETTINGS_VALUE_SIZE_UINT8,
    593              .input = APP_SETTINGS_INPUT_FLAG_DEFAULT,
    594              .output = APP_SETTINGS_OUTPUT_FLAG_DEFAULT,
    595              .value = NULL,
    596              .input_enum_list = NULL,
    597              .output_enum_list = NULL,
    598              .set_handler = _app_cli_set_phy,
    599              .get_handler = _app_cli_get_phy,
    600              .description = "Wi-SUN PHY mode ID [uint8]"
    601            },
    602          #endif
    603          #if APP_CLI_ENABLE_EXPLICIT_CONFIG
    604            {
    605              .key = APP_CLI_PHY_PARAM_CH0_FREQ_STR,
    606              .domain = APP_CLI_WISUN_DOMAIN_ID,
    607              .value_size = APP_SETTINGS_VALUE_SIZE_UINT32,
    608              .input = APP_SETTINGS_INPUT_FLAG_DEFAULT,
    609              .output = APP_SETTINGS_OUTPUT_FLAG_DEFAULT,
    610              .value = NULL,
    611              .input_enum_list = NULL,
    612              .output_enum_list = NULL,
    613              .set_handler = _app_cli_set_phy,
    614              .get_handler = _app_cli_get_phy,
    615              .description = "Ch0 frequency in kHz [uint32]"
    616            },
    617            {
    618              .key = APP_CLI_PHY_PARAM_NUM_OF_CH_STR,
    619              .domain = APP_CLI_WISUN_DOMAIN_ID,
    620              .value_size = APP_SETTINGS_VALUE_SIZE_UINT16,
    621              .input = APP_SETTINGS_INPUT_FLAG_DEFAULT,
    622              .output = APP_SETTINGS_OUTPUT_FLAG_DEFAULT,
    623              .value = NULL,
    624              .input_enum_list = NULL,
    625              .output_enum_list = NULL,
    626              .set_handler = _app_cli_set_phy,
    627              .get_handler = _app_cli_get_phy,
    628              .description = "Number of channels [uint16]"
    629            },
    630            {
    631              .key = APP_CLI_PHY_PARAM_CH_SPACING_STR,
    632              .domain = APP_CLI_WISUN_DOMAIN_ID,
    633              .value_size = APP_SETTINGS_VALUE_SIZE_UINT8,
    634              .input = APP_SETTINGS_INPUT_FLAG_DEFAULT,
    635              .output = APP_SETTINGS_OUTPUT_FLAG_DEFAULT,
    636              .value = NULL,
    637              .input_enum_list = app_wisun_phy_channel_spacing_enum,
    638              .output_enum_list = app_wisun_phy_channel_spacing_enum,
    639              .set_handler = _app_cli_set_phy,
    640              .get_handler = _app_cli_get_phy,
    641              .description = "Channel spacing [string] (100kHz|200kHz|400kHz|600kHz)"
    642            },
    643          #endif
    644            {
    645              .key = "join_state",
    646              .domain = APP_CLI_WISUN_DOMAIN_ID,
    647              .value_size = APP_CLI_VALUE_SIZE_UINT8,
    648              .input = APP_CLI_INPUT_FLAG_DEFAULT,
    649              .output = APP_CLI_OUTPUT_FLAG_DEFAULT,
    650              .value = NULL,
    651              .input_enum_list = app_wisun_conn_status_enum,
    652              .output_enum_list = app_wisun_conn_status_enum,
    653              .set_handler = NULL,
    654              .get_handler = _app_cli_get_connection,
    655              .description = "Wi-SUN join state"
    656            },
    657            {
    658              .key = "ip_address_global",
    659              .domain = APP_CLI_WISUN_DOMAIN_ID,
    660              .value_size = APP_CLI_VALUE_SIZE_NONE,
    661              .input = APP_CLI_INPUT_FLAG_DEFAULT,
    662              .output = APP_CLI_OUTPUT_FLAG_DEFAULT,
    663              .value = NULL,
    664              .input_enum_list = NULL,
    665              .output_enum_list = NULL,
    666              .set_handler = NULL,
    667              .get_handler = app_settings_get_ip_address,
    668              .description = "Global IPv6 address"
    669            },
    670            {
    671              .key = "ip_address_link_local",
    672              .domain = APP_CLI_WISUN_DOMAIN_ID,
    673              .value_size = APP_CLI_VALUE_SIZE_NONE,
    674              .input = APP_CLI_INPUT_FLAG_DEFAULT,
    675              .output = APP_CLI_OUTPUT_FLAG_DEFAULT,
    676              .value = NULL,
    677              .input_enum_list = NULL,
    678              .output_enum_list = NULL,
    679              .set_handler = NULL,
    680              .get_handler = app_settings_get_ip_address,
    681              .description = "Link local IPv6"
    682            },
    683            {
    684              .key = "ip_address_border_router",
    685              .domain = APP_CLI_WISUN_DOMAIN_ID,
    686              .value_size = APP_CLI_VALUE_SIZE_NONE,
    687              .input = APP_CLI_INPUT_FLAG_DEFAULT,
    688              .output = APP_CLI_OUTPUT_FLAG_DEFAULT,
    689              .value = NULL,
    690              .input_enum_list = NULL,
    691              .output_enum_list = NULL,
    692              .set_handler = NULL,
    693              .get_handler = app_settings_get_ip_address,
    694              .description = "Border Router IPv6 address"
    695            },
    696            {
    697              .key = "ip_address_primary_parent",
    698              .domain = APP_CLI_WISUN_DOMAIN_ID,
    699              .value_size = APP_CLI_VALUE_SIZE_NONE,
    700              .input = APP_CLI_INPUT_FLAG_DEFAULT,
    701              .output = APP_CLI_OUTPUT_FLAG_DEFAULT,
    702              .value = NULL,
    703              .input_enum_list = NULL,
    704              .output_enum_list = NULL,
    705              .set_handler = NULL,
    706              .get_handler = app_settings_get_ip_address,
    707              .description = "Primary Parent IPv6 address"
    708            },
    709          #if defined(SL_CATALOG_WISUN_MODE_SWITCH_PRESENT)
    710            {
    711              .key = "mode_switch_tx_counter",
    712              .domain = APP_CLI_WISUN_DOMAIN_ID,
    713              .value_size = APP_CLI_VALUE_SIZE_UINT32,
    714              .input = APP_CLI_INPUT_FLAG_DEFAULT,
    715              .output = APP_CLI_OUTPUT_FLAG_DEFAULT,
    716              .value = NULL,
    717              .input_enum_list = NULL,
    718              .output_enum_list = NULL,
    719              .set_handler = NULL,
    720              .get_handler = _app_ms_get_counters,
    721              .description = "Mode Switch Tx count"
    722            },
    723            {
    724              .key = "mode_switch_tx_failed_counter",
    725              .domain = APP_CLI_WISUN_DOMAIN_ID,
    726              .value_size = APP_CLI_VALUE_SIZE_UINT32,
    727              .input = APP_CLI_INPUT_FLAG_DEFAULT,
    728              .output = APP_CLI_OUTPUT_FLAG_DEFAULT,
    729              .value = NULL,
    730              .input_enum_list = NULL,
    731              .output_enum_list = NULL,
    732              .set_handler = NULL,
    733              .get_handler = _app_ms_get_counters,
    734              .description = "Mode Switch Tx failed count"
    735            },
    736            {
    737              .key = "mode_switch_rx_counter",
    738              .domain = APP_CLI_WISUN_DOMAIN_ID,
    739              .value_size = APP_CLI_VALUE_SIZE_UINT32,
    740              .input = APP_CLI_INPUT_FLAG_DEFAULT,
    741              .output = APP_CLI_OUTPUT_FLAG_DEFAULT,
    742              .value = NULL,
    743              .input_enum_list = NULL,
    744              .output_enum_list = NULL,
    745              .set_handler = NULL,
    746              .get_handler = _app_ms_get_counters,
    747              .description = "Mode Switch Rx count"
    748            },
    749            {
    750              .key = "mode_switch_rx_failed_counter",
    751              .domain = APP_CLI_WISUN_DOMAIN_ID,
    752              .value_size = APP_CLI_VALUE_SIZE_UINT32,
    753              .input = APP_CLI_INPUT_FLAG_DEFAULT,
    754              .output = APP_CLI_OUTPUT_FLAG_DEFAULT,
    755              .value = NULL,
    756              .input_enum_list = NULL,
    757              .output_enum_list = NULL,
    758              .set_handler = NULL,
    759              .get_handler = _app_ms_get_counters,
    760              .description = "Mode Switch Rx failed count"
    761            },
    762          #endif
    763          #if defined(SL_CATALOG_WISUN_APP_CORE_PRESENT)
    764            {
    765              .key = "regulation",
    766              .domain = APP_CLI_WISUN_DOMAIN_ID,
    767              .value_size = APP_CLI_VALUE_SIZE_UINT8,
    768              .input = APP_CLI_INPUT_FLAG_DEFAULT,
    769              .output = APP_CLI_OUTPUT_FLAG_DEFAULT,
    770              .value = NULL,
    771              .input_enum_list = app_regulation_enum,
    772              .output_enum_list = app_regulation_enum,
    773              .set_handler = _app_set_regulation,
    774              .get_handler = _app_get_regulation,
    775              .description = "Regional regulation [uint8]"
    776            },
    777            {
    778              .key = "regulation_warning_threshold",
    779              .domain = APP_CLI_WISUN_DOMAIN_ID,
    780              .value_size = APP_CLI_VALUE_SIZE_UINT8,
    781              .input = APP_CLI_INPUT_FLAG_SIGNED,
    782              .output = APP_CLI_OUTPUT_FLAG_SIGNED,
    783              .value = NULL,
    784              .input_enum_list = NULL,
    785              .output_enum_list = NULL,
    786              .set_handler = _app_set_regulation_warning_threshold,
    787              .get_handler = _app_get_regulation_warning_threshold,
    788              .description = "Transmission warning threshold in percent (-1 to disable) [int8]"
    789            },
    790            {
    791              .key = "regulation_alert_threshold",
    792              .domain = APP_CLI_WISUN_DOMAIN_ID,
    793              .value_size = APP_CLI_VALUE_SIZE_UINT8,
    794              .input = APP_CLI_INPUT_FLAG_SIGNED,
    795              .output = APP_CLI_OUTPUT_FLAG_SIGNED,
    796              .value = NULL,
    797              .input_enum_list = NULL,
    798              .output_enum_list = NULL,
    799              .set_handler = _app_set_regulation_alert_threshold,
    800              .get_handler = _app_get_regulation_alert_threshold,
    801              .description = "Transmission alert threshold in percent (-1 to disable) [int8]"
    802            },
    803          #endif
    804          #if defined(SL_CATALOG_WISUN_LFN_DEVICE_SUPPORT_PRESENT)
    805            {
    806              .key = "device_type",
    807              .domain = APP_CLI_WISUN_DOMAIN_ID,
    808              .value_size = APP_CLI_VALUE_SIZE_UINT8,
    809              .input = APP_SETTINGS_INPUT_FLAG_DEFAULT,
    810              .output = APP_SETTINGS_OUTPUT_FLAG_DEFAULT,
    811              .value = NULL,
    812              .input_enum_list = app_wisun_device_type_enum,
    813              .output_enum_list = app_wisun_device_type_enum,
    814              .set_handler = NULL,
    815              .get_handler = _app_get_device_type,
    816              .description = "Device type"
    817            },
    818            {
    819              .key = "lfn_profile",
    820              .domain = APP_CLI_WISUN_DOMAIN_ID,
    821              .value_size = APP_CLI_VALUE_SIZE_UINT8,
    822              .input = APP_SETTINGS_INPUT_FLAG_DEFAULT,
    823              .output = APP_SETTINGS_OUTPUT_FLAG_DEFAULT,
    824              .value = NULL,
    825              .input_enum_list = app_wisun_lfn_profile_enum,
    826              .output_enum_list = app_wisun_lfn_profile_enum,
    827              .set_handler = NULL,
    828              .get_handler = _app_get_lfn_profile,
    829              .description = "Wi-SUN LFN profile"
    830            },
    831          #endif
    832            {
    833              .key = NULL,
    834              .domain = 0,
    835              .value_size = APP_CLI_VALUE_SIZE_NONE,
    836              .input = APP_CLI_INPUT_FLAG_DEFAULT,
    837              .output = APP_CLI_OUTPUT_FLAG_DEFAULT,
    838              .value = NULL,
    839              .input_enum_list = NULL,
    840              .output_enum_list = NULL,
    841              .set_handler = NULL,
    842              .get_handler = NULL,
    843              .description = NULL
    844            }
    845          };
    846          
    847          // -----------------------------------------------------------------------------
    848          //                          Public Function Definitions
    849          // -----------------------------------------------------------------------------
    850          
    851          #if defined(SL_CATALOG_APP_PROJECT_INFO_PRESENT)

   \                                 In section .text, align 2, keep-with-next
    852          void app_about(void)
    853          {
   \                     app_about: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    854            sl_wisun_app_core_util_project_info_print(false);
   \        0x2   0x2000             MOVS     R0,#+0
   \        0x4   0x.... 0x....      BL       sl_wisun_app_core_util_project_info_print
    855          }
   \        0x8   0xBD01             POP      {R0,PC}
    856          #endif
    857          
    858          #if defined(SL_CATALOG_WISUN_APP_CORE_PRESENT)

   \                                 In section .text, align 2, keep-with-next
    859          static void _app_connect(const sl_wisun_phy_config_type_t config_type)
    860          {
   \                     _app_connect: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0006             MOVS     R6,R0
    861            sl_status_t stat = SL_STATUS_FAIL;
   \        0x4   0x2501             MOVS     R5,#+1
    862          
    863            stat = _load_common_params_from_phy_cfg();
   \        0x6   0x.... 0x....      BL       _load_common_params_from_phy_cfg
   \        0xA   0x0004             MOVS     R4,R0
    864            if (stat != SL_STATUS_OK) {
   \        0xC   0x2C00             CMP      R4,#+0
   \        0xE   0xD004             BEQ.N    ??_app_connect_0
    865              printf("[Failed: Loading PHY config]\n");
   \       0x10   0x.... 0x....      LDR.W    R0,??DataTable18
   \       0x14   0x.... 0x....      BL       printf
    866              return;
   \       0x18   0xE00E             B.N      ??_app_connect_1
    867            }
    868          
    869            // Set expected config type
    870            _phy_common_params.phy_config_type = (uint8_t) config_type;
   \                     ??_app_connect_0: (+1)
   \       0x1A   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \       0x1E   0x73C6             STRB     R6,[R0, #+15]
    871          
    872            // Store CLI cfg to PHY cfg
    873            stat = _store_common_params_to_phy_cfg();
   \       0x20   0x.... 0x....      BL       _store_common_params_to_phy_cfg
   \       0x24   0x0005             MOVS     R5,R0
    874          
    875            if (stat != SL_STATUS_OK) {
   \       0x26   0x2D00             CMP      R5,#+0
   \       0x28   0xD004             BEQ.N    ??_app_connect_2
    876              printf("[Failed: Storing PHY config]\n");
   \       0x2A   0x.... 0x....      LDR.W    R0,??DataTable18_2
   \       0x2E   0x.... 0x....      BL       printf
    877              return;
   \       0x32   0xE001             B.N      ??_app_connect_1
    878            }
    879            // call connect API
    880            sl_wisun_app_core_network_connect();
   \                     ??_app_connect_2: (+1)
   \       0x34   0x.... 0x....      BL       sl_wisun_app_core_network_connect
    881          }
   \                     ??_app_connect_1: (+1)
   \       0x38   0xBD70             POP      {R4-R6,PC}
    882          
    883          /* CLI app connect to FAN 1.0 handler */

   \                                 In section .text, align 2, keep-with-next
    884          void app_join_fan10(sl_cli_command_arg_t *arguments)
    885          {
   \                     app_join_fan10: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    886            (void) arguments;
    887            app_wisun_cli_mutex_lock();
   \        0x4   0x.... 0x....      BL       app_wisun_cli_mutex_lock
    888            _app_connect(SL_WISUN_PHY_CONFIG_FAN10);
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0x.... 0x....      BL       _app_connect
    889            app_wisun_cli_mutex_unlock();
   \        0xE   0x.... 0x....      BL       app_wisun_cli_mutex_unlock
    890          }
   \       0x12   0xBD10             POP      {R4,PC}
    891          
    892          /* CLI app connect to FAN 1.1 handler */

   \                                 In section .text, align 2, keep-with-next
    893          void app_join_fan11(sl_cli_command_arg_t *arguments)
    894          {
   \                     app_join_fan11: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    895            (void) arguments;
    896          #if APP_CLI_ENABLE_FAN11_CONFIG
    897            app_wisun_cli_mutex_lock();
   \        0x4   0x.... 0x....      BL       app_wisun_cli_mutex_lock
    898            _app_connect(SL_WISUN_PHY_CONFIG_FAN11);
   \        0x8   0x2001             MOVS     R0,#+1
   \        0xA   0x.... 0x....      BL       _app_connect
    899            app_wisun_cli_mutex_unlock();
   \        0xE   0x.... 0x....      BL       app_wisun_cli_mutex_unlock
    900          #else
    901            printf("[FAN 1.1 configratuion is not supported]\n");
    902          #endif
    903          }
   \       0x12   0xBD10             POP      {R4,PC}
    904          
    905          /* CLI app connect explicit handler */

   \                                 In section .text, align 2, keep-with-next
    906          void app_join_explicit(sl_cli_command_arg_t *arguments)
    907          {
   \                     app_join_explicit: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    908            (void) arguments;
    909          #if APP_CLI_ENABLE_EXPLICIT_CONFIG
    910            app_wisun_cli_mutex_lock();
   \        0x4   0x.... 0x....      BL       app_wisun_cli_mutex_lock
    911            _app_connect(SL_WISUN_PHY_CONFIG_EXPLICIT);
   \        0x8   0x2002             MOVS     R0,#+2
   \        0xA   0x.... 0x....      BL       _app_connect
    912            app_wisun_cli_mutex_unlock();
   \        0xE   0x.... 0x....      BL       app_wisun_cli_mutex_unlock
    913          #else
    914            printf("[Explicit PHY configration is not supported]\n");
    915          #endif
    916          }
   \       0x12   0xBD10             POP      {R4,PC}
    917          
    918          /* CLI app disconnect handler */

   \                                 In section .text, align 2, keep-with-next
    919          void app_disconnect(sl_cli_command_arg_t *arguments)
    920          {
   \                     app_disconnect: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x0006             MOVS     R6,R0
    921            sl_status_t ret;
    922            sl_wisun_join_state_t join_state = SL_WISUN_JOIN_STATE_DISCONNECTED;
   \        0x4   0x2000             MOVS     R0,#+0
   \        0x6   0xF88D 0x0000      STRB     R0,[SP, #+0]
    923            (void) arguments;
    924          
    925            app_wisun_cli_mutex_lock();
   \        0xA   0x.... 0x....      BL       app_wisun_cli_mutex_lock
    926          
    927            ret = sl_wisun_get_join_state(&join_state);
   \        0xE   0x4668             MOV      R0,SP
   \       0x10   0x.... 0x....      BL       sl_wisun_get_join_state
   \       0x14   0x0004             MOVS     R4,R0
    928            if (ret != SL_STATUS_OK) {
   \       0x16   0x2C00             CMP      R4,#+0
   \       0x18   0xD006             BEQ.N    ??app_disconnect_0
    929              printf("[Failed: Getting join state failed]\n");
   \       0x1A   0x.... 0x....      LDR.W    R0,??DataTable18_4
   \       0x1E   0x.... 0x....      BL       printf
    930              app_wisun_cli_mutex_unlock();
   \       0x22   0x.... 0x....      BL       app_wisun_cli_mutex_unlock
    931              return;
   \       0x26   0xE01B             B.N      ??app_disconnect_1
    932            }
    933            if (join_state == SL_WISUN_JOIN_STATE_DISCONNECTED) {
   \                     ??app_disconnect_0: (+1)
   \       0x28   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x2C   0x2800             CMP      R0,#+0
   \       0x2E   0xD106             BNE.N    ??app_disconnect_2
    934              printf("[Failed: already disconnected]\n");
   \       0x30   0x.... 0x....      LDR.W    R0,??DataTable18_5
   \       0x34   0x.... 0x....      BL       printf
    935              app_wisun_cli_mutex_unlock();
   \       0x38   0x.... 0x....      BL       app_wisun_cli_mutex_unlock
    936              return;
   \       0x3C   0xE010             B.N      ??app_disconnect_1
    937            }
    938          
    939            ret = sl_wisun_disconnect();
   \                     ??app_disconnect_2: (+1)
   \       0x3E   0x.... 0x....      BL       sl_wisun_disconnect
   \       0x42   0x0005             MOVS     R5,R0
    940            if (ret == SL_STATUS_OK) {
   \       0x44   0x2D00             CMP      R5,#+0
   \       0x46   0xD104             BNE.N    ??app_disconnect_3
    941              printf("[Disconnecting]\n");
   \       0x48   0x.... 0x....      LDR.W    R0,??DataTable18_6
   \       0x4C   0x.... 0x....      BL       printf
   \       0x50   0xE004             B.N      ??app_disconnect_4
    942            } else {
    943              printf("[Disconnection failed: %lu]\n", ret);
   \                     ??app_disconnect_3: (+1)
   \       0x52   0x0029             MOVS     R1,R5
   \       0x54   0x.... 0x....      LDR.W    R0,??DataTable18_7
   \       0x58   0x.... 0x....      BL       printf
    944            }
    945          
    946            app_wisun_cli_mutex_unlock();
   \                     ??app_disconnect_4: (+1)
   \       0x5C   0x.... 0x....      BL       app_wisun_cli_mutex_unlock
    947          }
   \                     ??app_disconnect_1: (+1)
   \       0x60   0xBD73             POP      {R0,R1,R4-R6,PC}
    948          #endif
    949          
    950          // -----------------------------------------------------------------------------
    951          //                          Static Function Definitions
    952          // -----------------------------------------------------------------------------
    953          

   \                                 In section .text, align 2, keep-with-next
    954          static sl_status_t _load_common_params_from_phy_cfg(void)
    955          {
   \                     _load_common_params_from_phy_cfg: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    956            static sl_wisun_phy_config_t phy_cfg = { 0U };
    957          
    958            if (!app_wisun_setting_is_notified(APP_SETTING_NOTIFICATION_SET_PHY_CFG,
    959                                               APP_SETTING_DEFAULT_SUBSCRIPT_CH)) {
   \        0x2   0x2100             MOVS     R1,#+0
   \        0x4   0x2003             MOVS     R0,#+3
   \        0x6   0x.... 0x....      BL       app_wisun_setting_is_notified
   \        0xA   0x2800             CMP      R0,#+0
   \        0xC   0xD101             BNE.N    ??_load_common_params_from_phy_cfg_0
    960              return SL_STATUS_OK;
   \        0xE   0x2000             MOVS     R0,#+0
   \       0x10   0xE035             B.N      ??_load_common_params_from_phy_cfg_1
    961            }
    962          
    963            (void) app_wisun_setting_get_phy(&phy_cfg);
   \                     ??_load_common_params_from_phy_cfg_0: (+1)
   \       0x12   0x.... 0x....      LDR.W    R4,??DataTable18_8
   \       0x16   0x0020             MOVS     R0,R4
   \       0x18   0x.... 0x....      BL       app_wisun_setting_get_phy
    964          
    965            // FAN 1.0 setting
    966            if (phy_cfg.type == SL_WISUN_PHY_CONFIG_FAN10) {
   \       0x1C   0x6820             LDR      R0,[R4, #+0]
   \       0x1E   0x2800             CMP      R0,#+0
   \       0x20   0xD108             BNE.N    ??_load_common_params_from_phy_cfg_2
    967              _phy_common_params.regulatory_domain  = phy_cfg.config.fan10.reg_domain;
   \       0x22   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \       0x26   0x7921             LDRB     R1,[R4, #+4]
   \       0x28   0x7001             STRB     R1,[R0, #+0]
    968              _phy_common_params.operating_mode     = phy_cfg.config.fan10.op_mode;
   \       0x2A   0x79A1             LDRB     R1,[R4, #+6]
   \       0x2C   0x8041             STRH     R1,[R0, #+2]
    969              _phy_common_params.operating_class    = phy_cfg.config.fan10.op_class;
   \       0x2E   0x7961             LDRB     R1,[R4, #+5]
   \       0x30   0x7041             STRB     R1,[R0, #+1]
   \       0x32   0xE01B             B.N      ??_load_common_params_from_phy_cfg_3
    970          
    971              // FAN 1.1 setting
    972            } else if (phy_cfg.type == SL_WISUN_PHY_CONFIG_FAN11) {
   \                     ??_load_common_params_from_phy_cfg_2: (+1)
   \       0x34   0x6820             LDR      R0,[R4, #+0]
   \       0x36   0x2801             CMP      R0,#+1
   \       0x38   0xD108             BNE.N    ??_load_common_params_from_phy_cfg_4
    973          #if APP_CLI_ENABLE_FAN11_CONFIG
    974              _phy_common_params.regulatory_domain  = phy_cfg.config.fan11.reg_domain;
   \       0x3A   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \       0x3E   0x7921             LDRB     R1,[R4, #+4]
   \       0x40   0x7001             STRB     R1,[R0, #+0]
    975              _phy_common_params.chan_plan_id       = phy_cfg.config.fan11.chan_plan_id;
   \       0x42   0x7961             LDRB     R1,[R4, #+5]
   \       0x44   0x7341             STRB     R1,[R0, #+13]
    976              _phy_common_params.phy_mode_id        = phy_cfg.config.fan11.phy_mode_id;
   \       0x46   0x79A1             LDRB     R1,[R4, #+6]
   \       0x48   0x7381             STRB     R1,[R0, #+14]
   \       0x4A   0xE00F             B.N      ??_load_common_params_from_phy_cfg_3
    977          #else
    978              (void) 0U;
    979          #endif
    980              // Explicit setting
    981            } else if (phy_cfg.type == SL_WISUN_PHY_CONFIG_EXPLICIT) {
   \                     ??_load_common_params_from_phy_cfg_4: (+1)
   \       0x4C   0x6820             LDR      R0,[R4, #+0]
   \       0x4E   0x2802             CMP      R0,#+2
   \       0x50   0xD10A             BNE.N    ??_load_common_params_from_phy_cfg_5
    982          #if APP_CLI_ENABLE_EXPLICIT_CONFIG
    983              _phy_common_params.ch0_frequency      = phy_cfg.config.explicit_plan.ch0_frequency_khz;
   \       0x52   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \       0x56   0x6861             LDR      R1,[R4, #+4]
   \       0x58   0x6081             STR      R1,[R0, #+8]
    984              _phy_common_params.number_of_channels = phy_cfg.config.explicit_plan.number_of_channels;
   \       0x5A   0x8921             LDRH     R1,[R4, #+8]
   \       0x5C   0x8081             STRH     R1,[R0, #+4]
    985              _phy_common_params.channel_spacing    = phy_cfg.config.explicit_plan.channel_spacing;
   \       0x5E   0x7AA1             LDRB     R1,[R4, #+10]
   \       0x60   0x7301             STRB     R1,[R0, #+12]
    986              _phy_common_params.phy_mode_id        = phy_cfg.config.explicit_plan.phy_mode_id;
   \       0x62   0x7AE1             LDRB     R1,[R4, #+11]
   \       0x64   0x7381             STRB     R1,[R0, #+14]
   \       0x66   0xE001             B.N      ??_load_common_params_from_phy_cfg_3
    987          #else
    988              (void) 0U;
    989          #endif
    990              // Invalid setting
    991            } else {
    992              return SL_STATUS_FAIL;
   \                     ??_load_common_params_from_phy_cfg_5: (+1)
   \       0x68   0x2001             MOVS     R0,#+1
   \       0x6A   0xE008             B.N      ??_load_common_params_from_phy_cfg_1
    993            }
    994            _phy_common_params.phy_config_type = phy_cfg.type;
   \                     ??_load_common_params_from_phy_cfg_3: (+1)
   \       0x6C   0x6821             LDR      R1,[R4, #+0]
   \       0x6E   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \       0x72   0x73C1             STRB     R1,[R0, #+15]
    995          
    996            app_wisun_setting_ack_notification(APP_SETTING_NOTIFICATION_SET_PHY_CFG,
    997                                               APP_SETTING_DEFAULT_SUBSCRIPT_CH);
   \       0x74   0x2100             MOVS     R1,#+0
   \       0x76   0x2003             MOVS     R0,#+3
   \       0x78   0x.... 0x....      BL       app_wisun_setting_ack_notification
    998            return SL_STATUS_OK;
   \       0x7C   0x2000             MOVS     R0,#+0
   \                     ??_load_common_params_from_phy_cfg_1: (+1)
   \       0x7E   0xBD10             POP      {R4,PC}
    999          }

   \                                 In section .bss, align 4
   \                     `_load_common_params_from_phy_cfg::phy_cfg`:
   \        0x0                      DS8 16
   1000          

   \                                 In section .text, align 2, keep-with-next
   1001          static sl_status_t _store_common_params_to_phy_cfg(void)
   1002          {
   \                     _store_common_params_to_phy_cfg: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   1003            static sl_wisun_phy_config_t phy_cfg = { 0U };
   1004          
   1005            // FAN 1.0 setting
   1006            if (_phy_common_params.phy_config_type == SL_WISUN_PHY_CONFIG_FAN10) {
   \        0x2   0x.... 0x....      LDR.W    R1,??DataTable18_1
   \        0x6   0x7BC8             LDRB     R0,[R1, #+15]
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD108             BNE.N    ??_store_common_params_to_phy_cfg_0
   1007              phy_cfg.config.fan10.reg_domain            = _phy_common_params.regulatory_domain;
   \        0xC   0x.... 0x....      LDR.W    R0,??DataTable18_9
   \       0x10   0x780A             LDRB     R2,[R1, #+0]
   \       0x12   0x7102             STRB     R2,[R0, #+4]
   1008              phy_cfg.config.fan10.op_mode               = _phy_common_params.operating_mode;
   \       0x14   0x884A             LDRH     R2,[R1, #+2]
   \       0x16   0x7182             STRB     R2,[R0, #+6]
   1009              phy_cfg.config.fan10.op_class              = _phy_common_params.operating_class;
   \       0x18   0x784A             LDRB     R2,[R1, #+1]
   \       0x1A   0x7142             STRB     R2,[R0, #+5]
   \       0x1C   0xE01B             B.N      ??_store_common_params_to_phy_cfg_1
   1010          
   1011              // FAN 1.1 setting
   1012            } else if (_phy_common_params.phy_config_type == SL_WISUN_PHY_CONFIG_FAN11) {
   \                     ??_store_common_params_to_phy_cfg_0: (+1)
   \       0x1E   0x7BC8             LDRB     R0,[R1, #+15]
   \       0x20   0x2801             CMP      R0,#+1
   \       0x22   0xD108             BNE.N    ??_store_common_params_to_phy_cfg_2
   1013          #if APP_CLI_ENABLE_FAN11_CONFIG
   1014              phy_cfg.config.fan11.reg_domain            = _phy_common_params.regulatory_domain;
   \       0x24   0x.... 0x....      LDR.W    R0,??DataTable18_9
   \       0x28   0x780A             LDRB     R2,[R1, #+0]
   \       0x2A   0x7102             STRB     R2,[R0, #+4]
   1015              phy_cfg.config.fan11.chan_plan_id          = _phy_common_params.chan_plan_id;
   \       0x2C   0x7B4A             LDRB     R2,[R1, #+13]
   \       0x2E   0x7142             STRB     R2,[R0, #+5]
   1016              phy_cfg.config.fan11.phy_mode_id           = _phy_common_params.phy_mode_id;
   \       0x30   0x7B8A             LDRB     R2,[R1, #+14]
   \       0x32   0x7182             STRB     R2,[R0, #+6]
   \       0x34   0xE00F             B.N      ??_store_common_params_to_phy_cfg_1
   1017          #else
   1018              (void) 0U;
   1019          #endif
   1020              // Explicit setting
   1021            } else if (_phy_common_params.phy_config_type == SL_WISUN_PHY_CONFIG_EXPLICIT) {
   \                     ??_store_common_params_to_phy_cfg_2: (+1)
   \       0x36   0x7BC8             LDRB     R0,[R1, #+15]
   \       0x38   0x2802             CMP      R0,#+2
   \       0x3A   0xD10A             BNE.N    ??_store_common_params_to_phy_cfg_3
   1022          #if APP_CLI_ENABLE_EXPLICIT_CONFIG
   1023              phy_cfg.config.explicit_plan.ch0_frequency_khz  = _phy_common_params.ch0_frequency;
   \       0x3C   0x.... 0x....      LDR.W    R0,??DataTable18_9
   \       0x40   0x688A             LDR      R2,[R1, #+8]
   \       0x42   0x6042             STR      R2,[R0, #+4]
   1024              phy_cfg.config.explicit_plan.number_of_channels = _phy_common_params.number_of_channels;
   \       0x44   0x888A             LDRH     R2,[R1, #+4]
   \       0x46   0x8102             STRH     R2,[R0, #+8]
   1025              phy_cfg.config.explicit_plan.channel_spacing    = _phy_common_params.channel_spacing;
   \       0x48   0x7B0A             LDRB     R2,[R1, #+12]
   \       0x4A   0x7282             STRB     R2,[R0, #+10]
   1026              phy_cfg.config.explicit_plan.phy_mode_id        = _phy_common_params.phy_mode_id;
   \       0x4C   0x7B8A             LDRB     R2,[R1, #+14]
   \       0x4E   0x72C2             STRB     R2,[R0, #+11]
   \       0x50   0xE001             B.N      ??_store_common_params_to_phy_cfg_1
   1027          #else
   1028              (void) 0U;
   1029          #endif
   1030              // Invalid setting
   1031            } else {
   1032              return SL_STATUS_FAIL;
   \                     ??_store_common_params_to_phy_cfg_3: (+1)
   \       0x52   0x2001             MOVS     R0,#+1
   \       0x54   0xE006             B.N      ??_store_common_params_to_phy_cfg_4
   1033            }
   1034          
   1035            phy_cfg.type = _phy_common_params.phy_config_type;
   \                     ??_store_common_params_to_phy_cfg_1: (+1)
   \       0x56   0x.... 0x....      LDR.W    R0,??DataTable18_9
   \       0x5A   0x7BC9             LDRB     R1,[R1, #+15]
   \       0x5C   0x6001             STR      R1,[R0, #+0]
   1036          
   1037            app_wisun_setting_set_phy(&phy_cfg);
   \       0x5E   0x.... 0x....      BL       app_wisun_setting_set_phy
   1038          
   1039            return SL_STATUS_OK;
   \       0x62   0x2000             MOVS     R0,#+0
   \                     ??_store_common_params_to_phy_cfg_4: (+1)
   \       0x64   0xBD02             POP      {R1,PC}
   1040          }

   \                                 In section .bss, align 4
   \                     `_store_common_params_to_phy_cfg::phy_cfg`:
   \        0x0                      DS8 16
   1041          
   1042          /* App CLI getting connection state (join state) */

   \                                 In section .text, align 2, keep-with-next
   1043          static sl_status_t _app_cli_get_connection(char *value_str,
   1044                                                     const char *key_str,
   1045                                                     const app_cli_entry_t *entry)
   1046          {
   \                     _app_cli_get_connection: (+1)
   \        0x0   0xE92D 0x43FE      PUSH     {R1-R9,LR}
   \        0x4   0x0005             MOVS     R5,R0
   \        0x6   0x4688             MOV      R8,R1
   \        0x8   0x0016             MOVS     R6,R2
   1047            sl_status_t res = SL_STATUS_FAIL;
   \        0xA   0x2401             MOVS     R4,#+1
   1048            uint32_t value;
   1049            const app_enum_t* value_enum;
   1050            sl_wisun_join_state_t join_state = SL_WISUN_JOIN_STATE_DISCONNECTED;
   \        0xC   0x2000             MOVS     R0,#+0
   \        0xE   0xF88D 0x0004      STRB     R0,[SP, #+4]
   1051            (void)key_str;
   1052          
   1053            if ((value_str == NULL) || (entry == NULL)) {
   \       0x12   0x2D00             CMP      R5,#+0
   \       0x14   0xD001             BEQ.N    ??_app_cli_get_connection_0
   \       0x16   0x2E00             CMP      R6,#+0
   \       0x18   0xD101             BNE.N    ??_app_cli_get_connection_1
   1054              return SL_STATUS_FAIL;
   \                     ??_app_cli_get_connection_0: (+1)
   \       0x1A   0x2001             MOVS     R0,#+1
   \       0x1C   0xE020             B.N      ??_app_cli_get_connection_2
   1055            }
   1056          
   1057            // gets the connection state from the core
   1058            res = sl_wisun_get_join_state(&join_state);
   \                     ??_app_cli_get_connection_1: (+1)
   \       0x1E   0xA801             ADD      R0,SP,#+4
   \       0x20   0x.... 0x....      BL       sl_wisun_get_join_state
   \       0x24   0x0007             MOVS     R7,R0
   1059            if (res != SL_STATUS_OK) {
   \       0x26   0x2F00             CMP      R7,#+0
   \       0x28   0xD001             BEQ.N    ??_app_cli_get_connection_3
   1060              return res;
   \       0x2A   0x0038             MOVS     R0,R7
   \       0x2C   0xE018             B.N      ??_app_cli_get_connection_2
   1061            }
   1062            value = (uint32_t)join_state;
   \                     ??_app_cli_get_connection_3: (+1)
   \       0x2E   0xF89D 0x9004      LDRB     R9,[SP, #+4]
   1063          
   1064            // finds the proper string for the value
   1065            value_enum = entry->output_enum_list;
   \       0x32   0x6934             LDR      R4,[R6, #+16]
   1066          
   1067            if (value_enum->value_str != NULL) {
   \       0x34   0x6820             LDR      R0,[R4, #+0]
   \       0x36   0x2800             CMP      R0,#+0
   \       0x38   0xD011             BEQ.N    ??_app_cli_get_connection_4
   1068              while (value_enum) {
   \                     ??_app_cli_get_connection_5: (+1)
   \       0x3A   0x2C00             CMP      R4,#+0
   \       0x3C   0xD004             BEQ.N    ??_app_cli_get_connection_6
   1069                if (value_enum->value == value) {
   \       0x3E   0x6860             LDR      R0,[R4, #+4]
   \       0x40   0x4548             CMP      R0,R9
   \       0x42   0xD001             BEQ.N    ??_app_cli_get_connection_6
   1070                  // Matching enumeration found
   1071                  break;
   1072                }
   1073                value_enum++;
   \                     ??_app_cli_get_connection_7: (+1)
   \       0x44   0x3408             ADDS     R4,R4,#+8
   \       0x46   0xE7F8             B.N      ??_app_cli_get_connection_5
   1074              }
   1075            } else {
   1076              return SL_STATUS_FAIL;
   1077            }
   1078          
   1079            // creates the value string
   1080            snprintf(value_str, APP_CLI_STR_VALUE_LENGTH, "%s (%d)", value_enum->value_str, (uint8_t)value_enum->value);
   \                     ??_app_cli_get_connection_6: (+1)
   \       0x48   0x7920             LDRB     R0,[R4, #+4]
   \       0x4A   0x9000             STR      R0,[SP, #+0]
   \       0x4C   0x6823             LDR      R3,[R4, #+0]
   \       0x4E   0x.... 0x....      LDR.W    R2,??DataTable18_10
   \       0x52   0x2180             MOVS     R1,#+128
   \       0x54   0x0028             MOVS     R0,R5
   \       0x56   0x.... 0x....      BL       snprintf
   1081          
   1082            return SL_STATUS_OK;
   \       0x5A   0x2000             MOVS     R0,#+0
   \       0x5C   0xE000             B.N      ??_app_cli_get_connection_2
   \                     ??_app_cli_get_connection_4: (+1)
   \       0x5E   0x2001             MOVS     R0,#+1
   \                     ??_app_cli_get_connection_2: (+1)
   \       0x60   0xE8BD 0x83FE      POP      {R1-R9,PC}
   1083          }
   1084          
   1085          /* App CLI setting network name */

   \                                 In section .text, align 2, keep-with-next
   1086          static sl_status_t _app_cli_set_network_name(const char *value_str,
   1087                                                       const char *key_str,
   1088                                                       const app_cli_entry_t *entry)
   1089          {
   \                     _app_cli_set_network_name: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0006             MOVS     R6,R0
   \        0x4   0x000C             MOVS     R4,R1
   \        0x6   0x0015             MOVS     R5,R2
   1090            (void)key_str;
   1091            (void)entry;
   1092          
   1093            return app_wisun_setting_set_network_name(value_str);
   \        0x8   0x0030             MOVS     R0,R6
   \        0xA   0x.... 0x....      BL       app_wisun_setting_set_network_name
   \        0xE   0xBD70             POP      {R4-R6,PC}
   1094          }
   1095          
   1096          /* App CLI setting network size */

   \                                 In section .text, align 2, keep-with-next
   1097          static sl_status_t _app_cli_set_network_size(const char *value_str,
   1098                                                       const char *key_str,
   1099                                                       const app_cli_entry_t *entry)
   1100          {
   \                     _app_cli_set_network_size: (+1)
   \        0x0   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \        0x4   0x0005             MOVS     R5,R0
   \        0x6   0x000E             MOVS     R6,R1
   \        0x8   0x0017             MOVS     R7,R2
   1101            sl_status_t res = SL_STATUS_FAIL;
   \        0xA   0xF05F 0x0801      MOVS     R8,#+1
   1102            uint32_t value = 0U;
   \        0xE   0x2000             MOVS     R0,#+0
   \       0x10   0x9000             STR      R0,[SP, #+0]
   1103            (void)key_str;
   1104            (void)entry;
   1105          
   1106            res = app_util_get_integer(&value,
   1107                                       value_str,
   1108                                       entry->input_enum_list,
   1109                                       entry->input & APP_CLI_INPUT_FLAG_SIGNED);
   \       0x12   0x79BB             LDRB     R3,[R7, #+6]
   \       0x14   0xF013 0x0301      ANDS     R3,R3,#0x1
   \       0x18   0x68FA             LDR      R2,[R7, #+12]
   \       0x1A   0x0029             MOVS     R1,R5
   \       0x1C   0x4668             MOV      R0,SP
   \       0x1E   0x.... 0x....      BL       app_util_get_integer
   \       0x22   0x0004             MOVS     R4,R0
   1110            if (res == SL_STATUS_OK) {
   \       0x24   0x2C00             CMP      R4,#+0
   \       0x26   0xD103             BNE.N    ??_app_cli_set_network_size_0
   1111              // sets the network name
   1112              res = app_wisun_setting_set_network_size((uint8_t*)&value);
   \       0x28   0x4668             MOV      R0,SP
   \       0x2A   0x.... 0x....      BL       app_wisun_setting_set_network_size
   \       0x2E   0x0004             MOVS     R4,R0
   1113            }
   1114          
   1115            return res;
   \                     ??_app_cli_set_network_size_0: (+1)
   \       0x30   0x0020             MOVS     R0,R4
   \       0x32   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}
   1116          }
   1117          
   1118          /* App CLI setting tx power */

   \                                 In section .text, align 2, keep-with-next
   1119          static sl_status_t _app_cli_set_tx_power(const char *value_str,
   1120                                                   const char *key_str,
   1121                                                   const app_cli_entry_t *entry)
   1122          {
   \                     _app_cli_set_tx_power: (+1)
   \        0x0   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \        0x4   0x0005             MOVS     R5,R0
   \        0x6   0x000E             MOVS     R6,R1
   \        0x8   0x0017             MOVS     R7,R2
   1123            sl_status_t res = SL_STATUS_FAIL;
   \        0xA   0xF05F 0x0801      MOVS     R8,#+1
   1124            int32_t value = 0U;
   \        0xE   0x2000             MOVS     R0,#+0
   \       0x10   0x9000             STR      R0,[SP, #+0]
   1125            (void)key_str;
   1126            (void)entry;
   1127          
   1128            res = app_util_get_integer((uint32_t *)&value,
   1129                                       value_str,
   1130                                       entry->input_enum_list,
   1131                                       entry->input & APP_CLI_INPUT_FLAG_SIGNED);
   \       0x12   0x79BB             LDRB     R3,[R7, #+6]
   \       0x14   0xF013 0x0301      ANDS     R3,R3,#0x1
   \       0x18   0x68FA             LDR      R2,[R7, #+12]
   \       0x1A   0x0029             MOVS     R1,R5
   \       0x1C   0x4668             MOV      R0,SP
   \       0x1E   0x.... 0x....      BL       app_util_get_integer
   \       0x22   0x0004             MOVS     R4,R0
   1132            if (res == SL_STATUS_OK) {
   \       0x24   0x2C00             CMP      R4,#+0
   \       0x26   0xD103             BNE.N    ??_app_cli_set_tx_power_0
   1133              // sets the tx power
   1134              res = app_wisun_setting_set_tx_power((int8_t*)&value);
   \       0x28   0x4668             MOV      R0,SP
   \       0x2A   0x.... 0x....      BL       app_wisun_setting_set_tx_power
   \       0x2E   0x0004             MOVS     R4,R0
   1135            }
   1136          
   1137            return res;
   \                     ??_app_cli_set_tx_power_0: (+1)
   \       0x30   0x0020             MOVS     R0,R4
   \       0x32   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}
   1138          }
   1139          
   1140          /* App CLI setting network name */

   \                                 In section .text, align 2, keep-with-next
   1141          static sl_status_t _app_cli_get_network_name(char *value_str,
   1142                                                       const char *key_str,
   1143                                                       const app_cli_entry_t *entry)
   1144          {
   \                     _app_cli_get_network_name: (+1)
   \        0x0   0xE92D 0x41F8      PUSH     {R3-R8,LR}
   \        0x4   0xB089             SUB      SP,SP,#+36
   \        0x6   0x0005             MOVS     R5,R0
   \        0x8   0x000E             MOVS     R6,R1
   \        0xA   0x0017             MOVS     R7,R2
   1145            sl_status_t res = SL_STATUS_FAIL;
   \        0xC   0xF05F 0x0801      MOVS     R8,#+1
   \       0x10   0x2121             MOVS     R1,#+33
   \       0x12   0x2200             MOVS     R2,#+0
   \       0x14   0x466C             MOV      R4,SP
   \       0x16   0x0020             MOVS     R0,R4
   \       0x18   0x.... 0x....      BL       __aeabi_memset
   1146            char name_buffer[MAX_SIZE_OF_NETWORK_NAME] = { 0 };
   1147            (void)key_str;
   1148            (void)entry;
   1149          
   1150            // gets the network name
   1151            res = app_wisun_setting_get_network_name(name_buffer, sizeof(name_buffer));
   \       0x1C   0x2121             MOVS     R1,#+33
   \       0x1E   0x4668             MOV      R0,SP
   \       0x20   0x.... 0x....      BL       app_wisun_setting_get_network_name
   \       0x24   0x0004             MOVS     R4,R0
   1152          
   1153            if (res == SL_STATUS_OK) {
   \       0x26   0x2C00             CMP      R4,#+0
   \       0x28   0xD105             BNE.N    ??_app_cli_get_network_name_0
   1154              snprintf(value_str, APP_CLI_STR_VALUE_LENGTH, "%s", name_buffer);
   \       0x2A   0x466B             MOV      R3,SP
   \       0x2C   0x....             ADR.N    R2,??DataTable11
   \       0x2E   0x2180             MOVS     R1,#+128
   \       0x30   0x0028             MOVS     R0,R5
   \       0x32   0x.... 0x....      BL       snprintf
   1155            }
   1156          
   1157            return res;
   \                     ??_app_cli_get_network_name_0: (+1)
   \       0x36   0x0020             MOVS     R0,R4
   \       0x38   0xB00A             ADD      SP,SP,#+40
   \       0x3A   0xE8BD 0x81F0      POP      {R4-R8,PC}
   1158          }
   1159          
   1160          /* App CLI setting network size */

   \                                 In section .text, align 2, keep-with-next
   1161          static sl_status_t _app_cli_get_network_size(char *value_str,
   1162                                                       const char *key_str,
   1163                                                       const app_cli_entry_t *entry)
   1164          {
   \                     _app_cli_get_network_size: (+1)
   \        0x0   0xE92D 0x43FE      PUSH     {R1-R9,LR}
   \        0x4   0x0006             MOVS     R6,R0
   \        0x6   0x000F             MOVS     R7,R1
   \        0x8   0x4690             MOV      R8,R2
   1165            sl_status_t res = SL_STATUS_FAIL;
   \        0xA   0xF05F 0x0901      MOVS     R9,#+1
   1166            const app_enum_t* value_enum;
   1167            uint8_t value = 0U;
   \        0xE   0x2000             MOVS     R0,#+0
   \       0x10   0xF88D 0x0004      STRB     R0,[SP, #+4]
   1168            (void)key_str;
   1169          
   1170            res = app_wisun_setting_get_network_size(&value);
   \       0x14   0xA801             ADD      R0,SP,#+4
   \       0x16   0x.... 0x....      BL       app_wisun_setting_get_network_size
   \       0x1A   0x0005             MOVS     R5,R0
   1171            // finds the proper string for the value
   1172            value_enum = entry->output_enum_list;
   \       0x1C   0xF8D8 0x4010      LDR      R4,[R8, #+16]
   1173          
   1174            if (res != SL_STATUS_OK || value_enum->value_str == NULL) {
   \       0x20   0x2D00             CMP      R5,#+0
   \       0x22   0xD102             BNE.N    ??_app_cli_get_network_size_0
   \       0x24   0x6820             LDR      R0,[R4, #+0]
   \       0x26   0x2800             CMP      R0,#+0
   \       0x28   0xD101             BNE.N    ??_app_cli_get_network_size_1
   1175              return SL_STATUS_FAIL;
   \                     ??_app_cli_get_network_size_0: (+1)
   \       0x2A   0x2001             MOVS     R0,#+1
   \       0x2C   0xE012             B.N      ??_app_cli_get_network_size_2
   1176            }
   1177          
   1178            while (value_enum) {
   \                     ??_app_cli_get_network_size_1: (+1)
   \       0x2E   0x2C00             CMP      R4,#+0
   \       0x30   0xD006             BEQ.N    ??_app_cli_get_network_size_3
   1179              if (value_enum->value == value) {
   \       0x32   0x6861             LDR      R1,[R4, #+4]
   \       0x34   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \       0x38   0x4281             CMP      R1,R0
   \       0x3A   0xD001             BEQ.N    ??_app_cli_get_network_size_3
   1180                // Matching enumeration found
   1181                break;
   1182              }
   1183              value_enum++;
   \                     ??_app_cli_get_network_size_4: (+1)
   \       0x3C   0x3408             ADDS     R4,R4,#+8
   \       0x3E   0xE7F6             B.N      ??_app_cli_get_network_size_1
   1184            }
   1185          
   1186            // creates the value string
   1187            snprintf(value_str, APP_CLI_STR_VALUE_LENGTH, "%s (%d)", value_enum->value_str, (uint8_t)value_enum->value);
   \                     ??_app_cli_get_network_size_3: (+1)
   \       0x40   0x7920             LDRB     R0,[R4, #+4]
   \       0x42   0x9000             STR      R0,[SP, #+0]
   \       0x44   0x6823             LDR      R3,[R4, #+0]
   \       0x46   0x.... 0x....      LDR.W    R2,??DataTable18_10
   \       0x4A   0x2180             MOVS     R1,#+128
   \       0x4C   0x0030             MOVS     R0,R6
   \       0x4E   0x.... 0x....      BL       snprintf
   1188          
   1189            return res;
   \       0x52   0x0028             MOVS     R0,R5
   \                     ??_app_cli_get_network_size_2: (+1)
   \       0x54   0xE8BD 0x83FE      POP      {R1-R9,PC}
   1190          }
   1191          
   1192          /* App CLI setting tx power */

   \                                 In section .text, align 2, keep-with-next
   1193          static sl_status_t _app_cli_get_tx_power(char *value_str,
   1194                                                   const char *key_str,
   1195                                                   const app_cli_entry_t *entry)
   1196          {
   \                     _app_cli_get_tx_power: (+1)
   \        0x0   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \        0x4   0x0005             MOVS     R5,R0
   \        0x6   0x000E             MOVS     R6,R1
   \        0x8   0x0017             MOVS     R7,R2
   1197            sl_status_t res = SL_STATUS_FAIL;
   \        0xA   0xF05F 0x0801      MOVS     R8,#+1
   1198            int8_t value = 0U;
   \        0xE   0x2000             MOVS     R0,#+0
   \       0x10   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1199            (void)key_str;
   1200            (void)entry;
   1201          
   1202            res = app_wisun_setting_get_tx_power(&value);
   \       0x14   0x4668             MOV      R0,SP
   \       0x16   0x.... 0x....      BL       app_wisun_setting_get_tx_power
   \       0x1A   0x0004             MOVS     R4,R0
   1203            if (res == SL_STATUS_OK) {
   \       0x1C   0x2C00             CMP      R4,#+0
   \       0x1E   0xD107             BNE.N    ??_app_cli_get_tx_power_0
   1204              snprintf(value_str, APP_CLI_STR_VALUE_LENGTH, "%d", value);
   \       0x20   0xF99D 0x3000      LDRSB    R3,[SP, #+0]
   \       0x24   0x....             ADR.N    R2,??DataTable11_1
   \       0x26   0x2180             MOVS     R1,#+128
   \       0x28   0x0028             MOVS     R0,R5
   \       0x2A   0x.... 0x....      BL       snprintf
   \       0x2E   0xE004             B.N      ??_app_cli_get_tx_power_1
   1205            } else {
   1206              snprintf(value_str, APP_CLI_STR_VALUE_LENGTH, "N/A");
   \                     ??_app_cli_get_tx_power_0: (+1)
   \       0x30   0x....             ADR.N    R2,??DataTable11_2
   \       0x32   0x2180             MOVS     R1,#+128
   \       0x34   0x0028             MOVS     R0,R5
   \       0x36   0x.... 0x....      BL       snprintf
   1207            }
   1208          
   1209            return res;
   \                     ??_app_cli_get_tx_power_1: (+1)
   \       0x3A   0x0020             MOVS     R0,R4
   \       0x3C   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}
   1210          }
   1211          

   \                                 In section .text, align 2, keep-with-next
   1212          static bool _is_param_used(const char *param_str)
   1213          {
   \                     _is_param_used: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0005             MOVS     R5,R0
   1214            app_enum_t *iter = NULL;
   \        0x4   0x2000             MOVS     R0,#+0
   1215          
   1216            iter = (app_enum_t *) _phy_cfg_map;
   \        0x6   0x.... 0x....      LDR.W    R4,??DataTable18_11
   1217          
   1218            while (iter != NULL && iter->value_str != NULL) {
   \                     ??_is_param_used_0: (+1)
   \        0xA   0x2C00             CMP      R4,#+0
   \        0xC   0xD013             BEQ.N    ??_is_param_used_1
   \        0xE   0x6820             LDR      R0,[R4, #+0]
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD010             BEQ.N    ??_is_param_used_1
   1219              if (iter->value == _phy_common_params.phy_config_type
   1220                  && !strncmp(param_str, iter->value_str, APP_CLI_STR_VALUE_LENGTH)) {
   \       0x14   0x6860             LDR      R0,[R4, #+4]
   \       0x16   0x.... 0x....      LDR.W    R1,??DataTable18_1
   \       0x1A   0x7BC9             LDRB     R1,[R1, #+15]
   \       0x1C   0x4288             CMP      R0,R1
   \       0x1E   0xD108             BNE.N    ??_is_param_used_2
   \       0x20   0x2280             MOVS     R2,#+128
   \       0x22   0x6821             LDR      R1,[R4, #+0]
   \       0x24   0x0028             MOVS     R0,R5
   \       0x26   0x.... 0x....      BL       strncmp
   \       0x2A   0x2800             CMP      R0,#+0
   \       0x2C   0xD101             BNE.N    ??_is_param_used_2
   1221                return true;
   \       0x2E   0x2001             MOVS     R0,#+1
   \       0x30   0xE002             B.N      ??_is_param_used_3
   1222              }
   1223              ++iter;
   \                     ??_is_param_used_2: (+1)
   \       0x32   0x3408             ADDS     R4,R4,#+8
   \       0x34   0xE7E9             B.N      ??_is_param_used_0
   1224            }
   1225          
   1226            return false;
   \                     ??_is_param_used_1: (+1)
   \       0x36   0x2000             MOVS     R0,#+0
   \                     ??_is_param_used_3: (+1)
   \       0x38   0xBD32             POP      {R1,R4,R5,PC}
   1227          }
   1228          

   \                                 In section .text, align 2, keep-with-next
   1229          __STATIC_INLINE const char *_param_used_flag_str(const char *param_str)
   1230          {
   \                     _param_used_flag_str: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
   1231            return _is_param_used(param_str) ? "" : "(unused)";
   \        0x4   0x0020             MOVS     R0,R4
   \        0x6   0x.... 0x....      BL       _is_param_used
   \        0xA   0x2800             CMP      R0,#+0
   \        0xC   0xD001             BEQ.N    ??_param_used_flag_str_0
   \        0xE   0x....             ADR.N    R0,??DataTable11_3
   \       0x10   0xE001             B.N      ??_param_used_flag_str_1
   \                     ??_param_used_flag_str_0: (+1)
   \       0x12   0x.... 0x....      LDR.W    R0,??DataTable18_12
   \                     ??_param_used_flag_str_1: (+1)
   \       0x16   0xBD10             POP      {R4,PC}
   1232          }
   1233          
   1234          /* App CLI getting PHY parameters */

   \                                 In section .text, align 2, keep-with-next
   1235          static sl_status_t _app_cli_get_phy(char *value_str,
   1236                                              const char *key_str,
   1237                                              const app_cli_entry_t *entry)
   1238          {
   \                     _app_cli_get_phy: (+1)
   \        0x0   0xE92D 0x43FE      PUSH     {R1-R9,LR}
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x000F             MOVS     R7,R1
   \        0x8   0x0015             MOVS     R5,R2
   1239            sl_status_t res = SL_STATUS_FAIL;
   \        0xA   0xF05F 0x0801      MOVS     R8,#+1
   1240            (void)key_str;
   1241          
   1242            if ((value_str == NULL) || (entry == NULL) || (entry->key == NULL)) {
   \        0xE   0x2C00             CMP      R4,#+0
   \       0x10   0xD004             BEQ.N    ??_app_cli_get_phy_0
   \       0x12   0x2D00             CMP      R5,#+0
   \       0x14   0xD002             BEQ.N    ??_app_cli_get_phy_0
   \       0x16   0x6828             LDR      R0,[R5, #+0]
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD101             BNE.N    ??_app_cli_get_phy_1
   1243              return res;
   \                     ??_app_cli_get_phy_0: (+1)
   \       0x1C   0x4640             MOV      R0,R8
   \       0x1E   0xE0E3             B.N      ??_app_cli_get_phy_2
   1244            }
   1245          
   1246            res = _load_common_params_from_phy_cfg();
   \                     ??_app_cli_get_phy_1: (+1)
   \       0x20   0x.... 0x....      BL       _load_common_params_from_phy_cfg
   \       0x24   0x0006             MOVS     R6,R0
   1247            if (res != SL_STATUS_OK) {
   \       0x26   0x2E00             CMP      R6,#+0
   \       0x28   0xD001             BEQ.N    ??_app_cli_get_phy_3
   1248              return res;
   \       0x2A   0x0030             MOVS     R0,R6
   \       0x2C   0xE0DC             B.N      ??_app_cli_get_phy_2
   1249            }
   1250          
   1251            // Regulatory domain
   1252            if (strstr(entry->key, APP_CLI_PHY_PARAM_REG_DOMAIN_STR)) {
   \                     ??_app_cli_get_phy_3: (+1)
   \       0x2E   0x.... 0x....      LDR.W    R8,??DataTable18_13
   \       0x32   0x4641             MOV      R1,R8
   \       0x34   0x6828             LDR      R0,[R5, #+0]
   \       0x36   0x.... 0x....      BL       strstr
   \       0x3A   0x2800             CMP      R0,#+0
   \       0x3C   0xD016             BEQ.N    ??_app_cli_get_phy_4
   1253              snprintf(value_str, APP_CLI_STR_VALUE_LENGTH, "%s (%u) %s",
   1254                       app_wisun_trace_util_reg_domain_to_str(_phy_common_params.regulatory_domain),
   1255                       _phy_common_params.regulatory_domain,
   1256                       _param_used_flag_str(APP_CLI_PHY_PARAM_REG_DOMAIN_STR));
   \       0x3E   0x4640             MOV      R0,R8
   \       0x40   0x.... 0x....      BL       _param_used_flag_str
   \       0x44   0x4681             MOV      R9,R0
   \       0x46   0x.... 0x....      LDR.W    R8,??DataTable18_1
   \       0x4A   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \       0x4E   0x.... 0x....      BL       app_wisun_trace_util_reg_domain_to_str
   \       0x52   0x0003             MOVS     R3,R0
   \       0x54   0xF8CD 0x9004      STR      R9,[SP, #+4]
   \       0x58   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \       0x5C   0x9000             STR      R0,[SP, #+0]
   \       0x5E   0x.... 0x....      LDR.W    R2,??DataTable18_14
   \       0x62   0x2180             MOVS     R1,#+128
   \       0x64   0x0020             MOVS     R0,R4
   \       0x66   0x.... 0x....      BL       snprintf
   \       0x6A   0xE0BC             B.N      ??_app_cli_get_phy_5
   1257          
   1258              // Operating class
   1259            } else if (strstr(entry->key, APP_CLI_PHY_PARAM_OP_CLASS_STR)) {
   \                     ??_app_cli_get_phy_4: (+1)
   \       0x6C   0x.... 0x....      LDR.W    R8,??DataTable18_15
   \       0x70   0x4641             MOV      R1,R8
   \       0x72   0x6828             LDR      R0,[R5, #+0]
   \       0x74   0x.... 0x....      BL       strstr
   \       0x78   0x2800             CMP      R0,#+0
   \       0x7A   0xD00D             BEQ.N    ??_app_cli_get_phy_6
   1260              snprintf(value_str, APP_CLI_STR_VALUE_LENGTH, "%u %s",
   1261                       _phy_common_params.operating_class,
   1262                       _param_used_flag_str(APP_CLI_PHY_PARAM_OP_CLASS_STR));
   \       0x7C   0x4640             MOV      R0,R8
   \       0x7E   0x.... 0x....      BL       _param_used_flag_str
   \       0x82   0x9000             STR      R0,[SP, #+0]
   \       0x84   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \       0x88   0x7843             LDRB     R3,[R0, #+1]
   \       0x8A   0x.... 0x....      LDR.W    R2,??DataTable18_16
   \       0x8E   0x2180             MOVS     R1,#+128
   \       0x90   0x0020             MOVS     R0,R4
   \       0x92   0x.... 0x....      BL       snprintf
   \       0x96   0xE0A6             B.N      ??_app_cli_get_phy_5
   1263          
   1264              // Operating mode
   1265            } else if (strstr(entry->key, APP_CLI_PHY_PARAM_OP_MODE_STR)) {
   \                     ??_app_cli_get_phy_6: (+1)
   \       0x98   0x.... 0x....      LDR.W    R8,??DataTable18_17
   \       0x9C   0x4641             MOV      R1,R8
   \       0x9E   0x6828             LDR      R0,[R5, #+0]
   \       0xA0   0x.... 0x....      BL       strstr
   \       0xA4   0x2800             CMP      R0,#+0
   \       0xA6   0xD00D             BEQ.N    ??_app_cli_get_phy_7
   1266              snprintf(value_str, APP_CLI_STR_VALUE_LENGTH, "0x%x %s",
   1267                       _phy_common_params.operating_mode,
   1268                       _param_used_flag_str(APP_CLI_PHY_PARAM_OP_MODE_STR));
   \       0xA8   0x4640             MOV      R0,R8
   \       0xAA   0x.... 0x....      BL       _param_used_flag_str
   \       0xAE   0x9000             STR      R0,[SP, #+0]
   \       0xB0   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \       0xB4   0x8843             LDRH     R3,[R0, #+2]
   \       0xB6   0x.... 0x....      LDR.W    R2,??DataTable18_18
   \       0xBA   0x2180             MOVS     R1,#+128
   \       0xBC   0x0020             MOVS     R0,R4
   \       0xBE   0x.... 0x....      BL       snprintf
   \       0xC2   0xE090             B.N      ??_app_cli_get_phy_5
   1269          
   1270          #if APP_CLI_ENABLE_EXPLICIT_CONFIG
   1271              // Number of channels
   1272            } else if (strstr(entry->key, APP_CLI_PHY_PARAM_NUM_OF_CH_STR)) {
   \                     ??_app_cli_get_phy_7: (+1)
   \       0xC4   0x.... 0x....      LDR.W    R8,??DataTable18_19
   \       0xC8   0x4641             MOV      R1,R8
   \       0xCA   0x6828             LDR      R0,[R5, #+0]
   \       0xCC   0x.... 0x....      BL       strstr
   \       0xD0   0x2800             CMP      R0,#+0
   \       0xD2   0xD00D             BEQ.N    ??_app_cli_get_phy_8
   1273              snprintf(value_str, APP_CLI_STR_VALUE_LENGTH, "%u %s",
   1274                       _phy_common_params.number_of_channels,
   1275                       _param_used_flag_str(APP_CLI_PHY_PARAM_NUM_OF_CH_STR));
   \       0xD4   0x4640             MOV      R0,R8
   \       0xD6   0x.... 0x....      BL       _param_used_flag_str
   \       0xDA   0x9000             STR      R0,[SP, #+0]
   \       0xDC   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \       0xE0   0x8883             LDRH     R3,[R0, #+4]
   \       0xE2   0x.... 0x....      LDR.W    R2,??DataTable18_16
   \       0xE6   0x2180             MOVS     R1,#+128
   \       0xE8   0x0020             MOVS     R0,R4
   \       0xEA   0x.... 0x....      BL       snprintf
   \       0xEE   0xE07A             B.N      ??_app_cli_get_phy_5
   1276          
   1277              // CH0 Frequency
   1278            } else if (strstr(entry->key, APP_CLI_PHY_PARAM_CH0_FREQ_STR)) {
   \                     ??_app_cli_get_phy_8: (+1)
   \       0xF0   0x.... 0x....      LDR.W    R8,??DataTable18_20
   \       0xF4   0x4641             MOV      R1,R8
   \       0xF6   0x6828             LDR      R0,[R5, #+0]
   \       0xF8   0x.... 0x....      BL       strstr
   \       0xFC   0x2800             CMP      R0,#+0
   \       0xFE   0xD00D             BEQ.N    ??_app_cli_get_phy_9
   1279              snprintf(value_str, APP_CLI_STR_VALUE_LENGTH, "%lu %s",
   1280                       _phy_common_params.ch0_frequency,
   1281                       _param_used_flag_str(APP_CLI_PHY_PARAM_CH0_FREQ_STR));
   \      0x100   0x4640             MOV      R0,R8
   \      0x102   0x.... 0x....      BL       _param_used_flag_str
   \      0x106   0x9000             STR      R0,[SP, #+0]
   \      0x108   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \      0x10C   0x6883             LDR      R3,[R0, #+8]
   \      0x10E   0x.... 0x....      LDR.W    R2,??DataTable18_21
   \      0x112   0x2180             MOVS     R1,#+128
   \      0x114   0x0020             MOVS     R0,R4
   \      0x116   0x.... 0x....      BL       snprintf
   \      0x11A   0xE064             B.N      ??_app_cli_get_phy_5
   1282          
   1283              // Channel spacing
   1284            } else if (strstr(entry->key, APP_CLI_PHY_PARAM_CH_SPACING_STR)) {
   \                     ??_app_cli_get_phy_9: (+1)
   \      0x11C   0x.... 0x....      LDR.W    R8,??DataTable18_22
   \      0x120   0x4641             MOV      R1,R8
   \      0x122   0x6828             LDR      R0,[R5, #+0]
   \      0x124   0x.... 0x....      BL       strstr
   \      0x128   0x2800             CMP      R0,#+0
   \      0x12A   0xD016             BEQ.N    ??_app_cli_get_phy_10
   1285              snprintf(value_str, APP_CLI_STR_VALUE_LENGTH, "%s (%u) %s",
   1286                       app_wisun_trace_util_ch_spacing_to_str(_phy_common_params.channel_spacing),
   1287                       _phy_common_params.channel_spacing,
   1288                       _param_used_flag_str(APP_CLI_PHY_PARAM_CH_SPACING_STR));
   \      0x12C   0x4640             MOV      R0,R8
   \      0x12E   0x.... 0x....      BL       _param_used_flag_str
   \      0x132   0x4681             MOV      R9,R0
   \      0x134   0x.... 0x....      LDR.W    R8,??DataTable18_1
   \      0x138   0xF898 0x000C      LDRB     R0,[R8, #+12]
   \      0x13C   0x.... 0x....      BL       app_wisun_trace_util_ch_spacing_to_str
   \      0x140   0xF8CD 0x9004      STR      R9,[SP, #+4]
   \      0x144   0xF898 0x100C      LDRB     R1,[R8, #+12]
   \      0x148   0x9100             STR      R1,[SP, #+0]
   \      0x14A   0x0003             MOVS     R3,R0
   \      0x14C   0x.... 0x....      LDR.W    R2,??DataTable18_14
   \      0x150   0x2180             MOVS     R1,#+128
   \      0x152   0x0020             MOVS     R0,R4
   \      0x154   0x.... 0x....      BL       snprintf
   \      0x158   0xE045             B.N      ??_app_cli_get_phy_5
   1289          #endif
   1290          
   1291          #if APP_CLI_ENABLE_FAN11_CONFIG
   1292              // Chan plan ID
   1293            } else if (strstr(entry->key, APP_CLI_PHY_PARAM_CH_PLAN_ID_STR)) {
   \                     ??_app_cli_get_phy_10: (+1)
   \      0x15A   0x.... 0x....      LDR.W    R8,??DataTable18_23
   \      0x15E   0x4641             MOV      R1,R8
   \      0x160   0x6828             LDR      R0,[R5, #+0]
   \      0x162   0x.... 0x....      BL       strstr
   \      0x166   0x2800             CMP      R0,#+0
   \      0x168   0xD00D             BEQ.N    ??_app_cli_get_phy_11
   1294              snprintf(value_str, APP_CLI_STR_VALUE_LENGTH, "%u %s",
   1295                       _phy_common_params.chan_plan_id,
   1296                       _param_used_flag_str(APP_CLI_PHY_PARAM_CH_PLAN_ID_STR));
   \      0x16A   0x4640             MOV      R0,R8
   \      0x16C   0x.... 0x....      BL       _param_used_flag_str
   \      0x170   0x9000             STR      R0,[SP, #+0]
   \      0x172   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \      0x176   0x7B43             LDRB     R3,[R0, #+13]
   \      0x178   0x.... 0x....      LDR.W    R2,??DataTable18_16
   \      0x17C   0x2180             MOVS     R1,#+128
   \      0x17E   0x0020             MOVS     R0,R4
   \      0x180   0x.... 0x....      BL       snprintf
   \      0x184   0xE02F             B.N      ??_app_cli_get_phy_5
   1297          #endif
   1298          
   1299          #if APP_CLI_ENABLE_EXPLICIT_CONFIG || APP_CLI_ENABLE_FAN11_CONFIG
   1300              // PHY mode ID
   1301            } else if (strstr(entry->key, APP_CLI_PHY_PARAM_PHY_MODE_ID_STR)) {
   \                     ??_app_cli_get_phy_11: (+1)
   \      0x186   0x.... 0x....      LDR.W    R8,??DataTable18_24
   \      0x18A   0x4641             MOV      R1,R8
   \      0x18C   0x6828             LDR      R0,[R5, #+0]
   \      0x18E   0x.... 0x....      BL       strstr
   \      0x192   0x2800             CMP      R0,#+0
   \      0x194   0xD00D             BEQ.N    ??_app_cli_get_phy_12
   1302              snprintf(value_str, APP_CLI_STR_VALUE_LENGTH, "%u %s",
   1303                       _phy_common_params.phy_mode_id,
   1304                       _param_used_flag_str(APP_CLI_PHY_PARAM_PHY_MODE_ID_STR));
   \      0x196   0x4640             MOV      R0,R8
   \      0x198   0x.... 0x....      BL       _param_used_flag_str
   \      0x19C   0x9000             STR      R0,[SP, #+0]
   \      0x19E   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \      0x1A2   0x7B83             LDRB     R3,[R0, #+14]
   \      0x1A4   0x.... 0x....      LDR.W    R2,??DataTable18_16
   \      0x1A8   0x2180             MOVS     R1,#+128
   \      0x1AA   0x0020             MOVS     R0,R4
   \      0x1AC   0x.... 0x....      BL       snprintf
   \      0x1B0   0xE019             B.N      ??_app_cli_get_phy_5
   1305          #endif
   1306          
   1307              // PHY config type
   1308            } else if (strstr(entry->key, APP_CLI_PHY_PARAM_PHY_CFG_TYPE_STR)) {
   \                     ??_app_cli_get_phy_12: (+1)
   \      0x1B2   0x.... 0x....      LDR.W    R1,??DataTable18_25
   \      0x1B6   0x6828             LDR      R0,[R5, #+0]
   \      0x1B8   0x.... 0x....      BL       strstr
   \      0x1BC   0x2800             CMP      R0,#+0
   \      0x1BE   0xD010             BEQ.N    ??_app_cli_get_phy_13
   1309              snprintf(value_str, APP_CLI_STR_VALUE_LENGTH, "%s (%d)",
   1310                       app_wisun_trace_util_phy_cfg_type_to_str(_phy_common_params.phy_config_type),
   1311                       _phy_common_params.phy_config_type);
   \      0x1C0   0x.... 0x....      LDR.W    R8,??DataTable18_1
   \      0x1C4   0xF898 0x000F      LDRB     R0,[R8, #+15]
   \      0x1C8   0x.... 0x....      BL       app_wisun_trace_util_phy_cfg_type_to_str
   \      0x1CC   0xF898 0x100F      LDRB     R1,[R8, #+15]
   \      0x1D0   0x9100             STR      R1,[SP, #+0]
   \      0x1D2   0x0003             MOVS     R3,R0
   \      0x1D4   0x.... 0x....      LDR.W    R2,??DataTable18_10
   \      0x1D8   0x2180             MOVS     R1,#+128
   \      0x1DA   0x0020             MOVS     R0,R4
   \      0x1DC   0x.... 0x....      BL       snprintf
   \      0x1E0   0xE001             B.N      ??_app_cli_get_phy_5
   1312          
   1313              // Not found
   1314            } else {
   1315              return SL_STATUS_FAIL;
   \                     ??_app_cli_get_phy_13: (+1)
   \      0x1E2   0x2001             MOVS     R0,#+1
   \      0x1E4   0xE000             B.N      ??_app_cli_get_phy_2
   1316            }
   1317          
   1318            return SL_STATUS_OK;
   \                     ??_app_cli_get_phy_5: (+1)
   \      0x1E6   0x2000             MOVS     R0,#+0
   \                     ??_app_cli_get_phy_2: (+1)
   \      0x1E8   0xE8BD 0x83FE      POP      {R1-R9,PC}
   1319          }
   1320          
   1321          /* App CLI getting PHY parameters */

   \                                 In section .text, align 2, keep-with-next
   1322          static sl_status_t _app_cli_set_phy(const char *value_str,
   1323                                              const char *key_str,
   1324                                              const app_settings_entry_t *entry)
   1325          {
   \                     _app_cli_set_phy: (+1)
   \        0x0   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x4688             MOV      R8,R1
   \        0x8   0x0015             MOVS     R5,R2
   1326            sl_status_t res = SL_STATUS_FAIL;
   \        0xA   0x2701             MOVS     R7,#+1
   1327            int32_t value = 0U;
   \        0xC   0x2000             MOVS     R0,#+0
   \        0xE   0x9000             STR      R0,[SP, #+0]
   1328            (void)key_str;
   1329          
   1330            if ((value_str == NULL) || (entry == NULL) || (entry->key == NULL)) {
   \       0x10   0x2C00             CMP      R4,#+0
   \       0x12   0xD004             BEQ.N    ??_app_cli_set_phy_0
   \       0x14   0x2D00             CMP      R5,#+0
   \       0x16   0xD002             BEQ.N    ??_app_cli_set_phy_0
   \       0x18   0x6828             LDR      R0,[R5, #+0]
   \       0x1A   0x2800             CMP      R0,#+0
   \       0x1C   0xD101             BNE.N    ??_app_cli_set_phy_1
   1331              return res;
   \                     ??_app_cli_set_phy_0: (+1)
   \       0x1E   0x0038             MOVS     R0,R7
   \       0x20   0xE076             B.N      ??_app_cli_set_phy_2
   1332            }
   1333            res = _load_common_params_from_phy_cfg();
   \                     ??_app_cli_set_phy_1: (+1)
   \       0x22   0x.... 0x....      BL       _load_common_params_from_phy_cfg
   \       0x26   0x0006             MOVS     R6,R0
   1334            if (res != SL_STATUS_OK) {
   \       0x28   0x2E00             CMP      R6,#+0
   \       0x2A   0xD001             BEQ.N    ??_app_cli_set_phy_3
   1335              return res;
   \       0x2C   0x0030             MOVS     R0,R6
   \       0x2E   0xE06F             B.N      ??_app_cli_set_phy_2
   1336            }
   1337          
   1338            res = app_util_get_integer((uint32_t *)&value,
   1339                                       value_str,
   1340                                       entry->input_enum_list,
   1341                                       entry->input & APP_SETTINGS_INPUT_FLAG_SIGNED);
   \                     ??_app_cli_set_phy_3: (+1)
   \       0x30   0x79AB             LDRB     R3,[R5, #+6]
   \       0x32   0xF013 0x0301      ANDS     R3,R3,#0x1
   \       0x36   0x68EA             LDR      R2,[R5, #+12]
   \       0x38   0x0021             MOVS     R1,R4
   \       0x3A   0x4668             MOV      R0,SP
   \       0x3C   0x.... 0x....      BL       app_util_get_integer
   \       0x40   0x0007             MOVS     R7,R0
   1342            if (res != SL_STATUS_OK) {
   \       0x42   0x2F00             CMP      R7,#+0
   \       0x44   0xD001             BEQ.N    ??_app_cli_set_phy_4
   1343              return res;
   \       0x46   0x0038             MOVS     R0,R7
   \       0x48   0xE062             B.N      ??_app_cli_set_phy_2
   1344            }
   1345          
   1346            // Regulatory domain
   1347            if (strstr(entry->key, APP_CLI_PHY_PARAM_REG_DOMAIN_STR)) {
   \                     ??_app_cli_set_phy_4: (+1)
   \       0x4A   0x.... 0x....      LDR.W    R1,??DataTable18_13
   \       0x4E   0x6828             LDR      R0,[R5, #+0]
   \       0x50   0x.... 0x....      BL       strstr
   \       0x54   0x2800             CMP      R0,#+0
   \       0x56   0xD004             BEQ.N    ??_app_cli_set_phy_5
   1348              _phy_common_params.regulatory_domain = value;
   \       0x58   0x9900             LDR      R1,[SP, #+0]
   \       0x5A   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \       0x5E   0x7001             STRB     R1,[R0, #+0]
   \       0x60   0xE055             B.N      ??_app_cli_set_phy_6
   1349          
   1350              // Operating class
   1351            } else if (strstr(entry->key, APP_CLI_PHY_PARAM_OP_CLASS_STR)) {
   \                     ??_app_cli_set_phy_5: (+1)
   \       0x62   0x.... 0x....      LDR.W    R1,??DataTable18_15
   \       0x66   0x6828             LDR      R0,[R5, #+0]
   \       0x68   0x.... 0x....      BL       strstr
   \       0x6C   0x2800             CMP      R0,#+0
   \       0x6E   0xD004             BEQ.N    ??_app_cli_set_phy_7
   1352              _phy_common_params.operating_class = value;
   \       0x70   0x9900             LDR      R1,[SP, #+0]
   \       0x72   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \       0x76   0x7041             STRB     R1,[R0, #+1]
   \       0x78   0xE049             B.N      ??_app_cli_set_phy_6
   1353          
   1354              // Operating mode
   1355            } else if (strstr(entry->key, APP_CLI_PHY_PARAM_OP_MODE_STR)) {
   \                     ??_app_cli_set_phy_7: (+1)
   \       0x7A   0x.... 0x....      LDR.W    R1,??DataTable18_17
   \       0x7E   0x6828             LDR      R0,[R5, #+0]
   \       0x80   0x.... 0x....      BL       strstr
   \       0x84   0x2800             CMP      R0,#+0
   \       0x86   0xD004             BEQ.N    ??_app_cli_set_phy_8
   1356              _phy_common_params.operating_mode = value;
   \       0x88   0x9900             LDR      R1,[SP, #+0]
   \       0x8A   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \       0x8E   0x8041             STRH     R1,[R0, #+2]
   \       0x90   0xE03D             B.N      ??_app_cli_set_phy_6
   1357          
   1358          #if APP_CLI_ENABLE_EXPLICIT_CONFIG
   1359              // Number of channels
   1360            } else if (strstr(entry->key, APP_CLI_PHY_PARAM_NUM_OF_CH_STR)) {
   \                     ??_app_cli_set_phy_8: (+1)
   \       0x92   0x.... 0x....      LDR.W    R1,??DataTable18_19
   \       0x96   0x6828             LDR      R0,[R5, #+0]
   \       0x98   0x.... 0x....      BL       strstr
   \       0x9C   0x2800             CMP      R0,#+0
   \       0x9E   0xD004             BEQ.N    ??_app_cli_set_phy_9
   1361              _phy_common_params.number_of_channels = value;
   \       0xA0   0x9900             LDR      R1,[SP, #+0]
   \       0xA2   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \       0xA6   0x8081             STRH     R1,[R0, #+4]
   \       0xA8   0xE031             B.N      ??_app_cli_set_phy_6
   1362          
   1363              // CH0 Frequency
   1364            } else if (strstr(entry->key, APP_CLI_PHY_PARAM_CH0_FREQ_STR)) {
   \                     ??_app_cli_set_phy_9: (+1)
   \       0xAA   0x.... 0x....      LDR.W    R1,??DataTable18_20
   \       0xAE   0x6828             LDR      R0,[R5, #+0]
   \       0xB0   0x.... 0x....      BL       strstr
   \       0xB4   0x2800             CMP      R0,#+0
   \       0xB6   0xD004             BEQ.N    ??_app_cli_set_phy_10
   1365              _phy_common_params.ch0_frequency = value;
   \       0xB8   0x9900             LDR      R1,[SP, #+0]
   \       0xBA   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \       0xBE   0x6081             STR      R1,[R0, #+8]
   \       0xC0   0xE025             B.N      ??_app_cli_set_phy_6
   1366          
   1367              // Channel spacing
   1368            } else if (strstr(entry->key, APP_CLI_PHY_PARAM_CH_SPACING_STR)) {
   \                     ??_app_cli_set_phy_10: (+1)
   \       0xC2   0x.... 0x....      LDR.W    R1,??DataTable18_22
   \       0xC6   0x6828             LDR      R0,[R5, #+0]
   \       0xC8   0x.... 0x....      BL       strstr
   \       0xCC   0x2800             CMP      R0,#+0
   \       0xCE   0xD004             BEQ.N    ??_app_cli_set_phy_11
   1369              _phy_common_params.channel_spacing = value;
   \       0xD0   0x9900             LDR      R1,[SP, #+0]
   \       0xD2   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \       0xD6   0x7301             STRB     R1,[R0, #+12]
   \       0xD8   0xE019             B.N      ??_app_cli_set_phy_6
   1370          #endif
   1371          
   1372          #if APP_CLI_ENABLE_FAN11_CONFIG
   1373              // Chan plan ID
   1374            } else if (strstr(entry->key, APP_CLI_PHY_PARAM_CH_PLAN_ID_STR)) {
   \                     ??_app_cli_set_phy_11: (+1)
   \       0xDA   0x.... 0x....      LDR.W    R1,??DataTable18_23
   \       0xDE   0x6828             LDR      R0,[R5, #+0]
   \       0xE0   0x.... 0x....      BL       strstr
   \       0xE4   0x2800             CMP      R0,#+0
   \       0xE6   0xD004             BEQ.N    ??_app_cli_set_phy_12
   1375              _phy_common_params.chan_plan_id = value;
   \       0xE8   0x9900             LDR      R1,[SP, #+0]
   \       0xEA   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \       0xEE   0x7341             STRB     R1,[R0, #+13]
   \       0xF0   0xE00D             B.N      ??_app_cli_set_phy_6
   1376          #endif
   1377          
   1378          #if APP_CLI_ENABLE_EXPLICIT_CONFIG || APP_CLI_ENABLE_FAN11_CONFIG
   1379              // PHY mode ID
   1380            } else if (strstr(entry->key, APP_CLI_PHY_PARAM_PHY_MODE_ID_STR)) {
   \                     ??_app_cli_set_phy_12: (+1)
   \       0xF2   0x.... 0x....      LDR.W    R1,??DataTable18_24
   \       0xF6   0x6828             LDR      R0,[R5, #+0]
   \       0xF8   0x.... 0x....      BL       strstr
   \       0xFC   0x2800             CMP      R0,#+0
   \       0xFE   0xD004             BEQ.N    ??_app_cli_set_phy_13
   1381              _phy_common_params.phy_mode_id = value;
   \      0x100   0x9900             LDR      R1,[SP, #+0]
   \      0x102   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \      0x106   0x7381             STRB     R1,[R0, #+14]
   \      0x108   0xE001             B.N      ??_app_cli_set_phy_6
   1382          #endif
   1383              // Not found
   1384            } else {
   1385              return SL_STATUS_FAIL;
   \                     ??_app_cli_set_phy_13: (+1)
   \      0x10A   0x2001             MOVS     R0,#+1
   \      0x10C   0xE000             B.N      ??_app_cli_set_phy_2
   1386            }
   1387          
   1388            return SL_STATUS_OK;
   \                     ??_app_cli_set_phy_6: (+1)
   \      0x10E   0x2000             MOVS     R0,#+0
   \                     ??_app_cli_set_phy_2: (+1)
   \      0x110   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}
   1389          }
   1390          
   1391          #if defined(SL_CATALOG_WISUN_MODE_SWITCH_PRESENT)
   1392          /* App CLI getting mode switch counters */
   1393          static sl_status_t _app_ms_get_counters(char *value_str,
   1394                                                  const char *key_str,
   1395                                                  const app_cli_entry_t *entry)
   1396          {
   1397            sl_status_t res = SL_STATUS_FAIL;
   1398            sl_wisun_statistics_t stat;
   1399            (void)key_str;
   1400          
   1401            if ((value_str == NULL) || (entry == NULL) || (entry->key == NULL)) {
   1402              return res;
   1403            }
   1404          
   1405            // gets the statsitic that contains the mode switch information
   1406            res = sl_wisun_get_statistics(SL_WISUN_STATISTICS_TYPE_MAC, &stat);
   1407          
   1408            if (res != SL_STATUS_OK) {
   1409              return res;
   1410            }
   1411            // mode switch TX-RX counters (inc. failed)
   1412            if (strstr(entry->key, "mode_switch_tx_counter")) {
   1413              snprintf(value_str, APP_CLI_STR_VALUE_LENGTH, "%lu", stat.mac.tx_ms_count);
   1414            } else if (strstr(entry->key, "mode_switch_tx_failed_counter")) {
   1415              snprintf(value_str, APP_CLI_STR_VALUE_LENGTH, "%lu", stat.mac.tx_ms_failed_count);
   1416            } else if (strstr(entry->key, "mode_switch_rx_counter")) {
   1417              snprintf(value_str, APP_CLI_STR_VALUE_LENGTH, "%lu", stat.mac.rx_ms_count);
   1418            } else if (strstr(entry->key, "mode_switch_rx_failed_counter")) {
   1419              snprintf(value_str, APP_CLI_STR_VALUE_LENGTH, "%lu", stat.mac.rx_ms_failed_count);
   1420            } else {
   1421            }
   1422          
   1423            return SL_STATUS_OK;
   1424          }
   1425          #endif
   1426          
   1427          #if defined(SL_CATALOG_WISUN_APP_CORE_PRESENT)

   \                                 In section .text, align 2, keep-with-next
   1428          static sl_status_t _app_set_regulation(const char *value_str,
   1429                                                 const char *key_str,
   1430                                                 const app_settings_entry_t *entry)
   1431          {
   \                     _app_set_regulation: (+1)
   \        0x0   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \        0x4   0x0005             MOVS     R5,R0
   \        0x6   0x4688             MOV      R8,R1
   \        0x8   0x0016             MOVS     R6,R2
   1432            sl_status_t res = SL_STATUS_FAIL;
   \        0xA   0x2401             MOVS     R4,#+1
   1433            uint32_t value = 0U;
   \        0xC   0x2000             MOVS     R0,#+0
   \        0xE   0x9001             STR      R0,[SP, #+4]
   \       0x10   0x2102             MOVS     R1,#+2
   \       0x12   0x2200             MOVS     R2,#+0
   \       0x14   0xF10D 0x0702      ADD      R7,SP,#+2
   \       0x18   0x0038             MOVS     R0,R7
   \       0x1A   0x.... 0x....      BL       __aeabi_memset
   1434            sl_wisun_app_core_reg_thresholds_t thresholds = { 0U };
   1435            sl_wisun_join_state_t join_state = SL_WISUN_JOIN_STATE_DISCONNECTED;
   \       0x1E   0x2000             MOVS     R0,#+0
   \       0x20   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1436            (void)key_str;
   1437            (void)entry;
   1438          
   1439            if ((value_str == NULL) || (entry == NULL) || (entry->key == NULL)) {
   \       0x24   0x2D00             CMP      R5,#+0
   \       0x26   0xD004             BEQ.N    ??_app_set_regulation_0
   \       0x28   0x2E00             CMP      R6,#+0
   \       0x2A   0xD002             BEQ.N    ??_app_set_regulation_0
   \       0x2C   0x6830             LDR      R0,[R6, #+0]
   \       0x2E   0x2800             CMP      R0,#+0
   \       0x30   0xD101             BNE.N    ??_app_set_regulation_1
   1440              return SL_STATUS_FAIL;
   \                     ??_app_set_regulation_0: (+1)
   \       0x32   0x2001             MOVS     R0,#+1
   \       0x34   0xE059             B.N      ??_app_set_regulation_2
   1441            }
   1442          
   1443            // checking if the device connected or not
   1444            res = sl_wisun_get_join_state(&join_state);
   \                     ??_app_set_regulation_1: (+1)
   \       0x36   0x4668             MOV      R0,SP
   \       0x38   0x.... 0x....      BL       sl_wisun_get_join_state
   \       0x3C   0x0007             MOVS     R7,R0
   1445            if (res != SL_STATUS_OK) {
   \       0x3E   0x2F00             CMP      R7,#+0
   \       0x40   0xD001             BEQ.N    ??_app_set_regulation_3
   1446              return res;
   \       0x42   0x0038             MOVS     R0,R7
   \       0x44   0xE051             B.N      ??_app_set_regulation_2
   1447            } else {
   1448              if (join_state != SL_WISUN_JOIN_STATE_DISCONNECTED) {
   \                     ??_app_set_regulation_3: (+1)
   \       0x46   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x4A   0x2800             CMP      R0,#+0
   \       0x4C   0xD005             BEQ.N    ??_app_set_regulation_4
   1449                printf("[Regulation related settings unavailable, disconnection is needed]\n");
   \       0x4E   0x.... 0x....      LDR.W    R0,??DataTable18_26
   \       0x52   0x.... 0x....      BL       printf
   1450                return SL_STATUS_FAIL;
   \       0x56   0x2001             MOVS     R0,#+1
   \       0x58   0xE047             B.N      ??_app_set_regulation_2
   1451              }
   1452            }
   1453          
   1454            res = app_util_get_integer(&value,
   1455                                       value_str,
   1456                                       entry->input_enum_list,
   1457                                       entry->input & APP_CLI_INPUT_FLAG_SIGNED);
   \                     ??_app_set_regulation_4: (+1)
   \       0x5A   0x79B3             LDRB     R3,[R6, #+6]
   \       0x5C   0xF013 0x0301      ANDS     R3,R3,#0x1
   \       0x60   0x68F2             LDR      R2,[R6, #+12]
   \       0x62   0x0029             MOVS     R1,R5
   \       0x64   0xA801             ADD      R0,SP,#+4
   \       0x66   0x.... 0x....      BL       app_util_get_integer
   \       0x6A   0x0004             MOVS     R4,R0
   1458          
   1459            if (res != SL_STATUS_OK) {
   \       0x6C   0x2C00             CMP      R4,#+0
   \       0x6E   0xD006             BEQ.N    ??_app_set_regulation_5
   1460              printf("[Failed: Get value error: %lu]\n", res);
   \       0x70   0x0021             MOVS     R1,R4
   \       0x72   0x.... 0x....      LDR.W    R0,??DataTable18_27
   \       0x76   0x.... 0x....      BL       printf
   1461              return res;
   \       0x7A   0x0020             MOVS     R0,R4
   \       0x7C   0xE035             B.N      ??_app_set_regulation_2
   1462            }
   1463          
   1464            if (strstr(entry->key, "regulation")) {
   \                     ??_app_set_regulation_5: (+1)
   \       0x7E   0x.... 0x....      LDR.W    R1,??DataTable18_28
   \       0x82   0x6830             LDR      R0,[R6, #+0]
   \       0x84   0x.... 0x....      BL       strstr
   \       0x88   0x2800             CMP      R0,#+0
   \       0x8A   0xD02D             BEQ.N    ??_app_set_regulation_6
   1465              // sets the thresholds
   1466              (void)sl_wisun_app_core_get_regulation_thresholds(&thresholds);
   \       0x8C   0xF10D 0x0002      ADD      R0,SP,#+2
   \       0x90   0x.... 0x....      BL       sl_wisun_app_core_get_regulation_thresholds
   1467              res = sl_wisun_set_regulation_tx_thresholds(thresholds.warning_threshold,
   1468                                                          thresholds.alert_threshold);
   \       0x94   0xF99D 0x1003      LDRSB    R1,[SP, #+3]
   \       0x98   0xF99D 0x0002      LDRSB    R0,[SP, #+2]
   \       0x9C   0x.... 0x....      BL       sl_wisun_set_regulation_tx_thresholds
   \       0xA0   0x0007             MOVS     R7,R0
   1469              if (res != SL_STATUS_OK) {
   \       0xA2   0x2F00             CMP      R7,#+0
   \       0xA4   0xD006             BEQ.N    ??_app_set_regulation_7
   1470                printf("[Failed: unable to set regulation TX thresholds: %lu]\n", res);
   \       0xA6   0x0039             MOVS     R1,R7
   \       0xA8   0x.... 0x....      LDR.W    R0,??DataTable18_29
   \       0xAC   0x.... 0x....      BL       printf
   1471                return res;
   \       0xB0   0x0038             MOVS     R0,R7
   \       0xB2   0xE01A             B.N      ??_app_set_regulation_2
   1472              }
   1473          
   1474              // sets regulation
   1475              res = sl_wisun_set_regulation((sl_wisun_regulation_t)value);
   \                     ??_app_set_regulation_7: (+1)
   \       0xB4   0x9801             LDR      R0,[SP, #+4]
   \       0xB6   0xB2C0             UXTB     R0,R0
   \       0xB8   0x.... 0x....      BL       sl_wisun_set_regulation
   \       0xBC   0x0004             MOVS     R4,R0
   1476              if (res != SL_STATUS_OK) {
   \       0xBE   0x2C00             CMP      R4,#+0
   \       0xC0   0xD004             BEQ.N    ??_app_set_regulation_8
   1477                printf("[Regulation not valid]\n");
   \       0xC2   0x....             LDR.N    R0,??DataTable18_30
   \       0xC4   0x.... 0x....      BL       printf
   1478                return res;
   \       0xC8   0x0020             MOVS     R0,R4
   \       0xCA   0xE00E             B.N      ??_app_set_regulation_2
   1479              } else {
   1480                app_regulation = (sl_wisun_regulation_t)value;
   \                     ??_app_set_regulation_8: (+1)
   \       0xCC   0x9901             LDR      R1,[SP, #+4]
   \       0xCE   0x....             LDR.N    R0,??DataTable18_31
   \       0xD0   0x7001             STRB     R1,[R0, #+0]
   1481              }
   1482          
   1483              // sets status of regulation
   1484              if ((sl_wisun_regulation_t)value == SL_WISUN_APP_CORE_REGULATION_NONE) {
   \       0xD2   0x9801             LDR      R0,[SP, #+4]
   \       0xD4   0xB2C0             UXTB     R0,R0
   \       0xD6   0x2800             CMP      R0,#+0
   \       0xD8   0xD103             BNE.N    ??_app_set_regulation_9
   1485                sl_wisun_app_core_set_regulation_active(false);
   \       0xDA   0x2000             MOVS     R0,#+0
   \       0xDC   0x.... 0x....      BL       sl_wisun_app_core_set_regulation_active
   \       0xE0   0xE002             B.N      ??_app_set_regulation_6
   1486              } else {
   1487                sl_wisun_app_core_set_regulation_active(true);
   \                     ??_app_set_regulation_9: (+1)
   \       0xE2   0x2001             MOVS     R0,#+1
   \       0xE4   0x.... 0x....      BL       sl_wisun_app_core_set_regulation_active
   1488              }
   1489            }
   1490          
   1491            return SL_STATUS_OK;
   \                     ??_app_set_regulation_6: (+1)
   \       0xE8   0x2000             MOVS     R0,#+0
   \                     ??_app_set_regulation_2: (+1)
   \       0xEA   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}
   1492          }
   1493          

   \                                 In section .text, align 2, keep-with-next
   1494          static sl_status_t _app_set_regulation_warning_threshold(const char *value_str,
   1495                                                                   const char *key_str,
   1496                                                                   const app_settings_entry_t *entry)
   1497          {
   \                     _app_set_regulation_warning_threshold: (+1)
   \        0x0   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \        0x4   0x0005             MOVS     R5,R0
   \        0x6   0x4688             MOV      R8,R1
   \        0x8   0x0016             MOVS     R6,R2
   1498            sl_status_t res = SL_STATUS_FAIL;
   \        0xA   0x2401             MOVS     R4,#+1
   1499            uint32_t value = 0U;
   \        0xC   0x2000             MOVS     R0,#+0
   \        0xE   0x9001             STR      R0,[SP, #+4]
   \       0x10   0x2102             MOVS     R1,#+2
   \       0x12   0x2200             MOVS     R2,#+0
   \       0x14   0xF10D 0x0702      ADD      R7,SP,#+2
   \       0x18   0x0038             MOVS     R0,R7
   \       0x1A   0x.... 0x....      BL       __aeabi_memset
   1500            sl_wisun_app_core_reg_thresholds_t thresholds = { 0U };
   1501            sl_wisun_join_state_t join_state = SL_WISUN_JOIN_STATE_DISCONNECTED;
   \       0x1E   0x2000             MOVS     R0,#+0
   \       0x20   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1502            (void)key_str;
   1503          
   1504            if ((value_str == NULL) || (entry == NULL) || (entry->key == NULL)) {
   \       0x24   0x2D00             CMP      R5,#+0
   \       0x26   0xD004             BEQ.N    ??_app_set_regulation_warning_threshold_0
   \       0x28   0x2E00             CMP      R6,#+0
   \       0x2A   0xD002             BEQ.N    ??_app_set_regulation_warning_threshold_0
   \       0x2C   0x6830             LDR      R0,[R6, #+0]
   \       0x2E   0x2800             CMP      R0,#+0
   \       0x30   0xD101             BNE.N    ??_app_set_regulation_warning_threshold_1
   1505              return SL_STATUS_FAIL;
   \                     ??_app_set_regulation_warning_threshold_0: (+1)
   \       0x32   0x2001             MOVS     R0,#+1
   \       0x34   0xE041             B.N      ??_app_set_regulation_warning_threshold_2
   1506            }
   1507          
   1508            // checking if the device connected or not
   1509            res = sl_wisun_get_join_state(&join_state);
   \                     ??_app_set_regulation_warning_threshold_1: (+1)
   \       0x36   0x4668             MOV      R0,SP
   \       0x38   0x.... 0x....      BL       sl_wisun_get_join_state
   \       0x3C   0x0007             MOVS     R7,R0
   1510            if (res != SL_STATUS_OK) {
   \       0x3E   0x2F00             CMP      R7,#+0
   \       0x40   0xD001             BEQ.N    ??_app_set_regulation_warning_threshold_3
   1511              return res;
   \       0x42   0x0038             MOVS     R0,R7
   \       0x44   0xE039             B.N      ??_app_set_regulation_warning_threshold_2
   1512            } else {
   1513              if (join_state != SL_WISUN_JOIN_STATE_DISCONNECTED) {
   \                     ??_app_set_regulation_warning_threshold_3: (+1)
   \       0x46   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x4A   0x2800             CMP      R0,#+0
   \       0x4C   0xD004             BEQ.N    ??_app_set_regulation_warning_threshold_4
   1514                printf("[Regulation related settings unavailable, disconnection is needed]\n");
   \       0x4E   0x....             LDR.N    R0,??DataTable18_26
   \       0x50   0x.... 0x....      BL       printf
   1515                return SL_STATUS_FAIL;
   \       0x54   0x2001             MOVS     R0,#+1
   \       0x56   0xE030             B.N      ??_app_set_regulation_warning_threshold_2
   1516              }
   1517            }
   1518          
   1519            res = app_util_get_integer(&value,
   1520                                       value_str,
   1521                                       entry->input_enum_list,
   1522                                       entry->input & APP_CLI_INPUT_FLAG_SIGNED);
   \                     ??_app_set_regulation_warning_threshold_4: (+1)
   \       0x58   0x79B3             LDRB     R3,[R6, #+6]
   \       0x5A   0xF013 0x0301      ANDS     R3,R3,#0x1
   \       0x5E   0x68F2             LDR      R2,[R6, #+12]
   \       0x60   0x0029             MOVS     R1,R5
   \       0x62   0xA801             ADD      R0,SP,#+4
   \       0x64   0x.... 0x....      BL       app_util_get_integer
   \       0x68   0x0004             MOVS     R4,R0
   1523          
   1524            if (res != SL_STATUS_OK) {
   \       0x6A   0x2C00             CMP      R4,#+0
   \       0x6C   0xD005             BEQ.N    ??_app_set_regulation_warning_threshold_5
   1525              printf("[Failed: Get value error: %lu]\n", res);
   \       0x6E   0x0021             MOVS     R1,R4
   \       0x70   0x....             LDR.N    R0,??DataTable18_27
   \       0x72   0x.... 0x....      BL       printf
   1526              return res;
   \       0x76   0x0020             MOVS     R0,R4
   \       0x78   0xE01F             B.N      ??_app_set_regulation_warning_threshold_2
   1527            }
   1528          
   1529            if (strstr(entry->key, "regulation_warning_threshold")) {
   \                     ??_app_set_regulation_warning_threshold_5: (+1)
   \       0x7A   0x....             LDR.N    R1,??DataTable18_32
   \       0x7C   0x6830             LDR      R0,[R6, #+0]
   \       0x7E   0x.... 0x....      BL       strstr
   \       0x82   0x2800             CMP      R0,#+0
   \       0x84   0xD018             BEQ.N    ??_app_set_regulation_warning_threshold_6
   1530              (void)sl_wisun_app_core_get_regulation_thresholds(&thresholds);
   \       0x86   0xF10D 0x0002      ADD      R0,SP,#+2
   \       0x8A   0x.... 0x....      BL       sl_wisun_app_core_get_regulation_thresholds
   1531              res = sl_wisun_set_regulation_tx_thresholds((int8_t)value, thresholds.alert_threshold);
   \       0x8E   0xF99D 0x1003      LDRSB    R1,[SP, #+3]
   \       0x92   0x9801             LDR      R0,[SP, #+4]
   \       0x94   0xB240             SXTB     R0,R0
   \       0x96   0x.... 0x....      BL       sl_wisun_set_regulation_tx_thresholds
   \       0x9A   0x0004             MOVS     R4,R0
   1532              if (res != SL_STATUS_OK) {
   \       0x9C   0x2C00             CMP      R4,#+0
   \       0x9E   0xD005             BEQ.N    ??_app_set_regulation_warning_threshold_7
   1533                printf("[Failed: unable to set regulation TX warning threshold: %lu]\n", res);
   \       0xA0   0x0021             MOVS     R1,R4
   \       0xA2   0x....             LDR.N    R0,??DataTable18_33
   \       0xA4   0x.... 0x....      BL       printf
   1534                return res;
   \       0xA8   0x0020             MOVS     R0,R4
   \       0xAA   0xE006             B.N      ??_app_set_regulation_warning_threshold_2
   1535              } else {
   1536                sl_wisun_app_core_set_regulation_thresholds((int8_t)value, thresholds.alert_threshold);
   \                     ??_app_set_regulation_warning_threshold_7: (+1)
   \       0xAC   0xF99D 0x1003      LDRSB    R1,[SP, #+3]
   \       0xB0   0x9801             LDR      R0,[SP, #+4]
   \       0xB2   0xB240             SXTB     R0,R0
   \       0xB4   0x.... 0x....      BL       sl_wisun_app_core_set_regulation_thresholds
   1537              }
   1538            }
   1539          
   1540            return SL_STATUS_OK;
   \                     ??_app_set_regulation_warning_threshold_6: (+1)
   \       0xB8   0x2000             MOVS     R0,#+0
   \                     ??_app_set_regulation_warning_threshold_2: (+1)
   \       0xBA   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}
   1541          }
   1542          

   \                                 In section .text, align 2, keep-with-next
   1543          static sl_status_t _app_set_regulation_alert_threshold(const char *value_str,
   1544                                                                 const char *key_str,
   1545                                                                 const app_settings_entry_t *entry)
   1546          {
   \                     _app_set_regulation_alert_threshold: (+1)
   \        0x0   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \        0x4   0x0005             MOVS     R5,R0
   \        0x6   0x4688             MOV      R8,R1
   \        0x8   0x0016             MOVS     R6,R2
   1547            sl_status_t res = SL_STATUS_FAIL;
   \        0xA   0x2401             MOVS     R4,#+1
   1548            uint32_t value = 0U;
   \        0xC   0x2000             MOVS     R0,#+0
   \        0xE   0x9001             STR      R0,[SP, #+4]
   \       0x10   0x2102             MOVS     R1,#+2
   \       0x12   0x2200             MOVS     R2,#+0
   \       0x14   0xF10D 0x0702      ADD      R7,SP,#+2
   \       0x18   0x0038             MOVS     R0,R7
   \       0x1A   0x.... 0x....      BL       __aeabi_memset
   1549            sl_wisun_app_core_reg_thresholds_t thresholds = { 0U };
   1550            sl_wisun_join_state_t join_state = SL_WISUN_JOIN_STATE_DISCONNECTED;
   \       0x1E   0x2000             MOVS     R0,#+0
   \       0x20   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1551            (void)key_str;
   1552            (void)entry;
   1553          
   1554            if ((value_str == NULL) || (entry == NULL) || (entry->key == NULL)) {
   \       0x24   0x2D00             CMP      R5,#+0
   \       0x26   0xD004             BEQ.N    ??_app_set_regulation_alert_threshold_0
   \       0x28   0x2E00             CMP      R6,#+0
   \       0x2A   0xD002             BEQ.N    ??_app_set_regulation_alert_threshold_0
   \       0x2C   0x6830             LDR      R0,[R6, #+0]
   \       0x2E   0x2800             CMP      R0,#+0
   \       0x30   0xD101             BNE.N    ??_app_set_regulation_alert_threshold_1
   1555              return SL_STATUS_FAIL;
   \                     ??_app_set_regulation_alert_threshold_0: (+1)
   \       0x32   0x2001             MOVS     R0,#+1
   \       0x34   0xE043             B.N      ??_app_set_regulation_alert_threshold_2
   1556            }
   1557          
   1558            // checking if the device connected or not
   1559            res = sl_wisun_get_join_state(&join_state);
   \                     ??_app_set_regulation_alert_threshold_1: (+1)
   \       0x36   0x4668             MOV      R0,SP
   \       0x38   0x.... 0x....      BL       sl_wisun_get_join_state
   \       0x3C   0x0007             MOVS     R7,R0
   1560            if (res != SL_STATUS_OK) {
   \       0x3E   0x2F00             CMP      R7,#+0
   \       0x40   0xD001             BEQ.N    ??_app_set_regulation_alert_threshold_3
   1561              return res;
   \       0x42   0x0038             MOVS     R0,R7
   \       0x44   0xE03B             B.N      ??_app_set_regulation_alert_threshold_2
   1562            } else {
   1563              if (join_state != SL_WISUN_JOIN_STATE_DISCONNECTED) {
   \                     ??_app_set_regulation_alert_threshold_3: (+1)
   \       0x46   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x4A   0x2800             CMP      R0,#+0
   \       0x4C   0xD004             BEQ.N    ??_app_set_regulation_alert_threshold_4
   1564                printf("[Regulation related settings unavailable, disconnection is needed]\n");
   \       0x4E   0x....             LDR.N    R0,??DataTable18_26
   \       0x50   0x.... 0x....      BL       printf
   1565                return SL_STATUS_FAIL;
   \       0x54   0x2001             MOVS     R0,#+1
   \       0x56   0xE032             B.N      ??_app_set_regulation_alert_threshold_2
   1566              }
   1567            }
   1568          
   1569            res = app_util_get_integer(&value,
   1570                                       value_str,
   1571                                       entry->input_enum_list,
   1572                                       entry->input & APP_CLI_INPUT_FLAG_SIGNED);
   \                     ??_app_set_regulation_alert_threshold_4: (+1)
   \       0x58   0x79B3             LDRB     R3,[R6, #+6]
   \       0x5A   0xF013 0x0301      ANDS     R3,R3,#0x1
   \       0x5E   0x68F2             LDR      R2,[R6, #+12]
   \       0x60   0x0029             MOVS     R1,R5
   \       0x62   0xA801             ADD      R0,SP,#+4
   \       0x64   0x.... 0x....      BL       app_util_get_integer
   \       0x68   0x0004             MOVS     R4,R0
   1573          
   1574            if (res != SL_STATUS_OK) {
   \       0x6A   0x2C00             CMP      R4,#+0
   \       0x6C   0xD005             BEQ.N    ??_app_set_regulation_alert_threshold_5
   1575              printf("[Failed: Get value error: %lu]\n", res);
   \       0x6E   0x0021             MOVS     R1,R4
   \       0x70   0x....             LDR.N    R0,??DataTable18_27
   \       0x72   0x.... 0x....      BL       printf
   1576              return res;
   \       0x76   0x0020             MOVS     R0,R4
   \       0x78   0xE021             B.N      ??_app_set_regulation_alert_threshold_2
   1577            }
   1578          
   1579            if (strstr(entry->key, "regulation_alert_threshold")) {
   \                     ??_app_set_regulation_alert_threshold_5: (+1)
   \       0x7A   0x....             LDR.N    R1,??DataTable18_34
   \       0x7C   0x6830             LDR      R0,[R6, #+0]
   \       0x7E   0x.... 0x....      BL       strstr
   \       0x82   0x2800             CMP      R0,#+0
   \       0x84   0xD01A             BEQ.N    ??_app_set_regulation_alert_threshold_6
   1580              (void)sl_wisun_app_core_get_regulation_thresholds(&thresholds);
   \       0x86   0xF10D 0x0002      ADD      R0,SP,#+2
   \       0x8A   0x.... 0x....      BL       sl_wisun_app_core_get_regulation_thresholds
   1581              res = sl_wisun_set_regulation_tx_thresholds(thresholds.warning_threshold, (int8_t)value);
   \       0x8E   0x9801             LDR      R0,[SP, #+4]
   \       0x90   0x0001             MOVS     R1,R0
   \       0x92   0xB249             SXTB     R1,R1
   \       0x94   0xF99D 0x0002      LDRSB    R0,[SP, #+2]
   \       0x98   0x.... 0x....      BL       sl_wisun_set_regulation_tx_thresholds
   \       0x9C   0x0004             MOVS     R4,R0
   1582              if (res != SL_STATUS_OK) {
   \       0x9E   0x2C00             CMP      R4,#+0
   \       0xA0   0xD005             BEQ.N    ??_app_set_regulation_alert_threshold_7
   1583                printf("[Failed: unable to set regulation TX alert threshold: %lu]\n", res);
   \       0xA2   0x0021             MOVS     R1,R4
   \       0xA4   0x....             LDR.N    R0,??DataTable18_35
   \       0xA6   0x.... 0x....      BL       printf
   1584                return res;
   \       0xAA   0x0020             MOVS     R0,R4
   \       0xAC   0xE007             B.N      ??_app_set_regulation_alert_threshold_2
   1585              } else {
   1586                sl_wisun_app_core_set_regulation_thresholds(thresholds.warning_threshold, (int8_t)value);
   \                     ??_app_set_regulation_alert_threshold_7: (+1)
   \       0xAE   0x9801             LDR      R0,[SP, #+4]
   \       0xB0   0x0001             MOVS     R1,R0
   \       0xB2   0xB249             SXTB     R1,R1
   \       0xB4   0xF99D 0x0002      LDRSB    R0,[SP, #+2]
   \       0xB8   0x.... 0x....      BL       sl_wisun_app_core_set_regulation_thresholds
   1587              }
   1588            }
   1589          
   1590            return SL_STATUS_OK;
   \                     ??_app_set_regulation_alert_threshold_6: (+1)
   \       0xBC   0x2000             MOVS     R0,#+0
   \                     ??_app_set_regulation_alert_threshold_2: (+1)
   \       0xBE   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}
   1591          }
   1592          

   \                                 In section .text, align 2, keep-with-next
   1593          static sl_status_t _app_get_regulation(char *value_str,
   1594                                                 const char *key_str,
   1595                                                 const app_cli_entry_t *entry)
   1596          {
   \                     _app_get_regulation: (+1)
   \        0x0   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \        0x4   0x0005             MOVS     R5,R0
   \        0x6   0x000F             MOVS     R7,R1
   \        0x8   0x0016             MOVS     R6,R2
   1597            const app_enum_t *value_enum = NULL;
   \        0xA   0xF05F 0x0800      MOVS     R8,#+0
   1598            (void)key_str;
   1599          
   1600            if ((value_str == NULL) || (entry == NULL) || (entry->key == NULL)) {
   \        0xE   0x2D00             CMP      R5,#+0
   \       0x10   0xD004             BEQ.N    ??_app_get_regulation_0
   \       0x12   0x2E00             CMP      R6,#+0
   \       0x14   0xD002             BEQ.N    ??_app_get_regulation_0
   \       0x16   0x6830             LDR      R0,[R6, #+0]
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD101             BNE.N    ??_app_get_regulation_1
   1601              return SL_STATUS_FAIL;
   \                     ??_app_get_regulation_0: (+1)
   \       0x1C   0x2001             MOVS     R0,#+1
   \       0x1E   0xE01F             B.N      ??_app_get_regulation_2
   1602            }
   1603          
   1604            if (!strstr(entry->key, "regulation")) {
   \                     ??_app_get_regulation_1: (+1)
   \       0x20   0x....             LDR.N    R1,??DataTable18_28
   \       0x22   0x6830             LDR      R0,[R6, #+0]
   \       0x24   0x.... 0x....      BL       strstr
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD101             BNE.N    ??_app_get_regulation_3
   1605              return SL_STATUS_FAIL;
   \       0x2C   0x2001             MOVS     R0,#+1
   \       0x2E   0xE017             B.N      ??_app_get_regulation_2
   1606            }
   1607          
   1608            // finds the proper string for the value for regulation
   1609            value_enum = entry->output_enum_list;
   \                     ??_app_get_regulation_3: (+1)
   \       0x30   0x6934             LDR      R4,[R6, #+16]
   1610            if (value_enum->value_str == NULL) {
   \       0x32   0x6820             LDR      R0,[R4, #+0]
   \       0x34   0x2800             CMP      R0,#+0
   \       0x36   0xD101             BNE.N    ??_app_get_regulation_4
   1611              return SL_STATUS_FAIL;
   \       0x38   0x2001             MOVS     R0,#+1
   \       0x3A   0xE011             B.N      ??_app_get_regulation_2
   1612            }
   1613          
   1614            while (value_enum) {
   \                     ??_app_get_regulation_4: (+1)
   \       0x3C   0x2C00             CMP      R4,#+0
   \       0x3E   0xD006             BEQ.N    ??_app_get_regulation_5
   1615              if (value_enum->value == app_regulation) {
   \       0x40   0x6860             LDR      R0,[R4, #+4]
   \       0x42   0x....             LDR.N    R1,??DataTable18_31
   \       0x44   0x7809             LDRB     R1,[R1, #+0]
   \       0x46   0x4288             CMP      R0,R1
   \       0x48   0xD001             BEQ.N    ??_app_get_regulation_5
   1616                // Matching enumeration found
   1617                break;
   1618              }
   1619              value_enum++;
   \                     ??_app_get_regulation_6: (+1)
   \       0x4A   0x3408             ADDS     R4,R4,#+8
   \       0x4C   0xE7F6             B.N      ??_app_get_regulation_4
   1620            }
   1621          
   1622            snprintf(value_str, APP_CLI_STR_VALUE_LENGTH, "%s (%d)",
   1623                     value_enum->value_str, (uint8_t)value_enum->value);
   \                     ??_app_get_regulation_5: (+1)
   \       0x4E   0x7920             LDRB     R0,[R4, #+4]
   \       0x50   0x9000             STR      R0,[SP, #+0]
   \       0x52   0x6823             LDR      R3,[R4, #+0]
   \       0x54   0x....             LDR.N    R2,??DataTable18_10
   \       0x56   0x2180             MOVS     R1,#+128
   \       0x58   0x0028             MOVS     R0,R5
   \       0x5A   0x.... 0x....      BL       snprintf
   1624          
   1625            return SL_STATUS_OK;
   \       0x5E   0x2000             MOVS     R0,#+0
   \                     ??_app_get_regulation_2: (+1)
   \       0x60   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}
   1626          }
   1627          

   \                                 In section .text, align 2, keep-with-next
   1628          static sl_status_t _app_get_regulation_warning_threshold(char *value_str,
   1629                                                                   const char *key_str,
   1630                                                                   const app_cli_entry_t *entry)
   1631          {
   \                     _app_get_regulation_warning_threshold: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000E             MOVS     R6,R1
   \        0x6   0x0015             MOVS     R5,R2
   \        0x8   0x2102             MOVS     R1,#+2
   \        0xA   0x2200             MOVS     R2,#+0
   \        0xC   0x466F             MOV      R7,SP
   \        0xE   0x0038             MOVS     R0,R7
   \       0x10   0x.... 0x....      BL       __aeabi_memset
   1632            sl_wisun_app_core_reg_thresholds_t thresholds = { 0U };
   1633            (void)key_str;
   1634          
   1635            if ((value_str == NULL) || (entry == NULL) || (entry->key == NULL)) {
   \       0x14   0x2C00             CMP      R4,#+0
   \       0x16   0xD004             BEQ.N    ??_app_get_regulation_warning_threshold_0
   \       0x18   0x2D00             CMP      R5,#+0
   \       0x1A   0xD002             BEQ.N    ??_app_get_regulation_warning_threshold_0
   \       0x1C   0x6828             LDR      R0,[R5, #+0]
   \       0x1E   0x2800             CMP      R0,#+0
   \       0x20   0xD101             BNE.N    ??_app_get_regulation_warning_threshold_1
   1636              return SL_STATUS_FAIL;
   \                     ??_app_get_regulation_warning_threshold_0: (+1)
   \       0x22   0x2001             MOVS     R0,#+1
   \       0x24   0xE010             B.N      ??_app_get_regulation_warning_threshold_2
   1637            }
   1638          
   1639            if (strstr(entry->key, "regulation_warning_threshold")) {
   \                     ??_app_get_regulation_warning_threshold_1: (+1)
   \       0x26   0x....             LDR.N    R1,??DataTable18_32
   \       0x28   0x6828             LDR      R0,[R5, #+0]
   \       0x2A   0x.... 0x....      BL       strstr
   \       0x2E   0x2800             CMP      R0,#+0
   \       0x30   0xD009             BEQ.N    ??_app_get_regulation_warning_threshold_3
   1640              (void)sl_wisun_app_core_get_regulation_thresholds(&thresholds);
   \       0x32   0x4668             MOV      R0,SP
   \       0x34   0x.... 0x....      BL       sl_wisun_app_core_get_regulation_thresholds
   1641              snprintf(value_str, APP_CLI_STR_VALUE_LENGTH, "%d",
   1642                       thresholds.warning_threshold);
   \       0x38   0xF99D 0x3000      LDRSB    R3,[SP, #+0]
   \       0x3C   0x....             ADR.N    R2,??DataTable18_3
   \       0x3E   0x2180             MOVS     R1,#+128
   \       0x40   0x0020             MOVS     R0,R4
   \       0x42   0x.... 0x....      BL       snprintf
   1643            }
   1644          
   1645            return SL_STATUS_OK;
   \                     ??_app_get_regulation_warning_threshold_3: (+1)
   \       0x46   0x2000             MOVS     R0,#+0
   \                     ??_app_get_regulation_warning_threshold_2: (+1)
   \       0x48   0xBDF2             POP      {R1,R4-R7,PC}
   1646          }
   1647          

   \                                 In section .text, align 2, keep-with-next
   1648          static sl_status_t _app_get_regulation_alert_threshold(char *value_str,
   1649                                                                 const char *key_str,
   1650                                                                 const app_cli_entry_t *entry)
   1651          {
   \                     _app_get_regulation_alert_threshold: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000E             MOVS     R6,R1
   \        0x6   0x0015             MOVS     R5,R2
   \        0x8   0x2102             MOVS     R1,#+2
   \        0xA   0x2200             MOVS     R2,#+0
   \        0xC   0x466F             MOV      R7,SP
   \        0xE   0x0038             MOVS     R0,R7
   \       0x10   0x.... 0x....      BL       __aeabi_memset
   1652            sl_wisun_app_core_reg_thresholds_t thresholds = { 0U };
   1653            (void)key_str;
   1654          
   1655            if ((value_str == NULL) || (entry == NULL) || (entry->key == NULL)) {
   \       0x14   0x2C00             CMP      R4,#+0
   \       0x16   0xD004             BEQ.N    ??_app_get_regulation_alert_threshold_0
   \       0x18   0x2D00             CMP      R5,#+0
   \       0x1A   0xD002             BEQ.N    ??_app_get_regulation_alert_threshold_0
   \       0x1C   0x6828             LDR      R0,[R5, #+0]
   \       0x1E   0x2800             CMP      R0,#+0
   \       0x20   0xD101             BNE.N    ??_app_get_regulation_alert_threshold_1
   1656              return SL_STATUS_FAIL;
   \                     ??_app_get_regulation_alert_threshold_0: (+1)
   \       0x22   0x2001             MOVS     R0,#+1
   \       0x24   0xE010             B.N      ??_app_get_regulation_alert_threshold_2
   1657            }
   1658          
   1659            if (strstr(entry->key, "regulation_alert_threshold")) {
   \                     ??_app_get_regulation_alert_threshold_1: (+1)
   \       0x26   0x....             LDR.N    R1,??DataTable18_34
   \       0x28   0x6828             LDR      R0,[R5, #+0]
   \       0x2A   0x.... 0x....      BL       strstr
   \       0x2E   0x2800             CMP      R0,#+0
   \       0x30   0xD009             BEQ.N    ??_app_get_regulation_alert_threshold_3
   1660              (void)sl_wisun_app_core_get_regulation_thresholds(&thresholds);
   \       0x32   0x4668             MOV      R0,SP
   \       0x34   0x.... 0x....      BL       sl_wisun_app_core_get_regulation_thresholds
   1661              snprintf(value_str, APP_CLI_STR_VALUE_LENGTH, "%d",
   1662                       thresholds.alert_threshold);
   \       0x38   0xF99D 0x3001      LDRSB    R3,[SP, #+1]
   \       0x3C   0x....             ADR.N    R2,??DataTable18_3
   \       0x3E   0x2180             MOVS     R1,#+128
   \       0x40   0x0020             MOVS     R0,R4
   \       0x42   0x.... 0x....      BL       snprintf
   1663            }
   1664          
   1665            return SL_STATUS_OK;
   \                     ??_app_get_regulation_alert_threshold_3: (+1)
   \       0x46   0x2000             MOVS     R0,#+0
   \                     ??_app_get_regulation_alert_threshold_2: (+1)
   \       0x48   0xBDF2             POP      {R1,R4-R7,PC}
   1666          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \        0x0   0x25 0x73          DC8      0x25, 0x73, 0x00, 0x00
   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \        0x0   0x25 0x64          DC8      0x25, 0x64, 0x00, 0x00
   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \        0x0   0x4E 0x2F          DC8      "N/A"          
   \              0x41 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_3:
   \        0x0   0x00 0x00          DC8      "",0x0,0x0,0x0 
   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18:
   \        0x0   0x....'....        DC32     ?_41

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_1:
   \        0x0   0x....'....        DC32     _phy_common_params

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_2:
   \        0x0   0x....'....        DC32     ?_42

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_3:
   \        0x0   0x25 0x64          DC8      0x25, 0x64, 0x00, 0x00
   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_4:
   \        0x0   0x....'....        DC32     ?_43

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_5:
   \        0x0   0x....'....        DC32     ?_44

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_6:
   \        0x0   0x....'....        DC32     ?_45

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_7:
   \        0x0   0x....'....        DC32     ?_46

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_8:
   \        0x0   0x....'....        DC32     `_load_common_params_from_phy_cfg::phy_cfg`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_9:
   \        0x0   0x....'....        DC32     `_store_common_params_to_phy_cfg::phy_cfg`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_10:
   \        0x0   0x....'....        DC32     ?_47

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_11:
   \        0x0   0x....'....        DC32     _phy_cfg_map

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_12:
   \        0x0   0x....'....        DC32     ?_52

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_13:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_14:
   \        0x0   0x....'....        DC32     ?_53

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_15:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_16:
   \        0x0   0x....'....        DC32     ?_54

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_17:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_18:
   \        0x0   0x....'....        DC32     ?_55

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_19:
   \        0x0   0x....'....        DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_20:
   \        0x0   0x....'....        DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_21:
   \        0x0   0x....'....        DC32     ?_56

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_22:
   \        0x0   0x....'....        DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_23:
   \        0x0   0x....'....        DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_24:
   \        0x0   0x....'....        DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_25:
   \        0x0   0x....'....        DC32     ?_11

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_26:
   \        0x0   0x....'....        DC32     ?_57

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_27:
   \        0x0   0x....'....        DC32     ?_58

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_28:
   \        0x0   0x....'....        DC32     ?_35

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_29:
   \        0x0   0x....'....        DC32     ?_59

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_30:
   \        0x0   0x....'....        DC32     ?_60

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_31:
   \        0x0   0x....'....        DC32     app_regulation

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_32:
   \        0x0   0x....'....        DC32     ?_37

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_33:
   \        0x0   0x....'....        DC32     ?_61

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_34:
   \        0x0   0x....'....        DC32     ?_39

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_35:
   \        0x0   0x....'....        DC32     ?_62

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x72 0x65          DC8 "regulatory_domain"
   \              0x67 0x75    
   \              0x6C 0x61    
   \              0x74 0x6F    
   \              0x72 0x79    
   \              0x5F 0x64    
   \              0x6F 0x6D    
   \              0x61 0x69    
   \              0x6E 0x00
   \       0x12                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x6F 0x70          DC8 "operating_class"
   \              0x65 0x72    
   \              0x61 0x74    
   \              0x69 0x6E    
   \              0x67 0x5F    
   \              0x63 0x6C    
   \              0x61 0x73    
   \              0x73 0x00

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x6F 0x70          DC8 "operating_mode"
   \              0x65 0x72    
   \              0x61 0x74    
   \              0x69 0x6E    
   \              0x67 0x5F    
   \              0x6D 0x6F    
   \              0x64 0x65    
   \              0x00
   \        0xF                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x63 0x68          DC8 "chan_plan_id"
   \              0x61 0x6E    
   \              0x5F 0x70    
   \              0x6C 0x61    
   \              0x6E 0x5F    
   \              0x69 0x64    
   \              0x00
   \        0xD                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0x70 0x68          DC8 "phy_mode_id"
   \              0x79 0x5F    
   \              0x6D 0x6F    
   \              0x64 0x65    
   \              0x5F 0x69    
   \              0x64 0x00

   \                                 In section .rodata, align 4
   \                     ?_5:
   \        0x0   0x63 0x68          DC8 "ch0_frequency"
   \              0x30 0x5F    
   \              0x66 0x72    
   \              0x65 0x71    
   \              0x75 0x65    
   \              0x6E 0x63    
   \              0x79 0x00
   \        0xE                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_6:
   \        0x0   0x6E 0x75          DC8 "number_of_channels"
   \              0x6D 0x62    
   \              0x65 0x72    
   \              0x5F 0x6F    
   \              0x66 0x5F    
   \              0x63 0x68    
   \              0x61 0x6E    
   \              0x6E 0x65    
   \              0x6C 0x73    
   \              0x00
   \       0x13                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_7:
   \        0x0   0x63 0x68          DC8 "channel_spacing"
   \              0x61 0x6E    
   \              0x6E 0x65    
   \              0x6C 0x5F    
   \              0x73 0x70    
   \              0x61 0x63    
   \              0x69 0x6E    
   \              0x67 0x00

   \                                 In section .rodata, align 4
   \                     ?_8:
   \        0x0   0x77 0x69          DC8 "wisun"
   \              0x73 0x75    
   \              0x6E 0x00
   \        0x6                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_9:
   \        0x0   0x6E 0x65          DC8 "network_name"
   \              0x74 0x77    
   \              0x6F 0x72    
   \              0x6B 0x5F    
   \              0x6E 0x61    
   \              0x6D 0x65    
   \              0x00
   \        0xD                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_10:
   \        0x0   0x57 0x69          DC8 "Wi-SUN network [string] max 32"
   \              0x2D 0x53    
   \              0x55 0x4E    
   \              0x20 0x6E    
   \              0x65 0x74    
   \              0x77 0x6F    
   \              0x72 0x6B    
   \              0x20 0x5B    
   \              0x73 0x74    
   \              0x72 0x69    
   \              0x6E 0x67    
   \              0x5D 0x20    
   \              0x6D 0x61    
   \              0x78 0x20    
   \              0x33 0x32    
   \              0x00
   \       0x1F                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_11:
   \        0x0   0x70 0x68          DC8 "phy_config_type"
   \              0x79 0x5F    
   \              0x63 0x6F    
   \              0x6E 0x66    
   \              0x69 0x67    
   \              0x5F 0x74    
   \              0x79 0x70    
   \              0x65 0x00

   \                                 In section .rodata, align 4
   \                     ?_12:
   \        0x0   0x50 0x48          DC8 "PHY configuration type (FAN 1.0|FAN 1.1|explicit)"
   \              0x59 0x20    
   \              0x63 0x6F    
   \              0x6E 0x66    
   \              0x69 0x67    
   \              0x75 0x72    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x74 0x79    
   \              0x70 0x65    
   \              0x20 0x28    
   \              0x46 0x41    
   \              0x4E 0x20    
   \              0x31 0x2E    
   \              0x30 0x7C    
   \              0x46 0x41    
   \              0x4E 0x20    
   \              0x31 0x2E    
   \              0x31 0x7C    
   \              0x65 0x78    
   \              0x70 0x6C    
   \              0x69 0x63    
   \              0x69 0x74    
   \              0x29 0x00
   \       0x32                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_13:
   \        0x0   0x6E 0x65          DC8 "network_size"
   \              0x74 0x77    
   \              0x6F 0x72    
   \              0x6B 0x5F    
   \              0x73 0x69    
   \              0x7A 0x65    
   \              0x00
   \        0xD                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_14:
   \        0x0   0x57 0x69          DC8 "Wi-SUN network size [uint8]"
   \              0x2D 0x53    
   \              0x55 0x4E    
   \              0x20 0x6E    
   \              0x65 0x74    
   \              0x77 0x6F    
   \              0x72 0x6B    
   \              0x20 0x73    
   \              0x69 0x7A    
   \              0x65 0x20    
   \              0x5B 0x75    
   \              0x69 0x6E    
   \              0x74 0x38    
   \              0x5D 0x00

   \                                 In section .rodata, align 4
   \                     ?_15:
   \        0x0   0x74 0x78          DC8 "tx_power"
   \              0x5F 0x70    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x00
   \        0x9                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_16:
   \        0x0   0x54 0x58          DC8 "TX power in dBm [uint8]"
   \              0x20 0x70    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x20 0x69    
   \              0x6E 0x20    
   \              0x64 0x42    
   \              0x6D 0x20    
   \              0x5B 0x75    
   \              0x69 0x6E    
   \              0x74 0x38    
   \              0x5D 0x00

   \                                 In section .rodata, align 4
   \                     ?_17:
   \        0x0   0x57 0x69          DC8 "Wi-SUN regulatory domain [uint8]"
   \              0x2D 0x53    
   \              0x55 0x4E    
   \              0x20 0x72    
   \              0x65 0x67    
   \              0x75 0x6C    
   \              0x61 0x74    
   \              0x6F 0x72    
   \              0x79 0x20    
   \              0x64 0x6F    
   \              0x6D 0x61    
   \              0x69 0x6E    
   \              0x20 0x5B    
   \              0x75 0x69    
   \              0x6E 0x74    
   \              0x38 0x5D    
   \              0x00
   \       0x21                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_18:
   \        0x0   0x57 0x69          DC8 "Wi-SUN operation class [uint8]"
   \              0x2D 0x53    
   \              0x55 0x4E    
   \              0x20 0x6F    
   \              0x70 0x65    
   \              0x72 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x63    
   \              0x6C 0x61    
   \              0x73 0x73    
   \              0x20 0x5B    
   \              0x75 0x69    
   \              0x6E 0x74    
   \              0x38 0x5D    
   \              0x00
   \       0x1F                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_19:
   \        0x0   0x57 0x69          DC8 "Wi-SUN operating mode [uint16]"
   \              0x2D 0x53    
   \              0x55 0x4E    
   \              0x20 0x6F    
   \              0x70 0x65    
   \              0x72 0x61    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x6D    
   \              0x6F 0x64    
   \              0x65 0x20    
   \              0x5B 0x75    
   \              0x69 0x6E    
   \              0x74 0x31    
   \              0x36 0x5D    
   \              0x00
   \       0x1F                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_20:
   \        0x0   0x57 0x69          DC8 "Wi-SUN channel plan ID [uint8]"
   \              0x2D 0x53    
   \              0x55 0x4E    
   \              0x20 0x63    
   \              0x68 0x61    
   \              0x6E 0x6E    
   \              0x65 0x6C    
   \              0x20 0x70    
   \              0x6C 0x61    
   \              0x6E 0x20    
   \              0x49 0x44    
   \              0x20 0x5B    
   \              0x75 0x69    
   \              0x6E 0x74    
   \              0x38 0x5D    
   \              0x00
   \       0x1F                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_21:
   \        0x0   0x57 0x69          DC8 "Wi-SUN PHY mode ID [uint8]"
   \              0x2D 0x53    
   \              0x55 0x4E    
   \              0x20 0x50    
   \              0x48 0x59    
   \              0x20 0x6D    
   \              0x6F 0x64    
   \              0x65 0x20    
   \              0x49 0x44    
   \              0x20 0x5B    
   \              0x75 0x69    
   \              0x6E 0x74    
   \              0x38 0x5D    
   \              0x00
   \       0x1B                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_22:
   \        0x0   0x43 0x68          DC8 "Ch0 frequency in kHz [uint32]"
   \              0x30 0x20    
   \              0x66 0x72    
   \              0x65 0x71    
   \              0x75 0x65    
   \              0x6E 0x63    
   \              0x79 0x20    
   \              0x69 0x6E    
   \              0x20 0x6B    
   \              0x48 0x7A    
   \              0x20 0x5B    
   \              0x75 0x69    
   \              0x6E 0x74    
   \              0x33 0x32    
   \              0x5D 0x00
   \       0x1E                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_23:
   \        0x0   0x4E 0x75          DC8 "Number of channels [uint16]"
   \              0x6D 0x62    
   \              0x65 0x72    
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x63 0x68    
   \              0x61 0x6E    
   \              0x6E 0x65    
   \              0x6C 0x73    
   \              0x20 0x5B    
   \              0x75 0x69    
   \              0x6E 0x74    
   \              0x31 0x36    
   \              0x5D 0x00

   \                                 In section .rodata, align 4
   \                     ?_24:
   \        0x0   0x43 0x68          DC8 0x43, 0x68, 0x61, 0x6E, 0x6E, 0x65, 0x6C, 0x20
   \              0x61 0x6E    
   \              0x6E 0x65    
   \              0x6C 0x20
   \        0x8   0x73 0x70          DC8 0x73, 0x70, 0x61, 0x63, 0x69, 0x6E, 0x67, 0x20
   \              0x61 0x63    
   \              0x69 0x6E    
   \              0x67 0x20
   \       0x10   0x5B 0x73          DC8 0x5B, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x5D
   \              0x74 0x72    
   \              0x69 0x6E    
   \              0x67 0x5D
   \       0x18   0x20 0x28          DC8 0x20, 0x28, 0x31, 0x30, 0x30, 0x6B, 0x48, 0x7A
   \              0x31 0x30    
   \              0x30 0x6B    
   \              0x48 0x7A
   \       0x20   0x7C 0x32          DC8 0x7C, 0x32, 0x30, 0x30, 0x6B, 0x48, 0x7A, 0x7C
   \              0x30 0x30    
   \              0x6B 0x48    
   \              0x7A 0x7C
   \       0x28   0x34 0x30          DC8 0x34, 0x30, 0x30, 0x6B, 0x48, 0x7A, 0x7C, 0x36
   \              0x30 0x6B    
   \              0x48 0x7A    
   \              0x7C 0x36
   \       0x30   0x30 0x30          DC8 0x30, 0x30, 0x6B, 0x48, 0x7A, 0x29, 0
   \              0x6B 0x48    
   \              0x7A 0x29    
   \              0x00
   \       0x37                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_25:
   \        0x0   0x6A 0x6F          DC8 "join_state"
   \              0x69 0x6E    
   \              0x5F 0x73    
   \              0x74 0x61    
   \              0x74 0x65    
   \              0x00
   \        0xB                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_26:
   \        0x0   0x57 0x69          DC8 "Wi-SUN join state"
   \              0x2D 0x53    
   \              0x55 0x4E    
   \              0x20 0x6A    
   \              0x6F 0x69    
   \              0x6E 0x20    
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x65 0x00
   \       0x12                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_27:
   \        0x0   0x69 0x70          DC8 "ip_address_global"
   \              0x5F 0x61    
   \              0x64 0x64    
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x5F 0x67    
   \              0x6C 0x6F    
   \              0x62 0x61    
   \              0x6C 0x00
   \       0x12                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_28:
   \        0x0   0x47 0x6C          DC8 "Global IPv6 address"
   \              0x6F 0x62    
   \              0x61 0x6C    
   \              0x20 0x49    
   \              0x50 0x76    
   \              0x36 0x20    
   \              0x61 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x00

   \                                 In section .rodata, align 4
   \                     ?_29:
   \        0x0   0x69 0x70          DC8 "ip_address_link_local"
   \              0x5F 0x61    
   \              0x64 0x64    
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x5F 0x6C    
   \              0x69 0x6E    
   \              0x6B 0x5F    
   \              0x6C 0x6F    
   \              0x63 0x61    
   \              0x6C 0x00
   \       0x16                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_30:
   \        0x0   0x4C 0x69          DC8 "Link local IPv6"
   \              0x6E 0x6B    
   \              0x20 0x6C    
   \              0x6F 0x63    
   \              0x61 0x6C    
   \              0x20 0x49    
   \              0x50 0x76    
   \              0x36 0x00

   \                                 In section .rodata, align 4
   \                     ?_31:
   \        0x0   0x69 0x70          DC8 "ip_address_border_router"
   \              0x5F 0x61    
   \              0x64 0x64    
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x5F 0x62    
   \              0x6F 0x72    
   \              0x64 0x65    
   \              0x72 0x5F    
   \              0x72 0x6F    
   \              0x75 0x74    
   \              0x65 0x72    
   \              0x00
   \       0x19                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_32:
   \        0x0   0x42 0x6F          DC8 "Border Router IPv6 address"
   \              0x72 0x64    
   \              0x65 0x72    
   \              0x20 0x52    
   \              0x6F 0x75    
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x49 0x50    
   \              0x76 0x36    
   \              0x20 0x61    
   \              0x64 0x64    
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x00
   \       0x1B                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_33:
   \        0x0   0x69 0x70          DC8 "ip_address_primary_parent"
   \              0x5F 0x61    
   \              0x64 0x64    
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x5F 0x70    
   \              0x72 0x69    
   \              0x6D 0x61    
   \              0x72 0x79    
   \              0x5F 0x70    
   \              0x61 0x72    
   \              0x65 0x6E    
   \              0x74 0x00
   \       0x1A                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_34:
   \        0x0   0x50 0x72          DC8 "Primary Parent IPv6 address"
   \              0x69 0x6D    
   \              0x61 0x72    
   \              0x79 0x20    
   \              0x50 0x61    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x20 0x49    
   \              0x50 0x76    
   \              0x36 0x20    
   \              0x61 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x00

   \                                 In section .rodata, align 4
   \                     ?_35:
   \        0x0   0x72 0x65          DC8 "regulation"
   \              0x67 0x75    
   \              0x6C 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x00
   \        0xB                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_36:
   \        0x0   0x52 0x65          DC8 "Regional regulation [uint8]"
   \              0x67 0x69    
   \              0x6F 0x6E    
   \              0x61 0x6C    
   \              0x20 0x72    
   \              0x65 0x67    
   \              0x75 0x6C    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x5B 0x75    
   \              0x69 0x6E    
   \              0x74 0x38    
   \              0x5D 0x00

   \                                 In section .rodata, align 4
   \                     ?_37:
   \        0x0   0x72 0x65          DC8 "regulation_warning_threshold"
   \              0x67 0x75    
   \              0x6C 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x5F 0x77    
   \              0x61 0x72    
   \              0x6E 0x69    
   \              0x6E 0x67    
   \              0x5F 0x74    
   \              0x68 0x72    
   \              0x65 0x73    
   \              0x68 0x6F    
   \              0x6C 0x64    
   \              0x00
   \       0x1D                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_38:
   \        0x0   0x54 0x72          DC8 0x54, 0x72, 0x61, 0x6E, 0x73, 0x6D, 0x69, 0x73
   \              0x61 0x6E    
   \              0x73 0x6D    
   \              0x69 0x73
   \        0x8   0x73 0x69          DC8 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x77, 0x61, 0x72
   \              0x6F 0x6E    
   \              0x20 0x77    
   \              0x61 0x72
   \       0x10   0x6E 0x69          DC8 0x6E, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x68, 0x72
   \              0x6E 0x67    
   \              0x20 0x74    
   \              0x68 0x72
   \       0x18   0x65 0x73          DC8 0x65, 0x73, 0x68, 0x6F, 0x6C, 0x64, 0x20, 0x69
   \              0x68 0x6F    
   \              0x6C 0x64    
   \              0x20 0x69
   \       0x20   0x6E 0x20          DC8 0x6E, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6E
   \              0x70 0x65    
   \              0x72 0x63    
   \              0x65 0x6E
   \       0x28   0x74 0x20          DC8 0x74, 0x20, 0x28, 0x2D, 0x31, 0x20, 0x74, 0x6F
   \              0x28 0x2D    
   \              0x31 0x20    
   \              0x74 0x6F
   \       0x30   0x20 0x64          DC8 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6C, 0x65
   \              0x69 0x73    
   \              0x61 0x62    
   \              0x6C 0x65
   \       0x38   0x29 0x20          DC8 0x29, 0x20, 0x5B, 0x69, 0x6E, 0x74, 0x38, 0x5D
   \              0x5B 0x69    
   \              0x6E 0x74    
   \              0x38 0x5D
   \       0x40   0x00               DC8 0
   \       0x41                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_39:
   \        0x0   0x72 0x65          DC8 "regulation_alert_threshold"
   \              0x67 0x75    
   \              0x6C 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x5F 0x61    
   \              0x6C 0x65    
   \              0x72 0x74    
   \              0x5F 0x74    
   \              0x68 0x72    
   \              0x65 0x73    
   \              0x68 0x6F    
   \              0x6C 0x64    
   \              0x00
   \       0x1B                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_40:
   \        0x0   0x54 0x72          DC8 0x54, 0x72, 0x61, 0x6E, 0x73, 0x6D, 0x69, 0x73
   \              0x61 0x6E    
   \              0x73 0x6D    
   \              0x69 0x73
   \        0x8   0x73 0x69          DC8 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x61, 0x6C, 0x65
   \              0x6F 0x6E    
   \              0x20 0x61    
   \              0x6C 0x65
   \       0x10   0x72 0x74          DC8 0x72, 0x74, 0x20, 0x74, 0x68, 0x72, 0x65, 0x73
   \              0x20 0x74    
   \              0x68 0x72    
   \              0x65 0x73
   \       0x18   0x68 0x6F          DC8 0x68, 0x6F, 0x6C, 0x64, 0x20, 0x69, 0x6E, 0x20
   \              0x6C 0x64    
   \              0x20 0x69    
   \              0x6E 0x20
   \       0x20   0x70 0x65          DC8 0x70, 0x65, 0x72, 0x63, 0x65, 0x6E, 0x74, 0x20
   \              0x72 0x63    
   \              0x65 0x6E    
   \              0x74 0x20
   \       0x28   0x28 0x2D          DC8 0x28, 0x2D, 0x31, 0x20, 0x74, 0x6F, 0x20, 0x64
   \              0x31 0x20    
   \              0x74 0x6F    
   \              0x20 0x64
   \       0x30   0x69 0x73          DC8 0x69, 0x73, 0x61, 0x62, 0x6C, 0x65, 0x29, 0x20
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x29 0x20
   \       0x38   0x5B 0x69          DC8 0x5B, 0x69, 0x6E, 0x74, 0x38, 0x5D, 0
   \              0x6E 0x74    
   \              0x38 0x5D    
   \              0x00
   \       0x3F                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_41:
   \        0x0   0x5B 0x46          DC8 "[Failed: Loading PHY config]\012"
   \              0x61 0x69    
   \              0x6C 0x65    
   \              0x64 0x3A    
   \              0x20 0x4C    
   \              0x6F 0x61    
   \              0x64 0x69    
   \              0x6E 0x67    
   \              0x20 0x50    
   \              0x48 0x59    
   \              0x20 0x63    
   \              0x6F 0x6E    
   \              0x66 0x69    
   \              0x67 0x5D    
   \              0x0A 0x00
   \       0x1E                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_42:
   \        0x0   0x5B 0x46          DC8 "[Failed: Storing PHY config]\012"
   \              0x61 0x69    
   \              0x6C 0x65    
   \              0x64 0x3A    
   \              0x20 0x53    
   \              0x74 0x6F    
   \              0x72 0x69    
   \              0x6E 0x67    
   \              0x20 0x50    
   \              0x48 0x59    
   \              0x20 0x63    
   \              0x6F 0x6E    
   \              0x66 0x69    
   \              0x67 0x5D    
   \              0x0A 0x00
   \       0x1E                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_43:
   \        0x0   0x5B 0x46          DC8 "[Failed: Getting join state failed]\012"
   \              0x61 0x69    
   \              0x6C 0x65    
   \              0x64 0x3A    
   \              0x20 0x47    
   \              0x65 0x74    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x6A    
   \              0x6F 0x69    
   \              0x6E 0x20    
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x66 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x5D 0x0A    
   \              0x00
   \       0x25                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_44:
   \        0x0   0x5B 0x46          DC8 "[Failed: already disconnected]\012"
   \              0x61 0x69    
   \              0x6C 0x65    
   \              0x64 0x3A    
   \              0x20 0x61    
   \              0x6C 0x72    
   \              0x65 0x61    
   \              0x64 0x79    
   \              0x20 0x64    
   \              0x69 0x73    
   \              0x63 0x6F    
   \              0x6E 0x6E    
   \              0x65 0x63    
   \              0x74 0x65    
   \              0x64 0x5D    
   \              0x0A 0x00

   \                                 In section .rodata, align 4
   \                     ?_45:
   \        0x0   0x5B 0x44          DC8 "[Disconnecting]\012"
   \              0x69 0x73    
   \              0x63 0x6F    
   \              0x6E 0x6E    
   \              0x65 0x63    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x5D 0x0A    
   \              0x00
   \       0x11                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_46:
   \        0x0   0x5B 0x44          DC8 "[Disconnection failed: %lu]\012"
   \              0x69 0x73    
   \              0x63 0x6F    
   \              0x6E 0x6E    
   \              0x65 0x63    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x66    
   \              0x61 0x69    
   \              0x6C 0x65    
   \              0x64 0x3A    
   \              0x20 0x25    
   \              0x6C 0x75    
   \              0x5D 0x0A    
   \              0x00
   \       0x1D                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_47:
   \        0x0   0x25 0x73          DC8 "%s (%d)"
   \              0x20 0x28    
   \              0x25 0x64    
   \              0x29 0x00

   \                                 In section .rodata, align 4
   \        0x0   0x25 0x73          DC8 "%s"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \        0x0   0x25 0x64          DC8 "%d"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \        0x0   0x4E 0x2F          DC8 "N/A"
   \              0x41 0x00

   \                                 In section .rodata, align 1
   \        0x0   0x00               DC8 ""

   \                                 In section .rodata, align 4
   \                     ?_52:
   \        0x0   0x28 0x75          DC8 "(unused)"
   \              0x6E 0x75    
   \              0x73 0x65    
   \              0x64 0x29    
   \              0x00
   \        0x9                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_53:
   \        0x0   0x25 0x73          DC8 "%s (%u) %s"
   \              0x20 0x28    
   \              0x25 0x75    
   \              0x29 0x20    
   \              0x25 0x73    
   \              0x00
   \        0xB                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_54:
   \        0x0   0x25 0x75          DC8 "%u %s"
   \              0x20 0x25    
   \              0x73 0x00
   \        0x6                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_55:
   \        0x0   0x30 0x78          DC8 "0x%x %s"
   \              0x25 0x78    
   \              0x20 0x25    
   \              0x73 0x00

   \                                 In section .rodata, align 4
   \                     ?_56:
   \        0x0   0x25 0x6C          DC8 "%lu %s"
   \              0x75 0x20    
   \              0x25 0x73    
   \              0x00
   \        0x7                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_57:
   \        0x0   0x5B 0x52          DC8 0x5B, 0x52, 0x65, 0x67, 0x75, 0x6C, 0x61, 0x74
   \              0x65 0x67    
   \              0x75 0x6C    
   \              0x61 0x74
   \        0x8   0x69 0x6F          DC8 0x69, 0x6F, 0x6E, 0x20, 0x72, 0x65, 0x6C, 0x61
   \              0x6E 0x20    
   \              0x72 0x65    
   \              0x6C 0x61
   \       0x10   0x74 0x65          DC8 0x74, 0x65, 0x64, 0x20, 0x73, 0x65, 0x74, 0x74
   \              0x64 0x20    
   \              0x73 0x65    
   \              0x74 0x74
   \       0x18   0x69 0x6E          DC8 0x69, 0x6E, 0x67, 0x73, 0x20, 0x75, 0x6E, 0x61
   \              0x67 0x73    
   \              0x20 0x75    
   \              0x6E 0x61
   \       0x20   0x76 0x61          DC8 0x76, 0x61, 0x69, 0x6C, 0x61, 0x62, 0x6C, 0x65
   \              0x69 0x6C    
   \              0x61 0x62    
   \              0x6C 0x65
   \       0x28   0x2C 0x20          DC8 0x2C, 0x20, 0x64, 0x69, 0x73, 0x63, 0x6F, 0x6E
   \              0x64 0x69    
   \              0x73 0x63    
   \              0x6F 0x6E
   \       0x30   0x6E 0x65          DC8 0x6E, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20
   \       0x38   0x69 0x73          DC8 0x69, 0x73, 0x20, 0x6E, 0x65, 0x65, 0x64, 0x65
   \              0x20 0x6E    
   \              0x65 0x65    
   \              0x64 0x65
   \       0x40   0x64 0x5D          DC8 0x64, 0x5D, 0x0A, 0
   \              0x0A 0x00

   \                                 In section .rodata, align 4
   \                     ?_58:
   \        0x0   0x5B 0x46          DC8 "[Failed: Get value error: %lu]\012"
   \              0x61 0x69    
   \              0x6C 0x65    
   \              0x64 0x3A    
   \              0x20 0x47    
   \              0x65 0x74    
   \              0x20 0x76    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \              0x25 0x6C    
   \              0x75 0x5D    
   \              0x0A 0x00

   \                                 In section .rodata, align 4
   \                     ?_59:
   \        0x0   0x5B 0x46          DC8 0x5B, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x3A
   \              0x61 0x69    
   \              0x6C 0x65    
   \              0x64 0x3A
   \        0x8   0x20 0x75          DC8 0x20, 0x75, 0x6E, 0x61, 0x62, 0x6C, 0x65, 0x20
   \              0x6E 0x61    
   \              0x62 0x6C    
   \              0x65 0x20
   \       0x10   0x74 0x6F          DC8 0x74, 0x6F, 0x20, 0x73, 0x65, 0x74, 0x20, 0x72
   \              0x20 0x73    
   \              0x65 0x74    
   \              0x20 0x72
   \       0x18   0x65 0x67          DC8 0x65, 0x67, 0x75, 0x6C, 0x61, 0x74, 0x69, 0x6F
   \              0x75 0x6C    
   \              0x61 0x74    
   \              0x69 0x6F
   \       0x20   0x6E 0x20          DC8 0x6E, 0x20, 0x54, 0x58, 0x20, 0x74, 0x68, 0x72
   \              0x54 0x58    
   \              0x20 0x74    
   \              0x68 0x72
   \       0x28   0x65 0x73          DC8 0x65, 0x73, 0x68, 0x6F, 0x6C, 0x64, 0x73, 0x3A
   \              0x68 0x6F    
   \              0x6C 0x64    
   \              0x73 0x3A
   \       0x30   0x20 0x25          DC8 0x20, 0x25, 0x6C, 0x75, 0x5D, 0x0A, 0
   \              0x6C 0x75    
   \              0x5D 0x0A    
   \              0x00
   \       0x37                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_60:
   \        0x0   0x5B 0x52          DC8 "[Regulation not valid]\012"
   \              0x65 0x67    
   \              0x75 0x6C    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x5D    
   \              0x0A 0x00

   \                                 In section .rodata, align 4
   \                     ?_61:
   \        0x0   0x5B 0x46          DC8 0x5B, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x3A
   \              0x61 0x69    
   \              0x6C 0x65    
   \              0x64 0x3A
   \        0x8   0x20 0x75          DC8 0x20, 0x75, 0x6E, 0x61, 0x62, 0x6C, 0x65, 0x20
   \              0x6E 0x61    
   \              0x62 0x6C    
   \              0x65 0x20
   \       0x10   0x74 0x6F          DC8 0x74, 0x6F, 0x20, 0x73, 0x65, 0x74, 0x20, 0x72
   \              0x20 0x73    
   \              0x65 0x74    
   \              0x20 0x72
   \       0x18   0x65 0x67          DC8 0x65, 0x67, 0x75, 0x6C, 0x61, 0x74, 0x69, 0x6F
   \              0x75 0x6C    
   \              0x61 0x74    
   \              0x69 0x6F
   \       0x20   0x6E 0x20          DC8 0x6E, 0x20, 0x54, 0x58, 0x20, 0x77, 0x61, 0x72
   \              0x54 0x58    
   \              0x20 0x77    
   \              0x61 0x72
   \       0x28   0x6E 0x69          DC8 0x6E, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x68, 0x72
   \              0x6E 0x67    
   \              0x20 0x74    
   \              0x68 0x72
   \       0x30   0x65 0x73          DC8 0x65, 0x73, 0x68, 0x6F, 0x6C, 0x64, 0x3A, 0x20
   \              0x68 0x6F    
   \              0x6C 0x64    
   \              0x3A 0x20
   \       0x38   0x25 0x6C          DC8 0x25, 0x6C, 0x75, 0x5D, 0x0A, 0
   \              0x75 0x5D    
   \              0x0A 0x00
   \       0x3E                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_62:
   \        0x0   0x5B 0x46          DC8 0x5B, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x3A
   \              0x61 0x69    
   \              0x6C 0x65    
   \              0x64 0x3A
   \        0x8   0x20 0x75          DC8 0x20, 0x75, 0x6E, 0x61, 0x62, 0x6C, 0x65, 0x20
   \              0x6E 0x61    
   \              0x62 0x6C    
   \              0x65 0x20
   \       0x10   0x74 0x6F          DC8 0x74, 0x6F, 0x20, 0x73, 0x65, 0x74, 0x20, 0x72
   \              0x20 0x73    
   \              0x65 0x74    
   \              0x20 0x72
   \       0x18   0x65 0x67          DC8 0x65, 0x67, 0x75, 0x6C, 0x61, 0x74, 0x69, 0x6F
   \              0x75 0x6C    
   \              0x61 0x74    
   \              0x69 0x6F
   \       0x20   0x6E 0x20          DC8 0x6E, 0x20, 0x54, 0x58, 0x20, 0x61, 0x6C, 0x65
   \              0x54 0x58    
   \              0x20 0x61    
   \              0x6C 0x65
   \       0x28   0x72 0x74          DC8 0x72, 0x74, 0x20, 0x74, 0x68, 0x72, 0x65, 0x73
   \              0x20 0x74    
   \              0x68 0x72    
   \              0x65 0x73
   \       0x30   0x68 0x6F          DC8 0x68, 0x6F, 0x6C, 0x64, 0x3A, 0x20, 0x25, 0x6C
   \              0x6C 0x64    
   \              0x3A 0x20    
   \              0x25 0x6C
   \       0x38   0x75 0x5D          DC8 0x75, 0x5D, 0x0A, 0
   \              0x0A 0x00
   1667          #endif
   1668          
   1669          #if defined(SL_CATALOG_WISUN_LFN_DEVICE_SUPPORT_PRESENT)
   1670          static sl_status_t _app_get_device_type(char *value_str,
   1671                                                  const char *key_str,
   1672                                                  const app_cli_entry_t *entry)
   1673          {
   1674            const char *dev_type_str = NULL;
   1675            sl_wisun_device_type_t dev_type = SL_WISUN_ROUTER;
   1676            (void) entry;
   1677            (void) key_str;
   1678          
   1679            if (value_str == NULL) {
   1680              return SL_STATUS_FAIL;
   1681            }
   1682          
   1683            dev_type =  sl_wisun_app_core_get_device_type();
   1684            dev_type_str = app_wisun_trace_util_device_type_to_str((uint32_t) dev_type);
   1685          
   1686            if (dev_type_str == NULL) {
   1687              return SL_STATUS_FAIL;
   1688            }
   1689          
   1690            (void) snprintf(value_str, APP_CLI_STR_VALUE_LENGTH, "%s (%lu)", dev_type_str, (uint32_t) dev_type);
   1691            return SL_STATUS_OK;
   1692          }
   1693          
   1694          static sl_status_t _app_get_lfn_profile(char *value_str,
   1695                                                  const char *key_str,
   1696                                                  const app_cli_entry_t *entry)
   1697          {
   1698            const char *lfn_profile_str = NULL;
   1699            sl_wisun_lfn_profile_t lfn_profile = SL_WISUN_LFN_PROFILE_TEST;
   1700            (void) entry;
   1701            (void) key_str;
   1702          
   1703            if (value_str == NULL) {
   1704              return SL_STATUS_FAIL;
   1705            }
   1706          
   1707            lfn_profile =  sl_wisun_app_core_get_lfn_profile();
   1708            lfn_profile_str = app_wisun_trace_util_lfn_profile_to_str((uint32_t) lfn_profile);
   1709          
   1710            if (lfn_profile_str == NULL) {
   1711              return SL_STATUS_FAIL;
   1712            }
   1713          
   1714            (void) snprintf(value_str, APP_CLI_STR_VALUE_LENGTH, "%s (%lu)", lfn_profile_str, (uint32_t) lfn_profile);
   1715            return SL_STATUS_OK;
   1716          }
   1717          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   _app_cli_get_connection
        40   -> sl_wisun_get_join_state
        40   -> snprintf
      64   _app_cli_get_network_name
        64   -> __aeabi_memset
        64   -> app_wisun_setting_get_network_name
        64   -> snprintf
      40   _app_cli_get_network_size
        40   -> app_wisun_setting_get_network_size
        40   -> snprintf
      40   _app_cli_get_phy
        40   -> _load_common_params_from_phy_cfg
        40   -> _param_used_flag_str
        40   -> app_wisun_trace_util_ch_spacing_to_str
        40   -> app_wisun_trace_util_phy_cfg_type_to_str
        40   -> app_wisun_trace_util_reg_domain_to_str
        40   -> snprintf
        40   -> strstr
      32   _app_cli_get_tx_power
        32   -> app_wisun_setting_get_tx_power
        32   -> snprintf
      16   _app_cli_set_network_name
        16   -> app_wisun_setting_set_network_name
      32   _app_cli_set_network_size
        32   -> app_util_get_integer
        32   -> app_wisun_setting_set_network_size
      32   _app_cli_set_phy
        32   -> _load_common_params_from_phy_cfg
        32   -> app_util_get_integer
        32   -> strstr
      32   _app_cli_set_tx_power
        32   -> app_util_get_integer
        32   -> app_wisun_setting_set_tx_power
      16   _app_connect
        16   -> _load_common_params_from_phy_cfg
        16   -> _store_common_params_to_phy_cfg
        16   -> printf
        16   -> sl_wisun_app_core_network_connect
      32   _app_get_regulation
        32   -> snprintf
        32   -> strstr
      24   _app_get_regulation_alert_threshold
        24   -> __aeabi_memset
        24   -> sl_wisun_app_core_get_regulation_thresholds
        24   -> snprintf
        24   -> strstr
      24   _app_get_regulation_warning_threshold
        24   -> __aeabi_memset
        24   -> sl_wisun_app_core_get_regulation_thresholds
        24   -> snprintf
        24   -> strstr
      32   _app_set_regulation
        32   -> __aeabi_memset
        32   -> app_util_get_integer
        32   -> printf
        32   -> sl_wisun_app_core_get_regulation_thresholds
        32   -> sl_wisun_app_core_set_regulation_active
        32   -> sl_wisun_get_join_state
        32   -> sl_wisun_set_regulation
        32   -> sl_wisun_set_regulation_tx_thresholds
        32   -> strstr
      32   _app_set_regulation_alert_threshold
        32   -> __aeabi_memset
        32   -> app_util_get_integer
        32   -> printf
        32   -> sl_wisun_app_core_get_regulation_thresholds
        32   -> sl_wisun_app_core_set_regulation_thresholds
        32   -> sl_wisun_get_join_state
        32   -> sl_wisun_set_regulation_tx_thresholds
        32   -> strstr
      32   _app_set_regulation_warning_threshold
        32   -> __aeabi_memset
        32   -> app_util_get_integer
        32   -> printf
        32   -> sl_wisun_app_core_get_regulation_thresholds
        32   -> sl_wisun_app_core_set_regulation_thresholds
        32   -> sl_wisun_get_join_state
        32   -> sl_wisun_set_regulation_tx_thresholds
        32   -> strstr
      16   _is_param_used
        16   -> strncmp
       8   _load_common_params_from_phy_cfg
         8   -> app_wisun_setting_ack_notification
         8   -> app_wisun_setting_get_phy
         8   -> app_wisun_setting_is_notified
       8   _param_used_flag_str
         8   -> _is_param_used
       8   _store_common_params_to_phy_cfg
         8   -> app_wisun_setting_set_phy
       8   app_about
         8   -> sl_wisun_app_core_util_project_info_print
      24   app_disconnect
        24   -> app_wisun_cli_mutex_lock
        24   -> app_wisun_cli_mutex_unlock
        24   -> printf
        24   -> sl_wisun_disconnect
        24   -> sl_wisun_get_join_state
       8   app_join_explicit
         8   -> _app_connect
         8   -> app_wisun_cli_mutex_lock
         8   -> app_wisun_cli_mutex_unlock
       8   app_join_fan10
         8   -> _app_connect
         8   -> app_wisun_cli_mutex_lock
         8   -> app_wisun_cli_mutex_unlock
       8   app_join_fan11
         8   -> _app_connect
         8   -> app_wisun_cli_mutex_lock
         8   -> app_wisun_cli_mutex_unlock


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_2
       4  ??DataTable11_3
       4  ??DataTable18
       4  ??DataTable18_1
       4  ??DataTable18_10
       4  ??DataTable18_11
       4  ??DataTable18_12
       4  ??DataTable18_13
       4  ??DataTable18_14
       4  ??DataTable18_15
       4  ??DataTable18_16
       4  ??DataTable18_17
       4  ??DataTable18_18
       4  ??DataTable18_19
       4  ??DataTable18_2
       4  ??DataTable18_20
       4  ??DataTable18_21
       4  ??DataTable18_22
       4  ??DataTable18_23
       4  ??DataTable18_24
       4  ??DataTable18_25
       4  ??DataTable18_26
       4  ??DataTable18_27
       4  ??DataTable18_28
       4  ??DataTable18_29
       4  ??DataTable18_3
       4  ??DataTable18_30
       4  ??DataTable18_31
       4  ??DataTable18_32
       4  ??DataTable18_33
       4  ??DataTable18_34
       4  ??DataTable18_35
       4  ??DataTable18_4
       4  ??DataTable18_5
       4  ??DataTable18_6
       4  ??DataTable18_7
       4  ??DataTable18_8
       4  ??DataTable18_9
      20  ?_0
      16  ?_1
      32  ?_10
      16  ?_11
      52  ?_12
      16  ?_13
      28  ?_14
      12  ?_15
      24  ?_16
      36  ?_17
      32  ?_18
      32  ?_19
      16  ?_2
      32  ?_20
      28  ?_21
      32  ?_22
      28  ?_23
      56  ?_24
      12  ?_25
      20  ?_26
      20  ?_27
      20  ?_28
      24  ?_29
      16  ?_3
      16  ?_30
      28  ?_31
      28  ?_32
      28  ?_33
      28  ?_34
      12  ?_35
      28  ?_36
      32  ?_37
      68  ?_38
      28  ?_39
      12  ?_4
      64  ?_40
      32  ?_41
      32  ?_42
      40  ?_43
      32  ?_44
      20  ?_45
      32  ?_46
       8  ?_47
       4  ?_48
       4  ?_49
      16  ?_5
       4  ?_50
       1  ?_51
      12  ?_52
      12  ?_53
       8  ?_54
       8  ?_55
       8  ?_56
      68  ?_57
      32  ?_58
      56  ?_59
      20  ?_6
      24  ?_60
      64  ?_61
      60  ?_62
      16  ?_7
       8  ?_8
      16  ?_9
     100  _app_cli_get_connection
      62  _app_cli_get_network_name
      88  _app_cli_get_network_size
     492  _app_cli_get_phy
      64  _app_cli_get_tx_power
      16  _app_cli_set_network_name
      54  _app_cli_set_network_size
     276  _app_cli_set_phy
      54  _app_cli_set_tx_power
      58  _app_connect
     100  _app_get_regulation
      74  _app_get_regulation_alert_threshold
      74  _app_get_regulation_warning_threshold
     238  _app_set_regulation
     194  _app_set_regulation_alert_threshold
     190  _app_set_regulation_warning_threshold
      58  _is_param_used
     128  _load_common_params_from_phy_cfg
      24  _param_used_flag_str
      88  _phy_cfg_map
      16  _phy_common_params
     102  _store_common_params_to_phy_cfg
      10  app_about
      98  app_disconnect
      20  app_join_explicit
      20  app_join_fan10
      20  app_join_fan11
       1  app_regulation
       8  app_settings_domain_str
     672  app_settings_entries
      16  phy_cfg
      16  phy_cfg

 
    49 bytes in section .bss
     8 bytes in section .data
 2'389 bytes in section .rodata
 2'774 bytes in section .text
 
 2'774 bytes of CODE  memory
 2'389 bytes of CONST memory
    57 bytes of DATA  memory

Errors: none
Warnings: none
