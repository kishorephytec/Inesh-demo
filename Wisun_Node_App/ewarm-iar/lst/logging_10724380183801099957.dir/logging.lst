###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         29/Mar/2025  15:53:22
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\source\logging\logging.c
#    Command line      =
#        -f "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\logging_10724380183801099957.dir\logging.o.rsp"
#        ("D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\source\logging\logging.c"
#        -D DEBUG_EFM=1 -D EFR32FG28B322F1024IM48=1 -D
#        configNUM_SDK_THREAD_LOCAL_STORAGE_POINTERS=2 -D
#        SL_COMPONENT_CATALOG_PRESENT=1 -D
#        MBEDTLS_CONFIG_FILE=<sl_mbedtls_config.h> -D
#        MBEDTLS_PSA_CRYPTO_CONFIG_FILE=<psa_crypto_config.h> -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -D
#        RTT_USE_ASM=0 -lC "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\lst\logging_10724380183801099957.dir"
#        --diag_suppress Pa050 -o "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\logging_10724380183801099957.dir"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M33 --cmse --cmse -e --fpu=VFPv5_sp --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        9.2\arm\inc\c\DLib_Config_Normal.h" -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\source\logging\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\rail\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\wisun\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\.\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\Device\SiliconLabs\EFR32FG28\Include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_project_info\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\common\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\src\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\CMSIS\Core\Include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\CMSIS\RTOS2\Include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\device_init\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emdrv\common\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emlib\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\iostream\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\config\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\config\preset\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\cpu\include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\ports\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emdrv\nvm3\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\peripheral\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\printf\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\printf\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_psa_driver\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\common\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\ble\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\ieee802154\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\wmbus\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\zwave\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\chip\efr32\efr32xg2x\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\sidewalk\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\pa-conversions\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\pa-conversions\efr32xg28\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\rail_util_pti\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\se_manager\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\se_manager\src\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\segger\systemview\SEGGER\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\silicon_labs\silabs_core\memory_manager\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\common\toolchain\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\system\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_core\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_setting\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\cli_util\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\event_manager\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\ns_list\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\ping\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\nanostack\nanostack-libservice\mbed-client-libservice\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\udp_client\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\sleeptimer\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\plugin\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\stack\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\stack\inc\socket\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\autogen\\" -On
#        --use_c++_inline) --dependencies=n "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\logging_10724380183801099957.dir\logging.o.iar_deps"
#    Locale            =  C
#    List file         =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\lst\logging_10724380183801099957.dir\logging.lst
#    Object file       =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\logging_10724380183801099957.dir\logging.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\source\logging\logging.c
      1          /***************************************************************************//**
      2           * @file
      3           * @brief Common - Logging
      4           *******************************************************************************
      5           * # License
      6           * <b>Copyright 2018 Silicon Laboratories Inc. www.silabs.com</b>
      7           *******************************************************************************
      8           *
      9           * The licensor of this software is Silicon Laboratories Inc.  Your use of this
     10           * software is governed by the terms of Silicon Labs Master Software License
     11           * Agreement (MSLA) available at
     12           * www.silabs.com/about-us/legal/master-software-license-agreement.  This
     13           * software is distributed to you in Source Code format and is governed by the
     14           * sections of the MSLA applicable to Source Code.
     15           *
     16           ******************************************************************************/
     17          
     18          /********************************************************************************************************
     19           ********************************************************************************************************
     20           *                                               INCLUDE FILES
     21           ********************************************************************************************************
     22           *******************************************************************************************************/
     23          
     24          #include  <cpu/include/cpu.h>
     25          
     26          #include  <common/include/logging.h>
     27          #include  <common/include/lib_mem.h>
     28          #include  <common/include/lib_str.h>
     29          
     30          #include  <common/source/lib/lib_str_priv.h>
     31          #include  <common/source/common/common_priv.h>
     32          #include  <common/source/logging/logging_priv.h>
     33          #include  <common/source/ring_buf/ring_buf_priv.h>
     34          #include  <common/source/rtos/rtos_utils_priv.h>
     35          
     36          #include  <rtos_cfg.h>
     37          
     38          /********************************************************************************************************
     39           ********************************************************************************************************
     40           *                                               LOCAL DEFINES
     41           ********************************************************************************************************
     42           *******************************************************************************************************/
     43          
     44          #if (CPU_CFG_ADDR_SIZE == CPU_WORD_SIZE_16)
     45          #define   MEM_ADDR_GET(addr)      MEM_VAL_GET_INT16U(addr)
     46          #elif (CPU_CFG_ADDR_SIZE == CPU_WORD_SIZE_32)
     47          #define   MEM_ADDR_GET(addr)      MEM_VAL_GET_INT32U(addr)
     48          #elif (CPU_CFG_ADDR_SIZE == CPU_WORD_SIZE_64)
     49          #define   MEM_ADDR_GET(addr)      MEM_VAL_GET_INT64U(addr)
     50          #else
     51          #error "Logging: unsupported architecture."
     52          #endif
     53          
     54          #define  RTOS_MODULE_CUR          RTOS_CFG_MODULE_COMMON
     55          
     56          /********************************************************************************************************
     57           ********************************************************************************************************
     58           *                                           GLOBAL VARIABLES
     59           ********************************************************************************************************
     60           *******************************************************************************************************/
     61          
     62          #if (RTOS_CFG_LOG_EN == DEF_ENABLED)
     63          RING_BUF Log_RingBuf = RING_BUF_INIT_NULL();
     64          #endif
     65          
     66          /********************************************************************************************************
     67           ********************************************************************************************************
     68           *                                       LOCAL FUNCTION PROTOTYPES
     69           ********************************************************************************************************
     70           *******************************************************************************************************/
     71          
     72          #if (RTOS_CFG_LOG_EN == DEF_ENABLED)
     73          static void Log_PrintfTypeSpecGen(CPU_CHAR   *p_type_spec,
     74                                            CPU_CHAR   spec,
     75                                            CPU_INT08U len);
     76          #endif
     77          
     78          /********************************************************************************************************
     79           ********************************************************************************************************
     80           *                                           GLOBAL FUNCTIONS
     81           ********************************************************************************************************
     82           *******************************************************************************************************/
     83          
     84          /****************************************************************************************************//**
     85           *                                               Log_DataIsAvail()
     86           *
     87           * @brief    Indicates if there is data present to be logged or not.
     88           *
     89           * @return   DEF_YES,  if there is data that is available to be logged,
     90           *           DEF_FAIL, otherwise.
     91           *******************************************************************************************************/
     92          
     93          #if (RTOS_CFG_LOG_EN == DEF_ENABLED)
     94          CPU_BOOLEAN Log_DataIsAvail(void)
     95          {
     96            CPU_BOOLEAN ret_val;
     97          
     98            ret_val = RingBufDataIsAvail(&Log_RingBuf);
     99          
    100            return (ret_val);
    101          }
    102          #endif
    103          
    104          /****************************************************************************************************//**
    105           *                                               Log_Output()
    106           *
    107           * @brief    Outputs data accumulated in the ring buffer.
    108           *******************************************************************************************************/
    109          
    110          #if (RTOS_CFG_LOG_EN == DEF_ENABLED)
    111          void Log_Output(void)
    112          {
    113            void                        *p_arg;
    114            void                        *p_fmt_data_addr;
    115            CPU_ADDR                    fmt_data_addr;
    116            const LOG_ASYNC_FMT_DATA    *p_fmt_data;
    117            LOGGING_OUTPUT_FUNC_CB_DATA *p_out_func_data;
    118            const CPU_CHAR              *p_fmt_str;
    119            const CPU_CHAR              *p_cur_char;
    120            const CPU_INT08U            *p_cur_arg_len;
    121            CPU_CHAR                    printf_type_spec[5];
    122          
    123            if (RING_BUF_IS_NULL(&Log_RingBuf) == DEF_YES) {              // If ring buf is not init'd, early return.
    124              return;
    125            }
    126          
    127            while (RingBufRdStart(&Log_RingBuf)) {
    128              p_fmt_data_addr = RingBufRd(&Log_RingBuf, CPU_CFG_ADDR_SIZE);
    129              fmt_data_addr = MEM_ADDR_GET((CPU_ADDR)p_fmt_data_addr);
    130              p_fmt_data = (LOG_ASYNC_FMT_DATA *)fmt_data_addr;
    131              p_out_func_data = (LOGGING_OUTPUT_FUNC_CB_DATA *)p_fmt_data->OutputFuncArgPtr;
    132              p_fmt_str = p_fmt_data->FmtStr;
    133              p_cur_arg_len = p_fmt_data->ArgLenTbl;
    134          
    135              while (*p_fmt_str != '\0') {
    136                p_cur_char = p_fmt_str;
    137                while ((*p_cur_char != '%') && (*p_cur_char != '\0')) {
    138                  p_fmt_data->OutputFunc(*p_cur_char, p_out_func_data);
    139                  p_cur_char++;
    140                }
    141          
    142                if (*p_cur_char == '%') {
    143                  p_cur_char++;
    144                  p_arg = RingBufRd(&Log_RingBuf, *p_cur_arg_len);
    145                  Log_PrintfTypeSpecGen(printf_type_spec, *p_cur_char, *p_cur_arg_len);
    146                  switch (*p_cur_char) {
    147                    case 'p':
    148                      (void)Str_Printf(p_fmt_data->OutputFunc, p_out_func_data, printf_type_spec, *((void **)p_arg));
    149                      break;
    150                    case 's':
    151                      p_arg = RingBufRd(&Log_RingBuf, *((_LOG_STR_LEN *)p_arg));
    152                      (void)Str_Printf(p_fmt_data->OutputFunc, p_out_func_data, printf_type_spec, (CPU_CHAR *)p_arg);
    153                      break;
    154                    case 'd':
    155                      switch (*p_cur_arg_len) {
    156                        case 1:
    157                        {
    158                          CPU_INT08S tmp = 0u;
    159                          Mem_Copy(&tmp, p_arg, 1u);
    160                          (void)Str_Printf(p_fmt_data->OutputFunc, p_out_func_data, "%d", tmp);
    161                        }
    162                        break;
    163                        case 2:
    164                        {
    165                          CPU_INT16S tmp = 0u;
    166                          Mem_Copy(&tmp, p_arg, 2u);
    167                          (void)Str_Printf(p_fmt_data->OutputFunc, p_out_func_data, "%d", tmp);
    168                        }
    169                        break;
    170                        case 4:
    171                        {
    172                          CPU_INT32S tmp = 0u;
    173                          Mem_Copy(&tmp, p_arg, 4u);
    174                          (void)Str_Printf(p_fmt_data->OutputFunc, p_out_func_data, "%ld", tmp);
    175                        }
    176                        break;
    177                        case 8:
    178                        {
    179                          CPU_INT64S tmp = 0u;
    180                          Mem_Copy(&tmp, p_arg, 8u);
    181                          (void)Str_Printf(p_fmt_data->OutputFunc, p_out_func_data, "%lld", tmp);
    182                        }
    183                        break;
    184                        default:
    185                          RTOS_CRITICAL_FAIL_EXEC(RTOS_ERR_ASSERT_CRITICAL_FAIL,; );
    186                      }
    187                      break;
    188                    case 'u':
    189                    case 'x':
    190                    case 'X':
    191                      switch (*p_cur_arg_len) {
    192                        case 1:
    193                        {
    194                          CPU_INT08U tmp = 0u;
    195                          Mem_Copy(&tmp, p_arg, 1u);
    196                          (void)Str_Printf(p_fmt_data->OutputFunc, p_out_func_data, "%u", tmp);
    197                        }
    198                        break;
    199                        case 2:
    200                        {
    201                          CPU_INT16U tmp = 0u;
    202                          Mem_Copy(&tmp, p_arg, 2u);
    203                          (void)Str_Printf(p_fmt_data->OutputFunc, p_out_func_data, "%u", tmp);
    204                        }
    205                        break;
    206                        case 4:
    207                        {
    208                          CPU_INT32U tmp = 0u;
    209                          Mem_Copy(&tmp, p_arg, 4u);
    210                          (void)Str_Printf(p_fmt_data->OutputFunc, p_out_func_data, "%lu", tmp);
    211                        }
    212                        break;
    213                        case 8:
    214                        {
    215                          CPU_INT64U tmp = 0u;
    216                          Mem_Copy(&tmp, p_arg, 8u);
    217                          (void)Str_Printf(p_fmt_data->OutputFunc, p_out_func_data, "%llu", tmp);
    218                        }
    219                        break;
    220                        default:
    221                          RTOS_CRITICAL_FAIL_EXEC(RTOS_ERR_ASSERT_CRITICAL_FAIL,; );
    222                      }
    223                      break;
    224                    default:
    225                      RTOS_CRITICAL_FAIL_EXEC(RTOS_ERR_ASSERT_CRITICAL_FAIL,; );
    226                  }
    227                  p_cur_char++;
    228                  p_cur_arg_len++;
    229                }
    230                p_fmt_str = p_cur_char;
    231              }
    232          
    233              RingBufRdEnd(&Log_RingBuf);
    234            }
    235          }
    236          #endif
    237          
    238          /********************************************************************************************************
    239           ********************************************************************************************************
    240           *                                           PRIVATE FUNCTIONS
    241           ********************************************************************************************************
    242           *******************************************************************************************************/
    243          
    244          /****************************************************************************************************//**
    245           *                                               Log_Init()
    246           *
    247           * @brief    Initializes the logging module.
    248           *
    249           * @param    p_cfg   Pointer to the logging configuration structure. If AsyncBufSize is 0, the
    250           *                   asynchronous buffer will not be allocated, which prevents the use of asynchronous
    251           *                   logs.
    252           *
    253           * @param    p_err   Pointer to the variable that will receive one of the following error code(s) from
    254           *                   this function:
    255           *                       - RTOS_ERR_NONE
    256           *                       - RTOS_ERR_SEG_OVF
    257           *******************************************************************************************************/
    258          
    259          #if (RTOS_CFG_LOG_EN == DEF_ENABLED)
    260          void Log_Init(COMMON_CFG_LOGGING *p_cfg,
    261                        RTOS_ERR           *p_err)
    262          {
    263            MEM_SEG *p_mem_seg;
    264          
    265            RTOS_ASSERT_DBG_ERR_PTR_VALIDATE(p_err,; );
    266          
    267            RTOS_ASSERT_DBG_ERR_SET((RING_BUF_IS_NULL(&Log_RingBuf) == DEF_YES), *p_err, RTOS_ERR_ALREADY_INIT,; );
    268          
    269            p_mem_seg = Common_MemSegLoggingPtrGet();
    270          
    271            if (p_cfg->AsyncBufSize != 0u) {
    272              RingBufCreate(&Log_RingBuf,
    273                            p_mem_seg,
    274                            p_cfg->AsyncBufSize,
    275                            p_err);
    276            } else {
    277              RTOS_ERR_SET(*p_err, RTOS_ERR_NONE);
    278            }
    279          }
    280          #endif
    281          
    282          /****************************************************************************************************//**
    283           *                                           Logging_OutputFunc()
    284           *
    285           * @brief    Output function used to print data by the logging module.
    286           *
    287           * @param    c       Character to output.
    288           *
    289           * @param    p_arg   Callback function that needs to be used to output character.
    290           *
    291           * @return   0.
    292           *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    293          int Logging_OutputFunc(int  c,
    294                                 void *p_arg)
    295          {
   \                     Logging_OutputFunc: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0005             MOVS     R5,R0
   \        0x4   0x000C             MOVS     R4,R1
    296            LOGGING_OUTPUT_FUNC_CB_DATA *p_out_data;
    297          
    298            RTOS_ASSERT_DBG((p_arg != DEF_NULL), RTOS_ERR_NULL_PTR, 0);
   \        0x6   0x2C00             CMP      R4,#+0
   \        0x8   0xD100             BNE.N    ??Logging_OutputFunc_0
   \                     ??Logging_OutputFunc_1: (+1)
   \        0xA   0xE7FE             B.N      ??Logging_OutputFunc_1
    299          
    300            p_out_data = (LOGGING_OUTPUT_FUNC_CB_DATA *)p_arg;
   \                     ??Logging_OutputFunc_0: (+1)
   \        0xC   0x0026             MOVS     R6,R4
    301          
    302            p_out_data->ByteOutCb(c);
   \        0xE   0x0028             MOVS     R0,R5
   \       0x10   0x6831             LDR      R1,[R6, #+0]
   \       0x12   0x4788             BLX      R1
    303          
    304            return (0);
   \       0x14   0x2000             MOVS     R0,#+0
   \       0x16   0xBD70             POP      {R4-R6,PC}
    305          }
    306          
    307          /********************************************************************************************************
    308           ********************************************************************************************************
    309           *                                               LOCAL FUNCTIONS
    310           ********************************************************************************************************
    311           *******************************************************************************************************/
    312          
    313          /****************************************************************************************************//**
    314           *                                           Log_PrintfTypeSpecGen()
    315           *
    316           * @brief    Gets correct type specifier based on 'spec' and 'len' to pass to printf-like functions.
    317           *
    318           * @param    p_type_spec     Pointer to start of type specifier buffer.
    319           *
    320           * @param    spec            Specifier character.
    321           *
    322           * @param    len             Length.
    323           *******************************************************************************************************/
    324          
    325          #if (RTOS_CFG_LOG_EN == DEF_ENABLED)
    326          static void Log_PrintfTypeSpecGen(CPU_CHAR   *p_type_spec,
    327                                            CPU_CHAR   spec,
    328                                            CPU_INT08U len)
    329          {
    330            *p_type_spec = '%';
    331            p_type_spec++;
    332          
    333            if (spec == 'x' || spec == 'X' || spec == 'p') {
    334              *p_type_spec = '#';
    335              p_type_spec++;
    336            }
    337          
    338            if (spec != 's') {
    339              RTOS_ASSERT_CRITICAL(((len == 1u)
    340                                    || (len == 2u)
    341                                    || (len == 4u)
    342                                    || (len == 8u)), RTOS_ERR_ASSERT_CRITICAL_FAIL,; );
    343          
    344              if ((len == 4u)
    345                  || (len == 8u)) {
    346                *p_type_spec = 'l';
    347                p_type_spec++;
    348              }
    349              if (len == 8u) {
    350                *p_type_spec = 'l';
    351                p_type_spec++;
    352              }
    353            }
    354          
    355            if (spec == 'p') {
    356              *p_type_spec = 'x';
    357            } else {
    358              *p_type_spec = spec;
    359            }
    360          
    361            p_type_spec++;
    362            *p_type_spec = '\0';
    363          }
    364          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   Logging_OutputFunc
        16   -- Indirect call


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      24  Logging_OutputFunc

 
 24 bytes in section .text
 
 24 bytes of CODE memory

Errors: none
Warnings: none
