###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         29/Mar/2025  15:53:03
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\source\os_stat.c
#    Command line      =
#        -f "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\source_1437350445724322328.dir\os_stat.o.rsp"
#        ("D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\source\os_stat.c"
#        -D DEBUG_EFM=1 -D EFR32FG28B322F1024IM48=1 -D
#        configNUM_SDK_THREAD_LOCAL_STORAGE_POINTERS=2 -D
#        SL_COMPONENT_CATALOG_PRESENT=1 -D
#        MBEDTLS_CONFIG_FILE=<sl_mbedtls_config.h> -D
#        MBEDTLS_PSA_CRYPTO_CONFIG_FILE=<psa_crypto_config.h> -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -D
#        RTT_USE_ASM=0 -lC "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\lst\source_1437350445724322328.dir"
#        --diag_suppress Pa050 -o "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\source_1437350445724322328.dir"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M33 --cmse --cmse -e --fpu=VFPv5_sp --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        9.2\arm\inc\c\DLib_Config_Normal.h" -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\rail\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\wisun\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\.\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\Device\SiliconLabs\EFR32FG28\Include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_project_info\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\common\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\src\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\CMSIS\Core\Include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\CMSIS\RTOS2\Include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\device_init\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emdrv\common\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emlib\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\iostream\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\config\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\config\preset\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\cpu\include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\ports\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emdrv\nvm3\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\peripheral\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\printf\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\printf\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_psa_driver\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\common\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\ble\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\ieee802154\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\wmbus\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\zwave\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\chip\efr32\efr32xg2x\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\sidewalk\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\pa-conversions\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\pa-conversions\efr32xg28\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\rail_util_pti\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\se_manager\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\se_manager\src\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\segger\systemview\SEGGER\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\silicon_labs\silabs_core\memory_manager\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\common\toolchain\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\system\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_core\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_setting\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\cli_util\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\event_manager\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\ns_list\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\ping\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\nanostack\nanostack-libservice\mbed-client-libservice\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\udp_client\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\sleeptimer\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\plugin\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\stack\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\stack\inc\socket\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\autogen\\" -On
#        --use_c++_inline) --dependencies=n "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\source_1437350445724322328.dir\os_stat.o.iar_deps"
#    Locale            =  C
#    List file         =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\lst\source_1437350445724322328.dir\os_stat.lst
#    Object file       =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\source_1437350445724322328.dir\os_stat.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\source\os_stat.c
      1          /***************************************************************************//**
      2           * @file
      3           * @brief Kernel - Statistics Module
      4           *******************************************************************************
      5           * # License
      6           * <b>Copyright 2018 Silicon Laboratories Inc. www.silabs.com</b>
      7           *******************************************************************************
      8           *
      9           * The licensor of this software is Silicon Laboratories Inc.  Your use of this
     10           * software is governed by the terms of Silicon Labs Master Software License
     11           * Agreement (MSLA) available at
     12           * www.silabs.com/about-us/legal/master-software-license-agreement.  This
     13           * software is distributed to you in Source Code format and is governed by the
     14           * sections of the MSLA applicable to Source Code.
     15           *
     16           ******************************************************************************/
     17          
     18          /********************************************************************************************************
     19           ********************************************************************************************************
     20           *                                       DEPENDENCIES & AVAIL CHECK(S)
     21           ********************************************************************************************************
     22           *******************************************************************************************************/
     23          
     24          #include  <rtos_description.h>
     25          
     26          #if (defined(RTOS_MODULE_KERNEL_AVAIL))
     27          
     28          /********************************************************************************************************
     29           ********************************************************************************************************
     30           *                                               INCLUDE FILES
     31           ********************************************************************************************************
     32           *******************************************************************************************************/
     33          
     34          #define  MICRIUM_SOURCE
     35          #include "../include/os.h"
     36          #include "os_priv.h"
     37          
     38          #include  <em_core.h>
     39          
     40          #ifdef VSC_INCLUDE_SOURCE_FILE_NAMES
     41          const CPU_CHAR *os_stat__c = "$Id: $";
     42          #endif
     43          
     44          /********************************************************************************************************
     45           ********************************************************************************************************
     46           *                                            GLOBAL VARIABLES
     47           ********************************************************************************************************
     48           *******************************************************************************************************/
     49          

   \                                 In section .bss, align 2
     50          CPU_INT16U OSIdleCPUUsage = 0u;
   \                     OSIdleCPUUsage:
   \        0x0                      DS8 2
     51          
     52          /********************************************************************************************************
     53           ********************************************************************************************************
     54           *                                         LOCAL GLOBAL VARIABLES
     55           ********************************************************************************************************
     56           *******************************************************************************************************/
     57          
     58          #if (OS_CFG_STAT_TASK_EN == DEF_ENABLED)
     59          static CPU_TS OSIdleTotalTick = 0u;
     60          static CPU_TS OSStatStartTick = 0u;
     61          static CPU_TS OSIdleStartTick = 0u;
     62          
     63          /********************************************************************************************************
     64           ********************************************************************************************************
     65           *                                           GLOBAL FUNCTIONS
     66           ********************************************************************************************************
     67           *******************************************************************************************************/
     68          
     69          /*****************************************************************************************************//**
     70           *                                               OSStatReset()
     71           *
     72           * @brief    Called by your application to reset the statistics.
     73           *
     74           * @param    p_err   Pointer to the variable that will receive one of the following error code(s)
     75           *                   from this function:
     76           *                       - RTOS_ERR_NONE
     77           *******************************************************************************************************/
     78          void OSStatReset(RTOS_ERR *p_err)
     79          {
     80          #if (OS_CFG_DBG_EN == DEF_ENABLED)
     81            OS_TCB *p_tcb;
     82          #if (OS_MSG_EN == DEF_ENABLED)
     83            OS_MSG_Q *p_msg_q;
     84          #endif
     85          #if (OS_CFG_Q_EN == DEF_ENABLED)
     86            OS_Q *p_q;
     87          #endif
     88          #endif
     89            CORE_DECLARE_IRQ_STATE;
     90          
     91            OS_ASSERT_DBG_ERR_PTR_VALIDATE(p_err,; );
     92          
     93            CORE_ENTER_ATOMIC();
     94          #if (OS_CFG_STAT_TASK_EN == DEF_ENABLED)
     95            OSStatTaskCPUUsageMax = 0u;
     96          #if (OS_CFG_TS_EN == DEF_ENABLED)
     97            OSStatTaskTimeMax = 0u;
     98          #endif
     99          #endif
    100          
    101          #if (OS_CFG_TMR_EN == DEF_ENABLED)
    102          #if (OS_CFG_TS_EN == DEF_ENABLED)
    103            OSTmrTaskTimeMax = 0u;
    104          #endif
    105          #endif
    106          
    107          #if (OS_CFG_SCHED_LOCK_TIME_MEAS_EN == DEF_ENABLED)
    108            OSSchedLockTimeMax = 0u;                                      // Reset the maximum scheduler lock time
    109          #endif
    110          
    111          #if ((OS_MSG_EN == DEF_ENABLED) && (OS_CFG_DBG_EN == DEF_ENABLED))
    112            OSMsgPool.NbrUsedMax = 0u;
    113          #endif
    114            CORE_EXIT_ATOMIC();
    115          
    116          #if (OS_CFG_DBG_EN == DEF_ENABLED)
    117            CORE_ENTER_ATOMIC();
    118            p_tcb = OSTaskDbgListPtr;
    119            CORE_EXIT_ATOMIC();
    120            while (p_tcb != DEF_NULL) {                                   // Reset per-Task statistics
    121              CORE_ENTER_ATOMIC();
    122          
    123          #if (OS_CFG_SCHED_LOCK_TIME_MEAS_EN == DEF_ENABLED)
    124              p_tcb->SchedLockTimeMax = 0u;
    125          #endif
    126          
    127          #if (OS_CFG_TASK_PROFILE_EN == DEF_ENABLED)
    128          #if (OS_CFG_TASK_Q_EN == DEF_ENABLED)
    129              p_tcb->MsgQPendTimeMax = 0u;
    130          #endif
    131              p_tcb->SemPendTimeMax = 0u;
    132              p_tcb->CtxSwCtr = 0u;
    133              p_tcb->CPUUsage = 0u;
    134              p_tcb->CPUUsageMax = 0u;
    135              p_tcb->CyclesTotal = 0u;
    136              p_tcb->CyclesTotalPrev = 0u;
    137          #if (OS_CFG_TS_EN == DEF_ENABLED)
    138              p_tcb->CyclesStart = OS_TS_GET();
    139          #endif
    140          #endif
    141          
    142          #if (OS_CFG_TASK_Q_EN == DEF_ENABLED)
    143              p_msg_q = &p_tcb->MsgQ;
    144              p_msg_q->NbrEntriesMax = 0u;
    145          #endif
    146              p_tcb = p_tcb->DbgNextPtr;
    147              CORE_EXIT_ATOMIC();
    148            }
    149          #endif
    150          
    151          #if (OS_CFG_Q_EN == DEF_ENABLED) && (OS_CFG_DBG_EN == DEF_ENABLED)
    152            CORE_ENTER_ATOMIC();
    153            p_q = OSQDbgListPtr;
    154            CORE_EXIT_ATOMIC();
    155            while (p_q != DEF_NULL) {                                     // Reset message queues statistics
    156              CORE_ENTER_ATOMIC();
    157              p_msg_q = &p_q->MsgQ;
    158              p_msg_q->NbrEntriesMax = 0u;
    159              p_q = p_q->DbgNextPtr;
    160              CORE_EXIT_ATOMIC();
    161            }
    162          #endif
    163          
    164            RTOS_ERR_SET(*p_err, RTOS_ERR_NONE);
    165          }
    166          
    167          /********************************************************************************************************
    168           ********************************************************************************************************
    169           *                                           INTERNAL FUNCTIONS
    170           ********************************************************************************************************
    171           *******************************************************************************************************/
    172          
    173          /****************************************************************************************************//**
    174           *                                               OS_StatTask()
    175           *
    176           * @brief    This task is internal to the Kernel and is used to compute some statistics about the
    177           *           multitasking environment. Specifically, OS_StatTask() computes the CPU usage.
    178           *
    179           * @param    p_arg   Argument passed to the task when the task is created (unused).
    180           *
    181           * @note     (1) You can disable this task by setting the configuration #define OS_CFG_STAT_TASK_EN
    182           *               to 0.
    183           *
    184           * @note     (2) This function is INTERNAL to the Kernel and your application MUST NOT call it.
    185           *******************************************************************************************************/
    186          void OS_StatTask(void *p_arg)
    187          {
    188          #if (OS_CFG_DBG_EN == DEF_ENABLED)
    189          #if (OS_CFG_TASK_PROFILE_EN == DEF_ENABLED)
    190            OS_CYCLES cycles_total;
    191          #endif
    192            OS_TCB *p_tcb;
    193          #endif
    194            CPU_BOOLEAN start_flag = DEF_NO;
    195            OS_CPU_USAGE usage;
    196            CPU_TS ts_stat_end;
    197            OS_CYCLES cycles_idle_total;
    198            OS_TICK  ctr_max;
    199            OS_TICK  ctr_mult;
    200            OS_TICK  ctr_div;
    201            RTOS_ERR err;
    202            OS_TICK  dly;
    203          #if (OS_CFG_TS_EN == DEF_ENABLED)
    204            CPU_TS ts_start;
    205            CPU_TS ts_end;
    206          #endif
    207            OS_RATE_HZ tick_rate;
    208            CORE_DECLARE_IRQ_STATE;
    209          
    210            (void)p_arg;                                                  // Prevent compiler warning for not using 'p_arg'
    211          
    212            OSStatReset(&err);                                            // Reset statistics
    213          
    214            dly       = (OS_TICK)0;                                       // Compute statistic task sleep delay
    215            tick_rate = OSTimeTickRateHzGet(&err);
    216            RTOS_ASSERT_CRITICAL(RTOS_ERR_CODE_GET(err) == RTOS_ERR_NONE, RTOS_ERR_FAIL,; );
    217          
    218            if (tick_rate > OSCfg_StatTaskRate_Hz) {
    219              dly = (tick_rate / OSCfg_StatTaskRate_Hz);
    220            }
    221            if (dly == 0u) {
    222              dly = (tick_rate / 10u);
    223            }
    224          
    225            while (DEF_ON) {
    226          #if (OS_CFG_TS_EN == DEF_ENABLED)
    227              ts_start = OS_TS_GET();
    228          #endif
    229          
    230              ts_stat_end = OS_TMR_GET_DIFF(OS_TS_GET(), OSStatStartTick);// Get execution time between two stats calculation.
    231          
    232              CORE_ENTER_ATOMIC();
    233              cycles_idle_total = OSIdleTotalTick;
    234              OSIdleTotalTick = 0u;
    235              CORE_EXIT_ATOMIC();
    236          
    237              //                                                             ------------ INDIVIDUAL TASK CPU USAGE -------------
    238              //                                                             'cycles_total' scaling ...
    239              if (ts_stat_end < 400000u) {                                // 1 to       400,000
    240                ctr_mult = 10000u;
    241                ctr_div = 1u;
    242              } else if (ts_stat_end < 4000000u) {                        // 400,000 to     4,000,000
    243                ctr_mult = 1000u;
    244                ctr_div = 10u;
    245              } else if (ts_stat_end < 40000000u) {                       // 4,000,000 to    40,000,000
    246                ctr_mult = 100u;
    247                ctr_div = 100u;
    248              } else if (ts_stat_end < 400000000u) {                      // 40,000,000 to   400,000,000
    249                ctr_mult = 10u;
    250                ctr_div = 1000u;
    251              } else {                                                    // 400,000,000 and up
    252                ctr_mult = 1u;
    253                ctr_div = 10000u;
    254              }
    255              ctr_max = ts_stat_end / ctr_div;
    256          
    257              usage = (OS_CPU_USAGE)(ctr_mult * cycles_idle_total / ctr_max);
    258              if (usage > 10000u) {
    259                usage = 10000u;
    260              }
    261          
    262              OSIdleCPUUsage = usage;
    263          
    264              OSStatTaskCPUUsage = 10000u - usage;
    265              if ((OSStatTaskCPUUsageMax < OSStatTaskCPUUsage)
    266                  && start_flag) {
    267                OSStatTaskCPUUsageMax = OSStatTaskCPUUsage;
    268              }
    269          
    270          #if (OS_CFG_DBG_EN == DEF_ENABLED)
    271          #if (OS_CFG_TASK_PROFILE_EN == DEF_ENABLED)
    272          
    273              CORE_ENTER_ATOMIC();
    274              p_tcb = OSTaskDbgListPtr;
    275              CORE_EXIT_ATOMIC();
    276          
    277              while (p_tcb != DEF_NULL) {                                 // ---------------- TOTAL CYCLES COUNT ----------------
    278                CORE_ENTER_ATOMIC();
    279                p_tcb->CyclesTotalPrev = p_tcb->CyclesTotal;              // Save accumulated # cycles into a temp variable
    280                p_tcb->CyclesTotal = 0u;                                  // Reset total cycles for task for next run
    281                CORE_EXIT_ATOMIC();
    282          
    283                cycles_total += p_tcb->CyclesTotalPrev;                   // Perform sum of all task # cycles
    284          
    285                CORE_ENTER_ATOMIC();
    286                p_tcb = p_tcb->DbgNextPtr;
    287                CORE_EXIT_ATOMIC();
    288              }
    289          #endif
    290          
    291              CORE_ENTER_ATOMIC();
    292              p_tcb = OSTaskDbgListPtr;
    293              CORE_EXIT_ATOMIC();
    294          
    295              while (p_tcb != DEF_NULL) {
    296          #if (OS_CFG_TASK_PROFILE_EN == DEF_ENABLED)                     // Compute execution time of each task
    297                usage = (OS_CPU_USAGE)(ctr_mult * p_tcb->CyclesTotalPrev / ctr_max);
    298                if (usage > 10000u) {
    299                  usage = 10000u;
    300                }
    301          
    302                p_tcb->CPUUsage = usage;
    303                if (p_tcb->CPUUsageMax < usage) {                         // Detect peak CPU usage
    304                  p_tcb->CPUUsageMax = usage;
    305                }
    306          #endif
    307          
    308          #if (OS_CFG_STAT_TASK_STK_CHK_EN == DEF_ENABLED)
    309                OSTaskStkChk(p_tcb,                                       // Compute stack usage of active tasks only
    310                             &p_tcb->StkFree,
    311                             &p_tcb->StkUsed,
    312                             &err);
    313          #endif
    314          
    315                CORE_ENTER_ATOMIC();
    316                p_tcb = p_tcb->DbgNextPtr;
    317                CORE_EXIT_ATOMIC();
    318              }
    319          #endif
    320          
    321              if (OSStatResetFlag == DEF_TRUE) {                          // Check if need to reset statistics
    322                OSStatResetFlag = DEF_FALSE;
    323                OSStatReset(&err);
    324              }
    325          
    326              OSStatTaskHook();                                           // Invoke user definable hook
    327          
    328              OS_StatTickInit();
    329              start_flag = DEF_YES;
    330          
    331          #if (OS_CFG_TS_EN == DEF_ENABLED)
    332              ts_end = OS_TS_GET() - ts_start;                            // Measure execution time of statistic task
    333              if (OSStatTaskTimeMax < ts_end) {
    334                OSStatTaskTimeMax = ts_end;
    335              }
    336          #endif
    337          
    338              OSTimeDly(dly,
    339                        OS_OPT_TIME_DLY,
    340                        &err);
    341            }
    342          }
    343          
    344          /****************************************************************************************************//**
    345           *                                               OS_StatTaskInit()
    346           *
    347           * @brief    This function is called by OSInit() to initialize the statistic task.
    348           *
    349           * @param    p_err   Pointer to the variable that will receive one of the following error code(s) from this
    350           *                   function:
    351           *                       - RTOS_ERR_NONE
    352           *                       - RTOS_ERR_OS_ILLEGAL_RUN_TIME
    353           *
    354           * @note     (1) This function is INTERNAL to the Kernel and your application MUST NOT call it.
    355           *******************************************************************************************************/
    356          void OS_StatTaskInit(RTOS_ERR *p_err)
    357          {
    358            OSStatTaskRdy = DEF_FALSE;                                    // Statistic task is not ready
    359            OSStatResetFlag = DEF_FALSE;
    360          
    361            //                                                               --------------- CREATE THE STAT TASK ---------------
    362            OSTaskCreate(&OSStatTaskTCB,
    363                         (CPU_CHAR *)((void *)"Kernel's Stat Task"),
    364                         OS_StatTask,
    365                         DEF_NULL,
    366                         OSCfg_StatTaskPrio,
    367                         OSCfg_StatTaskStkBasePtr,
    368                         OSCfg_StatTaskStkLimit,
    369                         OSCfg_StatTaskStkSize,
    370                         0u,
    371                         0u,
    372                         DEF_NULL,
    373                         (OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
    374                         p_err);
    375          }
    376          
    377          /*****************************************************************************************************//**
    378           *                                           OS_StatTickInit()
    379           *
    380           * @brief    This function initialize OSStatStartTick with the current tick count.
    381           *******************************************************************************************************/
    382          void OS_StatTickInit(void)
    383          {
    384            OSStatStartTick = OS_TS_GET();
    385          }
    386          
    387          /*****************************************************************************************************//**
    388           *                                        OS_StatIdleEnterNotify()
    389           *
    390           * @brief    This function initialize OSIdleStartTick with the current tick count.
    391           *******************************************************************************************************/
    392          void OS_StatIdleEnterNotify(void)
    393          {
    394            OSIdleStartTick = OS_TS_GET();
    395          }
    396          
    397          /*****************************************************************************************************//**
    398           *                                        OS_StatIdleExitNotify()
    399           *
    400           * @brief    This function adds the difference in tick between OSIdleStartTick and the current tick
    401           *           count to OSIdleTotalTick.
    402           *******************************************************************************************************/
    403          void OS_StatIdleExitNotify(void)
    404          {
    405            OSIdleTotalTick += OS_TMR_GET_DIFF(OS_TS_GET(), OSIdleStartTick);
    406          }
    407          
    408          #endif
    409          
    410          /********************************************************************************************************
    411           ********************************************************************************************************
    412           *                                   DEPENDENCIES & AVAIL CHECK(S) END
    413           ********************************************************************************************************
    414           *******************************************************************************************************/
    415          
    416          #endif // (defined(RTOS_MODULE_KERNEL_AVAIL))


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       2  OSIdleCPUUsage

 
 2 bytes in section .bss
 
 2 bytes of DATA memory

Errors: none
Warnings: none
