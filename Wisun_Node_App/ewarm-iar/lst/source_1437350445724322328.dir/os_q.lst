###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         29/Mar/2025  15:53:01
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\source\os_q.c
#    Command line      =
#        -f "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\source_1437350445724322328.dir\os_q.o.rsp"
#        ("D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\source\os_q.c"
#        -D DEBUG_EFM=1 -D EFR32FG28B322F1024IM48=1 -D
#        configNUM_SDK_THREAD_LOCAL_STORAGE_POINTERS=2 -D
#        SL_COMPONENT_CATALOG_PRESENT=1 -D
#        MBEDTLS_CONFIG_FILE=<sl_mbedtls_config.h> -D
#        MBEDTLS_PSA_CRYPTO_CONFIG_FILE=<psa_crypto_config.h> -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -D
#        RTT_USE_ASM=0 -lC "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\lst\source_1437350445724322328.dir"
#        --diag_suppress Pa050 -o "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\source_1437350445724322328.dir"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M33 --cmse --cmse -e --fpu=VFPv5_sp --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        9.2\arm\inc\c\DLib_Config_Normal.h" -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\rail\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\wisun\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\.\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\Device\SiliconLabs\EFR32FG28\Include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_project_info\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\common\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\src\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\CMSIS\Core\Include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\CMSIS\RTOS2\Include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\device_init\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emdrv\common\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emlib\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\iostream\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\config\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\config\preset\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\cpu\include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\ports\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emdrv\nvm3\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\peripheral\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\printf\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\printf\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_psa_driver\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\common\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\ble\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\ieee802154\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\wmbus\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\zwave\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\chip\efr32\efr32xg2x\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\sidewalk\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\pa-conversions\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\pa-conversions\efr32xg28\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\rail_util_pti\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\se_manager\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\se_manager\src\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\segger\systemview\SEGGER\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\silicon_labs\silabs_core\memory_manager\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\common\toolchain\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\system\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_core\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_setting\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\cli_util\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\event_manager\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\ns_list\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\ping\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\nanostack\nanostack-libservice\mbed-client-libservice\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\udp_client\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\sleeptimer\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\plugin\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\stack\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\stack\inc\socket\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\autogen\\" -On
#        --use_c++_inline) --dependencies=n "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\source_1437350445724322328.dir\os_q.o.iar_deps"
#    Locale            =  C
#    List file         =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\lst\source_1437350445724322328.dir\os_q.lst
#    Object file       =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\source_1437350445724322328.dir\os_q.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\source\os_q.c
      1          /***************************************************************************//**
      2           * @file
      3           * @brief Kernel - Message Queue Management
      4           *******************************************************************************
      5           * # License
      6           * <b>Copyright 2018 Silicon Laboratories Inc. www.silabs.com</b>
      7           *******************************************************************************
      8           *
      9           * The licensor of this software is Silicon Laboratories Inc.  Your use of this
     10           * software is governed by the terms of Silicon Labs Master Software License
     11           * Agreement (MSLA) available at
     12           * www.silabs.com/about-us/legal/master-software-license-agreement.  This
     13           * software is distributed to you in Source Code format and is governed by the
     14           * sections of the MSLA applicable to Source Code.
     15           *
     16           ******************************************************************************/
     17          
     18          /********************************************************************************************************
     19           ********************************************************************************************************
     20           *                                       DEPENDENCIES & AVAIL CHECK(S)
     21           ********************************************************************************************************
     22           *******************************************************************************************************/
     23          
     24          #include  <rtos_description.h>
     25          
     26          #if (defined(RTOS_MODULE_KERNEL_AVAIL))
     27          
     28          /********************************************************************************************************
     29           ********************************************************************************************************
     30           *                                               INCLUDE FILES
     31           ********************************************************************************************************
     32           *******************************************************************************************************/
     33          
     34          #define  MICRIUM_SOURCE
     35          #include "../include/os.h"
     36          #include "os_priv.h"
     37          
     38          #include  <em_core.h>
     39          
     40          #ifdef VSC_INCLUDE_SOURCE_FILE_NAMES
     41          const CPU_CHAR *os_q__c = "$Id: $";
     42          #endif
     43          
     44          /********************************************************************************************************
     45           ********************************************************************************************************
     46           *                                           GLOBAL FUNCTIONS
     47           ********************************************************************************************************
     48           *******************************************************************************************************/
     49          
     50          #if (OS_CFG_Q_EN == DEF_ENABLED)
     51          /****************************************************************************************************//**
     52           *                                               OSQCreate()
     53           *
     54           * @brief    Called by your application to create a message queue. Message queues
     55           *           MUST be created before they can be used.
     56           *
     57           * @param    p_q         Pointer to the message queue.
     58           *
     59           * @param    p_name      Pointer to an ASCII string used to name the message queue.
     60           *
     61           * @param    max_qty     Indicates the maximum size of the message queue (must be non-zero). Note
     62           *                       that it is not possible to have a size higher than the maximum number of
     63           *                       OS_MSGs available.
     64           *
     65           * @param    p_err       Pointer to the variable that will receive one of the following error
     66           *                       code(s) from this function:
     67           *                           - RTOS_ERR_NONE
     68           *                           - RTOS_ERR_OS_ILLEGAL_RUN_TIME
     69           *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     70          void OSQCreate(OS_Q       *p_q,
     71                         CPU_CHAR   *p_name,
     72                         OS_MSG_QTY max_qty,
     73                         RTOS_ERR   *p_err)
     74          
     75          {
   \                     OSQCreate: (+1)
   \        0x0   0xB5F2             PUSH     {R1,R4-R7,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x0016             MOVS     R6,R2
   \        0x6   0x001D             MOVS     R5,R3
     76            CORE_DECLARE_IRQ_STATE;
     77          
     78            OS_ASSERT_DBG_ERR_PTR_VALIDATE(p_err,; );
   \        0x8   0x2D00             CMP      R5,#+0
   \        0xA   0xD101             BNE.N    ??OSQCreate_0
   \        0xC   0x.... 0x....      BL       CPU_SW_Exception
     79          
     80          #ifdef OS_SAFETY_CRITICAL_IEC61508
     81            if (OSSafetyCriticalStartFlag == DEF_TRUE) {
     82              RTOS_ERR_SET(*p_err, RTOS_ERR_OS_ILLEGAL_RUN_TIME);
     83              return;
     84            }
     85          #endif
     86          
     87            //                                                               Not allowed to call from an ISR
     88            OS_ASSERT_DBG_ERR_SET((!CORE_InIrqContext()), *p_err, RTOS_ERR_ISR,; );
   \                     ??OSQCreate_0: (+1)
   \       0x10   0x.... 0x....      BL       CORE_InIrqContext
   \       0x14   0x2800             CMP      R0,#+0
   \       0x16   0xD101             BNE.N    ??OSQCreate_1
   \       0x18   0x2001             MOVS     R0,#+1
   \       0x1A   0xE000             B.N      ??OSQCreate_2
   \                     ??OSQCreate_1: (+1)
   \       0x1C   0x2000             MOVS     R0,#+0
   \                     ??OSQCreate_2: (+1)
   \       0x1E   0xB2C0             UXTB     R0,R0
   \       0x20   0x2800             CMP      R0,#+0
   \       0x22   0xD10A             BNE.N    ??OSQCreate_3
   \       0x24   0x2020             MOVS     R0,#+32
   \       0x26   0x7028             STRB     R0,[R5, #+0]
   \       0x28   0x.... 0x....      LDR.W    R0,??DataTable6
   \       0x2C   0x6068             STR      R0,[R5, #+4]
   \       0x2E   0x2058             MOVS     R0,#+88
   \       0x30   0x60A8             STR      R0,[R5, #+8]
   \       0x32   0x.... 0x....      LDR.W    R0,??DataTable6_1
   \       0x36   0x60E8             STR      R0,[R5, #+12]
   \                     ??OSQCreate_4: (+1)
   \       0x38   0xE7FE             B.N      ??OSQCreate_4
     89          
     90            //                                                               Validate 'p_q'
     91            OS_ASSERT_DBG_ERR_SET((p_q != DEF_NULL), *p_err, RTOS_ERR_NULL_PTR,; );
   \                     ??OSQCreate_3: (+1)
   \       0x3A   0x2C00             CMP      R4,#+0
   \       0x3C   0xD10A             BNE.N    ??OSQCreate_5
   \       0x3E   0x200A             MOVS     R0,#+10
   \       0x40   0x7028             STRB     R0,[R5, #+0]
   \       0x42   0x.... 0x....      LDR.W    R0,??DataTable6
   \       0x46   0x6068             STR      R0,[R5, #+4]
   \       0x48   0x205B             MOVS     R0,#+91
   \       0x4A   0x60A8             STR      R0,[R5, #+8]
   \       0x4C   0x.... 0x....      LDR.W    R0,??DataTable6_1
   \       0x50   0x60E8             STR      R0,[R5, #+12]
   \                     ??OSQCreate_6: (+1)
   \       0x52   0xE7FE             B.N      ??OSQCreate_6
     92          
     93            //                                                               Cannot specify a zero size queue
     94            OS_ASSERT_DBG_ERR_SET((max_qty != 0u), *p_err, RTOS_ERR_INVALID_ARG,; );
   \                     ??OSQCreate_5: (+1)
   \       0x54   0x0030             MOVS     R0,R6
   \       0x56   0xB280             UXTH     R0,R0
   \       0x58   0x2800             CMP      R0,#+0
   \       0x5A   0xD10A             BNE.N    ??OSQCreate_7
   \       0x5C   0x2008             MOVS     R0,#+8
   \       0x5E   0x7028             STRB     R0,[R5, #+0]
   \       0x60   0x.... 0x....      LDR.W    R0,??DataTable6
   \       0x64   0x6068             STR      R0,[R5, #+4]
   \       0x66   0x205E             MOVS     R0,#+94
   \       0x68   0x60A8             STR      R0,[R5, #+8]
   \       0x6A   0x.... 0x....      LDR.W    R0,??DataTable6_1
   \       0x6E   0x60E8             STR      R0,[R5, #+12]
   \                     ??OSQCreate_8: (+1)
   \       0x70   0xE7FE             B.N      ??OSQCreate_8
     95          
     96            //                                                               Q size must be within 1 and OSCfg_MsgPoolSize
     97            OS_ASSERT_DBG_ERR_SET((max_qty <= OSCfg_MsgPoolSize), *p_err, RTOS_ERR_INVALID_ARG,; );
   \                     ??OSQCreate_7: (+1)
   \       0x72   0x.... 0x....      LDR.W    R0,??DataTable6_2
   \       0x76   0x8801             LDRH     R1,[R0, #+0]
   \       0x78   0x0030             MOVS     R0,R6
   \       0x7A   0xB280             UXTH     R0,R0
   \       0x7C   0x4281             CMP      R1,R0
   \       0x7E   0xD20A             BCS.N    ??OSQCreate_9
   \       0x80   0x2008             MOVS     R0,#+8
   \       0x82   0x7028             STRB     R0,[R5, #+0]
   \       0x84   0x.... 0x....      LDR.W    R0,??DataTable6
   \       0x88   0x6068             STR      R0,[R5, #+4]
   \       0x8A   0x2061             MOVS     R0,#+97
   \       0x8C   0x60A8             STR      R0,[R5, #+8]
   \       0x8E   0x.... 0x....      LDR.W    R0,??DataTable6_1
   \       0x92   0x60E8             STR      R0,[R5, #+12]
   \                     ??OSQCreate_10: (+1)
   \       0x94   0xE7FE             B.N      ??OSQCreate_10
     98          
     99            CORE_ENTER_ATOMIC();
   \                     ??OSQCreate_9: (+1)
   \       0x96   0x.... 0x....      BL       CORE_EnterAtomic
   \       0x9A   0x0007             MOVS     R7,R0
    100          
    101            *p_q = (OS_Q){ 0 };
   \       0x9C   0x0020             MOVS     R0,R4
   \       0x9E   0x2118             MOVS     R1,#+24
   \       0xA0   0x.... 0x....      BL       __aeabi_memclr4
    102          #if (OS_OBJ_TYPE_REQ == DEF_ENABLED)
    103            p_q->Type = OS_OBJ_TYPE_Q;                                    // Mark the data structure as a message queue
   \       0xA4   0x.... 0x....      LDR.W    R0,??DataTable6_3
   \       0xA8   0x6020             STR      R0,[R4, #+0]
    104          #endif
    105          #if (OS_CFG_DBG_EN == DEF_ENABLED)
    106            p_q->NamePtr = p_name;
    107          #else
    108            (void)&p_name;
   \       0xAA   0x4668             MOV      R0,SP
    109          #endif
    110            OS_MsgQInit(&p_q->MsgQ,                                       // Initialize the queue
    111                        max_qty);
   \       0xAC   0x0031             MOVS     R1,R6
   \       0xAE   0xB289             UXTH     R1,R1
   \       0xB0   0xF114 0x000C      ADDS     R0,R4,#+12
   \       0xB4   0x.... 0x....      BL       OS_MsgQInit
    112            OS_PendListInit(&p_q->PendList);                              // Initialize the waiting list
   \       0xB8   0x1D20             ADDS     R0,R4,#+4
   \       0xBA   0x.... 0x....      BL       OS_PendListInit
    113          
    114          #if (OS_CFG_DBG_EN == DEF_ENABLED)
    115            OS_QDbgListAdd(p_q);
    116            OSQQty++;                                                     // One more queue created
    117          #endif
    118            OS_TRACE_Q_CREATE(p_q, p_name);
    119            CORE_EXIT_ATOMIC();
   \       0xBE   0x0038             MOVS     R0,R7
   \       0xC0   0x.... 0x....      BL       CORE_ExitAtomic
    120            RTOS_ERR_SET(*p_err, RTOS_ERR_NONE);
   \       0xC4   0x2000             MOVS     R0,#+0
   \       0xC6   0x7028             STRB     R0,[R5, #+0]
   \       0xC8   0x.... 0x....      LDR.W    R0,??DataTable6
   \       0xCC   0x6068             STR      R0,[R5, #+4]
   \       0xCE   0x2078             MOVS     R0,#+120
   \       0xD0   0x60A8             STR      R0,[R5, #+8]
   \       0xD2   0x.... 0x....      LDR.W    R0,??DataTable6_1
   \       0xD6   0x60E8             STR      R0,[R5, #+12]
    121          }
   \       0xD8   0xBDF1             POP      {R0,R4-R7,PC}
    122          
    123          /****************************************************************************************************//**
    124           *                                                   OSQDel()
    125           *
    126           * @brief    This function deletes a message queue and readies all tasks pending on the queue.
    127           *
    128           * @param    p_q     Pointer to the message queue to delete.
    129           *
    130           * @param    opt     Determines delete options as follows:
    131           *                       - OS_OPT_DEL_NO_PEND  Deletes the queue ONLY if no task is pending.
    132           *                       - OS_OPT_DEL_ALWAYS   Deletes the queue even if tasks are waiting.
    133           *                   In this case, all pending tasks will be
    134           *                   readied.
    135           *
    136           * @param    p_err   Pointer to the variable that will receive one of the following error
    137           *                   code(s) from this function:
    138           *                       - RTOS_ERR_NONE
    139           *                       - RTOS_ERR_OS_ILLEGAL_RUN_TIME
    140           *                       - RTOS_ERR_OS_TASK_WAITING
    141           *                       - RTOS_ERR_NOT_READY
    142           *
    143           * @return   == 0    If no tasks were waiting on the queue, or upon error.
    144           *           >  0    If one or more tasks waiting on the queue are now readied and informed.
    145           *
    146           * @note     (1) Use this function with care. Tasks that would normally expect the presence of the
    147           *               queue MUST check the return code of OSQPend().
    148           *
    149           * @note     (2) Because ALL tasks pending on the queue will be readied, you MUST be careful
    150           *               handling resources in applications where the queue is used for mutual exclusion
    151           *               because these resource will no longer be guarded by the queue.
    152           *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    153          OS_OBJ_QTY OSQDel(OS_Q     *p_q,
    154                            OS_OPT   opt,
    155                            RTOS_ERR *p_err)
    156          {
   \                     OSQDel: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x468B             MOV      R11,R1
   \        0x8   0x0015             MOVS     R5,R2
    157            OS_OBJ_QTY   nbr_tasks;
    158            OS_PEND_LIST *p_pend_list;
    159            OS_TCB       *p_tcb;
    160            CPU_TS       ts;
    161            CORE_DECLARE_IRQ_STATE;
    162          
    163            OS_ASSERT_DBG_ERR_PTR_VALIDATE(p_err, 0u);
   \        0xA   0x2D00             CMP      R5,#+0
   \        0xC   0xD101             BNE.N    ??OSQDel_0
   \        0xE   0x.... 0x....      BL       CPU_SW_Exception
    164          
    165            OS_TRACE_Q_DEL_ENTER(p_q, opt);
    166          
    167          #ifdef OS_SAFETY_CRITICAL_IEC61508
    168            if (OSSafetyCriticalStartFlag == DEF_TRUE) {
    169              RTOS_ERR_SET(*p_err, RTOS_ERR_OS_ILLEGAL_RUN_TIME);
    170              return (0u);
    171            }
    172          #endif
    173          
    174            //                                                               Not allowed to call from an ISR
    175            OS_ASSERT_DBG_ERR_SET((!CORE_InIrqContext()), *p_err, RTOS_ERR_ISR, 0u);
   \                     ??OSQDel_0: (+1)
   \       0x12   0x.... 0x....      BL       CORE_InIrqContext
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD101             BNE.N    ??OSQDel_1
   \       0x1A   0x2001             MOVS     R0,#+1
   \       0x1C   0xE000             B.N      ??OSQDel_2
   \                     ??OSQDel_1: (+1)
   \       0x1E   0x2000             MOVS     R0,#+0
   \                     ??OSQDel_2: (+1)
   \       0x20   0xB2C0             UXTB     R0,R0
   \       0x22   0x2800             CMP      R0,#+0
   \       0x24   0xD10A             BNE.N    ??OSQDel_3
   \       0x26   0x2020             MOVS     R0,#+32
   \       0x28   0x7028             STRB     R0,[R5, #+0]
   \       0x2A   0x.... 0x....      LDR.W    R0,??DataTable6
   \       0x2E   0x6068             STR      R0,[R5, #+4]
   \       0x30   0x20AF             MOVS     R0,#+175
   \       0x32   0x60A8             STR      R0,[R5, #+8]
   \       0x34   0x.... 0x....      LDR.W    R0,??DataTable6_4
   \       0x38   0x60E8             STR      R0,[R5, #+12]
   \                     ??OSQDel_4: (+1)
   \       0x3A   0xE7FE             B.N      ??OSQDel_4
    176          
    177            //                                                               Validate 'p_q'
    178            OS_ASSERT_DBG_ERR_SET((p_q != DEF_NULL), *p_err, RTOS_ERR_NULL_PTR, 0u);
   \                     ??OSQDel_3: (+1)
   \       0x3C   0x2C00             CMP      R4,#+0
   \       0x3E   0xD10A             BNE.N    ??OSQDel_5
   \       0x40   0x200A             MOVS     R0,#+10
   \       0x42   0x7028             STRB     R0,[R5, #+0]
   \       0x44   0x.... 0x....      LDR.W    R0,??DataTable6
   \       0x48   0x6068             STR      R0,[R5, #+4]
   \       0x4A   0x20B2             MOVS     R0,#+178
   \       0x4C   0x60A8             STR      R0,[R5, #+8]
   \       0x4E   0x.... 0x....      LDR.W    R0,??DataTable6_4
   \       0x52   0x60E8             STR      R0,[R5, #+12]
   \                     ??OSQDel_6: (+1)
   \       0x54   0xE7FE             B.N      ??OSQDel_6
    179          
    180            //                                                               Validate object type
    181            OS_ASSERT_DBG_ERR_SET((p_q->Type == OS_OBJ_TYPE_Q), *p_err, RTOS_ERR_INVALID_TYPE, 0u);
   \                     ??OSQDel_5: (+1)
   \       0x56   0x6821             LDR      R1,[R4, #+0]
   \       0x58   0x.... 0x....      LDR.W    R0,??DataTable6_3
   \       0x5C   0x4281             CMP      R1,R0
   \       0x5E   0xD00A             BEQ.N    ??OSQDel_7
   \       0x60   0x200C             MOVS     R0,#+12
   \       0x62   0x7028             STRB     R0,[R5, #+0]
   \       0x64   0x.... 0x....      LDR.W    R0,??DataTable6
   \       0x68   0x6068             STR      R0,[R5, #+4]
   \       0x6A   0x20B5             MOVS     R0,#+181
   \       0x6C   0x60A8             STR      R0,[R5, #+8]
   \       0x6E   0x.... 0x....      LDR.W    R0,??DataTable6_4
   \       0x72   0x60E8             STR      R0,[R5, #+12]
   \                     ??OSQDel_8: (+1)
   \       0x74   0xE7FE             B.N      ??OSQDel_8
    182          
    183            //                                                               Make sure kernel is running.
    184            if (OSRunning != OS_STATE_OS_RUNNING) {
   \                     ??OSQDel_7: (+1)
   \       0x76   0x.... 0x....      LDR.W    R0,??DataTable6_5
   \       0x7A   0x7800             LDRB     R0,[R0, #+0]
   \       0x7C   0x2801             CMP      R0,#+1
   \       0x7E   0xD00B             BEQ.N    ??OSQDel_9
    185              RTOS_ERR_SET(*p_err, RTOS_ERR_NOT_READY);
   \       0x80   0x2002             MOVS     R0,#+2
   \       0x82   0x7028             STRB     R0,[R5, #+0]
   \       0x84   0x.... 0x....      LDR.W    R0,??DataTable6
   \       0x88   0x6068             STR      R0,[R5, #+4]
   \       0x8A   0x20B9             MOVS     R0,#+185
   \       0x8C   0x60A8             STR      R0,[R5, #+8]
   \       0x8E   0x.... 0x....      LDR.W    R0,??DataTable6_4
   \       0x92   0x60E8             STR      R0,[R5, #+12]
    186              return (0u);
   \       0x94   0x2000             MOVS     R0,#+0
   \       0x96   0xE064             B.N      ??OSQDel_10
    187            }
    188          
    189            CORE_ENTER_ATOMIC();
   \                     ??OSQDel_9: (+1)
   \       0x98   0x.... 0x....      BL       CORE_EnterAtomic
   \       0x9C   0x4680             MOV      R8,R0
    190            p_pend_list = &p_q->PendList;
   \       0x9E   0xF114 0x0904      ADDS     R9,R4,#+4
    191            nbr_tasks = 0u;
   \       0xA2   0xF05F 0x0A00      MOVS     R10,#+0
    192            switch (opt) {
   \       0xA6   0x4658             MOV      R0,R11
   \       0xA8   0xB280             UXTH     R0,R0
   \       0xAA   0x2800             CMP      R0,#+0
   \       0xAC   0xD002             BEQ.N    ??OSQDel_11
   \       0xAE   0x2801             CMP      R0,#+1
   \       0xB0   0xD023             BEQ.N    ??OSQDel_12
   \       0xB2   0xE046             B.N      ??OSQDel_13
    193              case OS_OPT_DEL_NO_PEND:                                    // Delete message queue only if no task waiting
    194                if (p_pend_list->HeadPtr == DEF_NULL) {
   \                     ??OSQDel_11: (+1)
   \       0xB4   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \       0xB8   0x2800             CMP      R0,#+0
   \       0xBA   0xD110             BNE.N    ??OSQDel_14
    195          #if (OS_CFG_DBG_EN == DEF_ENABLED)
    196                  OS_QDbgListRemove(p_q);
    197                  OSQQty--;
    198          #endif
    199                  OS_TRACE_Q_DEL(p_q);
    200                  OS_QClr(p_q);
   \       0xBC   0x0020             MOVS     R0,R4
   \       0xBE   0x.... 0x....      BL       OS_QClr
    201                  CORE_EXIT_ATOMIC();
   \       0xC2   0x4640             MOV      R0,R8
   \       0xC4   0x.... 0x....      BL       CORE_ExitAtomic
    202                  RTOS_ERR_SET(*p_err, RTOS_ERR_NONE);
   \       0xC8   0x2000             MOVS     R0,#+0
   \       0xCA   0x7028             STRB     R0,[R5, #+0]
   \       0xCC   0x.... 0x....      LDR.W    R0,??DataTable6
   \       0xD0   0x6068             STR      R0,[R5, #+4]
   \       0xD2   0x20CA             MOVS     R0,#+202
   \       0xD4   0x60A8             STR      R0,[R5, #+8]
   \       0xD6   0x.... 0x....      LDR.W    R0,??DataTable6_4
   \       0xDA   0x60E8             STR      R0,[R5, #+12]
   \       0xDC   0xE00C             B.N      ??OSQDel_15
    203                } else {
    204                  CORE_EXIT_ATOMIC();
   \                     ??OSQDel_14: (+1)
   \       0xDE   0x4640             MOV      R0,R8
   \       0xE0   0x.... 0x....      BL       CORE_ExitAtomic
    205                  RTOS_ERR_SET(*p_err, RTOS_ERR_OS_TASK_WAITING);
   \       0xE4   0x202E             MOVS     R0,#+46
   \       0xE6   0x7028             STRB     R0,[R5, #+0]
   \       0xE8   0x.... 0x....      LDR.W    R0,??DataTable6
   \       0xEC   0x6068             STR      R0,[R5, #+4]
   \       0xEE   0x20CD             MOVS     R0,#+205
   \       0xF0   0x60A8             STR      R0,[R5, #+8]
   \       0xF2   0x.... 0x....      LDR.W    R0,??DataTable6_4
   \       0xF6   0x60E8             STR      R0,[R5, #+12]
    206                }
    207                break;
   \                     ??OSQDel_15: (+1)
   \       0xF8   0xE031             B.N      ??OSQDel_16
    208          
    209              case OS_OPT_DEL_ALWAYS:                                     // Always delete the message queue
    210          #if (OS_CFG_TS_EN == DEF_ENABLED)
    211                ts = OS_TS_GET();                                         // Get local time stamp so all tasks get the same time
    212          #else
    213                ts = 0u;
   \                     ??OSQDel_12: (+1)
   \       0xFA   0x2000             MOVS     R0,#+0
   \       0xFC   0x0007             MOVS     R7,R0
    214          #endif
    215                while (p_pend_list->HeadPtr != DEF_NULL) {                // Remove all tasks from the pend list
   \                     ??OSQDel_17: (+1)
   \       0xFE   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \      0x102   0x2800             CMP      R0,#+0
   \      0x104   0xD00A             BEQ.N    ??OSQDel_18
    216                  p_tcb = p_pend_list->HeadPtr;
   \      0x106   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \      0x10A   0x0006             MOVS     R6,R0
    217                  OS_PendAbort(p_tcb,
    218                               ts,
    219                               OS_STATUS_PEND_DEL);
   \      0x10C   0x2202             MOVS     R2,#+2
   \      0x10E   0x0039             MOVS     R1,R7
   \      0x110   0x0030             MOVS     R0,R6
   \      0x112   0x.... 0x....      BL       OS_PendAbort
    220                  nbr_tasks++;
   \      0x116   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \      0x11A   0xE7F0             B.N      ??OSQDel_17
    221                }
    222          #if (OS_CFG_DBG_EN == DEF_ENABLED)
    223                OS_QDbgListRemove(p_q);
    224                OSQQty--;
    225          #endif
    226                OS_TRACE_Q_DEL(p_q);
    227                OS_QClr(p_q);
   \                     ??OSQDel_18: (+1)
   \      0x11C   0x0020             MOVS     R0,R4
   \      0x11E   0x.... 0x....      BL       OS_QClr
    228                CORE_EXIT_ATOMIC();
   \      0x122   0x4640             MOV      R0,R8
   \      0x124   0x.... 0x....      BL       CORE_ExitAtomic
    229                OSSched();                                                // Find highest priority task ready to run
   \      0x128   0x.... 0x....      BL       OSSched
    230                RTOS_ERR_SET(*p_err, RTOS_ERR_NONE);
   \      0x12C   0x2000             MOVS     R0,#+0
   \      0x12E   0x7028             STRB     R0,[R5, #+0]
   \      0x130   0x.... 0x....      LDR.W    R0,??DataTable6
   \      0x134   0x6068             STR      R0,[R5, #+4]
   \      0x136   0x20E6             MOVS     R0,#+230
   \      0x138   0x60A8             STR      R0,[R5, #+8]
   \      0x13A   0x.... 0x....      LDR.W    R0,??DataTable6_4
   \      0x13E   0x60E8             STR      R0,[R5, #+12]
    231                break;
   \      0x140   0xE00D             B.N      ??OSQDel_16
    232          
    233              default:
    234                CORE_EXIT_ATOMIC();
   \                     ??OSQDel_13: (+1)
   \      0x142   0x4640             MOV      R0,R8
   \      0x144   0x.... 0x....      BL       CORE_ExitAtomic
    235                OS_ASSERT_DBG_FAIL_EXEC(*p_err, RTOS_ERR_INVALID_ARG, 0u);
   \      0x148   0x2008             MOVS     R0,#+8
   \      0x14A   0x7028             STRB     R0,[R5, #+0]
   \      0x14C   0x.... 0x....      LDR.W    R0,??DataTable6
   \      0x150   0x6068             STR      R0,[R5, #+4]
   \      0x152   0x20EB             MOVS     R0,#+235
   \      0x154   0x60A8             STR      R0,[R5, #+8]
   \      0x156   0x.... 0x....      LDR.W    R0,??DataTable6_4
   \      0x15A   0x60E8             STR      R0,[R5, #+12]
   \                     ??OSQDel_19: (+1)
   \      0x15C   0xE7FE             B.N      ??OSQDel_19
    236            }
    237            OS_TRACE_Q_DEL_EXIT(RTOS_ERR_CODE_GET(*p_err));
    238            return (nbr_tasks);
   \                     ??OSQDel_16: (+1)
   \      0x15E   0x4650             MOV      R0,R10
   \      0x160   0xB280             UXTH     R0,R0
   \                     ??OSQDel_10: (+1)
   \      0x162   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}
    239          }
    240          
    241          /****************************************************************************************************//**
    242           *                                               OSQFlush()
    243           *
    244           * @brief    Flushes the contents of the message queue.
    245           *
    246           * @param    p_q     Pointer to the message queue to flush.
    247           *
    248           * @param    p_err   Pointer to the variable that will receive one of the following error
    249           *                   code(s) from this function:
    250           *                       - RTOS_ERR_NONE
    251           *                       - RTOS_ERR_NOT_READY
    252           *
    253           * @return   == 0    If no entries were freed, or upon error.
    254           *           >  0    The number of freed entries.
    255           *
    256           * @note     (1) Use great care with this function because when you flush the queue, you
    257           *               LOSE the references to what the queue entries are pointing, potentially causing
    258           *               'memory leaks'. In other words, the data to which you are pointing that are being
    259           *               referenced by the queue entries should, most likely, be de-allocated (i.e. freed).
    260           *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    261          OS_MSG_QTY OSQFlush(OS_Q     *p_q,
    262                              RTOS_ERR *p_err)
    263          {
   \                     OSQFlush: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
    264            OS_MSG_QTY entries;
    265            CORE_DECLARE_IRQ_STATE;
    266          
    267            OS_ASSERT_DBG_ERR_PTR_VALIDATE(p_err, 0u);
   \        0x6   0x2D00             CMP      R5,#+0
   \        0x8   0xD101             BNE.N    ??OSQFlush_0
   \        0xA   0x.... 0x....      BL       CPU_SW_Exception
    268          
    269            //                                                               Not allowed to call from an ISR
    270            OS_ASSERT_DBG_ERR_SET((!CORE_InIrqContext()), *p_err, RTOS_ERR_ISR, 0u);
   \                     ??OSQFlush_0: (+1)
   \        0xE   0x.... 0x....      BL       CORE_InIrqContext
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0xD101             BNE.N    ??OSQFlush_1
   \       0x16   0x2001             MOVS     R0,#+1
   \       0x18   0xE000             B.N      ??OSQFlush_2
   \                     ??OSQFlush_1: (+1)
   \       0x1A   0x2000             MOVS     R0,#+0
   \                     ??OSQFlush_2: (+1)
   \       0x1C   0xB2C0             UXTB     R0,R0
   \       0x1E   0x2800             CMP      R0,#+0
   \       0x20   0xD10B             BNE.N    ??OSQFlush_3
   \       0x22   0x2020             MOVS     R0,#+32
   \       0x24   0x7028             STRB     R0,[R5, #+0]
   \       0x26   0x.... 0x....      LDR.W    R0,??DataTable6
   \       0x2A   0x6068             STR      R0,[R5, #+4]
   \       0x2C   0xF44F 0x7087      MOV      R0,#+270
   \       0x30   0x60A8             STR      R0,[R5, #+8]
   \       0x32   0x.... 0x....      LDR.W    R0,??DataTable6_6
   \       0x36   0x60E8             STR      R0,[R5, #+12]
   \                     ??OSQFlush_4: (+1)
   \       0x38   0xE7FE             B.N      ??OSQFlush_4
    271          
    272            //                                                               Validate 'p_q'
    273            OS_ASSERT_DBG_ERR_SET((p_q != DEF_NULL), *p_err, RTOS_ERR_NULL_PTR, 0u);
   \                     ??OSQFlush_3: (+1)
   \       0x3A   0x2C00             CMP      R4,#+0
   \       0x3C   0xD10B             BNE.N    ??OSQFlush_5
   \       0x3E   0x200A             MOVS     R0,#+10
   \       0x40   0x7028             STRB     R0,[R5, #+0]
   \       0x42   0x.... 0x....      LDR.W    R0,??DataTable6
   \       0x46   0x6068             STR      R0,[R5, #+4]
   \       0x48   0xF240 0x1011      MOVW     R0,#+273
   \       0x4C   0x60A8             STR      R0,[R5, #+8]
   \       0x4E   0x.... 0x....      LDR.W    R0,??DataTable6_6
   \       0x52   0x60E8             STR      R0,[R5, #+12]
   \                     ??OSQFlush_6: (+1)
   \       0x54   0xE7FE             B.N      ??OSQFlush_6
    274          
    275            //                                                               Validate object type
    276            OS_ASSERT_DBG_ERR_SET((p_q->Type == OS_OBJ_TYPE_Q), *p_err, RTOS_ERR_INVALID_TYPE, 0u);
   \                     ??OSQFlush_5: (+1)
   \       0x56   0x6821             LDR      R1,[R4, #+0]
   \       0x58   0x.... 0x....      LDR.W    R0,??DataTable6_3
   \       0x5C   0x4281             CMP      R1,R0
   \       0x5E   0xD00B             BEQ.N    ??OSQFlush_7
   \       0x60   0x200C             MOVS     R0,#+12
   \       0x62   0x7028             STRB     R0,[R5, #+0]
   \       0x64   0x.... 0x....      LDR.W    R0,??DataTable6
   \       0x68   0x6068             STR      R0,[R5, #+4]
   \       0x6A   0xF44F 0x708A      MOV      R0,#+276
   \       0x6E   0x60A8             STR      R0,[R5, #+8]
   \       0x70   0x.... 0x....      LDR.W    R0,??DataTable6_6
   \       0x74   0x60E8             STR      R0,[R5, #+12]
   \                     ??OSQFlush_8: (+1)
   \       0x76   0xE7FE             B.N      ??OSQFlush_8
    277          
    278            //                                                               Make sure kernel is running.
    279            if (OSRunning != OS_STATE_OS_RUNNING) {
   \                     ??OSQFlush_7: (+1)
   \       0x78   0x.... 0x....      LDR.W    R0,??DataTable6_5
   \       0x7C   0x7800             LDRB     R0,[R0, #+0]
   \       0x7E   0x2801             CMP      R0,#+1
   \       0x80   0xD00C             BEQ.N    ??OSQFlush_9
    280              RTOS_ERR_SET(*p_err, RTOS_ERR_NOT_READY);
   \       0x82   0x2002             MOVS     R0,#+2
   \       0x84   0x7028             STRB     R0,[R5, #+0]
   \       0x86   0x.... 0x....      LDR.W    R0,??DataTable6
   \       0x8A   0x6068             STR      R0,[R5, #+4]
   \       0x8C   0xF44F 0x708C      MOV      R0,#+280
   \       0x90   0x60A8             STR      R0,[R5, #+8]
   \       0x92   0x.... 0x....      LDR.W    R0,??DataTable6_6
   \       0x96   0x60E8             STR      R0,[R5, #+12]
    281              return (0u);
   \       0x98   0x2000             MOVS     R0,#+0
   \       0x9A   0xE017             B.N      ??OSQFlush_10
    282            }
    283          
    284            CORE_ENTER_ATOMIC();
   \                     ??OSQFlush_9: (+1)
   \       0x9C   0x.... 0x....      BL       CORE_EnterAtomic
   \       0xA0   0x0006             MOVS     R6,R0
    285            entries = OS_MsgQFreeAll(&p_q->MsgQ);                         // Return all OS_MSGs to the OS_MSG pool
   \       0xA2   0xF114 0x000C      ADDS     R0,R4,#+12
   \       0xA6   0x.... 0x....      BL       OS_MsgQFreeAll
   \       0xAA   0x0007             MOVS     R7,R0
    286            CORE_EXIT_ATOMIC();
   \       0xAC   0x0030             MOVS     R0,R6
   \       0xAE   0x.... 0x....      BL       CORE_ExitAtomic
    287            RTOS_ERR_SET(*p_err, RTOS_ERR_NONE);
   \       0xB2   0x2000             MOVS     R0,#+0
   \       0xB4   0x7028             STRB     R0,[R5, #+0]
   \       0xB6   0x.... 0x....      LDR.W    R0,??DataTable6
   \       0xBA   0x6068             STR      R0,[R5, #+4]
   \       0xBC   0xF240 0x101F      MOVW     R0,#+287
   \       0xC0   0x60A8             STR      R0,[R5, #+8]
   \       0xC2   0x.... 0x....      LDR.W    R0,??DataTable6_6
   \       0xC6   0x60E8             STR      R0,[R5, #+12]
    288            return (entries);
   \       0xC8   0x0038             MOVS     R0,R7
   \       0xCA   0xB280             UXTH     R0,R0
   \                     ??OSQFlush_10: (+1)
   \       0xCC   0xBDF2             POP      {R1,R4-R7,PC}
    289          }
    290          
    291          /****************************************************************************************************//**
    292           *                                                   OSQPend()
    293           *
    294           * @brief    Waits for a message to be sent to a queue.
    295           *
    296           * @param    p_q         Pointer to the message queue.
    297           *
    298           * @param    timeout     Optional timeout period (in clock ticks). If non-zero, your task waits for a
    299           *                       message to arrive at the queue up to the amount of time specified by this
    300           *                       argument. However, if you specify 0, your task will wait forever at
    301           *                       the specified queue or until a message arrives.
    302           *
    303           * @param    opt         Determines whether the user wants to block if the queue is empty or not:
    304           *                           - OS_OPT_PEND_BLOCKING        Task will     block.
    305           *                           - OS_OPT_PEND_NON_BLOCKING    Task will NOT block.
    306           *
    307           * @param    p_msg_size  Pointer to a variable that receives the size of the message.
    308           *
    309           * @param    p_ts        Pointer to a variable that receives the timestamp of when the message was
    310           *                       received, pend aborted, or the message queue was deleted, If you pass
    311           *                       a NULL pointer (i.e. (CPU_TS *)0), you will not get the timestamp. In other
    312           *                       words, passing a NULL pointer is valid and indicates that you do not need
    313           *                       the timestamp.
    314           *
    315           * @param    p_err       Pointer to the variable that will receive one of the following error
    316           *                       code(s) from this function:
    317           *                           - RTOS_ERR_NONE
    318           *                           - RTOS_ERR_OS_OBJ_DEL
    319           *                           - RTOS_ERR_NOT_FOUND
    320           *                           - RTOS_ERR_WOULD_BLOCK
    321           *                           - RTOS_ERR_OS_SCHED_LOCKED
    322           *                           - RTOS_ERR_ABORT
    323           *                           - RTOS_ERR_TIMEOUT
    324           *                           - RTOS_ERR_NOT_READY
    325           *                           - RTOS_ERR_INVALID_STATE
    326           *
    327           * @return   != (void *)0    Pointer to the message received.
    328           *           == (void *)0 :
    329           *               - If you received a NULL pointer message, or
    330           *               - if no message was received, or
    331           *               - if 'p_q' is a NULL pointer, or
    332           *               - if you didn't pass a pointer to a queue.
    333           *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    334          void *OSQPend(OS_Q        *p_q,
    335                        OS_TICK     timeout,
    336                        OS_OPT      opt,
    337                        OS_MSG_SIZE *p_msg_size,
    338                        CPU_TS      *p_ts,
    339                        RTOS_ERR    *p_err)
    340          {
   \                     OSQPend: (+1)
   \        0x0   0xE92D 0x4FF2      PUSH     {R1,R4-R11,LR}
   \        0x4   0x0005             MOVS     R5,R0
   \        0x6   0x4692             MOV      R10,R2
   \        0x8   0x001E             MOVS     R6,R3
   \        0xA   0x9C0A             LDR      R4,[SP, #+40]
   \        0xC   0x9F0B             LDR      R7,[SP, #+44]
    341            void *p_void;
    342            CORE_DECLARE_IRQ_STATE;
    343          
    344            OS_ASSERT_DBG_ERR_PTR_VALIDATE(p_err, DEF_NULL);
   \        0xE   0x2F00             CMP      R7,#+0
   \       0x10   0xD101             BNE.N    ??OSQPend_0
   \       0x12   0x.... 0x....      BL       CPU_SW_Exception
    345          
    346            OS_TRACE_Q_PEND_ENTER(p_q, timeout, opt, p_msg_size, p_ts);
    347          
    348            //                                                               Not allowed to call from an ISR
    349            OS_ASSERT_DBG_ERR_SET((!CORE_InIrqContext()), *p_err, RTOS_ERR_ISR, DEF_NULL);
   \                     ??OSQPend_0: (+1)
   \       0x16   0x.... 0x....      BL       CORE_InIrqContext
   \       0x1A   0x2800             CMP      R0,#+0
   \       0x1C   0xD101             BNE.N    ??OSQPend_1
   \       0x1E   0x2001             MOVS     R0,#+1
   \       0x20   0xE000             B.N      ??OSQPend_2
   \                     ??OSQPend_1: (+1)
   \       0x22   0x2000             MOVS     R0,#+0
   \                     ??OSQPend_2: (+1)
   \       0x24   0xB2C0             UXTB     R0,R0
   \       0x26   0x2800             CMP      R0,#+0
   \       0x28   0xD10B             BNE.N    ??OSQPend_3
   \       0x2A   0x2020             MOVS     R0,#+32
   \       0x2C   0x7038             STRB     R0,[R7, #+0]
   \       0x2E   0x.... 0x....      LDR.W    R0,??DataTable6
   \       0x32   0x6078             STR      R0,[R7, #+4]
   \       0x34   0xF240 0x105D      MOVW     R0,#+349
   \       0x38   0x60B8             STR      R0,[R7, #+8]
   \       0x3A   0x.... 0x....      LDR.W    R0,??DataTable6_7
   \       0x3E   0x60F8             STR      R0,[R7, #+12]
   \                     ??OSQPend_4: (+1)
   \       0x40   0xE7FE             B.N      ??OSQPend_4
    350          
    351            //                                                               Validate 'p_q'
    352            OS_ASSERT_DBG_ERR_SET((p_q != DEF_NULL), *p_err, RTOS_ERR_NULL_PTR, DEF_NULL);
   \                     ??OSQPend_3: (+1)
   \       0x42   0x2D00             CMP      R5,#+0
   \       0x44   0xD10B             BNE.N    ??OSQPend_5
   \       0x46   0x200A             MOVS     R0,#+10
   \       0x48   0x7038             STRB     R0,[R7, #+0]
   \       0x4A   0x.... 0x....      LDR.W    R0,??DataTable6
   \       0x4E   0x6078             STR      R0,[R7, #+4]
   \       0x50   0xF44F 0x70B0      MOV      R0,#+352
   \       0x54   0x60B8             STR      R0,[R7, #+8]
   \       0x56   0x.... 0x....      LDR.W    R0,??DataTable6_7
   \       0x5A   0x60F8             STR      R0,[R7, #+12]
   \                     ??OSQPend_6: (+1)
   \       0x5C   0xE7FE             B.N      ??OSQPend_6
    353          
    354            //                                                               Validate 'p_msg_size'
    355            OS_ASSERT_DBG_ERR_SET((p_msg_size != DEF_NULL), *p_err, RTOS_ERR_NULL_PTR, DEF_NULL);
   \                     ??OSQPend_5: (+1)
   \       0x5E   0x2E00             CMP      R6,#+0
   \       0x60   0xD10B             BNE.N    ??OSQPend_7
   \       0x62   0x200A             MOVS     R0,#+10
   \       0x64   0x7038             STRB     R0,[R7, #+0]
   \       0x66   0x.... 0x....      LDR.W    R0,??DataTable6
   \       0x6A   0x6078             STR      R0,[R7, #+4]
   \       0x6C   0xF240 0x1063      MOVW     R0,#+355
   \       0x70   0x60B8             STR      R0,[R7, #+8]
   \       0x72   0x.... 0x....      LDR.W    R0,??DataTable6_7
   \       0x76   0x60F8             STR      R0,[R7, #+12]
   \                     ??OSQPend_8: (+1)
   \       0x78   0xE7FE             B.N      ??OSQPend_8
    356          
    357            //                                                               Validate 'opt'
    358            OS_ASSERT_DBG_ERR_SET(((opt == OS_OPT_PEND_BLOCKING)
    359                                   || (opt == OS_OPT_PEND_NON_BLOCKING)), *p_err, RTOS_ERR_INVALID_ARG, DEF_NULL);
   \                     ??OSQPend_7: (+1)
   \       0x7A   0x4650             MOV      R0,R10
   \       0x7C   0xB280             UXTH     R0,R0
   \       0x7E   0x2800             CMP      R0,#+0
   \       0x80   0xD004             BEQ.N    ??OSQPend_9
   \       0x82   0x4650             MOV      R0,R10
   \       0x84   0xB280             UXTH     R0,R0
   \       0x86   0xF5B0 0x4F00      CMP      R0,#+32768
   \       0x8A   0xD101             BNE.N    ??OSQPend_10
   \                     ??OSQPend_9: (+1)
   \       0x8C   0x2001             MOVS     R0,#+1
   \       0x8E   0xE000             B.N      ??OSQPend_11
   \                     ??OSQPend_10: (+1)
   \       0x90   0x2000             MOVS     R0,#+0
   \                     ??OSQPend_11: (+1)
   \       0x92   0xB2C0             UXTB     R0,R0
   \       0x94   0x2800             CMP      R0,#+0
   \       0x96   0xD10B             BNE.N    ??OSQPend_12
   \       0x98   0x2008             MOVS     R0,#+8
   \       0x9A   0x7038             STRB     R0,[R7, #+0]
   \       0x9C   0x.... 0x....      LDR.W    R0,??DataTable6
   \       0xA0   0x6078             STR      R0,[R7, #+4]
   \       0xA2   0xF240 0x1067      MOVW     R0,#+359
   \       0xA6   0x60B8             STR      R0,[R7, #+8]
   \       0xA8   0x.... 0x....      LDR.W    R0,??DataTable6_7
   \       0xAC   0x60F8             STR      R0,[R7, #+12]
   \                     ??OSQPend_13: (+1)
   \       0xAE   0xE7FE             B.N      ??OSQPend_13
    360          
    361            //                                                               Validate object type
    362            OS_ASSERT_DBG_ERR_SET((p_q->Type == OS_OBJ_TYPE_Q), *p_err, RTOS_ERR_INVALID_TYPE, DEF_NULL);
   \                     ??OSQPend_12: (+1)
   \       0xB0   0x6829             LDR      R1,[R5, #+0]
   \       0xB2   0x.... 0x....      LDR.W    R0,??DataTable6_3
   \       0xB6   0x4281             CMP      R1,R0
   \       0xB8   0xD00B             BEQ.N    ??OSQPend_14
   \       0xBA   0x200C             MOVS     R0,#+12
   \       0xBC   0x7038             STRB     R0,[R7, #+0]
   \       0xBE   0x.... 0x....      LDR.W    R0,??DataTable6
   \       0xC2   0x6078             STR      R0,[R7, #+4]
   \       0xC4   0xF44F 0x70B5      MOV      R0,#+362
   \       0xC8   0x60B8             STR      R0,[R7, #+8]
   \       0xCA   0x.... 0x....      LDR.W    R0,??DataTable6_7
   \       0xCE   0x60F8             STR      R0,[R7, #+12]
   \                     ??OSQPend_15: (+1)
   \       0xD0   0xE7FE             B.N      ??OSQPend_15
    363          
    364            //                                                               Not allowed to pend in atomic/critical sections
    365            OS_ASSERT_DBG_ERR_SET(( (opt & OS_OPT_PEND_NON_BLOCKING)
    366                                    || !CORE_IrqIsDisabled()), *p_err, RTOS_ERR_INVALID_STATE, DEF_NULL);
   \                     ??OSQPend_14: (+1)
   \       0xD2   0xEA5F 0x400A      LSLS     R0,R10,#+16
   \       0xD6   0xD403             BMI.N    ??OSQPend_16
   \       0xD8   0x.... 0x....      BL       CORE_IrqIsDisabled
   \       0xDC   0x2800             CMP      R0,#+0
   \       0xDE   0xD101             BNE.N    ??OSQPend_17
   \                     ??OSQPend_16: (+1)
   \       0xE0   0x2001             MOVS     R0,#+1
   \       0xE2   0xE000             B.N      ??OSQPend_18
   \                     ??OSQPend_17: (+1)
   \       0xE4   0x2000             MOVS     R0,#+0
   \                     ??OSQPend_18: (+1)
   \       0xE6   0xB2C0             UXTB     R0,R0
   \       0xE8   0x2800             CMP      R0,#+0
   \       0xEA   0xD10B             BNE.N    ??OSQPend_19
   \       0xEC   0x201F             MOVS     R0,#+31
   \       0xEE   0x7038             STRB     R0,[R7, #+0]
   \       0xF0   0x.... 0x....      LDR.W    R0,??DataTable6
   \       0xF4   0x6078             STR      R0,[R7, #+4]
   \       0xF6   0xF44F 0x70B7      MOV      R0,#+366
   \       0xFA   0x60B8             STR      R0,[R7, #+8]
   \       0xFC   0x.... 0x....      LDR.W    R0,??DataTable6_7
   \      0x100   0x60F8             STR      R0,[R7, #+12]
   \                     ??OSQPend_20: (+1)
   \      0x102   0xE7FE             B.N      ??OSQPend_20
    367          
    368            //                                                               Make sure kernel is running.
    369            if (OSRunning != OS_STATE_OS_RUNNING) {
   \                     ??OSQPend_19: (+1)
   \      0x104   0x.... 0x....      LDR.W    R0,??DataTable6_5
   \      0x108   0x7800             LDRB     R0,[R0, #+0]
   \      0x10A   0x2801             CMP      R0,#+1
   \      0x10C   0xD00C             BEQ.N    ??OSQPend_21
    370              RTOS_ERR_SET(*p_err, RTOS_ERR_NOT_READY);
   \      0x10E   0x2002             MOVS     R0,#+2
   \      0x110   0x7038             STRB     R0,[R7, #+0]
   \      0x112   0x.... 0x....      LDR.W    R0,??DataTable6
   \      0x116   0x6078             STR      R0,[R7, #+4]
   \      0x118   0xF44F 0x70B9      MOV      R0,#+370
   \      0x11C   0x60B8             STR      R0,[R7, #+8]
   \      0x11E   0x.... 0x....      LDR.W    R0,??DataTable6_7
   \      0x122   0x60F8             STR      R0,[R7, #+12]
    371              return (DEF_NULL);
   \      0x124   0x2000             MOVS     R0,#+0
   \      0x126   0xE0AA             B.N      ??OSQPend_22
    372            }
    373          
    374            if (p_ts != DEF_NULL) {
   \                     ??OSQPend_21: (+1)
   \      0x128   0x2C00             CMP      R4,#+0
   \      0x12A   0xD001             BEQ.N    ??OSQPend_23
    375              *p_ts = 0u;                                                 // Initialize the returned timestamp
   \      0x12C   0x2000             MOVS     R0,#+0
   \      0x12E   0x6020             STR      R0,[R4, #+0]
    376            }
    377          
    378            CORE_ENTER_ATOMIC();
   \                     ??OSQPend_23: (+1)
   \      0x130   0x.... 0x....      BL       CORE_EnterAtomic
   \      0x134   0x4680             MOV      R8,R0
    379            p_void = OS_MsgQGet(&p_q->MsgQ,                               // Any message waiting in the message queue?
    380                                p_msg_size,
    381                                p_ts,
    382                                p_err);
   \      0x136   0x003B             MOVS     R3,R7
   \      0x138   0x0022             MOVS     R2,R4
   \      0x13A   0x0031             MOVS     R1,R6
   \      0x13C   0xF115 0x000C      ADDS     R0,R5,#+12
   \      0x140   0x.... 0x....      BL       OS_MsgQGet
   \      0x144   0x4681             MOV      R9,R0
    383            if (RTOS_ERR_CODE_GET(*p_err) == RTOS_ERR_NONE) {
   \      0x146   0x7838             LDRB     R0,[R7, #+0]
   \      0x148   0x2800             CMP      R0,#+0
   \      0x14A   0xD104             BNE.N    ??OSQPend_24
    384              CORE_EXIT_ATOMIC();
   \      0x14C   0x4640             MOV      R0,R8
   \      0x14E   0x.... 0x....      BL       CORE_ExitAtomic
    385              OS_TRACE_Q_PEND(p_q);
    386              OS_TRACE_Q_PEND_EXIT(RTOS_ERR_CODE_GET(*p_err));
    387              return (p_void);                                            // Yes, Return message received
   \      0x152   0x4648             MOV      R0,R9
   \      0x154   0xE093             B.N      ??OSQPend_22
    388            }
    389          
    390            if ((opt & OS_OPT_PEND_NON_BLOCKING) != 0u) {                 // Caller wants to block if not available?
   \                     ??OSQPend_24: (+1)
   \      0x156   0x4650             MOV      R0,R10
   \      0x158   0xB280             UXTH     R0,R0
   \      0x15A   0x0400             LSLS     R0,R0,#+16
   \      0x15C   0xD50F             BPL.N    ??OSQPend_25
    391              CORE_EXIT_ATOMIC();
   \      0x15E   0x4640             MOV      R0,R8
   \      0x160   0x.... 0x....      BL       CORE_ExitAtomic
    392              RTOS_ERR_SET(*p_err, RTOS_ERR_WOULD_BLOCK);                 // No
   \      0x164   0x201D             MOVS     R0,#+29
   \      0x166   0x7038             STRB     R0,[R7, #+0]
   \      0x168   0x.... 0x....      LDR.W    R0,??DataTable6
   \      0x16C   0x6078             STR      R0,[R7, #+4]
   \      0x16E   0xF44F 0x70C4      MOV      R0,#+392
   \      0x172   0x60B8             STR      R0,[R7, #+8]
   \      0x174   0x.... 0x....      LDR.W    R0,??DataTable6_7
   \      0x178   0x60F8             STR      R0,[R7, #+12]
    393              OS_TRACE_Q_PEND_FAILED(p_q);
    394              OS_TRACE_Q_PEND_EXIT(RTOS_ERR_CODE_GET(*p_err));
    395              return (DEF_NULL);
   \      0x17A   0x2000             MOVS     R0,#+0
   \      0x17C   0xE07F             B.N      ??OSQPend_22
    396            } else {
    397              if (OSSchedLockNestingCtr > 0u) {                           // Can't pend when the scheduler is locked
   \                     ??OSQPend_25: (+1)
   \      0x17E   0x.... 0x....      LDR.W    R0,??DataTable6_8
   \      0x182   0x7800             LDRB     R0,[R0, #+0]
   \      0x184   0x2800             CMP      R0,#+0
   \      0x186   0xD00F             BEQ.N    ??OSQPend_26
    398                CORE_EXIT_ATOMIC();
   \      0x188   0x4640             MOV      R0,R8
   \      0x18A   0x.... 0x....      BL       CORE_ExitAtomic
    399                RTOS_ERR_SET(*p_err, RTOS_ERR_OS_SCHED_LOCKED);
   \      0x18E   0x202D             MOVS     R0,#+45
   \      0x190   0x7038             STRB     R0,[R7, #+0]
   \      0x192   0x.... 0x....      LDR.W    R0,??DataTable6
   \      0x196   0x6078             STR      R0,[R7, #+4]
   \      0x198   0xF240 0x108F      MOVW     R0,#+399
   \      0x19C   0x60B8             STR      R0,[R7, #+8]
   \      0x19E   0x.... 0x....      LDR.W    R0,??DataTable6_7
   \      0x1A2   0x60F8             STR      R0,[R7, #+12]
    400                OS_TRACE_Q_PEND_FAILED(p_q);
    401                OS_TRACE_Q_PEND_EXIT(RTOS_ERR_CODE_GET(*p_err));
    402                return (DEF_NULL);
   \      0x1A4   0x2000             MOVS     R0,#+0
   \      0x1A6   0xE06A             B.N      ??OSQPend_22
    403              }
    404            }
    405          
    406            OS_Pend((OS_PEND_OBJ *)((void *)p_q),                         // Block task pending on Message Queue
    407                    OS_TASK_PEND_ON_Q,
    408                    timeout);
   \                     ??OSQPend_26: (+1)
   \      0x1A8   0x9A00             LDR      R2,[SP, #+0]
   \      0x1AA   0x2105             MOVS     R1,#+5
   \      0x1AC   0x0028             MOVS     R0,R5
   \      0x1AE   0x.... 0x....      BL       OS_Pend
    409            CORE_EXIT_ATOMIC();
   \      0x1B2   0x4640             MOV      R0,R8
   \      0x1B4   0x.... 0x....      BL       CORE_ExitAtomic
    410            OS_TRACE_Q_PEND_BLOCK(p_q);
    411            OSSched();                                                    // Find the next highest priority task ready to run
   \      0x1B8   0x.... 0x....      BL       OSSched
    412          
    413            CORE_ENTER_ATOMIC();
   \      0x1BC   0x.... 0x....      BL       CORE_EnterAtomic
   \      0x1C0   0x4683             MOV      R11,R0
    414            switch (OSTCBCurPtr->PendStatus) {
   \      0x1C2   0x.... 0x....      LDR.W    R0,??DataTable6_9
   \      0x1C6   0x6801             LDR      R1,[R0, #+0]
   \      0x1C8   0xF891 0x1025      LDRB     R1,[R1, #+37]
   \      0x1CC   0x2900             CMP      R1,#+0
   \      0x1CE   0xD005             BEQ.N    ??OSQPend_27
   \      0x1D0   0x2902             CMP      R1,#+2
   \      0x1D2   0xD03A             BEQ.N    ??OSQPend_28
   \      0x1D4   0xD315             BCC.N    ??OSQPend_29
   \      0x1D6   0x2903             CMP      R1,#+3
   \      0x1D8   0xD023             BEQ.N    ??OSQPend_30
   \      0x1DA   0xE046             B.N      ??OSQPend_31
    415              case OS_STATUS_PEND_OK:                                     // Extract message from TCB (Put there by Post)
    416                p_void = OSTCBCurPtr->MsgPtr;
   \                     ??OSQPend_27: (+1)
   \      0x1DC   0x6801             LDR      R1,[R0, #+0]
   \      0x1DE   0xF8D1 0x8064      LDR      R8,[R1, #+100]
    417                *p_msg_size = OSTCBCurPtr->MsgSize;
   \      0x1E2   0x6800             LDR      R0,[R0, #+0]
   \      0x1E4   0xF8B0 0x0068      LDRH     R0,[R0, #+104]
   \      0x1E8   0x8030             STRH     R0,[R6, #+0]
    418          #if (OS_CFG_TS_EN == DEF_ENABLED)
    419                if (p_ts != DEF_NULL) {
    420                  *p_ts = OSTCBCurPtr->TS;
    421                }
    422          #endif
    423                OS_TRACE_Q_PEND(p_q);
    424                RTOS_ERR_SET(*p_err, RTOS_ERR_NONE);
   \      0x1EA   0x2000             MOVS     R0,#+0
   \      0x1EC   0x7038             STRB     R0,[R7, #+0]
   \      0x1EE   0x.... 0x....      LDR.W    R0,??DataTable6
   \      0x1F2   0x6078             STR      R0,[R7, #+4]
   \      0x1F4   0xF44F 0x70D4      MOV      R0,#+424
   \      0x1F8   0x60B8             STR      R0,[R7, #+8]
   \      0x1FA   0x.... 0x....      LDR.W    R0,??DataTable6_7
   \      0x1FE   0x60F8             STR      R0,[R7, #+12]
    425                break;
   \      0x200   0xE039             B.N      ??OSQPend_32
    426          
    427              case OS_STATUS_PEND_ABORT:                                  // Indicate that we aborted
    428                p_void = DEF_NULL;
   \                     ??OSQPend_29: (+1)
   \      0x202   0xF05F 0x0800      MOVS     R8,#+0
    429                *p_msg_size = 0u;
   \      0x206   0x2000             MOVS     R0,#+0
   \      0x208   0x8030             STRH     R0,[R6, #+0]
    430          #if (OS_CFG_TS_EN == DEF_ENABLED)
    431                if (p_ts != DEF_NULL) {
    432                  *p_ts = OSTCBCurPtr->TS;
    433                }
    434          #endif
    435                OS_TRACE_Q_PEND_FAILED(p_q);
    436                RTOS_ERR_SET(*p_err, RTOS_ERR_ABORT);
   \      0x20A   0x2021             MOVS     R0,#+33
   \      0x20C   0x7038             STRB     R0,[R7, #+0]
   \      0x20E   0x.... 0x....      LDR.W    R0,??DataTable6
   \      0x212   0x6078             STR      R0,[R7, #+4]
   \      0x214   0xF44F 0x70DA      MOV      R0,#+436
   \      0x218   0x60B8             STR      R0,[R7, #+8]
   \      0x21A   0x.... 0x....      LDR.W    R0,??DataTable6_7
   \      0x21E   0x60F8             STR      R0,[R7, #+12]
    437                break;
   \      0x220   0xE029             B.N      ??OSQPend_32
    438          
    439              case OS_STATUS_PEND_TIMEOUT:                                // Indicate that we didn't get event within TO
    440                p_void = DEF_NULL;
   \                     ??OSQPend_30: (+1)
   \      0x222   0xF05F 0x0800      MOVS     R8,#+0
    441                *p_msg_size = 0u;
   \      0x226   0x2000             MOVS     R0,#+0
   \      0x228   0x8030             STRH     R0,[R6, #+0]
    442                if (p_ts != DEF_NULL) {
   \      0x22A   0x2C00             CMP      R4,#+0
   \      0x22C   0xD001             BEQ.N    ??OSQPend_33
    443                  *p_ts = 0u;
   \      0x22E   0x2000             MOVS     R0,#+0
   \      0x230   0x6020             STR      R0,[R4, #+0]
    444                }
    445                OS_TRACE_Q_PEND_FAILED(p_q);
    446                RTOS_ERR_SET(*p_err, RTOS_ERR_TIMEOUT);
   \                     ??OSQPend_33: (+1)
   \      0x232   0x2022             MOVS     R0,#+34
   \      0x234   0x7038             STRB     R0,[R7, #+0]
   \      0x236   0x.... 0x....      LDR.W    R0,??DataTable6
   \      0x23A   0x6078             STR      R0,[R7, #+4]
   \      0x23C   0xF44F 0x70DF      MOV      R0,#+446
   \      0x240   0x60B8             STR      R0,[R7, #+8]
   \      0x242   0x.... 0x....      LDR.W    R0,??DataTable6_7
   \      0x246   0x60F8             STR      R0,[R7, #+12]
    447                break;
   \      0x248   0xE015             B.N      ??OSQPend_32
    448          
    449              case OS_STATUS_PEND_DEL:                                    // Indicate that object pended on has been deleted
    450                p_void = DEF_NULL;
   \                     ??OSQPend_28: (+1)
   \      0x24A   0xF05F 0x0800      MOVS     R8,#+0
    451                *p_msg_size = 0u;
   \      0x24E   0x2000             MOVS     R0,#+0
   \      0x250   0x8030             STRH     R0,[R6, #+0]
    452          #if (OS_CFG_TS_EN == DEF_ENABLED)
    453                if (p_ts != DEF_NULL) {
    454                  *p_ts = OSTCBCurPtr->TS;
    455                }
    456          #endif
    457                OS_TRACE_Q_PEND_FAILED(p_q);
    458                RTOS_ERR_SET(*p_err, RTOS_ERR_OS_OBJ_DEL);
   \      0x252   0x2031             MOVS     R0,#+49
   \      0x254   0x7038             STRB     R0,[R7, #+0]
   \      0x256   0x.... 0x....      LDR.W    R0,??DataTable6
   \      0x25A   0x6078             STR      R0,[R7, #+4]
   \      0x25C   0xF44F 0x70E5      MOV      R0,#+458
   \      0x260   0x60B8             STR      R0,[R7, #+8]
   \      0x262   0x.... 0x....      LDR.W    R0,??DataTable6_7
   \      0x266   0x60F8             STR      R0,[R7, #+12]
    459                break;
   \      0x268   0xE005             B.N      ??OSQPend_32
    460          
    461              default:
    462                p_void = DEF_NULL;
   \                     ??OSQPend_31: (+1)
   \      0x26A   0xF05F 0x0800      MOVS     R8,#+0
    463                *p_msg_size = 0u;
   \      0x26E   0x2000             MOVS     R0,#+0
   \      0x270   0x8030             STRH     R0,[R6, #+0]
    464                OS_TRACE_Q_PEND_FAILED(p_q);
    465                RTOS_CRITICAL_FAIL_EXEC(RTOS_ERR_OS, DEF_NULL);
   \      0x272   0x.... 0x....      BL       CPU_SW_Exception
    466            }
    467            CORE_EXIT_ATOMIC();
   \                     ??OSQPend_32: (+1)
   \      0x276   0x4658             MOV      R0,R11
   \      0x278   0x.... 0x....      BL       CORE_ExitAtomic
    468            OS_TRACE_Q_PEND_EXIT(RTOS_ERR_CODE_GET(*p_err));
    469            return (p_void);
   \      0x27C   0x4640             MOV      R0,R8
   \                     ??OSQPend_22: (+1)
   \      0x27E   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}
    470          }
    471          
    472          /****************************************************************************************************//**
    473           *                                               OSQPendAbort()
    474           *
    475           * @brief    Aborts and readies any tasks currently waiting on a queue. Use this function to
    476           *           fault-abort the wait on the queue, rather than the normal signaling of the queue via
    477           *           OSQPost().
    478           *
    479           * @param    p_q     Pointer to the message queue.
    480           *
    481           * @param    opt     Determines the type of ABORT performed:
    482           *                       - OS_OPT_PEND_ABORT_1     ABORT wait for a single task (HPT) waiting on the
    483           *                                                 message queue.
    484           *                       - OS_OPT_PEND_ABORT_ALL   ABORT wait for ALL tasks that are  waiting on the
    485           *                                                 message queue.
    486           *                       - OS_OPT_POST_NO_SCHED    Do not call the scheduler.
    487           *
    488           * @param    p_err   Pointer to the variable that will receive one of the following error
    489           *                   code(s) from this function:
    490           *                       - RTOS_ERR_NONE
    491           *                       - RTOS_ERR_NONE_WAITING
    492           *                       - RTOS_ERR_NOT_READY
    493           *
    494           * @return   == 0    If no tasks were waiting on the queue, or upon error.
    495           *           >  0    If one or more tasks waiting on the queue are now readied and informed.
    496           *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    497          OS_OBJ_QTY OSQPendAbort(OS_Q     *p_q,
    498                                  OS_OPT   opt,
    499                                  RTOS_ERR *p_err)
    500          {
   \                     OSQPendAbort: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x468B             MOV      R11,R1
   \        0x8   0x0015             MOVS     R5,R2
    501            OS_PEND_LIST *p_pend_list;
    502            OS_TCB       *p_tcb;
    503            CPU_TS       ts;
    504            OS_OBJ_QTY   nbr_tasks;
    505            CORE_DECLARE_IRQ_STATE;
    506          
    507            OS_ASSERT_DBG_ERR_PTR_VALIDATE(p_err, 0u);
   \        0xA   0x2D00             CMP      R5,#+0
   \        0xC   0xD101             BNE.N    ??OSQPendAbort_0
   \        0xE   0x.... 0x....      BL       CPU_SW_Exception
    508          
    509            //                                                               Not allowed to call from an ISR
    510            OS_ASSERT_DBG_ERR_SET((!CORE_InIrqContext()), *p_err, RTOS_ERR_ISR, 0u);
   \                     ??OSQPendAbort_0: (+1)
   \       0x12   0x.... 0x....      BL       CORE_InIrqContext
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD101             BNE.N    ??OSQPendAbort_1
   \       0x1A   0x2001             MOVS     R0,#+1
   \       0x1C   0xE000             B.N      ??OSQPendAbort_2
   \                     ??OSQPendAbort_1: (+1)
   \       0x1E   0x2000             MOVS     R0,#+0
   \                     ??OSQPendAbort_2: (+1)
   \       0x20   0xB2C0             UXTB     R0,R0
   \       0x22   0x2800             CMP      R0,#+0
   \       0x24   0xD109             BNE.N    ??OSQPendAbort_3
   \       0x26   0x2020             MOVS     R0,#+32
   \       0x28   0x7028             STRB     R0,[R5, #+0]
   \       0x2A   0x....             LDR.N    R0,??DataTable6
   \       0x2C   0x6068             STR      R0,[R5, #+4]
   \       0x2E   0xF44F 0x70FF      MOV      R0,#+510
   \       0x32   0x60A8             STR      R0,[R5, #+8]
   \       0x34   0x....             LDR.N    R0,??DataTable6_10
   \       0x36   0x60E8             STR      R0,[R5, #+12]
   \                     ??OSQPendAbort_4: (+1)
   \       0x38   0xE7FE             B.N      ??OSQPendAbort_4
    511          
    512            //                                                               Validate 'p_q'
    513            OS_ASSERT_DBG_ERR_SET((p_q != DEF_NULL), *p_err, RTOS_ERR_NULL_PTR, 0u);
   \                     ??OSQPendAbort_3: (+1)
   \       0x3A   0x2C00             CMP      R4,#+0
   \       0x3C   0xD109             BNE.N    ??OSQPendAbort_5
   \       0x3E   0x200A             MOVS     R0,#+10
   \       0x40   0x7028             STRB     R0,[R5, #+0]
   \       0x42   0x....             LDR.N    R0,??DataTable6
   \       0x44   0x6068             STR      R0,[R5, #+4]
   \       0x46   0xF240 0x2001      MOVW     R0,#+513
   \       0x4A   0x60A8             STR      R0,[R5, #+8]
   \       0x4C   0x....             LDR.N    R0,??DataTable6_10
   \       0x4E   0x60E8             STR      R0,[R5, #+12]
   \                     ??OSQPendAbort_6: (+1)
   \       0x50   0xE7FE             B.N      ??OSQPendAbort_6
    514          
    515            //                                                               Validate 'opt'
    516            OS_ASSERT_DBG_ERR_SET(((opt == OS_OPT_PEND_ABORT_1)
    517                                   || (opt == OS_OPT_PEND_ABORT_ALL)
    518                                   || (opt == (OS_OPT_PEND_ABORT_1   | OS_OPT_POST_NO_SCHED))
    519                                   || (opt == (OS_OPT_PEND_ABORT_ALL | OS_OPT_POST_NO_SCHED))), *p_err, RTOS_ERR_INVALID_ARG, 0u);
   \                     ??OSQPendAbort_5: (+1)
   \       0x52   0x4658             MOV      R0,R11
   \       0x54   0xB280             UXTH     R0,R0
   \       0x56   0x2800             CMP      R0,#+0
   \       0x58   0xD00E             BEQ.N    ??OSQPendAbort_7
   \       0x5A   0x4658             MOV      R0,R11
   \       0x5C   0xB280             UXTH     R0,R0
   \       0x5E   0xF5B0 0x7F80      CMP      R0,#+256
   \       0x62   0xD009             BEQ.N    ??OSQPendAbort_7
   \       0x64   0x4658             MOV      R0,R11
   \       0x66   0xB280             UXTH     R0,R0
   \       0x68   0xF5B0 0x4F00      CMP      R0,#+32768
   \       0x6C   0xD004             BEQ.N    ??OSQPendAbort_7
   \       0x6E   0x4658             MOV      R0,R11
   \       0x70   0xB280             UXTH     R0,R0
   \       0x72   0xF5B0 0x4F01      CMP      R0,#+33024
   \       0x76   0xD101             BNE.N    ??OSQPendAbort_8
   \                     ??OSQPendAbort_7: (+1)
   \       0x78   0x2001             MOVS     R0,#+1
   \       0x7A   0xE000             B.N      ??OSQPendAbort_9
   \                     ??OSQPendAbort_8: (+1)
   \       0x7C   0x2000             MOVS     R0,#+0
   \                     ??OSQPendAbort_9: (+1)
   \       0x7E   0xB2C0             UXTB     R0,R0
   \       0x80   0x2800             CMP      R0,#+0
   \       0x82   0xD109             BNE.N    ??OSQPendAbort_10
   \       0x84   0x2008             MOVS     R0,#+8
   \       0x86   0x7028             STRB     R0,[R5, #+0]
   \       0x88   0x....             LDR.N    R0,??DataTable6
   \       0x8A   0x6068             STR      R0,[R5, #+4]
   \       0x8C   0xF240 0x2007      MOVW     R0,#+519
   \       0x90   0x60A8             STR      R0,[R5, #+8]
   \       0x92   0x....             LDR.N    R0,??DataTable6_10
   \       0x94   0x60E8             STR      R0,[R5, #+12]
   \                     ??OSQPendAbort_11: (+1)
   \       0x96   0xE7FE             B.N      ??OSQPendAbort_11
    520          
    521            //                                                               Validate object type
    522            OS_ASSERT_DBG_ERR_SET((p_q->Type == OS_OBJ_TYPE_Q), *p_err, RTOS_ERR_INVALID_TYPE, 0u);
   \                     ??OSQPendAbort_10: (+1)
   \       0x98   0x6821             LDR      R1,[R4, #+0]
   \       0x9A   0x....             LDR.N    R0,??DataTable6_3
   \       0x9C   0x4281             CMP      R1,R0
   \       0x9E   0xD009             BEQ.N    ??OSQPendAbort_12
   \       0xA0   0x200C             MOVS     R0,#+12
   \       0xA2   0x7028             STRB     R0,[R5, #+0]
   \       0xA4   0x....             LDR.N    R0,??DataTable6
   \       0xA6   0x6068             STR      R0,[R5, #+4]
   \       0xA8   0xF240 0x200A      MOVW     R0,#+522
   \       0xAC   0x60A8             STR      R0,[R5, #+8]
   \       0xAE   0x....             LDR.N    R0,??DataTable6_10
   \       0xB0   0x60E8             STR      R0,[R5, #+12]
   \                     ??OSQPendAbort_13: (+1)
   \       0xB2   0xE7FE             B.N      ??OSQPendAbort_13
    523          
    524            //                                                               Make sure kernel is running.
    525            if (OSRunning != OS_STATE_OS_RUNNING) {
   \                     ??OSQPendAbort_12: (+1)
   \       0xB4   0x....             LDR.N    R0,??DataTable6_5
   \       0xB6   0x7800             LDRB     R0,[R0, #+0]
   \       0xB8   0x2801             CMP      R0,#+1
   \       0xBA   0xD00A             BEQ.N    ??OSQPendAbort_14
    526              RTOS_ERR_SET(*p_err, RTOS_ERR_NOT_READY);
   \       0xBC   0x2002             MOVS     R0,#+2
   \       0xBE   0x7028             STRB     R0,[R5, #+0]
   \       0xC0   0x....             LDR.N    R0,??DataTable6
   \       0xC2   0x6068             STR      R0,[R5, #+4]
   \       0xC4   0xF240 0x200E      MOVW     R0,#+526
   \       0xC8   0x60A8             STR      R0,[R5, #+8]
   \       0xCA   0x....             LDR.N    R0,??DataTable6_10
   \       0xCC   0x60E8             STR      R0,[R5, #+12]
    527              return (0u);
   \       0xCE   0x2000             MOVS     R0,#+0
   \       0xD0   0xE041             B.N      ??OSQPendAbort_15
    528            }
    529          
    530            CORE_ENTER_ATOMIC();
   \                     ??OSQPendAbort_14: (+1)
   \       0xD2   0x.... 0x....      BL       CORE_EnterAtomic
   \       0xD6   0x0007             MOVS     R7,R0
    531            p_pend_list = &p_q->PendList;
   \       0xD8   0xF114 0x0804      ADDS     R8,R4,#+4
    532            if (p_pend_list->HeadPtr == DEF_NULL) {                       // Any task waiting on queue?
   \       0xDC   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \       0xE0   0x2800             CMP      R0,#+0
   \       0xE2   0xD10D             BNE.N    ??OSQPendAbort_16
    533              CORE_EXIT_ATOMIC();                                         // No
   \       0xE4   0x0038             MOVS     R0,R7
   \       0xE6   0x.... 0x....      BL       CORE_ExitAtomic
    534              RTOS_ERR_SET(*p_err, RTOS_ERR_NONE_WAITING);
   \       0xEA   0x2024             MOVS     R0,#+36
   \       0xEC   0x7028             STRB     R0,[R5, #+0]
   \       0xEE   0x....             LDR.N    R0,??DataTable6
   \       0xF0   0x6068             STR      R0,[R5, #+4]
   \       0xF2   0xF240 0x2016      MOVW     R0,#+534
   \       0xF6   0x60A8             STR      R0,[R5, #+8]
   \       0xF8   0x....             LDR.N    R0,??DataTable6_10
   \       0xFA   0x60E8             STR      R0,[R5, #+12]
    535              return (0u);
   \       0xFC   0x2000             MOVS     R0,#+0
   \       0xFE   0xE02A             B.N      ??OSQPendAbort_15
    536            }
    537          
    538            nbr_tasks = 0u;
   \                     ??OSQPendAbort_16: (+1)
   \      0x100   0xF05F 0x0900      MOVS     R9,#+0
    539          #if (OS_CFG_TS_EN == DEF_ENABLED)
    540            ts = OS_TS_GET();                                             // Get local time stamp so all tasks get the same time
    541          #else
    542            ts = 0u;
   \      0x104   0xF05F 0x0A00      MOVS     R10,#+0
    543          #endif
    544            while (p_pend_list->HeadPtr != DEF_NULL) {
   \                     ??OSQPendAbort_17: (+1)
   \      0x108   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \      0x10C   0x2800             CMP      R0,#+0
   \      0x10E   0xD00E             BEQ.N    ??OSQPendAbort_18
    545              p_tcb = p_pend_list->HeadPtr;
   \      0x110   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \      0x114   0x0006             MOVS     R6,R0
    546              OS_PendAbort(p_tcb,
    547                           ts,
    548                           OS_STATUS_PEND_ABORT);
   \      0x116   0x2201             MOVS     R2,#+1
   \      0x118   0x4651             MOV      R1,R10
   \      0x11A   0x0030             MOVS     R0,R6
   \      0x11C   0x.... 0x....      BL       OS_PendAbort
    549              nbr_tasks++;
   \      0x120   0xF119 0x0901      ADDS     R9,R9,#+1
    550              if (opt != OS_OPT_PEND_ABORT_ALL) {                         // Pend abort all tasks waiting?
   \      0x124   0x4658             MOV      R0,R11
   \      0x126   0xB280             UXTH     R0,R0
   \      0x128   0xF5B0 0x7F80      CMP      R0,#+256
   \      0x12C   0xD0EC             BEQ.N    ??OSQPendAbort_17
    551                break;                                                    // No
    552              }
    553            }
    554            CORE_EXIT_ATOMIC();
   \                     ??OSQPendAbort_18: (+1)
   \      0x12E   0x0038             MOVS     R0,R7
   \      0x130   0x.... 0x....      BL       CORE_ExitAtomic
    555          
    556            if ((opt & OS_OPT_POST_NO_SCHED) == 0u) {
   \      0x134   0x4658             MOV      R0,R11
   \      0x136   0xB280             UXTH     R0,R0
   \      0x138   0x0400             LSLS     R0,R0,#+16
   \      0x13A   0xD401             BMI.N    ??OSQPendAbort_19
    557              OSSched();                                                  // Run the scheduler
   \      0x13C   0x.... 0x....      BL       OSSched
    558            }
    559          
    560            RTOS_ERR_SET(*p_err, RTOS_ERR_NONE);
   \                     ??OSQPendAbort_19: (+1)
   \      0x140   0x2000             MOVS     R0,#+0
   \      0x142   0x7028             STRB     R0,[R5, #+0]
   \      0x144   0x....             LDR.N    R0,??DataTable6
   \      0x146   0x6068             STR      R0,[R5, #+4]
   \      0x148   0xF44F 0x700C      MOV      R0,#+560
   \      0x14C   0x60A8             STR      R0,[R5, #+8]
   \      0x14E   0x....             LDR.N    R0,??DataTable6_10
   \      0x150   0x60E8             STR      R0,[R5, #+12]
    561            return (nbr_tasks);
   \      0x152   0x4648             MOV      R0,R9
   \      0x154   0xB280             UXTH     R0,R0
   \                     ??OSQPendAbort_15: (+1)
   \      0x156   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}
    562          }
    563          
    564          /****************************************************************************************************//**
    565           *                                                   OSQPost()
    566           *
    567           * @brief    Sends a message to a queue. With the 'opt' argument, you can specify
    568           *           if the message is broadcast to all waiting tasks and/or if you post the message
    569           *           to the front of the queue (LIFO) or normally (FIFO) at the end of the queue.
    570           *
    571           * @param    p_q         Pointer to a message queue.
    572           *
    573           * @param    p_void      Pointer to the message to send.
    574           *
    575           * @param    msg_size    Specifies the size of the message (in bytes).
    576           *
    577           * @param    opt         Determines the type of POST performed
    578           *                           - Types of POST :
    579           *                           - OS_OPT_POST_ALL         POST to ALL tasks that are waiting on the queue.
    580           *                                                     This option can be added to either
    581           *                                                     OS_OPT_POST_FIFO or OS_OPT_POST_LIFO.
    582           *                           - OS_OPT_POST_FIFO        POST message to end of queue (FIFO) and wake up
    583           *                                                     a single waiting task.
    584           *                           - OS_OPT_POST_LIFO        POST message to the front of the queue (LIFO) and
    585           *                                                     wake up a single waiting task.
    586           *                           - OS_OPT_POST_NO_SCHED    Do not call the scheduler.
    587           *                               - OS_OPT_POST_NO_SCHED can be added (OR'd) with other options.
    588           *                               - OS_OPT_POST_ALL      can be added (OR'd) with other options.
    589           *                               - The possible combinations of options are:
    590           *                                   - OS_OPT_POST_FIFO
    591           *                                   - OS_OPT_POST_LIFO
    592           *                                   - OS_OPT_POST_FIFO + OS_OPT_POST_ALL
    593           *                                   - OS_OPT_POST_LIFO + OS_OPT_POST_ALL
    594           *                                   - OS_OPT_POST_FIFO + OS_OPT_POST_NO_SCHED
    595           *                                   - OS_OPT_POST_LIFO + OS_OPT_POST_NO_SCHED
    596           *                                   - OS_OPT_POST_FIFO + OS_OPT_POST_ALL + OS_OPT_POST_NO_SCHED
    597           *                                   - OS_OPT_POST_LIFO + OS_OPT_POST_ALL + OS_OPT_POST_NO_SCHED
    598           *
    599           * @param    p_err       Pointer to the variable that will receive one of the following error
    600           *                       code(s) from this function:
    601           *                           - RTOS_ERR_NONE
    602           *                           - RTOS_ERR_WOULD_OVF
    603           *                           - RTOS_ERR_NO_MORE_RSRC
    604           *                           - RTOS_ERR_NOT_READY
    605           *
    606           * @note     (1) This function may be called from an ISR.
    607           *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    608          void OSQPost(OS_Q        *p_q,
    609                       void        *p_void,
    610                       OS_MSG_SIZE msg_size,
    611                       OS_OPT      opt,
    612                       RTOS_ERR    *p_err)
    613          {
   \                     OSQPost: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0xB084             SUB      SP,SP,#+16
   \        0x6   0x0005             MOVS     R5,R0
   \        0x8   0x468B             MOV      R11,R1
   \        0xA   0x0017             MOVS     R7,R2
   \        0xC   0x4698             MOV      R8,R3
   \        0xE   0x9E0E             LDR      R6,[SP, #+56]
    614            OS_OPT       post_type;
    615            OS_PEND_LIST *p_pend_list;
    616            OS_TCB       *p_tcb;
    617            OS_TCB       *p_tcb_next;
    618            CPU_TS       ts;
    619            CORE_DECLARE_IRQ_STATE;
    620          
    621            OS_ASSERT_DBG_ERR_PTR_VALIDATE(p_err,; );
   \       0x10   0x2E00             CMP      R6,#+0
   \       0x12   0xD101             BNE.N    ??OSQPost_0
   \       0x14   0x.... 0x....      BL       CPU_SW_Exception
    622          
    623            OS_TRACE_Q_POST_ENTER(p_q, p_void, msg_size, opt);
    624          
    625            //                                                               Validate 'p_q'
    626            OS_ASSERT_DBG_ERR_SET((p_q != DEF_NULL), *p_err, RTOS_ERR_NULL_PTR,; );
   \                     ??OSQPost_0: (+1)
   \       0x18   0x2D00             CMP      R5,#+0
   \       0x1A   0xD109             BNE.N    ??OSQPost_1
   \       0x1C   0x200A             MOVS     R0,#+10
   \       0x1E   0x7030             STRB     R0,[R6, #+0]
   \       0x20   0x....             LDR.N    R0,??DataTable6
   \       0x22   0x6070             STR      R0,[R6, #+4]
   \       0x24   0xF240 0x2072      MOVW     R0,#+626
   \       0x28   0x60B0             STR      R0,[R6, #+8]
   \       0x2A   0x....             LDR.N    R0,??DataTable6_11
   \       0x2C   0x60F0             STR      R0,[R6, #+12]
   \                     ??OSQPost_2: (+1)
   \       0x2E   0xE7FE             B.N      ??OSQPost_2
    627          
    628            //                                                               Validate 'opt'
    629            OS_ASSERT_DBG_ERR_SET(((opt == OS_OPT_POST_FIFO)
    630                                   || (opt == OS_OPT_POST_LIFO)
    631                                   || (opt == (OS_OPT_POST_FIFO | OS_OPT_POST_ALL))
    632                                   || (opt == (OS_OPT_POST_LIFO | OS_OPT_POST_ALL))
    633                                   || (opt == (OS_OPT_POST_FIFO | OS_OPT_POST_NO_SCHED))
    634                                   || (opt == (OS_OPT_POST_LIFO | OS_OPT_POST_NO_SCHED))
    635                                   || (opt == (OS_OPT_POST_FIFO | OS_OPT_POST_ALL | OS_OPT_POST_NO_SCHED))
    636                                   || (opt == (OS_OPT_POST_LIFO | OS_OPT_POST_ALL | OS_OPT_POST_NO_SCHED))), *p_err, RTOS_ERR_INVALID_ARG,; );
   \                     ??OSQPost_1: (+1)
   \       0x30   0x4640             MOV      R0,R8
   \       0x32   0xB280             UXTH     R0,R0
   \       0x34   0x2800             CMP      R0,#+0
   \       0x36   0xD023             BEQ.N    ??OSQPost_3
   \       0x38   0x4640             MOV      R0,R8
   \       0x3A   0xB280             UXTH     R0,R0
   \       0x3C   0x2810             CMP      R0,#+16
   \       0x3E   0xD01F             BEQ.N    ??OSQPost_3
   \       0x40   0x4640             MOV      R0,R8
   \       0x42   0xB280             UXTH     R0,R0
   \       0x44   0xF5B0 0x7F00      CMP      R0,#+512
   \       0x48   0xD01A             BEQ.N    ??OSQPost_3
   \       0x4A   0x4640             MOV      R0,R8
   \       0x4C   0xB280             UXTH     R0,R0
   \       0x4E   0xF5B0 0x7F04      CMP      R0,#+528
   \       0x52   0xD015             BEQ.N    ??OSQPost_3
   \       0x54   0x4640             MOV      R0,R8
   \       0x56   0xB280             UXTH     R0,R0
   \       0x58   0xF5B0 0x4F00      CMP      R0,#+32768
   \       0x5C   0xD010             BEQ.N    ??OSQPost_3
   \       0x5E   0x4640             MOV      R0,R8
   \       0x60   0xF248 0x0110      MOVW     R1,#+32784
   \       0x64   0xB280             UXTH     R0,R0
   \       0x66   0x4288             CMP      R0,R1
   \       0x68   0xD00A             BEQ.N    ??OSQPost_3
   \       0x6A   0x4640             MOV      R0,R8
   \       0x6C   0xB280             UXTH     R0,R0
   \       0x6E   0xF5B0 0x4F02      CMP      R0,#+33280
   \       0x72   0xD005             BEQ.N    ??OSQPost_3
   \       0x74   0x4641             MOV      R1,R8
   \       0x76   0xF248 0x2010      MOVW     R0,#+33296
   \       0x7A   0xB289             UXTH     R1,R1
   \       0x7C   0x4281             CMP      R1,R0
   \       0x7E   0xD101             BNE.N    ??OSQPost_4
   \                     ??OSQPost_3: (+1)
   \       0x80   0x2001             MOVS     R0,#+1
   \       0x82   0xE000             B.N      ??OSQPost_5
   \                     ??OSQPost_4: (+1)
   \       0x84   0x2000             MOVS     R0,#+0
   \                     ??OSQPost_5: (+1)
   \       0x86   0xB2C0             UXTB     R0,R0
   \       0x88   0x2800             CMP      R0,#+0
   \       0x8A   0xD109             BNE.N    ??OSQPost_6
   \       0x8C   0x2008             MOVS     R0,#+8
   \       0x8E   0x7030             STRB     R0,[R6, #+0]
   \       0x90   0x....             LDR.N    R0,??DataTable6
   \       0x92   0x6070             STR      R0,[R6, #+4]
   \       0x94   0xF44F 0x701F      MOV      R0,#+636
   \       0x98   0x60B0             STR      R0,[R6, #+8]
   \       0x9A   0x....             LDR.N    R0,??DataTable6_11
   \       0x9C   0x60F0             STR      R0,[R6, #+12]
   \                     ??OSQPost_7: (+1)
   \       0x9E   0xE7FE             B.N      ??OSQPost_7
    637          
    638            //                                                               Validate object type
    639            OS_ASSERT_DBG_ERR_SET((p_q->Type == OS_OBJ_TYPE_Q), *p_err, RTOS_ERR_INVALID_TYPE,; );
   \                     ??OSQPost_6: (+1)
   \       0xA0   0x6829             LDR      R1,[R5, #+0]
   \       0xA2   0x....             LDR.N    R0,??DataTable6_3
   \       0xA4   0x4281             CMP      R1,R0
   \       0xA6   0xD009             BEQ.N    ??OSQPost_8
   \       0xA8   0x200C             MOVS     R0,#+12
   \       0xAA   0x7030             STRB     R0,[R6, #+0]
   \       0xAC   0x....             LDR.N    R0,??DataTable6
   \       0xAE   0x6070             STR      R0,[R6, #+4]
   \       0xB0   0xF240 0x207F      MOVW     R0,#+639
   \       0xB4   0x60B0             STR      R0,[R6, #+8]
   \       0xB6   0x....             LDR.N    R0,??DataTable6_11
   \       0xB8   0x60F0             STR      R0,[R6, #+12]
   \                     ??OSQPost_9: (+1)
   \       0xBA   0xE7FE             B.N      ??OSQPost_9
    640          
    641            //                                                               Make sure kernel is running.
    642            if (OSRunning != OS_STATE_OS_RUNNING) {
   \                     ??OSQPost_8: (+1)
   \       0xBC   0x....             LDR.N    R0,??DataTable6_5
   \       0xBE   0x7800             LDRB     R0,[R0, #+0]
   \       0xC0   0x2801             CMP      R0,#+1
   \       0xC2   0xD009             BEQ.N    ??OSQPost_10
    643              RTOS_ERR_SET(*p_err, RTOS_ERR_NOT_READY);
   \       0xC4   0x2002             MOVS     R0,#+2
   \       0xC6   0x7030             STRB     R0,[R6, #+0]
   \       0xC8   0x....             LDR.N    R0,??DataTable6
   \       0xCA   0x6070             STR      R0,[R6, #+4]
   \       0xCC   0xF240 0x2083      MOVW     R0,#+643
   \       0xD0   0x60B0             STR      R0,[R6, #+8]
   \       0xD2   0x....             LDR.N    R0,??DataTable6_11
   \       0xD4   0x60F0             STR      R0,[R6, #+12]
    644              return;
   \       0xD6   0xE048             B.N      ??OSQPost_11
    645            }
    646          
    647          #if (OS_CFG_TS_EN == DEF_ENABLED)
    648            ts = OS_TS_GET();                                             // Get timestamp
    649          #else
    650            ts = 0u;
   \                     ??OSQPost_10: (+1)
   \       0xD8   0xF05F 0x0900      MOVS     R9,#+0
    651          #endif
    652          
    653            OS_TRACE_Q_POST(p_q);
    654          
    655            CORE_ENTER_ATOMIC();
   \       0xDC   0x.... 0x....      BL       CORE_EnterAtomic
   \       0xE0   0x4682             MOV      R10,R0
    656            p_pend_list = &p_q->PendList;
   \       0xE2   0x1D28             ADDS     R0,R5,#+4
   \       0xE4   0x9003             STR      R0,[SP, #+12]
    657            if (p_pend_list->HeadPtr == DEF_NULL) {                       // Any task waiting on message queue?
   \       0xE6   0x9803             LDR      R0,[SP, #+12]
   \       0xE8   0x6800             LDR      R0,[R0, #+0]
   \       0xEA   0x2800             CMP      R0,#+0
   \       0xEC   0xD116             BNE.N    ??OSQPost_12
    658              if ((opt & OS_OPT_POST_LIFO) == 0u) {                       // Determine whether we post FIFO or LIFO
   \       0xEE   0x4640             MOV      R0,R8
   \       0xF0   0xB280             UXTH     R0,R0
   \       0xF2   0x06C0             LSLS     R0,R0,#+27
   \       0xF4   0xD401             BMI.N    ??OSQPost_13
    659                post_type = OS_OPT_POST_FIFO;
   \       0xF6   0x2400             MOVS     R4,#+0
   \       0xF8   0xE000             B.N      ??OSQPost_14
    660              } else {
    661                post_type = OS_OPT_POST_LIFO;
   \                     ??OSQPost_13: (+1)
   \       0xFA   0x2410             MOVS     R4,#+16
    662              }
    663              OS_MsgQPut(&p_q->MsgQ,                                      // Place message in the message queue
    664                         p_void,
    665                         msg_size,
    666                         post_type,
    667                         ts,
    668                         p_err);
   \                     ??OSQPost_14: (+1)
   \       0xFC   0x9601             STR      R6,[SP, #+4]
   \       0xFE   0xF8CD 0x9000      STR      R9,[SP, #+0]
   \      0x102   0x0023             MOVS     R3,R4
   \      0x104   0xB29B             UXTH     R3,R3
   \      0x106   0x003A             MOVS     R2,R7
   \      0x108   0xB292             UXTH     R2,R2
   \      0x10A   0x4659             MOV      R1,R11
   \      0x10C   0xF115 0x000C      ADDS     R0,R5,#+12
   \      0x110   0x.... 0x....      BL       OS_MsgQPut
    669              CORE_EXIT_ATOMIC();
   \      0x114   0x4650             MOV      R0,R10
   \      0x116   0x.... 0x....      BL       CORE_ExitAtomic
    670              OS_TRACE_Q_POST_EXIT(RTOS_ERR_CODE_GET(*p_err));
    671              if (RTOS_ERR_CODE_GET(*p_err) != RTOS_ERR_NONE) {
    672                OS_TRACE_Q_POST_FAILED(p_q);
    673              }
    674              return;
   \      0x11A   0xE026             B.N      ??OSQPost_11
    675            }
    676          
    677            p_tcb = p_pend_list->HeadPtr;
   \                     ??OSQPost_12: (+1)
   \      0x11C   0x9803             LDR      R0,[SP, #+12]
   \      0x11E   0x6804             LDR      R4,[R0, #+0]
    678            while (p_tcb != DEF_NULL) {
   \                     ??OSQPost_15: (+1)
   \      0x120   0x2C00             CMP      R4,#+0
   \      0x122   0xD010             BEQ.N    ??OSQPost_16
    679              p_tcb_next = p_tcb->PendNextPtr;
   \      0x124   0x69A0             LDR      R0,[R4, #+24]
   \      0x126   0x9002             STR      R0,[SP, #+8]
    680              OS_Post((OS_PEND_OBJ *)((void *)p_q),
    681                      p_tcb,
    682                      p_void,
    683                      msg_size,
    684                      ts);
   \      0x128   0xF8CD 0x9000      STR      R9,[SP, #+0]
   \      0x12C   0x003B             MOVS     R3,R7
   \      0x12E   0xB29B             UXTH     R3,R3
   \      0x130   0x465A             MOV      R2,R11
   \      0x132   0x0021             MOVS     R1,R4
   \      0x134   0x0028             MOVS     R0,R5
   \      0x136   0x.... 0x....      BL       OS_Post
    685              if ((opt & OS_OPT_POST_ALL) == 0) {                         // Post message to all tasks waiting?
   \      0x13A   0xEA5F 0x5088      LSLS     R0,R8,#+22
   \      0x13E   0xD502             BPL.N    ??OSQPost_16
    686                break;                                                    // No
    687              }
    688              p_tcb = p_tcb_next;
   \                     ??OSQPost_17: (+1)
   \      0x140   0x9802             LDR      R0,[SP, #+8]
   \      0x142   0x0004             MOVS     R4,R0
   \      0x144   0xE7EC             B.N      ??OSQPost_15
    689            }
    690          
    691            CORE_EXIT_ATOMIC();
   \                     ??OSQPost_16: (+1)
   \      0x146   0x4650             MOV      R0,R10
   \      0x148   0x.... 0x....      BL       CORE_ExitAtomic
    692          
    693            if ((opt & OS_OPT_POST_NO_SCHED) == 0u) {
   \      0x14C   0x4640             MOV      R0,R8
   \      0x14E   0xB280             UXTH     R0,R0
   \      0x150   0x0400             LSLS     R0,R0,#+16
   \      0x152   0xD401             BMI.N    ??OSQPost_18
    694              OSSched();                                                  // Run the scheduler
   \      0x154   0x.... 0x....      BL       OSSched
    695            }
    696          
    697            RTOS_ERR_SET(*p_err, RTOS_ERR_NONE);
   \                     ??OSQPost_18: (+1)
   \      0x158   0x2000             MOVS     R0,#+0
   \      0x15A   0x7030             STRB     R0,[R6, #+0]
   \      0x15C   0x....             LDR.N    R0,??DataTable6
   \      0x15E   0x6070             STR      R0,[R6, #+4]
   \      0x160   0xF240 0x20B9      MOVW     R0,#+697
   \      0x164   0x60B0             STR      R0,[R6, #+8]
   \      0x166   0x....             LDR.N    R0,??DataTable6_11
   \      0x168   0x60F0             STR      R0,[R6, #+12]
    698            OS_TRACE_Q_POST_EXIT(RTOS_ERR_CODE_GET(*p_err));
    699          }
   \                     ??OSQPost_11: (+1)
   \      0x16A   0xB005             ADD      SP,SP,#+20
   \      0x16C   0xE8BD 0x8FF0      POP      {R4-R11,PC}
    700          
    701          /********************************************************************************************************
    702           ********************************************************************************************************
    703           *                                           INTERNAL FUNCTIONS
    704           ********************************************************************************************************
    705           *******************************************************************************************************/
    706          
    707          /****************************************************************************************************//**
    708           *                                                   OS_QClr()
    709           *
    710           * @brief    This function is called by OSQDel() to clear the contents of a message queue.
    711           *
    712           * @param    p_q     Pointer to the queue to clear.
    713           *
    714           * @note     (1) This function is INTERNAL to the Kernel and your application MUST NOT call it.
    715           *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    716          void OS_QClr(OS_Q *p_q)
    717          {
   \                     OS_QClr: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    718            (void)OS_MsgQFreeAll(&p_q->MsgQ);                             // Return all OS_MSGs to the free list
   \        0x4   0xF114 0x000C      ADDS     R0,R4,#+12
   \        0x8   0x.... 0x....      BL       OS_MsgQFreeAll
    719          #if (OS_OBJ_TYPE_REQ == DEF_ENABLED)
    720            p_q->Type = OS_OBJ_TYPE_NONE;                                 // Mark the data structure as a NONE
   \        0xC   0x....             LDR.N    R0,??DataTable6_12
   \        0xE   0x6020             STR      R0,[R4, #+0]
    721          #endif
    722          #if (OS_CFG_DBG_EN == DEF_ENABLED)
    723            p_q->NamePtr = (CPU_CHAR *)((void *)"?Q");
    724          #endif
    725            OS_MsgQInit(&p_q->MsgQ,                                       // Initialize the list of OS_MSGs
    726                        0u);
   \       0x10   0x2100             MOVS     R1,#+0
   \       0x12   0xF114 0x000C      ADDS     R0,R4,#+12
   \       0x16   0x.... 0x....      BL       OS_MsgQInit
    727            OS_PendListInit(&p_q->PendList);                              // Initialize the waiting list
   \       0x1A   0x1D20             ADDS     R0,R4,#+4
   \       0x1C   0x.... 0x....      BL       OS_PendListInit
    728          }
   \       0x20   0xBD10             POP      {R4,PC}

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \        0x0   0x....'....        DC32     `OSQCreate::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \        0x0   0x....'....        DC32     OSCfg_MsgPoolSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \        0x0   0x5545'5551        DC32     0x55455551

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \        0x0   0x....'....        DC32     `OSQDel::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \        0x0   0x....'....        DC32     OSRunning

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \        0x0   0x....'....        DC32     `OSQFlush::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \        0x0   0x....'....        DC32     `OSQPend::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \        0x0   0x....'....        DC32     OSSchedLockNestingCtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \        0x0   0x....'....        DC32     OSTCBCurPtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_10:
   \        0x0   0x....'....        DC32     `OSQPendAbort::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_11:
   \        0x0   0x....'....        DC32     `OSQPost::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_12:
   \        0x0   0x454E'4F4E        DC32     0x454e4f4e

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x44 0x3A          DC8 0x44, 0x3A, 0x5C, 0x49, 0x6E, 0x65, 0x73, 0x68
   \              0x5C 0x49    
   \              0x6E 0x65    
   \              0x73 0x68
   \        0x8   0x5F 0x77          DC8 0x5F, 0x77, 0x69, 0x73, 0x75, 0x6E, 0x5C, 0x57
   \              0x69 0x73    
   \              0x75 0x6E    
   \              0x5C 0x57
   \       0x10   0x69 0x73          DC8 0x69, 0x73, 0x75, 0x6E, 0x5F, 0x4E, 0x6F, 0x64
   \              0x75 0x6E    
   \              0x5F 0x4E    
   \              0x6F 0x64
   \       0x18   0x65 0x5F          DC8 0x65, 0x5F, 0x41, 0x70, 0x70, 0x20, 0x31, 0x5C
   \              0x41 0x70    
   \              0x70 0x20    
   \              0x31 0x5C
   \       0x20   0x57 0x69          DC8 0x57, 0x69, 0x73, 0x75, 0x6E, 0x5F, 0x4E, 0x6F
   \              0x73 0x75    
   \              0x6E 0x5F    
   \              0x4E 0x6F
   \       0x28   0x64 0x65          DC8 0x64, 0x65, 0x5F, 0x41, 0x70, 0x70, 0x5C, 0x67
   \              0x5F 0x41    
   \              0x70 0x70    
   \              0x5C 0x67
   \       0x30   0x65 0x63          DC8 0x65, 0x63, 0x6B, 0x6F, 0x5F, 0x73, 0x64, 0x6B
   \              0x6B 0x6F    
   \              0x5F 0x73    
   \              0x64 0x6B
   \       0x38   0x5F 0x34          DC8 0x5F, 0x34, 0x2E, 0x34, 0x2E, 0x35, 0x5C, 0x70
   \              0x2E 0x34    
   \              0x2E 0x35    
   \              0x5C 0x70
   \       0x40   0x6C 0x61          DC8 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72, 0x6D, 0x5C
   \              0x74 0x66    
   \              0x6F 0x72    
   \              0x6D 0x5C
   \       0x48   0x6D 0x69          DC8 0x6D, 0x69, 0x63, 0x72, 0x69, 0x75, 0x6D, 0x5F
   \              0x63 0x72    
   \              0x69 0x75    
   \              0x6D 0x5F
   \       0x50   0x6F 0x73          DC8 0x6F, 0x73, 0x5C, 0x6B, 0x65, 0x72, 0x6E, 0x65
   \              0x5C 0x6B    
   \              0x65 0x72    
   \              0x6E 0x65
   \       0x58   0x6C 0x5C          DC8 0x6C, 0x5C, 0x73, 0x6F, 0x75, 0x72, 0x63, 0x65
   \              0x73 0x6F    
   \              0x75 0x72    
   \              0x63 0x65
   \       0x60   0x5C 0x6F          DC8 0x5C, 0x6F, 0x73, 0x5F, 0x71, 0x2E, 0x63, 0
   \              0x73 0x5F    
   \              0x71 0x2E    
   \              0x63 0x00
    729          
    730          /****************************************************************************************************//**
    731           *                                               OS_QDbgListAdd()
    732           *
    733           * @brief    Add a message queue to the message queue debug list.
    734           *
    735           * @param    p_q     Pointer to the message queue to add.
    736           *
    737           * @note     (1) This function is INTERNAL to the Kernel and your application MUST NOT call it.
    738           *******************************************************************************************************/
    739          
    740          #if (OS_CFG_DBG_EN == DEF_ENABLED)
    741          void OS_QDbgListAdd(OS_Q *p_q)
    742          {
    743            p_q->DbgNamePtr = (CPU_CHAR *)((void *)" ");
    744            p_q->DbgPrevPtr = DEF_NULL;
    745            if (OSQDbgListPtr == DEF_NULL) {
    746              p_q->DbgNextPtr = DEF_NULL;
    747            } else {
    748              p_q->DbgNextPtr = OSQDbgListPtr;
    749              OSQDbgListPtr->DbgPrevPtr = p_q;
    750            }
    751            OSQDbgListPtr = p_q;
    752          }
    753          
    754          /****************************************************************************************************//**
    755           *                                           OS_QDbgListRemove()
    756           *
    757           * @brief    Remove a message queue from the message queue debug list.
    758           *
    759           * @param    p_q     Pointer to the message queue to remove.
    760           *
    761           * @note     (1) This function is INTERNAL to the Kernel and your application MUST NOT call it.
    762           *******************************************************************************************************/
    763          void OS_QDbgListRemove(OS_Q *p_q)
    764          {
    765            OS_Q *p_q_next;
    766            OS_Q *p_q_prev;
    767          
    768            p_q_prev = p_q->DbgPrevPtr;
    769            p_q_next = p_q->DbgNextPtr;
    770          
    771            if (p_q_prev == DEF_NULL) {
    772              OSQDbgListPtr = p_q_next;
    773              if (p_q_next != DEF_NULL) {
    774                p_q_next->DbgPrevPtr = DEF_NULL;
    775              }
    776              p_q->DbgNextPtr = DEF_NULL;
    777            } else if (p_q_next == DEF_NULL) {
    778              p_q_prev->DbgNextPtr = DEF_NULL;
    779              p_q->DbgPrevPtr = DEF_NULL;
    780            } else {
    781              p_q_prev->DbgNextPtr = p_q_next;
    782              p_q_next->DbgPrevPtr = p_q_prev;
    783              p_q->DbgNextPtr = DEF_NULL;
    784              p_q->DbgPrevPtr = DEF_NULL;
    785            }
    786          }
    787          #endif
    788          #endif
    789          
    790          /********************************************************************************************************
    791           ********************************************************************************************************
    792           *                                   DEPENDENCIES & AVAIL CHECK(S) END
    793           ********************************************************************************************************
    794           *******************************************************************************************************/
    795          
    796          #endif // (defined(RTOS_MODULE_KERNEL_AVAIL))

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   OSQCreate
        24   -> CORE_EnterAtomic
        24   -> CORE_ExitAtomic
        24   -> CORE_InIrqContext
        24   -> CPU_SW_Exception
        24   -> OS_MsgQInit
        24   -> OS_PendListInit
        24   -> __aeabi_memclr4
      40   OSQDel
        40   -> CORE_EnterAtomic
        40   -> CORE_ExitAtomic
        40   -> CORE_InIrqContext
        40   -> CPU_SW_Exception
        40   -> OSSched
        40   -> OS_PendAbort
        40   -> OS_QClr
      24   OSQFlush
        24   -> CORE_EnterAtomic
        24   -> CORE_ExitAtomic
        24   -> CORE_InIrqContext
        24   -> CPU_SW_Exception
        24   -> OS_MsgQFreeAll
      40   OSQPend
        40   -> CORE_EnterAtomic
        40   -> CORE_ExitAtomic
        40   -> CORE_InIrqContext
        40   -> CORE_IrqIsDisabled
        40   -> CPU_SW_Exception
        40   -> OSSched
        40   -> OS_MsgQGet
        40   -> OS_Pend
      40   OSQPendAbort
        40   -> CORE_EnterAtomic
        40   -> CORE_ExitAtomic
        40   -> CORE_InIrqContext
        40   -> CPU_SW_Exception
        40   -> OSSched
        40   -> OS_PendAbort
      56   OSQPost
        56   -> CORE_EnterAtomic
        56   -> CORE_ExitAtomic
        56   -> CPU_SW_Exception
        56   -> OSSched
        56   -> OS_MsgQPut
        56   -> OS_Post
       8   OS_QClr
         8   -> OS_MsgQFreeAll
         8   -> OS_MsgQInit
         8   -> OS_PendListInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_10
       4  ??DataTable6_11
       4  ??DataTable6_12
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       4  ??DataTable6_9
     104  ?_0
     218  OSQCreate
     358  OSQDel
     206  OSQFlush
     642  OSQPend
     346  OSQPendAbort
     368  OSQPost
      34  OS_QClr
      88  -- Other

 
   192 bytes in section .rodata
 2'224 bytes in section .text
 
 2'224 bytes of CODE  memory
   192 bytes of CONST memory

Errors: none
Warnings: none
