###############################################################################
#                                                                             #
#     IAR Assembler V9.50.2.385/W64 for ARM 29/Mar/2025  15:54:09             #
#     Copyright 1999-2024 IAR Systems AB.                                     #
#                                                                             #
#           Source file   =  D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\ports\source\iar\armv8m_os_cpu_a.asm#
#           List file     =  D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\ewarm-iar\lst\iar_13602266579259951580.dir\armv8m_os_cpu_a.lst#
#           Object file   =  D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\ewarm-iar\obj\iar_13602266579259951580.dir\armv8m_os_cpu_a.o#
#           Command line  =  -f                                               #
#                            D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\ewarm-iar\obj\iar_13602266579259951580.dir\armv8m_os_cpu_a.o.rsp #
#                            (D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\ports\source\iar\armv8m_os_cpu_a.asm #
#                            -OD:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\ewarm-iar\obj\iar_13602266579259951580.dir #
#                            -s+ -M<> -w+ -r -DDEBUG_EFM=1                    #
#                            -DEFR32FG28B322F1024IM48=1                       #
#                            -DconfigNUM_SDK_THREAD_LOCAL_STORAGE_POINTERS=2  #
#                            -DSL_COMPONENT_CATALOG_PRESENT=1                 #
#                            -DMBEDTLS_CONFIG_FILE=<sl_mbedtls_config.h>      #
#                            -DMBEDTLS_PSA_CRYPTO_CONFIG_FILE=<psa_crypto_config.h> #
#                            -DSL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0            #
#                            -DSL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> #
#                            -DRTT_USE_ASM=0                                  #
#                            -LD:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\ewarm-iar\lst\iar_13602266579259951580.dir #
#                            -t2 --cpu Cortex-M33 --cmse --fpu VFPv5_sp       #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\ports\source\iar\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\rail\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\wisun\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\.\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\Device\SiliconLabs\EFR32FG28\Include\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_project_info\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\common\inc\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\inc\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\src\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\CMSIS\Core\Include\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\CMSIS\RTOS2\Include\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\device_init\inc\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emdrv\common\inc\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emlib\inc\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\iostream\inc\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\config\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\config\preset\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\inc\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\include\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\source\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\include\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\cpu\include\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\ports\source\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\source\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\include\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emdrv\nvm3\inc\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\peripheral\inc\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\printf\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\printf\inc\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_psa_driver\inc\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\common\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\ble\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\ieee802154\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\wmbus\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\zwave\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\chip\efr32\efr32xg2x\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\sidewalk\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\pa-conversions\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\pa-conversions\efr32xg28\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\rail_util_pti\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\se_manager\inc\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\se_manager\src\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\segger\systemview\SEGGER\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\util\silicon_labs\silabs_core\memory_manager\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\common\toolchain\inc\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\system\inc\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_core\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_setting\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\cli_util\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\event_manager\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\ns_list\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\ping\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\nanostack\nanostack-libservice\mbed-client-libservice\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\udp_client\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\sleeptimer\inc\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\plugin\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\stack\inc\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\stack\inc\socket\\ #
#                            -ID:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\autogen\\) #
#                            -y                                               #
#                            D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\ewarm-iar\obj\iar_13602266579259951580.dir\armv8m_os_cpu_a.o.iar_deps #
#                                                                             #
###############################################################################

    1                           ;
    2                           ;/********************************************
                                *******************************//**
    3                           ; * @file
    4                           ; * @brief Kernel - ARM Cortex-M Port
    5                           ; ********************************************
                                ***********************************
    6                           ; * # License
    7                           ; * <b>Copyright 2018 Silicon Laboratories
                                 Inc. www.silabs.com</b>
    8                           ; ********************************************
                                ***********************************
    9                           ; *
   10                           ; * The licensor of this software is Silicon
                                 Laboratories Inc.  Your use of this
   11                           ; * software is governed by the terms of
                                 Silicon Labs Master Software License
   12                           ; * Agreement (MSLA) available at
   13                           ; * www.silabs.com/about-us/legal/master-softw
                                are-license-agreement.  This
   14                           ; * software is distributed to you in Source
                                 Code format and is governed by the
   15                           ; * sections of the MSLA applicable to Source
                                 Code.
   16                           ; *
   17                           ; ********************************************
                                **********************************/
   18                           
   19                           ;*********************************************
                                ***********************************************
                                ********//**
   20                           ;* @note     (1) This driver targets the
                                 following:
   21                           ;*               Core      : ARMv8M Cortex-M
   22                           ;*               Mode      : Thumb-2
                                 ISA
   23                           ;*               Toolchain : IAR EWARM
   24                           ;*     
   25                           ;* @note     (2) This port supports the ARM
                                 Cortex-M33 architecture.
   26                           ;*********************************************
                                ***********************************************
                                ************
   27                           
   28                           ;*********************************************
                                ***********************************************
                                ************
   29                           ;                                         
                                 PUBLIC FUNCTIONS
   30                           ;*********************************************
                                ***********************************************
                                ************
   31                           
   32                                                                         
                                                  ; External references.
   33                               EXTERN  OSPrioCur
   34                               EXTERN  OSPrioHighRdy
   35                               EXTERN  OSTCBCurPtr
   36                               EXTERN  OSTCBHighRdyPtr
   37                               EXTERN  OSIntExit
   38                               EXTERN  OSTaskSwHook
   39                               EXTERN  OS_CPU_ExceptStkBase
   40                               EXTERN  OS_TaskReturn
   41                               EXTERN  OSIdleContext
   42                               EXTERN  OSEnableIRQ
   43                               EXTERN  OSDisableIRQ
   44                           
   45                               PUBLIC  OSStartHighRdy                    
                                                  ; Functions declared in this
                                 file
   46                               PUBLIC  OSCtxSw
   47                               PUBLIC  OSIntCtxSw
   48                               PUBLIC  PendSV_Handler
   49                           
   50                           ;*********************************************
                                ***********************************************
                                ************
   51                           ;                                             
                                  EQUATES
   52                           ;*********************************************
                                ***********************************************
                                ************
   53                           
   54                           NVIC_INT_CTRL   EQU     0xE000ED04            
                                                  ; Interrupt control state
                                 register.
   55                           NVIC_SYSPRI14   EQU     0xE000ED22            
                                                  ; System priority register
                                 (priority 14).
   56                           NVIC_PENDSV_PRI EQU           0xFF            
                                                  ; PendSV priority value
                                 (lowest).
   57                           NVIC_PENDSVSET  EQU     0x10000000            
                                                  ; Value to trigger PendSV
                                 exception.
   58                           
   59                           FPU_FPCCR       EQU     0xE000EF34            
                                                  ; Address of FPU FPCCR
                                 register.
   60                           
   61                           ;*********************************************
                                ***********************************************
                                ************
   62                           ;                                     CODE
                                 GENERATION DIRECTIVES
   63                           ;*********************************************
                                ***********************************************
                                ************
   64                           
   65                               RSEG CODE:CODE:NOROOT(2)
   66                               THUMB
   67                           
   68                           ;*********************************************
                                ***********************************************
                                ************
   69                           ;                                        
                                 START MULTITASKING
   70                           ;                                      void
                                 OSStartHighRdy(void)
   71                           ;
   72                           ; Note(s) : 1) This function setup the PendSV
                                 exception and load the context of the first
                                 task to start.
   73                           ;
   74                           ;           2) OSStartHighRdy() MUST:
   75                           ;              a) Setup PendSV exception
                                 priority to lowest;
   76                           ;              b) Set initial PSP to
                                 0;
   77                           ;              c) Set the main stack to
                                 OS_CPU_ExceptStkBase
   78                           ;              d) Get current high priority,
                                 OSPrioCur = OSPrioHighRdy;
   79                           ;              e) Get current ready thread
                                 TCB, OSTCBCurPtr = OSTCBHighRdyPtr;
   80                           ;              f) Get new process SP from TCB,
                                 SP = OSTCBHighRdyPtr->StkPtr;
   81                           ;              g) Restore R0-R11 and R14 from
                                 new process stack;
   82                           ;              h) Enable interrupts (tasks
                                 will run with interrupts enabled).
   83                           ;*********************************************
                                ***********************************************
                                ************
   84                           
   85                           OSStartHighRdy
   86                           
   87    00000000 72B6              CPSID   I                                  
                  ; Mask all interrupts
   88                           
   89    00000002 4EF62250CEF20     MOV32   R0, NVIC_SYSPRI14                  
                                                                  ; Set the
                                                  PendSV exception priority
                  000          
   90    0000000A 40F2FF01C0F20     MOV32   R1, NVIC_PENDSV_PRI
                  001          
   91    00000012 0170              STRB    R1, [R0]
   92                           
   93    00000014 0020              MOVS    R0, #0                             
                                                                  ; Set the PSP
                                                  to 0 for initial context
                                                  switch call
   94    00000016 80F30988          MSR     PSP, R0
   95                           
   96    0000001A .............     MOV32   R0, OS_CPU_ExceptStkBase           
                                                                  ; Initialize
                                                  the MSP to the OS_CPU_ExceptS
                                                 tkBase
                  ...          
   97    00000022 0168              LDR     R1, [R0]
   98    00000024 81F30888          MSR     MSP, R1
   99                           
  100    00000028 ........          BL      OSTaskSwHook                       
                                                              ; Call OSTaskSwHo
                                             ok() for FPU Push & Pop
  101                           
  102    0000002C .............     MOV32   R0, OSPrioCur                      
                                                                  ; OSPrioCur  
                                                  = OSPrioHighRdy;
                  ...          
  103    00000034 .............     MOV32   R1, OSPrioHighRdy
                  ...          
  104    0000003C 0A78              LDRB    R2, [R1]
  105    0000003E 0270              STRB    R2, [R0]
  106                           
  107    00000040 .............     MOV32   R0, OSTCBCurPtr                    
                                                                  ; OSTCBCurPtr
                                                  = OSTCBHighRdyPtr;
                  ...          
  108    00000048 .............     MOV32   R1, OSTCBHighRdyPtr
                  ...          
  109    00000050 0A68              LDR     R2, [R1]
  110    00000052 0260              STR     R2, [R0]
  111                             
  112    00000054 0020              MOVS    R0, #0                             
                                                                  ; Load
                                                  SP_LIMIT
  113    00000056 80F30B88          MSR     PSPLIM, R0                         
                                                                      ; PSPLIM
                                                      = 0 before changing the
                                                      PS
  114                           
  115    0000005A 1068              LDR     R0, [R2]                           
                                                                  ; R0 is new
                                                  process SP; SP = OSTCBHighRdy
                                                 Ptr->StkPtr;
  116    0000005C 80F30988          MSR     PSP, R0                            
                                                                   ; Load PSP
                                                   with new process SP
  117                             
  118    00000060 02F10802          ADD     R2, R2, #8                         
                                                                      ; PSPLIM
                                                      = OSTCBHighRdyPtr->StkPtr
                                                     Limit
  119    00000064 1168              LDR     R1, [R2]
  120    00000066 81F30B88          MSR     PSPLIM, R1
  121                           
  122    0000006A EFF31480          MRS     R0, CONTROL
  123    0000006E 40F00200          ORR     R0, R0, #2
  124    00000072 20F00400          BIC     R0, R0, #4                         
                                                                      ; Clear
                                                      the FPU bit in case FPU
                                                      was used before the first
                                                      task
  125    00000076 80F31488          MSR     CONTROL, R0
  126    0000007A BFF36F8F          ISB                                        
                  ; Sync instruction stream
  127                           
  128    0000007E BDE8F04F          LDMFD   SP!, {R4-R11, LR}                  
                                                                   ; Restore
                                                   r4-11, lr from new process
                                                   stack
  129    00000082 0FBC              LDMFD   SP!, {R0-R3}                       
                                                                   ; Restore
                                                   r0, r3
  130    00000084 BDE80050          LDMFD   SP!, {R12, LR}                     
                                                                   ; Load R12
                                                   and LR
  131    00000088 06BC              LDMFD   SP!, {R1, R2}                      
                                                                   ; Load PC
                                                   and discard xPSR
  132                           
  133    0000008A 62B6              CPSIE   I                                  
                  ; Unmask all interrupts
  134                           
  135    0000008C 0847              BX      R1
  136                           
  137                           
  138                           ;*********************************************
                                ***********************************************
                                ************
  139                           ;                       PERFORM A CONTEXT
                                 SWITCH (From task level) - OSCtxSw()
  140                           ;
  141                           ; Note(s) : 1) OSCtxSw() is called when OS
                                 wants to perform a task context switch.  This
                                 function
  142                           ;              triggers the PendSV exception
                                 which is where the real work is done.
  143                           ;*********************************************
                                ***********************************************
                                ************
  144                           
  145                           OSCtxSw
  146    0000008E 3A48              LDR     R0, =NVIC_INT_CTRL                 
                                                                  ; Trigger the
                                                  PendSV exception (causes
                                                  context switch)
  147    00000090 3A49              LDR     R1, =NVIC_PENDSVSET
  148    00000092 0160              STR     R1, [R0]
  149    00000094 7047              BX      LR
  150                           
  151                           
  152                           ;*********************************************
                                ***********************************************
                                ************
  153                           ;                   PERFORM A CONTEXT SWITCH
                                 (From interrupt level) - OSIntCtxSw()
  154                           ;
  155                           ; Note(s) : 1) OSIntCtxSw() is called by
                                 OSIntExit() when it determines a context
                                 switch is needed as
  156                           ;              the result of an interrupt. 
                                 This function simply triggers a PendSV
                                 exception which will
  157                           ;              be handled when there are no
                                 more interrupts active and interrupts are
                                 enabled.
  158                           ;*********************************************
                                ***********************************************
                                ************
  159                           
  160                           OSIntCtxSw
  161    00000096 3848              LDR     R0, =NVIC_INT_CTRL                 
                                                                  ; Trigger the
                                                  PendSV exception (causes
                                                  context switch)
  162    00000098 3849              LDR     R1, =NVIC_PENDSVSET
  163    0000009A 0160              STR     R1, [R0]
  164    0000009C 7047              BX      LR
  165                           
  166                           
  167                           ;*********************************************
                                ***********************************************
                                ************
  168                           ;                                       HANDLE
                                 PendSV EXCEPTION
  169                           ;                                      void
                                 PendSV_Handler(void)
  170                           ;
  171                           ; Note(s) : 1) PendSV is used to cause a
                                 context switch.  This is a recommended method
                                 for performing
  172                           ;              context switches with Cortex-M.
                                  This is because the Cortex-M auto-saves half
                                 of the
  173                           ;              processor context on any
                                 exception, and restores same on return from
                                 exception.  So only
  174                           ;              saving of R4-R11 & R14 is
                                 required and fixing up the stack pointers.
                                 Using the PendSV exception
  175                           ;              this way means that context
                                 saving and restoring is identical whether it
                                 is initiated from
  176                           ;              a thread or occurs due to an
                                 interrupt or exception.
  177                           ;
  178                           ;           2) Pseudo-code is:
  179                           ;              a) Check if current TCB is null
                                 (idle).
  180                           ;              b) If yes, clear LSPACT bit of
                                 FPU->FPCCR register to make sure that lazy
                                 stacking doesnt
  181                           ;                 trigger later. Skip context
                                 save and got to g).
  182                           ;              c) Get the process SP.
  183                           ;              d) If FP instructions was used,
                                 indicated by the EXEC_RETURN, save remaining
                                 FP regs S16-S31.
  184                           ;              e) Save remaining regs r4-r11 &
                                 r14 on process stack;
  185                           ;              f) Save the process SP in its
                                 TCB, OSTCBCurPtr->OSTCBStkPtr = SP;
  186                           ;              g) Call OSTaskSwHook();
  187                           ;              h) Get current high priority,
                                 OSPrioCur = OSPrioHighRdy;
  188                           ;              i) Get current ready thread
                                 TCB, OSTCBCurPtr = OSTCBHighRdyPtr;
  189                           ;              j) Check if going to idle. If
                                 yes, skip context restore and go to o)
  190                           ;              k) Get new process SP from TCB,
                                 SP = OSTCBHighRdyPtr->OSTCBStkPtr;
  191                           ;              l) Restore R4-R11 and R14 from
                                 new process stack;
  192                           ;              m) If FP instructions was used,
                                 indicated by the EXEC_RETURN, restore FP regs
                                 S16-S31.
  193                           ;              n) Context restoration is
                                 completed, go to end of function.
  194                           ;              o) Push a fake exception return
                                 stack frame on isr stack and use that as MSP
                                 for idle context.
  195                           ;              p) Perform exception return
                                 which will restore remaining context.
  196                           ;
  197                           ;           3) On entry into PendSV handler:
  198                           ;              a) The following have been
                                 saved on the process stack (by processor):
  199                           ;                 xPSR, PC, LR, R12,
                                 R0-R3
  200                           ;              b) Processor mode is switched
                                 to Handler mode (from Thread mode)
  201                           ;              c) Stack is Main stack
                                 (switched from Process stack)
  202                           ;              d) OSTCBCurPtr      points to
                                 the OS_TCB of the task to suspend
  203                           ;                 OSTCBHighRdyPtr  points to
                                 the OS_TCB of the task to resume
  204                           ;
  205                           ;           4) Since PendSV is set to lowest
                                 priority in the system (by OSStartHighRdy()
                                 above), we
  206                           ;              know that it will only be run
                                 when no other exception or interrupt is
                                 active, and
  207                           ;              therefore safe to assume that
                                 context being switched out was using the
                                 process stack (PSP).
  208                           ;*********************************************
                                ***********************************************
                                ************
  209                           
  210                           PendSV_Handler
  211                           
  212    0000009E 00B5              PUSH    {LR}                               
                                                              ; Prevent
                                              interruption during context
                                              switch
  213    000000A0 ........          BL      OSDisableIRQ
  214    000000A4 5DF804EB          POP     {LR}
  215                           
  216    000000A8 .............     MOV32   R2, OSTCBCurPtr                    
                                                                  ; if current
                                                  TCB == null, we were in idle
                                                  ...
                  ...          
  217    000000B0 1168              LDR     R1, [R2]
  218    000000B2 0029              CMP     R1, #0
  219                           
  220                           #ifdef __ARMVFP__
  221    000000B4 01BF              ITTTT  EQ
  222    000000B6 324A              LDREQ  R2, =FPU_FPCCR                      
                                                                 ; Load
                                                 FPU->FPCCR register address
  223    000000B8 1368              LDREQ  R3, [R2]
  224    000000BA 23F00103          BICEQ  R3, R3, #1                          
                                                                     ; Clear
                                                     LSPACT bit of LPCCR in
                                                     case a FPU lazy stacking
                                                     was active.
  225    000000BE 1360              STREQ  R3, [R2]
  226                           #endif
  227                           
  228    000000C0 0ED0              BEQ     .end_context_save                  
                                                              ; Skip context
                                              save
  229                           
  230    000000C2 EFF30980          MRS     R0, PSP                            
                                                                  ; PSP is
                                                  process stack pointer
  231                           
  232                           #ifdef __ARMVFP__
  233    000000C6 1EF0100F          TST       LR, #0x10                        
                                                                    ; Save high
                                                    FP registers, only if FPU
                                                    is used in task context
  234    000000CA 08BF              IT        EQ
  235    000000CC 20ED108A          VSTMDBEQ  R0!, {S16-S31}
  236                           #endif
  237                           
  238    000000D0 20E9F04F          STMFD   R0!, {R4-R11, R14}                 
                                                                   ; Save
                                                   remaining regs r4-11, R14 on
                                                   process stack
  239                           
  240    000000D4 .............     MOV32   R5, OSTCBCurPtr                    
                                                                  ; OSTCBCurPtr
                                                 ->StkPtr = SP;
                  ...          
  241    000000DC 2968              LDR     R1, [R5]
  242    000000DE 0860              STR     R0, [R1]                           
                                                                  ; R0 is SP of
                                                  process being switched
                                                  out
  243                           
  244                           .end_context_save:
  245                                                                         
                                                  ; At this point, entire
                                 context of process has been saved
  246    000000E0 7446              MOV     R4, LR                             
                                                                  ; Save LR
                                                  exc_return value
  247    000000E2 ........          BL      OSTaskSwHook                       
                                                              ; Call OSTaskSwHo
                                             ok() for FPU Push & Pop
  248                           
  249    000000E6 .............     MOV32   R1, OSTCBCurPtr
                  ...          
  250    000000EE .............     MOV32   R0, OSTCBHighRdyPtr                
                                                                  ; OSTCBCurPtr
                                                  = OSTCBHighRdyPtr;
                  ...          
  251    000000F6 0368              LDR     R3, [R0]
  252    000000F8 0B60              STR     R3, [R1]
  253                           
  254    000000FA .............     MOV32   R2, OSPrioCur                      
                                                                  ; OSPrioCur  
                                                  = OSPrioHighRdy;
                  ...          
  255    00000102 .............     MOV32   R1, OSPrioHighRdy
                  ...          
  256    0000010A 0878              LDRB    R0, [R1]
  257    0000010C 1070              STRB    R0, [R2]
  258                           
  259    0000010E 44F0040E          ORR     LR,  R4, #0x04                     
                                                                       ; Ensure
                                                       exception return uses
                                                       process stack
  260                           
  261    00000112 002B              CMP     R3, #0                             
                                                                  ; if current
                                                  TCB == idle, we are going to
                                                  idle...
  262    00000114 10D0              BEQ     .update_msp_idle                   
                                                              ; Skip normal
                                              context restore and set idle
                                              context
  263                           
  264    00000116 0020              MOVS    R0, #0                             
                                                                  ; Load
                                                  SP_LIMIT
  265    00000118 80F30B88          MSR     PSPLIM, R0                         
                                                                      ; PSPLIM
                                                      = 0 before changing the
                                                      PSP
  266                           
  267    0000011C 1868              LDR     R0,  [R3]                          
                                                                   ; R0 is new
                                                   process SP; SP = OSTCBHighRd
                                                  yPtr->StkPtr;
  268                           
  269    0000011E B0E8F04F          LDMFD   R0!, {R4-R11, R14}                 
                                                                   ; Restore
                                                   r4-11, R14 from new process
                                                   stack
  270                           
  271                           #ifdef __ARMVFP__
  272    00000122 1EF0100F          TST       LR, #0x10                        
                                                                    ; Restore
                                                    high FP registers, only if
                                                    FPU is used in new task
                                                    context
  273    00000126 08BF              IT        EQ
  274    00000128 B0EC108A          VLDMIAEQ  R0!, {S16-S31}
  275                           #endif
  276                           
  277    0000012C 80F30988          MSR     PSP, R0                            
                                                                   ; Load PSP
                                                   with new process SP
  278                           
  279    00000130 9968              LDR     R1, [R3, #8]
  280    00000132 81F30B88          MSR     PSPLIM, R1
  281                           
  282    00000136 1BE0              B       .end_context_restore
  283                           
  284                           .update_msp_idle:
  285    00000138 .............     MOV32   R1, OS_CPU_ExceptStkBase           
                                                                  ; Reuse
                                                  exception stack as MSP for
                                                  idle and create fake
                  ...          
  286    00000140 0868              LDR     R0, [R1]                           
                                                                  ; exception
                                                  return stack frame
  287                           
  288    00000142 A0F11C00          SUB     R0, R0, #28                        
                                                                      ; Stack
                                                      base = &SP[top -
                                                      7]
  289    00000146 80F30888          MSR     MSP, R0                            
                                                                   ; Load MSP
                                                   with new process SP
  290                           
  291    0000014A 40F20001C0F20     MOV32   R1, 0x01000000                     
                                                                  ; SP[top - 0]
                                                  = PSR
                  011          
  292    00000152 C161              STR     R1, [R0, #28]
  293                           
  294    00000154 .............     MOV32   R1, OSIdleContext                  
                                                                  ; SP[top - 1]
                                                  = Return address -> Idle
                                                  context handler
                  ...          
  295    0000015C 8161              STR     R1, [R0, #24]
  296                           
  297    0000015E .............     MOV32   R1, OS_TaskReturn                  
                                                                  ; SP[top - 2]
                                                  = LR -> Task return
                  ...          
  298    00000166 4161              STR     R1, [R0, #20]
  299                           
  300                           #if defined(SL_TRUSTZONE_NONSECURE)
  302                           #else
  303    00000168 4FF6F97ECFF6F     MOV32   LR, #0xFFFFFFF9                    
                                                                  ; Exception
                                                  return uses master stack/proc
                                                 ess mode/basic frame
                  F7E          
  304                           #endif
  305                           
  306                           .end_context_restore:
  307    00000170 00B5              PUSH    {LR}                               
                                                              ; Enable
                                              interrupts again and return from
                                              exception
  308    00000172 ........          BL      OSEnableIRQ
  309    00000176 00BD              POP     {PC}
  310                           
  310.1                                  TABLE.32
  310.2  00000178 04ED00E0              Reference on line 146,161
  310.3  0000017C 00000010              Reference on line 147,162
  310.4  00000180 34EF00E0              Reference on line 222
  311                               END
##############################
#           CRC:0            #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 388         #
##############################



