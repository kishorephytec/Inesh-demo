###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         29/Mar/2025  15:53:55
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\ssl_cookie.c
#    Command line                 =
#        -f "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\library_17211336700577820660.dir\ssl_cookie.o.rsp"
#        ("D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\ssl_cookie.c"
#        -D DEBUG_EFM=1 -D EFR32FG28B322F1024IM48=1 -D
#        configNUM_SDK_THREAD_LOCAL_STORAGE_POINTERS=2 -D
#        SL_COMPONENT_CATALOG_PRESENT=1 -D
#        MBEDTLS_CONFIG_FILE=<sl_mbedtls_config.h> -D
#        MBEDTLS_PSA_CRYPTO_CONFIG_FILE=<psa_crypto_config.h> -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -D
#        RTT_USE_ASM=0 -lC "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\lst\library_17211336700577820660.dir"
#        --diag_suppress Pa050 -o "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\library_17211336700577820660.dir"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M33 --cmse --cmse -e --fpu=VFPv5_sp --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        9.2\arm\inc\c\DLib_Config_Normal.h" -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\rail\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\wisun\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\.\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\Device\SiliconLabs\EFR32FG28\Include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_project_info\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\common\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\src\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\CMSIS\Core\Include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\CMSIS\RTOS2\Include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\device_init\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emdrv\common\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emlib\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\iostream\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\config\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\config\preset\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\cpu\include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\ports\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emdrv\nvm3\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\peripheral\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\printf\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\printf\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_psa_driver\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\common\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\ble\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\ieee802154\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\wmbus\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\zwave\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\chip\efr32\efr32xg2x\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\sidewalk\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\pa-conversions\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\pa-conversions\efr32xg28\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\rail_util_pti\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\se_manager\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\se_manager\src\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\segger\systemview\SEGGER\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\silicon_labs\silabs_core\memory_manager\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\common\toolchain\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\system\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_core\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_setting\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\cli_util\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\event_manager\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\ns_list\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\ping\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\nanostack\nanostack-libservice\mbed-client-libservice\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\udp_client\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\sleeptimer\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\plugin\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\stack\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\stack\inc\socket\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\autogen\\" -On
#        --use_c++_inline) --dependencies=n "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\library_17211336700577820660.dir\ssl_cookie.o.iar_deps"
#    Locale                       =  C
#    List file                    =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\lst\library_17211336700577820660.dir\ssl_cookie.lst
#    Object file                  =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\library_17211336700577820660.dir\ssl_cookie.o
#    Runtime model:                  
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#
###############################################################################

D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\ssl_cookie.c
      1          /*
      2           *  DTLS cookie callbacks implementation
      3           *
      4           *  Copyright The Mbed TLS Contributors
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           */
     19          /*
     20           * These session callbacks use a simple chained list
     21           * to store and retrieve the session information.
     22           */
     23          
     24          #include "common.h"
     25          
     26          #if defined(MBEDTLS_SSL_COOKIE_C)
     27          
     28          #include "mbedtls/platform.h"
     29          
     30          #include "mbedtls/ssl_cookie.h"
     31          #include "ssl_misc.h"
     32          #include "mbedtls/error.h"
     33          #include "mbedtls/platform_util.h"
     34          #include "mbedtls/constant_time.h"
     35          
     36          #include <string.h>
     37          
     38          #if defined(MBEDTLS_USE_PSA_CRYPTO)
     39          #include "md_psa.h"
     40          /* Define a local translating function to save code size by not using too many
     41           * arguments in each translating place. */
     42          static int local_err_translation(psa_status_t status)
     43          {
     44              return psa_status_to_mbedtls(status, psa_to_ssl_errors,
     45                                           ARRAY_LENGTH(psa_to_ssl_errors),
     46                                           psa_generic_status_to_mbedtls);
     47          }
     48          #define PSA_TO_MBEDTLS_ERR(status) local_err_translation(status)
     49          #endif
     50          
     51          /*
     52           * If DTLS is in use, then at least one of SHA-256 or SHA-384 is
     53           * available. Try SHA-256 first as 384 wastes resources
     54           */
     55          #if defined(MBEDTLS_MD_CAN_SHA256)
     56          #define COOKIE_MD           MBEDTLS_MD_SHA256
     57          #define COOKIE_MD_OUTLEN    32
     58          #define COOKIE_HMAC_LEN     28
     59          #elif defined(MBEDTLS_MD_CAN_SHA384)
     60          #define COOKIE_MD           MBEDTLS_MD_SHA384
     61          #define COOKIE_MD_OUTLEN    48
     62          #define COOKIE_HMAC_LEN     28
     63          #else
     64          #error "DTLS hello verify needs SHA-256 or SHA-384"
     65          #endif
     66          
     67          /*
     68           * Cookies are formed of a 4-bytes timestamp (or serial number) and
     69           * an HMAC of timestamp and client ID.
     70           */
     71          #define COOKIE_LEN      (4 + COOKIE_HMAC_LEN)
     72          
     73          void mbedtls_ssl_cookie_init(mbedtls_ssl_cookie_ctx *ctx)
     74          {
     75          #if defined(MBEDTLS_USE_PSA_CRYPTO)
     76              ctx->psa_hmac_key = MBEDTLS_SVC_KEY_ID_INIT;
     77          #else
     78              mbedtls_md_init(&ctx->hmac_ctx);
     79          #endif /* MBEDTLS_USE_PSA_CRYPTO */
     80          #if !defined(MBEDTLS_HAVE_TIME)
     81              ctx->serial = 0;
     82          #endif
     83              ctx->timeout = MBEDTLS_SSL_COOKIE_TIMEOUT;
     84          
     85          #if !defined(MBEDTLS_USE_PSA_CRYPTO)
     86          #if defined(MBEDTLS_THREADING_C)
     87              mbedtls_mutex_init(&ctx->mutex);
     88          #endif
     89          #endif /* !MBEDTLS_USE_PSA_CRYPTO */
     90          }
     91          
     92          void mbedtls_ssl_cookie_set_timeout(mbedtls_ssl_cookie_ctx *ctx, unsigned long delay)
     93          {
     94              ctx->timeout = delay;
     95          }
     96          
     97          void mbedtls_ssl_cookie_free(mbedtls_ssl_cookie_ctx *ctx)
     98          {
     99          #if defined(MBEDTLS_USE_PSA_CRYPTO)
    100              psa_destroy_key(ctx->psa_hmac_key);
    101          #else
    102              mbedtls_md_free(&ctx->hmac_ctx);
    103          
    104          #if defined(MBEDTLS_THREADING_C)
    105              mbedtls_mutex_free(&ctx->mutex);
    106          #endif
    107          #endif /* MBEDTLS_USE_PSA_CRYPTO */
    108          
    109              mbedtls_platform_zeroize(ctx, sizeof(mbedtls_ssl_cookie_ctx));
    110          }
    111          
    112          int mbedtls_ssl_cookie_setup(mbedtls_ssl_cookie_ctx *ctx,
    113                                       int (*f_rng)(void *, unsigned char *, size_t),
    114                                       void *p_rng)
    115          {
    116          #if defined(MBEDTLS_USE_PSA_CRYPTO)
    117              psa_key_attributes_t attributes = PSA_KEY_ATTRIBUTES_INIT;
    118              psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;
    119              psa_algorithm_t alg;
    120          
    121              (void) f_rng;
    122              (void) p_rng;
    123          
    124              alg = mbedtls_md_psa_alg_from_type(COOKIE_MD);
    125              if (alg == 0) {
    126                  return MBEDTLS_ERR_SSL_BAD_INPUT_DATA;
    127              }
    128          
    129              ctx->psa_hmac_alg = PSA_ALG_TRUNCATED_MAC(PSA_ALG_HMAC(alg),
    130                                                        COOKIE_HMAC_LEN);
    131          
    132              psa_set_key_usage_flags(&attributes, PSA_KEY_USAGE_VERIFY_MESSAGE |
    133                                      PSA_KEY_USAGE_SIGN_MESSAGE);
    134              psa_set_key_algorithm(&attributes, ctx->psa_hmac_alg);
    135              psa_set_key_type(&attributes, PSA_KEY_TYPE_HMAC);
    136              psa_set_key_bits(&attributes, PSA_BYTES_TO_BITS(COOKIE_MD_OUTLEN));
    137          
    138              if ((status = psa_generate_key(&attributes,
    139                                             &ctx->psa_hmac_key)) != PSA_SUCCESS) {
    140                  return PSA_TO_MBEDTLS_ERR(status);
    141              }
    142          #else
    143              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    144              unsigned char key[COOKIE_MD_OUTLEN];
    145          
    146              if ((ret = f_rng(p_rng, key, sizeof(key))) != 0) {
    147                  return ret;
    148              }
    149          
    150              ret = mbedtls_md_setup(&ctx->hmac_ctx, mbedtls_md_info_from_type(COOKIE_MD), 1);
    151              if (ret != 0) {
    152                  return ret;
    153              }
    154          
    155              ret = mbedtls_md_hmac_starts(&ctx->hmac_ctx, key, sizeof(key));
    156              if (ret != 0) {
    157                  return ret;
    158              }
    159          
    160              mbedtls_platform_zeroize(key, sizeof(key));
    161          #endif /* MBEDTLS_USE_PSA_CRYPTO */
    162          
    163              return 0;
    164          }
    165          
    166          #if !defined(MBEDTLS_USE_PSA_CRYPTO)
    167          /*
    168           * Generate the HMAC part of a cookie
    169           */
    170          MBEDTLS_CHECK_RETURN_CRITICAL
    171          static int ssl_cookie_hmac(mbedtls_md_context_t *hmac_ctx,
    172                                     const unsigned char time[4],
    173                                     unsigned char **p, unsigned char *end,
    174                                     const unsigned char *cli_id, size_t cli_id_len)
    175          {
    176              unsigned char hmac_out[COOKIE_MD_OUTLEN];
    177          
    178              MBEDTLS_SSL_CHK_BUF_PTR(*p, end, COOKIE_HMAC_LEN);
    179          
    180              if (mbedtls_md_hmac_reset(hmac_ctx) != 0 ||
    181                  mbedtls_md_hmac_update(hmac_ctx, time, 4) != 0 ||
    182                  mbedtls_md_hmac_update(hmac_ctx, cli_id, cli_id_len) != 0 ||
    183                  mbedtls_md_hmac_finish(hmac_ctx, hmac_out) != 0) {
    184                  return MBEDTLS_ERR_SSL_INTERNAL_ERROR;
    185              }
    186          
    187              memcpy(*p, hmac_out, COOKIE_HMAC_LEN);
    188              *p += COOKIE_HMAC_LEN;
    189          
    190              return 0;
    191          }
    192          #endif /* !MBEDTLS_USE_PSA_CRYPTO */
    193          
    194          /*
    195           * Generate cookie for DTLS ClientHello verification
    196           */
    197          int mbedtls_ssl_cookie_write(void *p_ctx,
    198                                       unsigned char **p, unsigned char *end,
    199                                       const unsigned char *cli_id, size_t cli_id_len)
    200          {
    201          #if defined(MBEDTLS_USE_PSA_CRYPTO)
    202              psa_mac_operation_t operation = PSA_MAC_OPERATION_INIT;
    203              psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;
    204              size_t sign_mac_length = 0;
    205          #endif
    206              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    207              mbedtls_ssl_cookie_ctx *ctx = (mbedtls_ssl_cookie_ctx *) p_ctx;
    208              unsigned long t;
    209          
    210              if (ctx == NULL || cli_id == NULL) {
    211                  return MBEDTLS_ERR_SSL_BAD_INPUT_DATA;
    212              }
    213          
    214              MBEDTLS_SSL_CHK_BUF_PTR(*p, end, COOKIE_LEN);
    215          
    216          #if defined(MBEDTLS_HAVE_TIME)
    217              t = (unsigned long) mbedtls_time(NULL);
    218          #else
    219              t = ctx->serial++;
    220          #endif
    221          
    222              MBEDTLS_PUT_UINT32_BE(t, *p, 0);
    223              *p += 4;
    224          
    225          #if defined(MBEDTLS_USE_PSA_CRYPTO)
    226              status = psa_mac_sign_setup(&operation, ctx->psa_hmac_key,
    227                                          ctx->psa_hmac_alg);
    228              if (status != PSA_SUCCESS) {
    229                  ret = PSA_TO_MBEDTLS_ERR(status);
    230                  goto exit;
    231              }
    232          
    233              status = psa_mac_update(&operation, *p - 4, 4);
    234              if (status != PSA_SUCCESS) {
    235                  ret = PSA_TO_MBEDTLS_ERR(status);
    236                  goto exit;
    237              }
    238          
    239              status = psa_mac_update(&operation, cli_id, cli_id_len);
    240              if (status != PSA_SUCCESS) {
    241                  ret = PSA_TO_MBEDTLS_ERR(status);
    242                  goto exit;
    243              }
    244          
    245              status = psa_mac_sign_finish(&operation, *p, COOKIE_MD_OUTLEN,
    246                                           &sign_mac_length);
    247              if (status != PSA_SUCCESS) {
    248                  ret = PSA_TO_MBEDTLS_ERR(status);
    249                  goto exit;
    250              }
    251          
    252              *p += COOKIE_HMAC_LEN;
    253          
    254              ret = 0;
    255          #else
    256          #if defined(MBEDTLS_THREADING_C)
    257              if ((ret = mbedtls_mutex_lock(&ctx->mutex)) != 0) {
    258                  return MBEDTLS_ERROR_ADD(MBEDTLS_ERR_SSL_INTERNAL_ERROR, ret);
    259              }
    260          #endif
    261          
    262              ret = ssl_cookie_hmac(&ctx->hmac_ctx, *p - 4,
    263                                    p, end, cli_id, cli_id_len);
    264          
    265          #if defined(MBEDTLS_THREADING_C)
    266              if (mbedtls_mutex_unlock(&ctx->mutex) != 0) {
    267                  return MBEDTLS_ERROR_ADD(MBEDTLS_ERR_SSL_INTERNAL_ERROR,
    268                                           MBEDTLS_ERR_THREADING_MUTEX_ERROR);
    269              }
    270          #endif
    271          #endif /* MBEDTLS_USE_PSA_CRYPTO */
    272          
    273          #if defined(MBEDTLS_USE_PSA_CRYPTO)
    274          exit:
    275              status = psa_mac_abort(&operation);
    276              if (status != PSA_SUCCESS) {
    277                  ret = PSA_TO_MBEDTLS_ERR(status);
    278              }
    279          #endif /* MBEDTLS_USE_PSA_CRYPTO */
    280              return ret;
    281          }
    282          
    283          /*
    284           * Check a cookie
    285           */
    286          int mbedtls_ssl_cookie_check(void *p_ctx,
    287                                       const unsigned char *cookie, size_t cookie_len,
    288                                       const unsigned char *cli_id, size_t cli_id_len)
    289          {
    290          #if defined(MBEDTLS_USE_PSA_CRYPTO)
    291              psa_mac_operation_t operation = PSA_MAC_OPERATION_INIT;
    292              psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;
    293          #else
    294              unsigned char ref_hmac[COOKIE_HMAC_LEN];
    295              unsigned char *p = ref_hmac;
    296          #endif
    297              int ret = 0;
    298              mbedtls_ssl_cookie_ctx *ctx = (mbedtls_ssl_cookie_ctx *) p_ctx;
    299              unsigned long cur_time, cookie_time;
    300          
    301              if (ctx == NULL || cli_id == NULL) {
    302                  return MBEDTLS_ERR_SSL_BAD_INPUT_DATA;
    303              }
    304          
    305              if (cookie_len != COOKIE_LEN) {
    306                  return -1;
    307              }
    308          
    309          #if defined(MBEDTLS_USE_PSA_CRYPTO)
    310              status = psa_mac_verify_setup(&operation, ctx->psa_hmac_key,
    311                                            ctx->psa_hmac_alg);
    312              if (status != PSA_SUCCESS) {
    313                  ret = PSA_TO_MBEDTLS_ERR(status);
    314                  goto exit;
    315              }
    316          
    317              status = psa_mac_update(&operation, cookie, 4);
    318              if (status != PSA_SUCCESS) {
    319                  ret = PSA_TO_MBEDTLS_ERR(status);
    320                  goto exit;
    321              }
    322          
    323              status = psa_mac_update(&operation, cli_id,
    324                                      cli_id_len);
    325              if (status != PSA_SUCCESS) {
    326                  ret = PSA_TO_MBEDTLS_ERR(status);
    327                  goto exit;
    328              }
    329          
    330              status = psa_mac_verify_finish(&operation, cookie + 4,
    331                                             COOKIE_HMAC_LEN);
    332              if (status != PSA_SUCCESS) {
    333                  ret = PSA_TO_MBEDTLS_ERR(status);
    334                  goto exit;
    335              }
    336          
    337              ret = 0;
    338          #else
    339          #if defined(MBEDTLS_THREADING_C)
    340              if ((ret = mbedtls_mutex_lock(&ctx->mutex)) != 0) {
    341                  return MBEDTLS_ERROR_ADD(MBEDTLS_ERR_SSL_INTERNAL_ERROR, ret);
    342              }
    343          #endif
    344          
    345              if (ssl_cookie_hmac(&ctx->hmac_ctx, cookie,
    346                                  &p, p + sizeof(ref_hmac),
    347                                  cli_id, cli_id_len) != 0) {
    348                  ret = -1;
    349              }
    350          
    351          #if defined(MBEDTLS_THREADING_C)
    352              if (mbedtls_mutex_unlock(&ctx->mutex) != 0) {
    353                  ret = MBEDTLS_ERROR_ADD(MBEDTLS_ERR_SSL_INTERNAL_ERROR,
    354                                          MBEDTLS_ERR_THREADING_MUTEX_ERROR);
    355              }
    356          #endif
    357          
    358              if (ret != 0) {
    359                  goto exit;
    360              }
    361          
    362              if (mbedtls_ct_memcmp(cookie + 4, ref_hmac, sizeof(ref_hmac)) != 0) {
    363                  ret = -1;
    364                  goto exit;
    365              }
    366          #endif /* MBEDTLS_USE_PSA_CRYPTO */
    367          
    368          #if defined(MBEDTLS_HAVE_TIME)
    369              cur_time = (unsigned long) mbedtls_time(NULL);
    370          #else
    371              cur_time = ctx->serial;
    372          #endif
    373          
    374              cookie_time = (unsigned long) MBEDTLS_GET_UINT32_BE(cookie, 0);
    375          
    376              if (ctx->timeout != 0 && cur_time - cookie_time > ctx->timeout) {
    377                  ret = -1;
    378                  goto exit;
    379              }
    380          
    381          exit:
    382          #if defined(MBEDTLS_USE_PSA_CRYPTO)
    383              status = psa_mac_abort(&operation);
    384              if (status != PSA_SUCCESS) {
    385                  ret = PSA_TO_MBEDTLS_ERR(status);
    386              }
    387          #else
    388              mbedtls_platform_zeroize(ref_hmac, sizeof(ref_hmac));
    389          #endif /* MBEDTLS_USE_PSA_CRYPTO */
    390              return ret;
    391          }
    392          #endif /* MBEDTLS_SSL_COOKIE_C */


 
 
 0 bytes of memory

Errors: none
Warnings: none
