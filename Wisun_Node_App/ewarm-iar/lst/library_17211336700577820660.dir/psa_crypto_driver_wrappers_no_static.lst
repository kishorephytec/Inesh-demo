###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         29/Mar/2025  15:53:57
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\psa_crypto_driver_wrappers_no_static.c
#    Command line                 =
#        -f "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\library_17211336700577820660.dir\psa_crypto_driver_wrappers_no_static.o.rsp"
#        ("D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\psa_crypto_driver_wrappers_no_static.c"
#        -D DEBUG_EFM=1 -D EFR32FG28B322F1024IM48=1 -D
#        configNUM_SDK_THREAD_LOCAL_STORAGE_POINTERS=2 -D
#        SL_COMPONENT_CATALOG_PRESENT=1 -D
#        MBEDTLS_CONFIG_FILE=<sl_mbedtls_config.h> -D
#        MBEDTLS_PSA_CRYPTO_CONFIG_FILE=<psa_crypto_config.h> -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -D
#        RTT_USE_ASM=0 -lC "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\lst\library_17211336700577820660.dir"
#        --diag_suppress Pa050 -o "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\library_17211336700577820660.dir"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M33 --cmse --cmse -e --fpu=VFPv5_sp --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        9.2\arm\inc\c\DLib_Config_Normal.h" -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\rail\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\wisun\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\.\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\Device\SiliconLabs\EFR32FG28\Include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_project_info\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\common\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\src\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\CMSIS\Core\Include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\CMSIS\RTOS2\Include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\device_init\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emdrv\common\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emlib\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\iostream\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\config\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\config\preset\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\cpu\include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\ports\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emdrv\nvm3\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\peripheral\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\printf\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\printf\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_psa_driver\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\common\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\ble\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\ieee802154\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\wmbus\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\zwave\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\chip\efr32\efr32xg2x\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\sidewalk\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\pa-conversions\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\pa-conversions\efr32xg28\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\rail_util_pti\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\se_manager\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\se_manager\src\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\segger\systemview\SEGGER\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\silicon_labs\silabs_core\memory_manager\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\common\toolchain\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\system\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_core\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_setting\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\cli_util\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\event_manager\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\ns_list\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\ping\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\nanostack\nanostack-libservice\mbed-client-libservice\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\udp_client\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\sleeptimer\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\plugin\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\stack\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\stack\inc\socket\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\autogen\\" -On
#        --use_c++_inline) --dependencies=n "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\library_17211336700577820660.dir\psa_crypto_driver_wrappers_no_static.o.iar_deps"
#    Locale                       =  C
#    List file                    =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\lst\library_17211336700577820660.dir\psa_crypto_driver_wrappers_no_static.lst
#    Object file                  =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\library_17211336700577820660.dir\psa_crypto_driver_wrappers_no_static.o
#    Runtime model:                  
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_file_descriptor     =  0
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#
###############################################################################

D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\psa_crypto_driver_wrappers_no_static.c
      1          /*
      2           *  Functions to delegate cryptographic operations to an available
      3           *  and appropriate accelerator.
      4           *  Warning: This file is now auto-generated.
      5           */
      6          /*  Copyright The Mbed TLS Contributors
      7           *  SPDX-License-Identifier: Apache-2.0
      8           *
      9           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
     10           *  not use this file except in compliance with the License.
     11           *  You may obtain a copy of the License at
     12           *
     13           *  http://www.apache.org/licenses/LICENSE-2.0
     14           *
     15           *  Unless required by applicable law or agreed to in writing, software
     16           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     17           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     18           *  See the License for the specific language governing permissions and
     19           *  limitations under the License.
     20           */
     21          
     22          
     23          /* BEGIN-common headers */
     24          #include "common.h"
     25          #include "psa_crypto_aead.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __vfp uint32_t psa_get_key_lifetime(psa_key_attributes_t const *)
   \                     psa_get_key_lifetime: (+1)
   \        0x0   0x6840             LDR      R0,[R0, #+4]
   \        0x2   0x4770             BX       LR
     26          #include "psa_crypto_cipher.h"
     27          #include "psa_crypto_core.h"
     28          #include "psa_crypto_driver_wrappers_no_static.h"
     29          #include "psa_crypto_hash.h"
     30          #include "psa_crypto_mac.h"
     31          #include "psa_crypto_pake.h"
     32          #include "psa_crypto_rsa.h"
     33          
     34          #include "mbedtls/platform.h"
     35          /* END-common headers */
     36          
     37          #if defined(MBEDTLS_PSA_CRYPTO_C)
     38          
     39          /* BEGIN-driver headers */
     40          /* Headers for mbedtls_test opaque driver */
     41          #if defined(PSA_CRYPTO_DRIVER_TEST)
     42          #include "test/drivers/test_driver.h"
     43          
     44          #endif
     45          /* Headers for mbedtls_test transparent driver */
     46          #if defined(PSA_CRYPTO_DRIVER_TEST)
     47          #include "test/drivers/test_driver.h"
     48          
     49          #endif
     50          /* Headers for p256 transparent driver */
     51          #if defined(MBEDTLS_PSA_P256M_DRIVER_ENABLED)
     52          #include "../3rdparty/p256-m/p256-m_driver_entrypoints.h"
     53          
     54          #endif
     55          
     56          
     57          /* SiLabs Driver Headers */
     58          #include "sli_psa_driver_features.h"
     59          
     60          #include <string.h>
     61          
     62          #if defined(SLI_MBEDTLS_DEVICE_HSE)
     63          #ifndef PSA_CRYPTO_DRIVER_PRESENT
     64          #define PSA_CRYPTO_DRIVER_PRESENT
     65          #endif
     66          #ifndef PSA_CRYPTO_ACCELERATOR_DRIVER_PRESENT
     67          #define PSA_CRYPTO_ACCELERATOR_DRIVER_PRESENT
     68          #endif
     69          #include "sli_se_transparent_types.h"
     70          #include "sli_se_transparent_functions.h"
     71          #endif
     72          
     73          #if defined(SLI_MBEDTLS_DEVICE_HSE) && defined(SLI_PSA_DRIVER_FEATURE_OPAQUE_KEYS)
     74          #ifndef PSA_CRYPTO_DRIVER_PRESENT
     75          #define PSA_CRYPTO_DRIVER_PRESENT
     76          #endif
     77          #ifndef PSA_CRYPTO_ACCELERATOR_DRIVER_PRESENT
     78          #define PSA_CRYPTO_ACCELERATOR_DRIVER_PRESENT
     79          #endif
     80          #include "sli_se_opaque_types.h"
     81          #include "sli_se_opaque_functions.h"
     82          #endif /* SLI_MBEDTLS_DEVICE_HSE  && SLI_PSA_DRIVER_FEATURE_OPAQUE_KEYS */
     83          
     84          #if defined(SLI_MBEDTLS_DEVICE_VSE)
     85          #ifndef PSA_CRYPTO_DRIVER_PRESENT
     86          #define PSA_CRYPTO_DRIVER_PRESENT
     87          #endif
     88          #ifndef PSA_CRYPTO_ACCELERATOR_DRIVER_PRESENT
     89          #define PSA_CRYPTO_ACCELERATOR_DRIVER_PRESENT
     90          #endif
     91          #include "sli_cryptoacc_transparent_types.h"
     92          #include "sli_cryptoacc_transparent_functions.h"
     93          #if defined(SLI_PSA_DRIVER_FEATURE_OPAQUE_KEYS)
     94          #include "sli_cryptoacc_opaque_types.h"
     95          #include "sli_cryptoacc_opaque_functions.h"
     96          #endif /* SLI_PSA_DRIVER_FEATURE_OPAQUE_KEYS */
     97          #endif
     98          
     99          #if defined(SLI_MBEDTLS_DEVICE_S1)
    100          #ifndef PSA_CRYPTO_DRIVER_PRESENT
    101          #define PSA_CRYPTO_DRIVER_PRESENT
    102          #endif
    103          #ifndef PSA_CRYPTO_ACCELERATOR_DRIVER_PRESENT
    104          #define PSA_CRYPTO_ACCELERATOR_DRIVER_PRESENT
    105          #endif
    106          #include "sli_crypto_transparent_types.h"
    107          #include "sli_crypto_transparent_functions.h"
    108          #endif
    109          
    110          #if defined(SLI_MBEDTLS_DEVICE_SI91X)
    111          #ifndef PSA_CRYPTO_DRIVER_PRESENT
    112          #define PSA_CRYPTO_DRIVER_PRESENT
    113          #endif
    114          #ifndef PSA_CRYPTO_ACCELERATOR_DRIVER_PRESENT
    115          #define PSA_CRYPTO_ACCELERATOR_DRIVER_PRESENT
    116          #endif
    117          #include "sli_si91x_crypto_driver_functions.h"
    118          #endif
    119          
    120          #ifdef SLI_SECURE_KEY_STORAGE_DEVICE_SI91X
    121          #include "sl_si91x_psa_wrap.h"
    122          #endif /* Secure key storage driver **/
    123          
    124          /* END-driver headers */
    125          
    126          /* Auto-generated values depending on which drivers are registered.
    127           * ID 0 is reserved for unallocated operations.
    128           * ID 1 is reserved for the Mbed TLS software driver. */
    129          /* BEGIN-driver id definition */
    130          #define PSA_CRYPTO_MBED_TLS_DRIVER_ID (1)
    131          #define MBEDTLS_TEST_OPAQUE_DRIVER_ID (2)
    132          #define MBEDTLS_TEST_TRANSPARENT_DRIVER_ID (3)
    133          #define P256_TRANSPARENT_DRIVER_ID (4)
    134          
    135          
    136          /* SiLabs Driver IDs */
    137          #if defined(PSA_CRYPTO_ACCELERATOR_DRIVER_PRESENT)
    138          #define SLI_SE_TRANSPARENT_DRIVER_ID (4)
    139          #define SLI_SE_OPAQUE_DRIVER_ID (5)
    140          #define SLI_CRYPTOACC_TRANSPARENT_DRIVER_ID (6)
    141          #define SLI_CRYPTO_TRANSPARENT_DRIVER_ID (7)
    142          #endif
    143          
    144          /* END-driver id */
    145          
    146          /* BEGIN-Common Macro definitions */
    147          
    148          /* END-Common Macro definitions */
    149          
    150          /* Support the 'old' SE interface when asked to */
    151          #if defined(MBEDTLS_PSA_CRYPTO_SE_C)
    152          /* PSA_CRYPTO_DRIVER_PRESENT is defined when either a new-style or old-style
    153           * SE driver is present, to avoid unused argument errors at compile time. */
    154          #ifndef PSA_CRYPTO_DRIVER_PRESENT
    155          #define PSA_CRYPTO_DRIVER_PRESENT
    156          #endif
    157          #include "psa_crypto_se.h"
    158          #endif
    159          
    160          /** Get the key buffer size required to store the key material of a key
    161           *  associated with an opaque driver.
    162           *
    163           * \param[in] attributes  The key attributes.
    164           * \param[out] key_buffer_size  Minimum buffer size to contain the key material
    165           *
    166           * \retval #PSA_SUCCESS
    167           *         The minimum size for a buffer to contain the key material has been
    168           *         returned successfully.
    169           * \retval #PSA_ERROR_NOT_SUPPORTED
    170           *         The type and/or the size in bits of the key or the combination of
    171           *         the two is not supported.
    172           * \retval #PSA_ERROR_INVALID_ARGUMENT
    173           *         The key is declared with a lifetime not known to us.
    174           */

   \                                 In section .text, align 2, keep-with-next
    175          psa_status_t psa_driver_wrapper_get_key_buffer_size(
    176              const psa_key_attributes_t *attributes,
    177              size_t *key_buffer_size )
    178          {
   \                     psa_driver_wrapper_get_key_buffer_size: (+1)
   \        0x0   0xB470             PUSH     {R4-R6}
   \        0x2   0x0003             MOVS     R3,R0
    179              psa_key_location_t location = PSA_KEY_LIFETIME_GET_LOCATION( attributes->core.lifetime );
   \        0x4   0x685C             LDR      R4,[R3, #+4]
   \        0x6   0x0A24             LSRS     R4,R4,#+8
    180              psa_key_type_t key_type = attributes->core.type;
   \        0x8   0x881D             LDRH     R5,[R3, #+0]
    181              size_t key_bits = attributes->core.bits;
   \        0xA   0x885E             LDRH     R6,[R3, #+2]
    182              size_t buffer_size = 0;
   \        0xC   0x2200             MOVS     R2,#+0
    183          
    184              switch( location )
   \        0xE   0x2C00             CMP      R4,#+0
   \       0x10   0xD002             BEQ.N    ??psa_driver_wrapper_get_key_buffer_size_0
   \       0x12   0x2C01             CMP      R4,#+1
   \       0x14   0xD076             BEQ.N    ??psa_driver_wrapper_get_key_buffer_size_1
   \       0x16   0xE107             B.N      ??psa_driver_wrapper_get_key_buffer_size_2
    185              {
    186          #if defined(SLI_MBEDTLS_DEVICE_VSE) && defined(SLI_PSA_DRIVER_FEATURE_OPAQUE_KEYS)
    187                  case PSA_KEY_LOCATION_SL_CRYPTOACC_OPAQUE:
    188                      buffer_size = sizeof(sli_cryptoacc_opaque_key_context_t);
    189                      *key_buffer_size = buffer_size;
    190                      return ( PSA_SUCCESS );
    191          #endif
    192          #if defined(PSA_CRYPTO_DRIVER_TEST)
    193                  case PSA_CRYPTO_TEST_DRIVER_LOCATION:
    194          #if defined(MBEDTLS_PSA_CRYPTO_BUILTIN_KEYS)
    195                      /* Emulate property 'builtin_key_size' */
    196                      if( psa_key_id_is_builtin(
    197                              MBEDTLS_SVC_KEY_ID_GET_KEY_ID(
    198                                  psa_get_key_id( attributes ) ) ) )
    199                      {
    200                          *key_buffer_size = sizeof( psa_drv_slot_number_t );
    201                          return( PSA_SUCCESS );
    202                      }
    203          #endif /* MBEDTLS_PSA_CRYPTO_BUILTIN_KEYS */
    204                      *key_buffer_size = mbedtls_test_opaque_size_function( key_type,
    205                                                                            key_bits );
    206                      return( ( *key_buffer_size != 0 ) ?
    207                              PSA_SUCCESS : PSA_ERROR_NOT_SUPPORTED );
    208          #endif /* PSA_CRYPTO_DRIVER_TEST */
    209                  case PSA_KEY_LOCATION_LOCAL_STORAGE:
    210                      buffer_size = PSA_EXPORT_KEY_OUTPUT_SIZE( key_type, key_bits );
   \                     ??psa_driver_wrapper_get_key_buffer_size_0: (+1)
   \       0x18   0x0028             MOVS     R0,R5
   \       0x1A   0xB280             UXTH     R0,R0
   \       0x1C   0xF410 0x40E0      ANDS     R0,R0,#0x7000
   \       0x20   0xF5B0 0x5F80      CMP      R0,#+4096
   \       0x24   0xD006             BEQ.N    ??psa_driver_wrapper_get_key_buffer_size_3
   \       0x26   0x0028             MOVS     R0,R5
   \       0x28   0xB280             UXTH     R0,R0
   \       0x2A   0xF410 0x40E0      ANDS     R0,R0,#0x7000
   \       0x2E   0xF5B0 0x5F00      CMP      R0,#+8192
   \       0x32   0xD102             BNE.N    ??psa_driver_wrapper_get_key_buffer_size_4
   \                     ??psa_driver_wrapper_get_key_buffer_size_3: (+1)
   \       0x34   0x1DF2             ADDS     R2,R6,#+7
   \       0x36   0x08D2             LSRS     R2,R2,#+3
   \       0x38   0xE053             B.N      ??psa_driver_wrapper_get_key_buffer_size_5
   \                     ??psa_driver_wrapper_get_key_buffer_size_4: (+1)
   \       0x3A   0x002A             MOVS     R2,R5
   \       0x3C   0xB292             UXTH     R2,R2
   \       0x3E   0x....             LDR.N    R0,??DataTable1
   \       0x40   0x4002             ANDS     R2,R0,R2
   \       0x42   0xF5B2 0x4F84      CMP      R2,#+16896
   \       0x46   0xD102             BNE.N    ??psa_driver_wrapper_get_key_buffer_size_6
   \       0x48   0x1DF2             ADDS     R2,R6,#+7
   \       0x4A   0x08D2             LSRS     R2,R2,#+3
   \       0x4C   0xE049             B.N      ??psa_driver_wrapper_get_key_buffer_size_5
   \                     ??psa_driver_wrapper_get_key_buffer_size_6: (+1)
   \       0x4E   0x002A             MOVS     R2,R5
   \       0x50   0xF247 0x0001      MOVW     R0,#+28673
   \       0x54   0xB292             UXTH     R2,R2
   \       0x56   0x4282             CMP      R2,R0
   \       0x58   0xD108             BNE.N    ??psa_driver_wrapper_get_key_buffer_size_7
   \       0x5A   0x0030             MOVS     R0,R6
   \       0x5C   0x0840             LSRS     R0,R0,#+1
   \       0x5E   0x1C40             ADDS     R0,R0,#+1
   \       0x60   0x08C0             LSRS     R0,R0,#+3
   \       0x62   0x2209             MOVS     R2,#+9
   \       0x64   0xFB02 0xF200      MUL      R2,R2,R0
   \       0x68   0x323B             ADDS     R2,R2,#+59
   \       0x6A   0xE03A             B.N      ??psa_driver_wrapper_get_key_buffer_size_5
   \                     ??psa_driver_wrapper_get_key_buffer_size_7: (+1)
   \       0x6C   0x002A             MOVS     R2,R5
   \       0x6E   0xF244 0x0001      MOVW     R0,#+16385
   \       0x72   0xB292             UXTH     R2,R2
   \       0x74   0x4282             CMP      R2,R0
   \       0x76   0xD103             BNE.N    ??psa_driver_wrapper_get_key_buffer_size_8
   \       0x78   0x0032             MOVS     R2,R6
   \       0x7A   0x08D2             LSRS     R2,R2,#+3
   \       0x7C   0x3210             ADDS     R2,R2,#+16
   \       0x7E   0xE030             B.N      ??psa_driver_wrapper_get_key_buffer_size_5
   \                     ??psa_driver_wrapper_get_key_buffer_size_8: (+1)
   \       0x80   0x002A             MOVS     R2,R5
   \       0x82   0xF247 0x0002      MOVW     R0,#+28674
   \       0x86   0xB292             UXTH     R2,R2
   \       0x88   0x4282             CMP      R2,R0
   \       0x8A   0xD106             BNE.N    ??psa_driver_wrapper_get_key_buffer_size_9
   \       0x8C   0x0030             MOVS     R0,R6
   \       0x8E   0x08C0             LSRS     R0,R0,#+3
   \       0x90   0x2203             MOVS     R2,#+3
   \       0x92   0xFB02 0xF200      MUL      R2,R2,R0
   \       0x96   0x325A             ADDS     R2,R2,#+90
   \       0x98   0xE023             B.N      ??psa_driver_wrapper_get_key_buffer_size_5
   \                     ??psa_driver_wrapper_get_key_buffer_size_9: (+1)
   \       0x9A   0x002A             MOVS     R2,R5
   \       0x9C   0xF244 0x0002      MOVW     R0,#+16386
   \       0xA0   0xB292             UXTH     R2,R2
   \       0xA2   0x4282             CMP      R2,R0
   \       0xA4   0xD106             BNE.N    ??psa_driver_wrapper_get_key_buffer_size_10
   \       0xA6   0x0030             MOVS     R0,R6
   \       0xA8   0x08C0             LSRS     R0,R0,#+3
   \       0xAA   0x2203             MOVS     R2,#+3
   \       0xAC   0xFB02 0xF200      MUL      R2,R2,R0
   \       0xB0   0x324A             ADDS     R2,R2,#+74
   \       0xB2   0xE016             B.N      ??psa_driver_wrapper_get_key_buffer_size_5
   \                     ??psa_driver_wrapper_get_key_buffer_size_10: (+1)
   \       0xB4   0x0028             MOVS     R0,R5
   \       0xB6   0xB280             UXTH     R0,R0
   \       0xB8   0xF030 0x00FF      BICS     R0,R0,#0xFF
   \       0xBC   0xF5B0 0x4FE2      CMP      R0,#+28928
   \       0xC0   0xD102             BNE.N    ??psa_driver_wrapper_get_key_buffer_size_11
   \       0xC2   0x1DF2             ADDS     R2,R6,#+7
   \       0xC4   0x08D2             LSRS     R2,R2,#+3
   \       0xC6   0xE00C             B.N      ??psa_driver_wrapper_get_key_buffer_size_5
   \                     ??psa_driver_wrapper_get_key_buffer_size_11: (+1)
   \       0xC8   0x0028             MOVS     R0,R5
   \       0xCA   0xB280             UXTH     R0,R0
   \       0xCC   0xF030 0x00FF      BICS     R0,R0,#0xFF
   \       0xD0   0xF5B0 0x4F82      CMP      R0,#+16640
   \       0xD4   0xD104             BNE.N    ??psa_driver_wrapper_get_key_buffer_size_12
   \       0xD6   0x1DF0             ADDS     R0,R6,#+7
   \       0xD8   0x08C0             LSRS     R0,R0,#+3
   \       0xDA   0x0042             LSLS     R2,R0,#+1
   \       0xDC   0x1C52             ADDS     R2,R2,#+1
   \       0xDE   0xE000             B.N      ??psa_driver_wrapper_get_key_buffer_size_5
   \                     ??psa_driver_wrapper_get_key_buffer_size_12: (+1)
   \       0xE0   0x2200             MOVS     R2,#+0
    211                      if( buffer_size == 0 ||
    212                          ( PSA_KEY_TYPE_IS_ECC_PUBLIC_KEY(key_type) && buffer_size == 1 ) )
   \                     ??psa_driver_wrapper_get_key_buffer_size_5: (+1)
   \       0xE2   0x2A00             CMP      R2,#+0
   \       0xE4   0xD008             BEQ.N    ??psa_driver_wrapper_get_key_buffer_size_13
   \       0xE6   0x0028             MOVS     R0,R5
   \       0xE8   0xB280             UXTH     R0,R0
   \       0xEA   0xF030 0x00FF      BICS     R0,R0,#0xFF
   \       0xEE   0xF5B0 0x4F82      CMP      R0,#+16640
   \       0xF2   0xD104             BNE.N    ??psa_driver_wrapper_get_key_buffer_size_14
   \       0xF4   0x2A01             CMP      R2,#+1
   \       0xF6   0xD102             BNE.N    ??psa_driver_wrapper_get_key_buffer_size_14
    213                          return( PSA_ERROR_NOT_SUPPORTED );
   \                     ??psa_driver_wrapper_get_key_buffer_size_13: (+1)
   \       0xF8   0xF07F 0x0085      MVNS     R0,#+133
   \       0xFC   0xE098             B.N      ??psa_driver_wrapper_get_key_buffer_size_15
    214                      *key_buffer_size = buffer_size;
   \                     ??psa_driver_wrapper_get_key_buffer_size_14: (+1)
   \       0xFE   0x600A             STR      R2,[R1, #+0]
    215                      return( PSA_SUCCESS );
   \      0x100   0x2000             MOVS     R0,#+0
   \      0x102   0xE095             B.N      ??psa_driver_wrapper_get_key_buffer_size_15
    216          #if defined(SLI_MBEDTLS_DEVICE_HSE) && defined(SLI_PSA_DRIVER_FEATURE_OPAQUE_KEYS)
    217                  case PSA_KEY_LOCATION_SLI_SE_OPAQUE:
    218                      buffer_size = PSA_EXPORT_KEY_OUTPUT_SIZE( key_type, key_bits );
   \                     ??psa_driver_wrapper_get_key_buffer_size_1: (+1)
   \      0x104   0x0028             MOVS     R0,R5
   \      0x106   0xB280             UXTH     R0,R0
   \      0x108   0xF410 0x40E0      ANDS     R0,R0,#0x7000
   \      0x10C   0xF5B0 0x5F80      CMP      R0,#+4096
   \      0x110   0xD006             BEQ.N    ??psa_driver_wrapper_get_key_buffer_size_16
   \      0x112   0x0028             MOVS     R0,R5
   \      0x114   0xB280             UXTH     R0,R0
   \      0x116   0xF410 0x40E0      ANDS     R0,R0,#0x7000
   \      0x11A   0xF5B0 0x5F00      CMP      R0,#+8192
   \      0x11E   0xD102             BNE.N    ??psa_driver_wrapper_get_key_buffer_size_17
   \                     ??psa_driver_wrapper_get_key_buffer_size_16: (+1)
   \      0x120   0x1DF2             ADDS     R2,R6,#+7
   \      0x122   0x08D2             LSRS     R2,R2,#+3
   \      0x124   0xE053             B.N      ??psa_driver_wrapper_get_key_buffer_size_18
   \                     ??psa_driver_wrapper_get_key_buffer_size_17: (+1)
   \      0x126   0x002A             MOVS     R2,R5
   \      0x128   0xB292             UXTH     R2,R2
   \      0x12A   0x....             LDR.N    R0,??DataTable1
   \      0x12C   0x4002             ANDS     R2,R0,R2
   \      0x12E   0xF5B2 0x4F84      CMP      R2,#+16896
   \      0x132   0xD102             BNE.N    ??psa_driver_wrapper_get_key_buffer_size_19
   \      0x134   0x1DF2             ADDS     R2,R6,#+7
   \      0x136   0x08D2             LSRS     R2,R2,#+3
   \      0x138   0xE049             B.N      ??psa_driver_wrapper_get_key_buffer_size_18
   \                     ??psa_driver_wrapper_get_key_buffer_size_19: (+1)
   \      0x13A   0x002A             MOVS     R2,R5
   \      0x13C   0xF247 0x0001      MOVW     R0,#+28673
   \      0x140   0xB292             UXTH     R2,R2
   \      0x142   0x4282             CMP      R2,R0
   \      0x144   0xD108             BNE.N    ??psa_driver_wrapper_get_key_buffer_size_20
   \      0x146   0x0030             MOVS     R0,R6
   \      0x148   0x0840             LSRS     R0,R0,#+1
   \      0x14A   0x1C40             ADDS     R0,R0,#+1
   \      0x14C   0x08C0             LSRS     R0,R0,#+3
   \      0x14E   0x2209             MOVS     R2,#+9
   \      0x150   0xFB02 0xF200      MUL      R2,R2,R0
   \      0x154   0x323B             ADDS     R2,R2,#+59
   \      0x156   0xE03A             B.N      ??psa_driver_wrapper_get_key_buffer_size_18
   \                     ??psa_driver_wrapper_get_key_buffer_size_20: (+1)
   \      0x158   0x002A             MOVS     R2,R5
   \      0x15A   0xF244 0x0001      MOVW     R0,#+16385
   \      0x15E   0xB292             UXTH     R2,R2
   \      0x160   0x4282             CMP      R2,R0
   \      0x162   0xD103             BNE.N    ??psa_driver_wrapper_get_key_buffer_size_21
   \      0x164   0x0032             MOVS     R2,R6
   \      0x166   0x08D2             LSRS     R2,R2,#+3
   \      0x168   0x3210             ADDS     R2,R2,#+16
   \      0x16A   0xE030             B.N      ??psa_driver_wrapper_get_key_buffer_size_18
   \                     ??psa_driver_wrapper_get_key_buffer_size_21: (+1)
   \      0x16C   0x002A             MOVS     R2,R5
   \      0x16E   0xF247 0x0002      MOVW     R0,#+28674
   \      0x172   0xB292             UXTH     R2,R2
   \      0x174   0x4282             CMP      R2,R0
   \      0x176   0xD106             BNE.N    ??psa_driver_wrapper_get_key_buffer_size_22
   \      0x178   0x0030             MOVS     R0,R6
   \      0x17A   0x08C0             LSRS     R0,R0,#+3
   \      0x17C   0x2203             MOVS     R2,#+3
   \      0x17E   0xFB02 0xF200      MUL      R2,R2,R0
   \      0x182   0x325A             ADDS     R2,R2,#+90
   \      0x184   0xE023             B.N      ??psa_driver_wrapper_get_key_buffer_size_18
   \                     ??psa_driver_wrapper_get_key_buffer_size_22: (+1)
   \      0x186   0x002A             MOVS     R2,R5
   \      0x188   0xF244 0x0002      MOVW     R0,#+16386
   \      0x18C   0xB292             UXTH     R2,R2
   \      0x18E   0x4282             CMP      R2,R0
   \      0x190   0xD106             BNE.N    ??psa_driver_wrapper_get_key_buffer_size_23
   \      0x192   0x0030             MOVS     R0,R6
   \      0x194   0x08C0             LSRS     R0,R0,#+3
   \      0x196   0x2203             MOVS     R2,#+3
   \      0x198   0xFB02 0xF200      MUL      R2,R2,R0
   \      0x19C   0x324A             ADDS     R2,R2,#+74
   \      0x19E   0xE016             B.N      ??psa_driver_wrapper_get_key_buffer_size_18
   \                     ??psa_driver_wrapper_get_key_buffer_size_23: (+1)
   \      0x1A0   0x0028             MOVS     R0,R5
   \      0x1A2   0xB280             UXTH     R0,R0
   \      0x1A4   0xF030 0x00FF      BICS     R0,R0,#0xFF
   \      0x1A8   0xF5B0 0x4FE2      CMP      R0,#+28928
   \      0x1AC   0xD102             BNE.N    ??psa_driver_wrapper_get_key_buffer_size_24
   \      0x1AE   0x1DF2             ADDS     R2,R6,#+7
   \      0x1B0   0x08D2             LSRS     R2,R2,#+3
   \      0x1B2   0xE00C             B.N      ??psa_driver_wrapper_get_key_buffer_size_18
   \                     ??psa_driver_wrapper_get_key_buffer_size_24: (+1)
   \      0x1B4   0x0028             MOVS     R0,R5
   \      0x1B6   0xB280             UXTH     R0,R0
   \      0x1B8   0xF030 0x00FF      BICS     R0,R0,#0xFF
   \      0x1BC   0xF5B0 0x4F82      CMP      R0,#+16640
   \      0x1C0   0xD104             BNE.N    ??psa_driver_wrapper_get_key_buffer_size_25
   \      0x1C2   0x1DF0             ADDS     R0,R6,#+7
   \      0x1C4   0x08C0             LSRS     R0,R0,#+3
   \      0x1C6   0x0042             LSLS     R2,R0,#+1
   \      0x1C8   0x1C52             ADDS     R2,R2,#+1
   \      0x1CA   0xE000             B.N      ??psa_driver_wrapper_get_key_buffer_size_18
   \                     ??psa_driver_wrapper_get_key_buffer_size_25: (+1)
   \      0x1CC   0x2200             MOVS     R2,#+0
    219                      if( buffer_size == 0 ||
    220                          ( PSA_KEY_TYPE_IS_ECC_PUBLIC_KEY(key_type) && buffer_size == 1 ) )
   \                     ??psa_driver_wrapper_get_key_buffer_size_18: (+1)
   \      0x1CE   0x2A00             CMP      R2,#+0
   \      0x1D0   0xD008             BEQ.N    ??psa_driver_wrapper_get_key_buffer_size_26
   \      0x1D2   0x0028             MOVS     R0,R5
   \      0x1D4   0xB280             UXTH     R0,R0
   \      0x1D6   0xF030 0x00FF      BICS     R0,R0,#0xFF
   \      0x1DA   0xF5B0 0x4F82      CMP      R0,#+16640
   \      0x1DE   0xD103             BNE.N    ??psa_driver_wrapper_get_key_buffer_size_27
   \      0x1E0   0x2A01             CMP      R2,#+1
   \      0x1E2   0xD101             BNE.N    ??psa_driver_wrapper_get_key_buffer_size_27
    221                          buffer_size = *key_buffer_size;
   \                     ??psa_driver_wrapper_get_key_buffer_size_26: (+1)
   \      0x1E4   0x6808             LDR      R0,[R1, #+0]
   \      0x1E6   0x0002             MOVS     R2,R0
    222                      // Remove public key format byte
    223                      if( PSA_KEY_TYPE_IS_ECC_PUBLIC_KEY( key_type ) ) {
   \                     ??psa_driver_wrapper_get_key_buffer_size_27: (+1)
   \      0x1E8   0x0028             MOVS     R0,R5
   \      0x1EA   0xB280             UXTH     R0,R0
   \      0x1EC   0xF030 0x00FF      BICS     R0,R0,#0xFF
   \      0x1F0   0xF5B0 0x4F82      CMP      R0,#+16640
   \      0x1F4   0xD100             BNE.N    ??psa_driver_wrapper_get_key_buffer_size_28
    224                          buffer_size--;
   \      0x1F6   0x1E52             SUBS     R2,R2,#+1
    225                      }
    226                      // Compensate for word alignment demands
    227                      buffer_size = sli_se_word_align( buffer_size );
   \                     ??psa_driver_wrapper_get_key_buffer_size_28: (+1)
   \      0x1F8   0x1CD2             ADDS     R2,R2,#+3
   \      0x1FA   0x0892             LSRS     R2,R2,#+2
   \      0x1FC   0x0092             LSLS     R2,R2,#+2
    228                      if( PSA_BITS_TO_BYTES( key_bits ) & 0x3 || PSA_BITS_TO_BYTES( key_bits ) == 0 ) {
   \      0x1FE   0x1DF0             ADDS     R0,R6,#+7
   \      0x200   0x08C0             LSRS     R0,R0,#+3
   \      0x202   0xF010 0x0F03      TST      R0,#0x3
   \      0x206   0xD103             BNE.N    ??psa_driver_wrapper_get_key_buffer_size_29
   \      0x208   0x1DF0             ADDS     R0,R6,#+7
   \      0x20A   0x08C0             LSRS     R0,R0,#+3
   \      0x20C   0x2800             CMP      R0,#+0
   \      0x20E   0xD107             BNE.N    ??psa_driver_wrapper_get_key_buffer_size_30
    229                          if( PSA_KEY_TYPE_IS_ECC_PUBLIC_KEY(key_type) ) {
   \                     ??psa_driver_wrapper_get_key_buffer_size_29: (+1)
   \      0x210   0x0028             MOVS     R0,R5
   \      0x212   0xB280             UXTH     R0,R0
   \      0x214   0xF030 0x00FF      BICS     R0,R0,#0xFF
   \      0x218   0xF5B0 0x4F82      CMP      R0,#+16640
   \      0x21C   0xD100             BNE.N    ??psa_driver_wrapper_get_key_buffer_size_30
    230                              // Allocate extra word for public keys, since alignment constrains
    231                              // May require that
    232                              buffer_size += sizeof(uint32_t);
   \      0x21E   0x1D12             ADDS     R2,R2,#+4
    233                          }
    234                      }
    235                      // Add wrapped context overhead
    236                      buffer_size += sizeof(sli_se_opaque_wrapped_key_context_t);
   \                     ??psa_driver_wrapper_get_key_buffer_size_30: (+1)
   \      0x220   0x322C             ADDS     R2,R2,#+44
    237                      *key_buffer_size = buffer_size;
   \      0x222   0x600A             STR      R2,[R1, #+0]
    238                      return ( PSA_SUCCESS );
   \      0x224   0x2000             MOVS     R0,#+0
   \      0x226   0xE003             B.N      ??psa_driver_wrapper_get_key_buffer_size_15
    239          #endif
    240          #if defined(SLI_SECURE_KEY_STORAGE_DEVICE_SI91X)
    241                  case PSA_KEY_VOLATILE_PERSISTENT_WRAPPED:
    242                    buffer_size = PSA_EXPORT_KEY_OUTPUT_SIZE( key_type, key_bits );
    243                    if( buffer_size == 0 ||
    244                        ( PSA_KEY_TYPE_IS_ECC_PUBLIC_KEY(key_type) && buffer_size == 1 ) )
    245                        return( PSA_ERROR_NOT_SUPPORTED );
    246                    *key_buffer_size = buffer_size;
    247                    return( PSA_SUCCESS );
    248                    break;
    249          #endif
    250          
    251                  default:
    252                      (void)key_type;
    253                      (void)key_bits;
    254                      *key_buffer_size = 0;
   \                     ??psa_driver_wrapper_get_key_buffer_size_2: (+1)
   \      0x228   0x2000             MOVS     R0,#+0
   \      0x22A   0x6008             STR      R0,[R1, #+0]
    255                      return( PSA_ERROR_INVALID_ARGUMENT );
   \      0x22C   0xF07F 0x0086      MVNS     R0,#+134
   \                     ??psa_driver_wrapper_get_key_buffer_size_15: (+1)
   \      0x230   0xBC70             POP      {R4-R6}
   \      0x232   0x4770             BX       LR
    256              }
    257          }
    258          

   \                                 In section .text, align 2, keep-with-next
    259          psa_status_t psa_driver_wrapper_export_public_key(
    260              const psa_key_attributes_t *attributes,
    261              const uint8_t *key_buffer, size_t key_buffer_size,
    262              uint8_t *data, size_t data_size, size_t *data_length )
    263          
    264          {
   \                     psa_driver_wrapper_export_public_key: (+1)
   \        0x0   0xE92D 0x4FF2      PUSH     {R1,R4-R11,LR}
   \        0x4   0xB082             SUB      SP,SP,#+8
   \        0x6   0x4683             MOV      R11,R0
   \        0x8   0x0014             MOVS     R4,R2
   \        0xA   0x001D             MOVS     R5,R3
   \        0xC   0x9E0C             LDR      R6,[SP, #+48]
   \        0xE   0x9F0D             LDR      R7,[SP, #+52]
    265          
    266              psa_status_t status = PSA_ERROR_INVALID_ARGUMENT;
   \       0x10   0xF07F 0x0886      MVNS     R8,#+134
    267              psa_key_location_t location = PSA_KEY_LIFETIME_GET_LOCATION(
    268                                                psa_get_key_lifetime( attributes ) );
   \       0x14   0x4658             MOV      R0,R11
   \       0x16   0x.... 0x....      BL       psa_get_key_lifetime
   \       0x1A   0x4681             MOV      R9,R0
   \       0x1C   0xEA5F 0x2919      LSRS     R9,R9,#+8
    269          
    270              /* Try dynamically-registered SE interface first */
    271          #if defined(MBEDTLS_PSA_CRYPTO_SE_C)
    272              const psa_drv_se_t *drv;
    273              psa_drv_se_context_t *drv_context;
    274          
    275              if( psa_get_se_driver( attributes->core.lifetime, &drv, &drv_context ) )
    276              {
    277                  if( ( drv->key_management == NULL ) ||
    278                      ( drv->key_management->p_export_public == NULL ) )
    279                  {
    280                      return( PSA_ERROR_NOT_SUPPORTED );
    281                  }
    282          
    283                  return( drv->key_management->p_export_public(
    284                              drv_context,
    285                              *( (psa_key_slot_number_t *)key_buffer ),
    286                              data, data_size, data_length ) );
    287              }
    288          #endif /* MBEDTLS_PSA_CRYPTO_SE_C */
    289          
    290              switch( location )
   \       0x20   0xF1B9 0x0F00      CMP      R9,#+0
   \       0x24   0xD003             BEQ.N    ??psa_driver_wrapper_export_public_key_0
   \       0x26   0xF1B9 0x0F01      CMP      R9,#+1
   \       0x2A   0xD017             BEQ.N    ??psa_driver_wrapper_export_public_key_1
   \       0x2C   0xE01F             B.N      ??psa_driver_wrapper_export_public_key_2
    291              {
    292                  case PSA_KEY_LOCATION_LOCAL_STORAGE:
    293                      /* Key is stored in the slot in export representation, so
    294                       * cycle through all known transparent accelerators */
    295          #if defined(PSA_CRYPTO_ACCELERATOR_DRIVER_PRESENT)
    296          
    297          #if (defined(PSA_CRYPTO_DRIVER_TEST) )
    298                      status = mbedtls_test_transparent_export_public_key
    299                          (attributes,
    300                                          key_buffer,
    301                                          key_buffer_size,
    302                                          data,
    303                                          data_size,
    304                                          data_length
    305                      );
    306          
    307                      if( status != PSA_ERROR_NOT_SUPPORTED )
    308                          return( status );
    309          #endif
    310          
    311          #if (defined(MBEDTLS_PSA_P256M_DRIVER_ENABLED) )
    312                      status = p256_transparent_export_public_key
    313                          (attributes,
    314                                          key_buffer,
    315                                          key_buffer_size,
    316                                          data,
    317                                          data_size,
    318                                          data_length
    319                      );
    320          
    321                      if( status != PSA_ERROR_NOT_SUPPORTED )
    322                          return( status );
    323          #endif
    324          
    325          
    326          #if defined(SLI_MBEDTLS_DEVICE_HSE)
    327                      status = sli_se_transparent_export_public_key( attributes,
    328                                                                     key_buffer,
    329                                                                     key_buffer_size,
    330                                                                     data,
    331                                                                     data_size,
    332                                                                     data_length );
   \                     ??psa_driver_wrapper_export_public_key_0: (+1)
   \       0x2E   0x9701             STR      R7,[SP, #+4]
   \       0x30   0x9600             STR      R6,[SP, #+0]
   \       0x32   0x002B             MOVS     R3,R5
   \       0x34   0x0022             MOVS     R2,R4
   \       0x36   0x9902             LDR      R1,[SP, #+8]
   \       0x38   0x4658             MOV      R0,R11
   \       0x3A   0x.... 0x....      BL       sli_se_transparent_export_public_key
   \       0x3E   0x4682             MOV      R10,R0
    333                      /* Declared with fallback == true */
    334                      if( status != PSA_ERROR_NOT_SUPPORTED )
   \       0x40   0xF11A 0x0F86      CMN      R10,#+134
   \       0x44   0xD001             BEQ.N    ??psa_driver_wrapper_export_public_key_3
    335                          return( status );
   \       0x46   0x4650             MOV      R0,R10
   \       0x48   0xE012             B.N      ??psa_driver_wrapper_export_public_key_4
    336          #endif // SLI_MBEDTLS_DEVICE_HSE
    337          #if defined(SLI_MBEDTLS_DEVICE_VSE)
    338                      status = sli_cryptoacc_transparent_export_public_key( attributes,
    339                                                                            key_buffer,
    340                                                                            key_buffer_size,
    341                                                                            data,
    342                                                                            data_size,
    343                                                                            data_length );
    344                      /* Declared with fallback == true */
    345                      if( status != PSA_ERROR_NOT_SUPPORTED )
    346                          return( status );
    347          #endif // SLI_MBEDTLS_DEVICE_VSE
    348          #if defined(SLI_ECDH_DEVICE_SI91X)
    349                      status = sli_si91x_psa_export_public_key_ecdh( attributes,
    350                                                                     key_buffer,
    351                                                                     key_buffer_size,
    352                                                                     data,
    353                                                                     data_size,
    354                                                                     data_length );
    355                      /* Declared with fallback == true */
    356                      if( status != PSA_ERROR_NOT_SUPPORTED )
    357                          return( status );
    358          #endif // SLI_ECDH_DEVICE_SI91X
    359          #endif /* PSA_CRYPTO_ACCELERATOR_DRIVER_PRESENT */
    360                      /* Fell through, meaning no accelerator supports this operation */
    361                      return( psa_export_public_key_internal( attributes,
    362                                                              key_buffer,
    363                                                              key_buffer_size,
    364                                                              data,
    365                                                              data_size,
    366                                                              data_length ) );
   \                     ??psa_driver_wrapper_export_public_key_3: (+1)
   \       0x4A   0x9701             STR      R7,[SP, #+4]
   \       0x4C   0x9600             STR      R6,[SP, #+0]
   \       0x4E   0x002B             MOVS     R3,R5
   \       0x50   0x0022             MOVS     R2,R4
   \       0x52   0x9902             LDR      R1,[SP, #+8]
   \       0x54   0x4658             MOV      R0,R11
   \       0x56   0x.... 0x....      BL       psa_export_public_key_internal
   \       0x5A   0xE009             B.N      ??psa_driver_wrapper_export_public_key_4
    367          
    368                  /* Add cases for opaque driver here */
    369          #if defined(PSA_CRYPTO_ACCELERATOR_DRIVER_PRESENT)
    370          
    371          #if (defined(PSA_CRYPTO_DRIVER_TEST) )
    372                  case 0x7fffff:
    373                      return( mbedtls_test_opaque_export_public_key
    374                      (attributes,
    375                                      key_buffer,
    376                                      key_buffer_size,
    377                                      data,
    378                                      data_size,
    379                                      data_length
    380                  ));
    381          #endif
    382          
    383          
    384          #if defined(SLI_MBEDTLS_DEVICE_HSE) && defined(SLI_PSA_DRIVER_FEATURE_OPAQUE_KEYS)
    385                  case PSA_KEY_LOCATION_SLI_SE_OPAQUE:
    386                      return( sli_se_opaque_export_public_key( attributes,
    387                                                               key_buffer,
    388                                                               key_buffer_size,
    389                                                               data,
    390                                                               data_size,
    391                                                               data_length ) );
   \                     ??psa_driver_wrapper_export_public_key_1: (+1)
   \       0x5C   0x9701             STR      R7,[SP, #+4]
   \       0x5E   0x9600             STR      R6,[SP, #+0]
   \       0x60   0x002B             MOVS     R3,R5
   \       0x62   0x0022             MOVS     R2,R4
   \       0x64   0x9902             LDR      R1,[SP, #+8]
   \       0x66   0x4658             MOV      R0,R11
   \       0x68   0x.... 0x....      BL       sli_se_opaque_export_public_key
   \       0x6C   0xE000             B.N      ??psa_driver_wrapper_export_public_key_4
    392          #endif
    393          #endif /* PSA_CRYPTO_ACCELERATOR_DRIVER_PRESENT */
    394                  default:
    395                      /* Key is declared with a lifetime not known to us */
    396                      return( status );
   \                     ??psa_driver_wrapper_export_public_key_2: (+1)
   \       0x6E   0x4640             MOV      R0,R8
   \                     ??psa_driver_wrapper_export_public_key_4: (+1)
   \       0x70   0xE8BD 0x8FFE      POP      {R1-R11,PC}
    397              }
    398          
    399          }
    400          

   \                                 In section .text, align 2, keep-with-next
    401          psa_status_t psa_driver_wrapper_get_builtin_key(
    402              psa_drv_slot_number_t slot_number,
    403              psa_key_attributes_t *attributes,
    404              uint8_t *key_buffer, size_t key_buffer_size, size_t *key_buffer_length )
    405          {
   \                     psa_driver_wrapper_get_builtin_key: (+1)
   \        0x0   0xB430             PUSH     {R4,R5}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
    406          
    407              psa_key_location_t location = PSA_KEY_LIFETIME_GET_LOCATION( attributes->core.lifetime );
   \        0x6   0x6851             LDR      R1,[R2, #+4]
   \        0x8   0x0A09             LSRS     R1,R1,#+8
    408              switch( location )
    409              {
    410          #if defined(PSA_CRYPTO_ACCELERATOR_DRIVER_PRESENT)
    411          
    412          #if (defined(PSA_CRYPTO_DRIVER_TEST) )
    413                  case 0x7fffff:
    414                      return( mbedtls_test_opaque_get_builtin_key
    415                      (slot_number,
    416                                      attributes,
    417                                      key_buffer,
    418                                      key_buffer_size,
    419                                      key_buffer_length
    420                  ));
    421          #endif
    422          
    423          
    424          #if defined(SLI_MBEDTLS_DEVICE_HSE) && defined(SLI_PSA_DRIVER_FEATURE_BUILTIN_KEYS)
    425                  case PSA_KEY_LOCATION_SLI_SE_OPAQUE:
    426                      return( sli_se_opaque_get_builtin_key(
    427                                  slot_number,
    428                                  attributes,
    429                                  key_buffer, key_buffer_size, key_buffer_length ) );
    430          #endif
    431          #if defined(SLI_MBEDTLS_DEVICE_VSE) && defined(SLI_PSA_DRIVER_FEATURE_BUILTIN_KEYS)
    432                  case PSA_KEY_LOCATION_SL_CRYPTOACC_OPAQUE:
    433                      return( sli_cryptoacc_opaque_get_builtin_key(
    434                                  slot_number,
    435                                  attributes,
    436                                  key_buffer, key_buffer_size, key_buffer_length ) );
    437          #endif
    438          #endif /* PSA_CRYPTO_ACCELERATOR_DRIVER_PRESENT */
    439                  default:
    440                      (void) slot_number;
    441                      (void) key_buffer;
    442                      (void) key_buffer_size;
    443                      (void) key_buffer_length;
    444                      return( PSA_ERROR_DOES_NOT_EXIST );
   \        0xA   0xF07F 0x008B      MVNS     R0,#+139
   \        0xE   0xBC30             POP      {R4,R5}
   \       0x10   0x4770             BX       LR
    445              }
    446          
    447          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \        0x0   0xFFFF'CF00        DC32     0xffffcf00
    448          
    449          #endif /* MBEDTLS_PSA_CRYPTO_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      48   psa_driver_wrapper_export_public_key
        48   -> psa_export_public_key_internal
        48   -> psa_get_key_lifetime
        48   -> sli_se_opaque_export_public_key
        48   -> sli_se_transparent_export_public_key
       8   psa_driver_wrapper_get_builtin_key
      12   psa_driver_wrapper_get_key_buffer_size
       0   psa_get_key_lifetime


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
     116  psa_driver_wrapper_export_public_key
      18  psa_driver_wrapper_get_builtin_key
     564  psa_driver_wrapper_get_key_buffer_size
       4  psa_get_key_lifetime

 
 706 bytes in section .text
 
 706 bytes of CODE memory

Errors: none
Warnings: none
