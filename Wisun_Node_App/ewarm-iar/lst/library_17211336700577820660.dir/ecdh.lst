###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         29/Mar/2025  15:53:44
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\ecdh.c
#    Command line                 =
#        -f "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\library_17211336700577820660.dir\ecdh.o.rsp"
#        ("D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\ecdh.c"
#        -D DEBUG_EFM=1 -D EFR32FG28B322F1024IM48=1 -D
#        configNUM_SDK_THREAD_LOCAL_STORAGE_POINTERS=2 -D
#        SL_COMPONENT_CATALOG_PRESENT=1 -D
#        MBEDTLS_CONFIG_FILE=<sl_mbedtls_config.h> -D
#        MBEDTLS_PSA_CRYPTO_CONFIG_FILE=<psa_crypto_config.h> -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -D
#        RTT_USE_ASM=0 -lC "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\lst\library_17211336700577820660.dir"
#        --diag_suppress Pa050 -o "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\library_17211336700577820660.dir"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M33 --cmse --cmse -e --fpu=VFPv5_sp --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        9.2\arm\inc\c\DLib_Config_Normal.h" -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\rail\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\wisun\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\.\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\Device\SiliconLabs\EFR32FG28\Include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_project_info\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\common\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\src\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\CMSIS\Core\Include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\CMSIS\RTOS2\Include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\device_init\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emdrv\common\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emlib\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\iostream\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\config\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\config\preset\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\cpu\include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\ports\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emdrv\nvm3\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\peripheral\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\printf\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\printf\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_psa_driver\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\common\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\ble\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\ieee802154\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\wmbus\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\zwave\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\chip\efr32\efr32xg2x\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\sidewalk\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\pa-conversions\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\pa-conversions\efr32xg28\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\rail_util_pti\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\se_manager\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\se_manager\src\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\segger\systemview\SEGGER\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\silicon_labs\silabs_core\memory_manager\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\common\toolchain\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\system\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_core\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_setting\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\cli_util\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\event_manager\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\ns_list\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\ping\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\nanostack\nanostack-libservice\mbed-client-libservice\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\udp_client\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\sleeptimer\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\plugin\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\stack\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\stack\inc\socket\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\autogen\\" -On
#        --use_c++_inline) --dependencies=n "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\library_17211336700577820660.dir\ecdh.o.iar_deps"
#    Locale                       =  C
#    List file                    =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\lst\library_17211336700577820660.dir\ecdh.lst
#    Object file                  =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\library_17211336700577820660.dir\ecdh.o
#    Runtime model:                  
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#
###############################################################################

D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\ecdh.c
      1          /*
      2           *  Elliptic curve Diffie-Hellman
      3           *
      4           *  Copyright The Mbed TLS Contributors
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           */
     19          
     20          /*
     21           * References:
     22           *
     23           * SEC1 https://www.secg.org/sec1-v2.pdf
     24           * RFC 4492
     25           */
     26          
     27          #include "common.h"
     28          
     29          #if defined(MBEDTLS_ECDH_C)
     30          
     31          #include "mbedtls/ecdh.h"
     32          #include "mbedtls/platform_util.h"
     33          #include "mbedtls/error.h"
     34          
     35          #include <string.h>
     36          
     37          #if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
     38          typedef mbedtls_ecdh_context mbedtls_ecdh_context_mbed;
     39          #endif
     40          

   \                                 In section .text, align 2, keep-with-next
     41          static mbedtls_ecp_group_id mbedtls_ecdh_grp_id(
     42              const mbedtls_ecdh_context *ctx)
     43          {
     44          #if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
     45              return ctx->grp.id;
     46          #else
     47              return ctx->grp_id;
   \                     mbedtls_ecdh_grp_id: (+1)
   \        0x0   0x7840             LDRB     R0,[R0, #+1]
   \        0x2   0x4770             BX       LR
     48          #endif
     49          }
     50          

   \                                 In section .text, align 2, keep-with-next
     51          int mbedtls_ecdh_can_do(mbedtls_ecp_group_id gid)
     52          {
   \                     mbedtls_ecdh_can_do: (+1)
   \        0x0   0x0001             MOVS     R1,R0
     53              /* At this time, all groups support ECDH. */
     54              (void) gid;
     55              return 1;
   \        0x2   0x2001             MOVS     R0,#+1
   \        0x4   0x4770             BX       LR
     56          }
     57          
     58          #if !defined(MBEDTLS_ECDH_GEN_PUBLIC_ALT)
     59          /*
     60           * Generate public key (restartable version)
     61           *
     62           * Note: this internal function relies on its caller preserving the value of
     63           * the output parameter 'd' across continuation calls. This would not be
     64           * acceptable for a public function but is OK here as we control call sites.
     65           */
     66          static int ecdh_gen_public_restartable(mbedtls_ecp_group *grp,
     67                                                 mbedtls_mpi *d, mbedtls_ecp_point *Q,
     68                                                 int (*f_rng)(void *, unsigned char *, size_t),
     69                                                 void *p_rng,
     70                                                 mbedtls_ecp_restart_ctx *rs_ctx)
     71          {
     72              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
     73          
     74              int restarting = 0;
     75          #if defined(MBEDTLS_ECP_RESTARTABLE)
     76              restarting = (rs_ctx != NULL && rs_ctx->rsm != NULL);
     77          #endif
     78              /* If multiplication is in progress, we already generated a privkey */
     79              if (!restarting) {
     80                  MBEDTLS_MPI_CHK(mbedtls_ecp_gen_privkey(grp, d, f_rng, p_rng));
     81              }
     82          
     83              MBEDTLS_MPI_CHK(mbedtls_ecp_mul_restartable(grp, Q, d, &grp->G,
     84                                                          f_rng, p_rng, rs_ctx));
     85          
     86          cleanup:
     87              return ret;
     88          }
     89          
     90          /*
     91           * Generate public key
     92           */
     93          int mbedtls_ecdh_gen_public(mbedtls_ecp_group *grp, mbedtls_mpi *d, mbedtls_ecp_point *Q,
     94                                      int (*f_rng)(void *, unsigned char *, size_t),
     95                                      void *p_rng)
     96          {
     97              return ecdh_gen_public_restartable(grp, d, Q, f_rng, p_rng, NULL);
     98          }
     99          #endif /* !MBEDTLS_ECDH_GEN_PUBLIC_ALT */
    100          
    101          #if !defined(MBEDTLS_ECDH_COMPUTE_SHARED_ALT)
    102          /*
    103           * Compute shared secret (SEC1 3.3.1)
    104           */
    105          static int ecdh_compute_shared_restartable(mbedtls_ecp_group *grp,
    106                                                     mbedtls_mpi *z,
    107                                                     const mbedtls_ecp_point *Q, const mbedtls_mpi *d,
    108                                                     int (*f_rng)(void *, unsigned char *, size_t),
    109                                                     void *p_rng,
    110                                                     mbedtls_ecp_restart_ctx *rs_ctx)
    111          {
    112              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    113              mbedtls_ecp_point P;
    114          
    115              mbedtls_ecp_point_init(&P);
    116          
    117              MBEDTLS_MPI_CHK(mbedtls_ecp_mul_restartable(grp, &P, d, Q,
    118                                                          f_rng, p_rng, rs_ctx));
    119          
    120              if (mbedtls_ecp_is_zero(&P)) {
    121                  ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
    122                  goto cleanup;
    123              }
    124          
    125              MBEDTLS_MPI_CHK(mbedtls_mpi_copy(z, &P.X));
    126          
    127          cleanup:
    128              mbedtls_ecp_point_free(&P);
    129          
    130              return ret;
    131          }
    132          
    133          /*
    134           * Compute shared secret (SEC1 3.3.1)
    135           */
    136          int mbedtls_ecdh_compute_shared(mbedtls_ecp_group *grp, mbedtls_mpi *z,
    137                                          const mbedtls_ecp_point *Q, const mbedtls_mpi *d,
    138                                          int (*f_rng)(void *, unsigned char *, size_t),
    139                                          void *p_rng)
    140          {
    141              return ecdh_compute_shared_restartable(grp, z, Q, d,
    142                                                     f_rng, p_rng, NULL);
    143          }
    144          #endif /* !MBEDTLS_ECDH_COMPUTE_SHARED_ALT */
    145          

   \                                 In section .text, align 2, keep-with-next
    146          static void ecdh_init_internal(mbedtls_ecdh_context_mbed *ctx)
    147          {
   \                     ecdh_init_internal: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    148              mbedtls_ecp_group_init(&ctx->grp);
   \        0x4   0x0020             MOVS     R0,R4
   \        0x6   0x.... 0x....      BL       mbedtls_ecp_group_init
    149              mbedtls_mpi_init(&ctx->d);
   \        0xA   0xF114 0x0060      ADDS     R0,R4,#+96
   \        0xE   0x.... 0x....      BL       mbedtls_mpi_init
    150              mbedtls_ecp_point_init(&ctx->Q);
   \       0x12   0xF114 0x0068      ADDS     R0,R4,#+104
   \       0x16   0x.... 0x....      BL       mbedtls_ecp_point_init
    151              mbedtls_ecp_point_init(&ctx->Qp);
   \       0x1A   0xF114 0x0080      ADDS     R0,R4,#+128
   \       0x1E   0x.... 0x....      BL       mbedtls_ecp_point_init
    152              mbedtls_mpi_init(&ctx->z);
   \       0x22   0xF114 0x0098      ADDS     R0,R4,#+152
   \       0x26   0x.... 0x....      BL       mbedtls_mpi_init
    153          
    154          #if defined(MBEDTLS_ECP_RESTARTABLE)
    155              mbedtls_ecp_restart_init(&ctx->rs);
    156          #endif
    157          }
   \       0x2A   0xBD10             POP      {R4,PC}
    158          
    159          /*
    160           * Initialize context
    161           */

   \                                 In section .text, align 2, keep-with-next
    162          void mbedtls_ecdh_init(mbedtls_ecdh_context *ctx)
    163          {
   \                     mbedtls_ecdh_init: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0004             MOVS     R4,R0
    164          #if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
    165              ecdh_init_internal(ctx);
    166              mbedtls_ecp_point_init(&ctx->Vi);
    167              mbedtls_ecp_point_init(&ctx->Vf);
    168              mbedtls_mpi_init(&ctx->_d);
    169          #else
    170              memset(ctx, 0, sizeof(mbedtls_ecdh_context));
   \        0x4   0x25A4             MOVS     R5,#+164
   \        0x6   0x2600             MOVS     R6,#+0
   \        0x8   0x0027             MOVS     R7,R4
   \        0xA   0x0032             MOVS     R2,R6
   \        0xC   0x0029             MOVS     R1,R5
   \        0xE   0x0038             MOVS     R0,R7
   \       0x10   0x.... 0x....      BL       __aeabi_memset
    171          
    172              ctx->var = MBEDTLS_ECDH_VARIANT_NONE;
   \       0x14   0x2000             MOVS     R0,#+0
   \       0x16   0x70A0             STRB     R0,[R4, #+2]
    173          #endif
    174              ctx->point_format = MBEDTLS_ECP_PF_UNCOMPRESSED;
   \       0x18   0x2000             MOVS     R0,#+0
   \       0x1A   0x7020             STRB     R0,[R4, #+0]
    175          #if defined(MBEDTLS_ECP_RESTARTABLE)
    176              ctx->restart_enabled = 0;
    177          #endif
    178          }
   \       0x1C   0xBDF1             POP      {R0,R4-R7,PC}
    179          

   \                                 In section .text, align 2, keep-with-next
    180          static int ecdh_setup_internal(mbedtls_ecdh_context_mbed *ctx,
    181                                         mbedtls_ecp_group_id grp_id)
    182          {
   \                     ecdh_setup_internal: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0006             MOVS     R6,R0
   \        0x4   0x000C             MOVS     R4,R1
    183              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
   \        0x6   0xF07F 0x056D      MVNS     R5,#+109
    184          
    185              ret = mbedtls_ecp_group_load(&ctx->grp, grp_id);
   \        0xA   0x0021             MOVS     R1,R4
   \        0xC   0xB2C9             UXTB     R1,R1
   \        0xE   0x0030             MOVS     R0,R6
   \       0x10   0x.... 0x....      BL       mbedtls_ecp_group_load
   \       0x14   0x0001             MOVS     R1,R0
    186              if (ret != 0) {
   \       0x16   0x2900             CMP      R1,#+0
   \       0x18   0xD002             BEQ.N    ??ecdh_setup_internal_0
    187                  return MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE;
   \       0x1A   0x.... 0x....      LDR.W    R0,??DataTable12
   \       0x1E   0xE000             B.N      ??ecdh_setup_internal_1
    188              }
    189          
    190              return 0;
   \                     ??ecdh_setup_internal_0: (+1)
   \       0x20   0x2000             MOVS     R0,#+0
   \                     ??ecdh_setup_internal_1: (+1)
   \       0x22   0xBD70             POP      {R4-R6,PC}
    191          }
    192          
    193          /*
    194           * Setup context
    195           */

   \                                 In section .text, align 2, keep-with-next
    196          int mbedtls_ecdh_setup(mbedtls_ecdh_context *ctx, mbedtls_ecp_group_id grp_id)
    197          {
   \                     mbedtls_ecdh_setup: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
    198          #if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
    199              return ecdh_setup_internal(ctx, grp_id);
    200          #else
    201              switch (grp_id) {
    202          #if defined(MBEDTLS_ECDH_VARIANT_EVEREST_ENABLED)
    203                  case MBEDTLS_ECP_DP_CURVE25519:
    204                      ctx->point_format = MBEDTLS_ECP_PF_COMPRESSED;
    205                      ctx->var = MBEDTLS_ECDH_VARIANT_EVEREST;
    206                      ctx->grp_id = grp_id;
    207                      return mbedtls_everest_setup(&ctx->ctx.everest_ecdh, grp_id);
    208          #endif
    209                  default:
    210                      ctx->point_format = MBEDTLS_ECP_PF_UNCOMPRESSED;
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0x7020             STRB     R0,[R4, #+0]
    211                      ctx->var = MBEDTLS_ECDH_VARIANT_MBEDTLS_2_0;
   \        0xA   0x2001             MOVS     R0,#+1
   \        0xC   0x70A0             STRB     R0,[R4, #+2]
    212                      ctx->grp_id = grp_id;
   \        0xE   0x7065             STRB     R5,[R4, #+1]
    213                      ecdh_init_internal(&ctx->ctx.mbed_ecdh);
   \       0x10   0x1D20             ADDS     R0,R4,#+4
   \       0x12   0x.... 0x....      BL       ecdh_init_internal
    214                      return ecdh_setup_internal(&ctx->ctx.mbed_ecdh, grp_id);
   \       0x16   0x0029             MOVS     R1,R5
   \       0x18   0xB2C9             UXTB     R1,R1
   \       0x1A   0x1D20             ADDS     R0,R4,#+4
   \       0x1C   0x.... 0x....      BL       ecdh_setup_internal
   \       0x20   0xBD32             POP      {R1,R4,R5,PC}
    215              }
    216          #endif
    217          }
    218          

   \                                 In section .text, align 2, keep-with-next
    219          static void ecdh_free_internal(mbedtls_ecdh_context_mbed *ctx)
    220          {
   \                     ecdh_free_internal: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    221              mbedtls_ecp_group_free(&ctx->grp);
   \        0x4   0x0020             MOVS     R0,R4
   \        0x6   0x.... 0x....      BL       mbedtls_ecp_group_free
    222              mbedtls_mpi_free(&ctx->d);
   \        0xA   0xF114 0x0060      ADDS     R0,R4,#+96
   \        0xE   0x.... 0x....      BL       mbedtls_mpi_free
    223              mbedtls_ecp_point_free(&ctx->Q);
   \       0x12   0xF114 0x0068      ADDS     R0,R4,#+104
   \       0x16   0x.... 0x....      BL       mbedtls_ecp_point_free
    224              mbedtls_ecp_point_free(&ctx->Qp);
   \       0x1A   0xF114 0x0080      ADDS     R0,R4,#+128
   \       0x1E   0x.... 0x....      BL       mbedtls_ecp_point_free
    225              mbedtls_mpi_free(&ctx->z);
   \       0x22   0xF114 0x0098      ADDS     R0,R4,#+152
   \       0x26   0x.... 0x....      BL       mbedtls_mpi_free
    226          
    227          #if defined(MBEDTLS_ECP_RESTARTABLE)
    228              mbedtls_ecp_restart_free(&ctx->rs);
    229          #endif
    230          }
   \       0x2A   0xBD10             POP      {R4,PC}
    231          
    232          #if defined(MBEDTLS_ECP_RESTARTABLE)
    233          /*
    234           * Enable restartable operations for context
    235           */
    236          void mbedtls_ecdh_enable_restart(mbedtls_ecdh_context *ctx)
    237          {
    238              ctx->restart_enabled = 1;
    239          }
    240          #endif
    241          
    242          /*
    243           * Free context
    244           */

   \                                 In section .text, align 2, keep-with-next
    245          void mbedtls_ecdh_free(mbedtls_ecdh_context *ctx)
    246          {
   \                     mbedtls_ecdh_free: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    247              if (ctx == NULL) {
   \        0x4   0x2C00             CMP      R4,#+0
   \        0x6   0xD00C             BEQ.N    ??mbedtls_ecdh_free_0
    248                  return;
    249              }
    250          
    251          #if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
    252              mbedtls_ecp_point_free(&ctx->Vi);
    253              mbedtls_ecp_point_free(&ctx->Vf);
    254              mbedtls_mpi_free(&ctx->_d);
    255              ecdh_free_internal(ctx);
    256          #else
    257              switch (ctx->var) {
   \                     ??mbedtls_ecdh_free_1: (+1)
   \        0x8   0x78A0             LDRB     R0,[R4, #+2]
   \        0xA   0x2801             CMP      R0,#+1
   \        0xC   0xD103             BNE.N    ??mbedtls_ecdh_free_2
    258          #if defined(MBEDTLS_ECDH_VARIANT_EVEREST_ENABLED)
    259                  case MBEDTLS_ECDH_VARIANT_EVEREST:
    260                      mbedtls_everest_free(&ctx->ctx.everest_ecdh);
    261                      break;
    262          #endif
    263                  case MBEDTLS_ECDH_VARIANT_MBEDTLS_2_0:
    264                      ecdh_free_internal(&ctx->ctx.mbed_ecdh);
   \        0xE   0x1D20             ADDS     R0,R4,#+4
   \       0x10   0x.... 0x....      BL       ecdh_free_internal
    265                      break;
   \       0x14   0xE7FF             B.N      ??mbedtls_ecdh_free_3
    266                  default:
    267                      break;
    268              }
    269          
    270              ctx->point_format = MBEDTLS_ECP_PF_UNCOMPRESSED;
   \                     ??mbedtls_ecdh_free_2: (+1)
   \                     ??mbedtls_ecdh_free_3: (+1)
   \       0x16   0x2000             MOVS     R0,#+0
   \       0x18   0x7020             STRB     R0,[R4, #+0]
    271              ctx->var = MBEDTLS_ECDH_VARIANT_NONE;
   \       0x1A   0x2000             MOVS     R0,#+0
   \       0x1C   0x70A0             STRB     R0,[R4, #+2]
    272              ctx->grp_id = MBEDTLS_ECP_DP_NONE;
   \       0x1E   0x2000             MOVS     R0,#+0
   \       0x20   0x7060             STRB     R0,[R4, #+1]
    273          #endif
    274          }
   \                     ??mbedtls_ecdh_free_0: (+1)
   \       0x22   0xBD10             POP      {R4,PC}
    275          

   \                                 In section .text, align 2, keep-with-next
    276          static int ecdh_make_params_internal(mbedtls_ecdh_context_mbed *ctx,
    277                                               size_t *olen, int point_format,
    278                                               unsigned char *buf, size_t blen,
    279                                               int (*f_rng)(void *,
    280                                                            unsigned char *,
    281                                                            size_t),
    282                                               void *p_rng,
    283                                               int restart_enabled)
    284          {
   \                     ecdh_make_params_internal: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0xB084             SUB      SP,SP,#+16
   \        0x6   0x0004             MOVS     R4,R0
   \        0x8   0x000D             MOVS     R5,R1
   \        0xA   0x0016             MOVS     R6,R2
   \        0xC   0x001F             MOVS     R7,R3
   \        0xE   0xF8DD 0xB038      LDR      R11,[SP, #+56]
   \       0x12   0xF8DD 0x803C      LDR      R8,[SP, #+60]
    285              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
   \       0x16   0xF07F 0x0A6D      MVNS     R10,#+109
    286              size_t grp_len, pt_len;
    287          #if defined(MBEDTLS_ECP_RESTARTABLE)
    288              mbedtls_ecp_restart_ctx *rs_ctx = NULL;
    289          #endif
    290          
    291              if (ctx->grp.pbits == 0) {
   \       0x1A   0x6BE0             LDR      R0,[R4, #+60]
   \       0x1C   0x2800             CMP      R0,#+0
   \       0x1E   0xD102             BNE.N    ??ecdh_make_params_internal_0
    292                  return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   \       0x20   0x.... 0x....      LDR.W    R0,??DataTable12_1
   \       0x24   0xE032             B.N      ??ecdh_make_params_internal_1
    293              }
    294          
    295          #if defined(MBEDTLS_ECP_RESTARTABLE)
    296              if (restart_enabled) {
    297                  rs_ctx = &ctx->rs;
    298              }
    299          #else
    300              (void) restart_enabled;
    301          #endif
    302          
    303          
    304          #if defined(MBEDTLS_ECP_RESTARTABLE)
    305              if ((ret = ecdh_gen_public_restartable(&ctx->grp, &ctx->d, &ctx->Q,
    306                                                     f_rng, p_rng, rs_ctx)) != 0) {
    307                  return ret;
    308              }
    309          #else
    310              if ((ret = mbedtls_ecdh_gen_public(&ctx->grp, &ctx->d, &ctx->Q,
    311                                                 f_rng, p_rng)) != 0) {
   \                     ??ecdh_make_params_internal_0: (+1)
   \       0x26   0x9810             LDR      R0,[SP, #+64]
   \       0x28   0x9000             STR      R0,[SP, #+0]
   \       0x2A   0x4643             MOV      R3,R8
   \       0x2C   0xF114 0x0268      ADDS     R2,R4,#+104
   \       0x30   0xF114 0x0160      ADDS     R1,R4,#+96
   \       0x34   0x0020             MOVS     R0,R4
   \       0x36   0x.... 0x....      BL       mbedtls_ecdh_gen_public
   \       0x3A   0x4681             MOV      R9,R0
   \       0x3C   0x2800             CMP      R0,#+0
   \       0x3E   0xD001             BEQ.N    ??ecdh_make_params_internal_2
    312                  return ret;
   \       0x40   0x4648             MOV      R0,R9
   \       0x42   0xE023             B.N      ??ecdh_make_params_internal_1
    313              }
    314          #endif /* MBEDTLS_ECP_RESTARTABLE */
    315          
    316              if ((ret = mbedtls_ecp_tls_write_group(&ctx->grp, &grp_len, buf,
    317                                                     blen)) != 0) {
   \                     ??ecdh_make_params_internal_2: (+1)
   \       0x44   0x465B             MOV      R3,R11
   \       0x46   0x003A             MOVS     R2,R7
   \       0x48   0xA902             ADD      R1,SP,#+8
   \       0x4A   0x0020             MOVS     R0,R4
   \       0x4C   0x.... 0x....      BL       mbedtls_ecp_tls_write_group
   \       0x50   0x4682             MOV      R10,R0
   \       0x52   0x2800             CMP      R0,#+0
   \       0x54   0xD001             BEQ.N    ??ecdh_make_params_internal_3
    318                  return ret;
   \       0x56   0x4650             MOV      R0,R10
   \       0x58   0xE018             B.N      ??ecdh_make_params_internal_1
    319              }
    320          
    321              buf += grp_len;
   \                     ??ecdh_make_params_internal_3: (+1)
   \       0x5A   0x9802             LDR      R0,[SP, #+8]
   \       0x5C   0x4407             ADD      R7,R7,R0
    322              blen -= grp_len;
   \       0x5E   0x9802             LDR      R0,[SP, #+8]
   \       0x60   0xEBBB 0x0B00      SUBS     R11,R11,R0
    323          
    324              if ((ret = mbedtls_ecp_tls_write_point(&ctx->grp, &ctx->Q, point_format,
    325                                                     &pt_len, buf, blen)) != 0) {
   \       0x64   0xF8CD 0xB004      STR      R11,[SP, #+4]
   \       0x68   0x9700             STR      R7,[SP, #+0]
   \       0x6A   0xAB03             ADD      R3,SP,#+12
   \       0x6C   0x0032             MOVS     R2,R6
   \       0x6E   0xF114 0x0168      ADDS     R1,R4,#+104
   \       0x72   0x0020             MOVS     R0,R4
   \       0x74   0x.... 0x....      BL       mbedtls_ecp_tls_write_point
   \       0x78   0x0001             MOVS     R1,R0
   \       0x7A   0x2800             CMP      R0,#+0
   \       0x7C   0xD001             BEQ.N    ??ecdh_make_params_internal_4
    326                  return ret;
   \       0x7E   0x0008             MOVS     R0,R1
   \       0x80   0xE004             B.N      ??ecdh_make_params_internal_1
    327              }
    328          
    329              *olen = grp_len + pt_len;
   \                     ??ecdh_make_params_internal_4: (+1)
   \       0x82   0x9A02             LDR      R2,[SP, #+8]
   \       0x84   0x9803             LDR      R0,[SP, #+12]
   \       0x86   0x1882             ADDS     R2,R0,R2
   \       0x88   0x602A             STR      R2,[R5, #+0]
    330              return 0;
   \       0x8A   0x2000             MOVS     R0,#+0
   \                     ??ecdh_make_params_internal_1: (+1)
   \       0x8C   0xB005             ADD      SP,SP,#+20
   \       0x8E   0xE8BD 0x8FF0      POP      {R4-R11,PC}
    331          }
    332          
    333          /*
    334           * Setup and write the ServerKeyExchange parameters (RFC 4492)
    335           *      struct {
    336           *          ECParameters    curve_params;
    337           *          ECPoint         public;
    338           *      } ServerECDHParams;
    339           */

   \                                 In section .text, align 2, keep-with-next
    340          int mbedtls_ecdh_make_params(mbedtls_ecdh_context *ctx, size_t *olen,
    341                                       unsigned char *buf, size_t blen,
    342                                       int (*f_rng)(void *, unsigned char *, size_t),
    343                                       void *p_rng)
    344          {
   \                     mbedtls_ecdh_make_params: (+1)
   \        0x0   0xE92D 0x41FF      PUSH     {R0-R8,LR}
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x000D             MOVS     R5,R1
   \        0x8   0x0016             MOVS     R6,R2
   \        0xA   0x001F             MOVS     R7,R3
    345              int restart_enabled = 0;
   \        0xC   0xF05F 0x0800      MOVS     R8,#+0
    346          #if defined(MBEDTLS_ECP_RESTARTABLE)
    347              restart_enabled = ctx->restart_enabled;
    348          #else
    349              (void) restart_enabled;
    350          #endif
    351          
    352          #if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
    353              return ecdh_make_params_internal(ctx, olen, ctx->point_format, buf, blen,
    354                                               f_rng, p_rng, restart_enabled);
    355          #else
    356              switch (ctx->var) {
   \       0x10   0x78A0             LDRB     R0,[R4, #+2]
   \       0x12   0x2801             CMP      R0,#+1
   \       0x14   0xD10D             BNE.N    ??mbedtls_ecdh_make_params_0
    357          #if defined(MBEDTLS_ECDH_VARIANT_EVEREST_ENABLED)
    358                  case MBEDTLS_ECDH_VARIANT_EVEREST:
    359                      return mbedtls_everest_make_params(&ctx->ctx.everest_ecdh, olen,
    360                                                         buf, blen, f_rng, p_rng);
    361          #endif
    362                  case MBEDTLS_ECDH_VARIANT_MBEDTLS_2_0:
    363                      return ecdh_make_params_internal(&ctx->ctx.mbed_ecdh, olen,
    364                                                       ctx->point_format, buf, blen,
    365                                                       f_rng, p_rng,
    366                                                       restart_enabled);
   \       0x16   0xF8CD 0x800C      STR      R8,[SP, #+12]
   \       0x1A   0x980B             LDR      R0,[SP, #+44]
   \       0x1C   0x9002             STR      R0,[SP, #+8]
   \       0x1E   0x980A             LDR      R0,[SP, #+40]
   \       0x20   0x9001             STR      R0,[SP, #+4]
   \       0x22   0x9700             STR      R7,[SP, #+0]
   \       0x24   0x0033             MOVS     R3,R6
   \       0x26   0x7822             LDRB     R2,[R4, #+0]
   \       0x28   0x0029             MOVS     R1,R5
   \       0x2A   0x1D20             ADDS     R0,R4,#+4
   \       0x2C   0x.... 0x....      BL       ecdh_make_params_internal
   \       0x30   0xE000             B.N      ??mbedtls_ecdh_make_params_1
    367                  default:
    368                      return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   \                     ??mbedtls_ecdh_make_params_0: (+1)
   \       0x32   0x....             LDR.N    R0,??DataTable12_1
   \                     ??mbedtls_ecdh_make_params_1: (+1)
   \       0x34   0xB004             ADD      SP,SP,#+16
   \       0x36   0xE8BD 0x81F0      POP      {R4-R8,PC}
    369              }
    370          #endif
    371          }
    372          

   \                                 In section .text, align 2, keep-with-next
    373          static int ecdh_read_params_internal(mbedtls_ecdh_context_mbed *ctx,
    374                                               const unsigned char **buf,
    375                                               const unsigned char *end)
    376          {
   \                     ecdh_read_params_internal: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0006             MOVS     R6,R0
   \        0x4   0x000C             MOVS     R4,R1
   \        0x6   0x0015             MOVS     R5,R2
    377              return mbedtls_ecp_tls_read_point(&ctx->grp, &ctx->Qp, buf,
    378                                                end - *buf);
   \        0x8   0x6823             LDR      R3,[R4, #+0]
   \        0xA   0x1AEB             SUBS     R3,R5,R3
   \        0xC   0x0022             MOVS     R2,R4
   \        0xE   0xF116 0x0180      ADDS     R1,R6,#+128
   \       0x12   0x0030             MOVS     R0,R6
   \       0x14   0x.... 0x....      BL       mbedtls_ecp_tls_read_point
   \       0x18   0xBD70             POP      {R4-R6,PC}
    379          }
    380          
    381          /*
    382           * Read the ServerKeyExchange parameters (RFC 4492)
    383           *      struct {
    384           *          ECParameters    curve_params;
    385           *          ECPoint         public;
    386           *      } ServerECDHParams;
    387           */

   \                                 In section .text, align 2, keep-with-next
    388          int mbedtls_ecdh_read_params(mbedtls_ecdh_context *ctx,
    389                                       const unsigned char **buf,
    390                                       const unsigned char *end)
    391          {
   \                     mbedtls_ecdh_read_params: (+1)
   \        0x0   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x000D             MOVS     R5,R1
   \        0x8   0x0016             MOVS     R6,R2
    392              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
   \        0xA   0xF07F 0x086D      MVNS     R8,#+109
    393              mbedtls_ecp_group_id grp_id;
    394              if ((ret = mbedtls_ecp_tls_read_group_id(&grp_id, buf, end - *buf))
    395                  != 0) {
   \        0xE   0x682A             LDR      R2,[R5, #+0]
   \       0x10   0x1AB2             SUBS     R2,R6,R2
   \       0x12   0x0029             MOVS     R1,R5
   \       0x14   0x4668             MOV      R0,SP
   \       0x16   0x.... 0x....      BL       mbedtls_ecp_tls_read_group_id
   \       0x1A   0x0007             MOVS     R7,R0
   \       0x1C   0x2800             CMP      R0,#+0
   \       0x1E   0xD001             BEQ.N    ??mbedtls_ecdh_read_params_0
    396                  return ret;
   \       0x20   0x0038             MOVS     R0,R7
   \       0x22   0xE013             B.N      ??mbedtls_ecdh_read_params_1
    397              }
    398          
    399              if ((ret = mbedtls_ecdh_setup(ctx, grp_id)) != 0) {
   \                     ??mbedtls_ecdh_read_params_0: (+1)
   \       0x24   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \       0x28   0x0020             MOVS     R0,R4
   \       0x2A   0x.... 0x....      BL       mbedtls_ecdh_setup
   \       0x2E   0x4680             MOV      R8,R0
   \       0x30   0x2800             CMP      R0,#+0
   \       0x32   0xD001             BEQ.N    ??mbedtls_ecdh_read_params_2
    400                  return ret;
   \       0x34   0x4640             MOV      R0,R8
   \       0x36   0xE009             B.N      ??mbedtls_ecdh_read_params_1
    401              }
    402          
    403          #if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
    404              return ecdh_read_params_internal(ctx, buf, end);
    405          #else
    406              switch (ctx->var) {
   \                     ??mbedtls_ecdh_read_params_2: (+1)
   \       0x38   0x78A0             LDRB     R0,[R4, #+2]
   \       0x3A   0x2801             CMP      R0,#+1
   \       0x3C   0xD105             BNE.N    ??mbedtls_ecdh_read_params_3
    407          #if defined(MBEDTLS_ECDH_VARIANT_EVEREST_ENABLED)
    408                  case MBEDTLS_ECDH_VARIANT_EVEREST:
    409                      return mbedtls_everest_read_params(&ctx->ctx.everest_ecdh,
    410                                                         buf, end);
    411          #endif
    412                  case MBEDTLS_ECDH_VARIANT_MBEDTLS_2_0:
    413                      return ecdh_read_params_internal(&ctx->ctx.mbed_ecdh,
    414                                                       buf, end);
   \       0x3E   0x0032             MOVS     R2,R6
   \       0x40   0x0029             MOVS     R1,R5
   \       0x42   0x1D20             ADDS     R0,R4,#+4
   \       0x44   0x.... 0x....      BL       ecdh_read_params_internal
   \       0x48   0xE000             B.N      ??mbedtls_ecdh_read_params_1
    415                  default:
    416                      return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   \                     ??mbedtls_ecdh_read_params_3: (+1)
   \       0x4A   0x....             LDR.N    R0,??DataTable12_1
   \                     ??mbedtls_ecdh_read_params_1: (+1)
   \       0x4C   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}
    417              }
    418          #endif
    419          }
    420          

   \                                 In section .text, align 2, keep-with-next
    421          static int ecdh_get_params_internal(mbedtls_ecdh_context_mbed *ctx,
    422                                              const mbedtls_ecp_keypair *key,
    423                                              mbedtls_ecdh_side side)
    424          {
   \                     ecdh_get_params_internal: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x000D             MOVS     R5,R1
   \        0x8   0x0016             MOVS     R6,R2
    425              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
   \        0xA   0xF07F 0x086D      MVNS     R8,#+109
    426          
    427              /* If it's not our key, just import the public part as Qp */
    428              if (side == MBEDTLS_ECDH_THEIRS) {
   \        0xE   0x0030             MOVS     R0,R6
   \       0x10   0xB2C0             UXTB     R0,R0
   \       0x12   0x2801             CMP      R0,#+1
   \       0x14   0xD106             BNE.N    ??ecdh_get_params_internal_0
    429                  return mbedtls_ecp_copy(&ctx->Qp, &key->Q);
   \       0x16   0xF115 0x0168      ADDS     R1,R5,#+104
   \       0x1A   0xF114 0x0080      ADDS     R0,R4,#+128
   \       0x1E   0x.... 0x....      BL       mbedtls_ecp_copy
   \       0x22   0xE01A             B.N      ??ecdh_get_params_internal_1
    430              }
    431          
    432              /* Our key: import public (as Q) and private parts */
    433              if (side != MBEDTLS_ECDH_OURS) {
   \                     ??ecdh_get_params_internal_0: (+1)
   \       0x24   0x0030             MOVS     R0,R6
   \       0x26   0xB2C0             UXTB     R0,R0
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD001             BEQ.N    ??ecdh_get_params_internal_2
    434                  return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   \       0x2C   0x....             LDR.N    R0,??DataTable12_1
   \       0x2E   0xE014             B.N      ??ecdh_get_params_internal_1
    435              }
    436          
    437              if ((ret = mbedtls_ecp_copy(&ctx->Q, &key->Q)) != 0 ||
    438                  (ret = mbedtls_mpi_copy(&ctx->d, &key->d)) != 0) {
   \                     ??ecdh_get_params_internal_2: (+1)
   \       0x30   0xF115 0x0168      ADDS     R1,R5,#+104
   \       0x34   0xF114 0x0068      ADDS     R0,R4,#+104
   \       0x38   0x.... 0x....      BL       mbedtls_ecp_copy
   \       0x3C   0x0007             MOVS     R7,R0
   \       0x3E   0x2800             CMP      R0,#+0
   \       0x40   0xD108             BNE.N    ??ecdh_get_params_internal_3
   \       0x42   0xF115 0x0160      ADDS     R1,R5,#+96
   \       0x46   0xF114 0x0060      ADDS     R0,R4,#+96
   \       0x4A   0x.... 0x....      BL       mbedtls_mpi_copy
   \       0x4E   0x0007             MOVS     R7,R0
   \       0x50   0x2800             CMP      R0,#+0
   \       0x52   0xD001             BEQ.N    ??ecdh_get_params_internal_4
    439                  return ret;
   \                     ??ecdh_get_params_internal_3: (+1)
   \       0x54   0x0038             MOVS     R0,R7
   \       0x56   0xE000             B.N      ??ecdh_get_params_internal_1
    440              }
    441          
    442              return 0;
   \                     ??ecdh_get_params_internal_4: (+1)
   \       0x58   0x2000             MOVS     R0,#+0
   \                     ??ecdh_get_params_internal_1: (+1)
   \       0x5A   0xE8BD 0x81F0      POP      {R4-R8,PC}
    443          }
    444          
    445          /*
    446           * Get parameters from a keypair
    447           */

   \                                 In section .text, align 2, keep-with-next
    448          int mbedtls_ecdh_get_params(mbedtls_ecdh_context *ctx,
    449                                      const mbedtls_ecp_keypair *key,
    450                                      mbedtls_ecdh_side side)
    451          {
   \                     mbedtls_ecdh_get_params: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0x0016             MOVS     R6,R2
    452              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
   \        0x8   0xF07F 0x076D      MVNS     R7,#+109
    453              if (side != MBEDTLS_ECDH_OURS && side != MBEDTLS_ECDH_THEIRS) {
   \        0xC   0x0030             MOVS     R0,R6
   \        0xE   0xB2C0             UXTB     R0,R0
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD005             BEQ.N    ??mbedtls_ecdh_get_params_0
   \       0x14   0x0030             MOVS     R0,R6
   \       0x16   0xB2C0             UXTB     R0,R0
   \       0x18   0x2801             CMP      R0,#+1
   \       0x1A   0xD001             BEQ.N    ??mbedtls_ecdh_get_params_0
    454                  return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   \       0x1C   0x....             LDR.N    R0,??DataTable12_1
   \       0x1E   0xE021             B.N      ??mbedtls_ecdh_get_params_1
    455              }
    456          
    457              if (mbedtls_ecdh_grp_id(ctx) == MBEDTLS_ECP_DP_NONE) {
   \                     ??mbedtls_ecdh_get_params_0: (+1)
   \       0x20   0x0020             MOVS     R0,R4
   \       0x22   0x.... 0x....      BL       mbedtls_ecdh_grp_id
   \       0x26   0x2800             CMP      R0,#+0
   \       0x28   0xD108             BNE.N    ??mbedtls_ecdh_get_params_2
    458                  /* This is the first call to get_params(). Set up the context
    459                   * for use with the group. */
    460                  if ((ret = mbedtls_ecdh_setup(ctx, key->grp.id)) != 0) {
   \       0x2A   0x7829             LDRB     R1,[R5, #+0]
   \       0x2C   0x0020             MOVS     R0,R4
   \       0x2E   0x.... 0x....      BL       mbedtls_ecdh_setup
   \       0x32   0x0007             MOVS     R7,R0
   \       0x34   0x2800             CMP      R0,#+0
   \       0x36   0xD00A             BEQ.N    ??mbedtls_ecdh_get_params_3
    461                      return ret;
   \       0x38   0x0038             MOVS     R0,R7
   \       0x3A   0xE013             B.N      ??mbedtls_ecdh_get_params_1
    462                  }
    463              } else {
    464                  /* This is not the first call to get_params(). Check that the
    465                   * current key's group is the same as the context's, which was set
    466                   * from the first key's group. */
    467                  if (mbedtls_ecdh_grp_id(ctx) != key->grp.id) {
   \                     ??mbedtls_ecdh_get_params_2: (+1)
   \       0x3C   0x0020             MOVS     R0,R4
   \       0x3E   0x.... 0x....      BL       mbedtls_ecdh_grp_id
   \       0x42   0x7829             LDRB     R1,[R5, #+0]
   \       0x44   0xB2C0             UXTB     R0,R0
   \       0x46   0x4288             CMP      R0,R1
   \       0x48   0xD001             BEQ.N    ??mbedtls_ecdh_get_params_3
    468                      return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   \       0x4A   0x....             LDR.N    R0,??DataTable12_1
   \       0x4C   0xE00A             B.N      ??mbedtls_ecdh_get_params_1
    469                  }
    470              }
    471          
    472          #if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
    473              return ecdh_get_params_internal(ctx, key, side);
    474          #else
    475              switch (ctx->var) {
   \                     ??mbedtls_ecdh_get_params_3: (+1)
   \       0x4E   0x78A0             LDRB     R0,[R4, #+2]
   \       0x50   0x2801             CMP      R0,#+1
   \       0x52   0xD106             BNE.N    ??mbedtls_ecdh_get_params_4
    476          #if defined(MBEDTLS_ECDH_VARIANT_EVEREST_ENABLED)
    477                  case MBEDTLS_ECDH_VARIANT_EVEREST:
    478                  {
    479                      mbedtls_everest_ecdh_side s = side == MBEDTLS_ECDH_OURS ?
    480                                                    MBEDTLS_EVEREST_ECDH_OURS :
    481                                                    MBEDTLS_EVEREST_ECDH_THEIRS;
    482                      return mbedtls_everest_get_params(&ctx->ctx.everest_ecdh,
    483                                                        key, s);
    484                  }
    485          #endif
    486                  case MBEDTLS_ECDH_VARIANT_MBEDTLS_2_0:
    487                      return ecdh_get_params_internal(&ctx->ctx.mbed_ecdh,
    488                                                      key, side);
   \       0x54   0x0032             MOVS     R2,R6
   \       0x56   0xB2D2             UXTB     R2,R2
   \       0x58   0x0029             MOVS     R1,R5
   \       0x5A   0x1D20             ADDS     R0,R4,#+4
   \       0x5C   0x.... 0x....      BL       ecdh_get_params_internal
   \       0x60   0xE000             B.N      ??mbedtls_ecdh_get_params_1
    489                  default:
    490                      return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   \                     ??mbedtls_ecdh_get_params_4: (+1)
   \       0x62   0x....             LDR.N    R0,??DataTable12_1
   \                     ??mbedtls_ecdh_get_params_1: (+1)
   \       0x64   0xBDF2             POP      {R1,R4-R7,PC}
    491              }
    492          #endif
    493          }
    494          

   \                                 In section .text, align 2, keep-with-next
    495          static int ecdh_make_public_internal(mbedtls_ecdh_context_mbed *ctx,
    496                                               size_t *olen, int point_format,
    497                                               unsigned char *buf, size_t blen,
    498                                               int (*f_rng)(void *,
    499                                                            unsigned char *,
    500                                                            size_t),
    501                                               void *p_rng,
    502                                               int restart_enabled)
    503          {
   \                     ecdh_make_public_internal: (+1)
   \        0x0   0xE92D 0x47FC      PUSH     {R2-R10,LR}
   \        0x4   0x4681             MOV      R9,R0
   \        0x6   0x000C             MOVS     R4,R1
   \        0x8   0x0015             MOVS     R5,R2
   \        0xA   0x001E             MOVS     R6,R3
   \        0xC   0x9F0B             LDR      R7,[SP, #+44]
    504              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
   \        0xE   0xF07F 0x086D      MVNS     R8,#+109
    505          #if defined(MBEDTLS_ECP_RESTARTABLE)
    506              mbedtls_ecp_restart_ctx *rs_ctx = NULL;
    507          #endif
    508          
    509              if (ctx->grp.pbits == 0) {
   \       0x12   0xF8D9 0x003C      LDR      R0,[R9, #+60]
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD101             BNE.N    ??ecdh_make_public_internal_0
    510                  return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   \       0x1A   0x....             LDR.N    R0,??DataTable12_1
   \       0x1C   0xE018             B.N      ??ecdh_make_public_internal_1
    511              }
    512          
    513          #if defined(MBEDTLS_ECP_RESTARTABLE)
    514              if (restart_enabled) {
    515                  rs_ctx = &ctx->rs;
    516              }
    517          #else
    518              (void) restart_enabled;
    519          #endif
    520          
    521          #if defined(MBEDTLS_ECP_RESTARTABLE)
    522              if ((ret = ecdh_gen_public_restartable(&ctx->grp, &ctx->d, &ctx->Q,
    523                                                     f_rng, p_rng, rs_ctx)) != 0) {
    524                  return ret;
    525              }
    526          #else
    527              if ((ret = mbedtls_ecdh_gen_public(&ctx->grp, &ctx->d, &ctx->Q,
    528                                                 f_rng, p_rng)) != 0) {
   \                     ??ecdh_make_public_internal_0: (+1)
   \       0x1E   0x980C             LDR      R0,[SP, #+48]
   \       0x20   0x9000             STR      R0,[SP, #+0]
   \       0x22   0x003B             MOVS     R3,R7
   \       0x24   0xF119 0x0268      ADDS     R2,R9,#+104
   \       0x28   0xF119 0x0160      ADDS     R1,R9,#+96
   \       0x2C   0x4648             MOV      R0,R9
   \       0x2E   0x.... 0x....      BL       mbedtls_ecdh_gen_public
   \       0x32   0x4682             MOV      R10,R0
   \       0x34   0x2800             CMP      R0,#+0
   \       0x36   0xD001             BEQ.N    ??ecdh_make_public_internal_2
    529                  return ret;
   \       0x38   0x4650             MOV      R0,R10
   \       0x3A   0xE009             B.N      ??ecdh_make_public_internal_1
    530              }
    531          #endif /* MBEDTLS_ECP_RESTARTABLE */
    532          
    533              return mbedtls_ecp_tls_write_point(&ctx->grp, &ctx->Q, point_format, olen,
    534                                                 buf, blen);
   \                     ??ecdh_make_public_internal_2: (+1)
   \       0x3C   0x980A             LDR      R0,[SP, #+40]
   \       0x3E   0x9001             STR      R0,[SP, #+4]
   \       0x40   0x9600             STR      R6,[SP, #+0]
   \       0x42   0x0023             MOVS     R3,R4
   \       0x44   0x002A             MOVS     R2,R5
   \       0x46   0xF119 0x0168      ADDS     R1,R9,#+104
   \       0x4A   0x4648             MOV      R0,R9
   \       0x4C   0x.... 0x....      BL       mbedtls_ecp_tls_write_point
   \                     ??ecdh_make_public_internal_1: (+1)
   \       0x50   0xE8BD 0x87F6      POP      {R1,R2,R4-R10,PC}
    535          }
    536          
    537          /*
    538           * Setup and export the client public value
    539           */

   \                                 In section .text, align 2, keep-with-next
    540          int mbedtls_ecdh_make_public(mbedtls_ecdh_context *ctx, size_t *olen,
    541                                       unsigned char *buf, size_t blen,
    542                                       int (*f_rng)(void *, unsigned char *, size_t),
    543                                       void *p_rng)
    544          {
   \                     mbedtls_ecdh_make_public: (+1)
   \        0x0   0xE92D 0x41FF      PUSH     {R0-R8,LR}
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x000D             MOVS     R5,R1
   \        0x8   0x0016             MOVS     R6,R2
   \        0xA   0x001F             MOVS     R7,R3
    545              int restart_enabled = 0;
   \        0xC   0xF05F 0x0800      MOVS     R8,#+0
    546          #if defined(MBEDTLS_ECP_RESTARTABLE)
    547              restart_enabled = ctx->restart_enabled;
    548          #endif
    549          
    550          #if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
    551              return ecdh_make_public_internal(ctx, olen, ctx->point_format, buf, blen,
    552                                               f_rng, p_rng, restart_enabled);
    553          #else
    554              switch (ctx->var) {
   \       0x10   0x78A0             LDRB     R0,[R4, #+2]
   \       0x12   0x2801             CMP      R0,#+1
   \       0x14   0xD10D             BNE.N    ??mbedtls_ecdh_make_public_0
    555          #if defined(MBEDTLS_ECDH_VARIANT_EVEREST_ENABLED)
    556                  case MBEDTLS_ECDH_VARIANT_EVEREST:
    557                      return mbedtls_everest_make_public(&ctx->ctx.everest_ecdh, olen,
    558                                                         buf, blen, f_rng, p_rng);
    559          #endif
    560                  case MBEDTLS_ECDH_VARIANT_MBEDTLS_2_0:
    561                      return ecdh_make_public_internal(&ctx->ctx.mbed_ecdh, olen,
    562                                                       ctx->point_format, buf, blen,
    563                                                       f_rng, p_rng,
    564                                                       restart_enabled);
   \       0x16   0xF8CD 0x800C      STR      R8,[SP, #+12]
   \       0x1A   0x980B             LDR      R0,[SP, #+44]
   \       0x1C   0x9002             STR      R0,[SP, #+8]
   \       0x1E   0x980A             LDR      R0,[SP, #+40]
   \       0x20   0x9001             STR      R0,[SP, #+4]
   \       0x22   0x9700             STR      R7,[SP, #+0]
   \       0x24   0x0033             MOVS     R3,R6
   \       0x26   0x7822             LDRB     R2,[R4, #+0]
   \       0x28   0x0029             MOVS     R1,R5
   \       0x2A   0x1D20             ADDS     R0,R4,#+4
   \       0x2C   0x.... 0x....      BL       ecdh_make_public_internal
   \       0x30   0xE000             B.N      ??mbedtls_ecdh_make_public_1
    565                  default:
    566                      return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   \                     ??mbedtls_ecdh_make_public_0: (+1)
   \       0x32   0x....             LDR.N    R0,??DataTable12_1
   \                     ??mbedtls_ecdh_make_public_1: (+1)
   \       0x34   0xB004             ADD      SP,SP,#+16
   \       0x36   0xE8BD 0x81F0      POP      {R4-R8,PC}
    567              }
    568          #endif
    569          }
    570          

   \                                 In section .text, align 2, keep-with-next
    571          static int ecdh_read_public_internal(mbedtls_ecdh_context_mbed *ctx,
    572                                               const unsigned char *buf, size_t blen)
    573          {
   \                     ecdh_read_public_internal: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0x0016             MOVS     R6,R2
    574              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
   \        0x8   0xF07F 0x076D      MVNS     R7,#+109
    575              const unsigned char *p = buf;
   \        0xC   0x9500             STR      R5,[SP, #+0]
    576          
    577              if ((ret = mbedtls_ecp_tls_read_point(&ctx->grp, &ctx->Qp, &p,
    578                                                    blen)) != 0) {
   \        0xE   0x0033             MOVS     R3,R6
   \       0x10   0x466A             MOV      R2,SP
   \       0x12   0xF114 0x0180      ADDS     R1,R4,#+128
   \       0x16   0x0020             MOVS     R0,R4
   \       0x18   0x.... 0x....      BL       mbedtls_ecp_tls_read_point
   \       0x1C   0x0001             MOVS     R1,R0
   \       0x1E   0x2800             CMP      R0,#+0
   \       0x20   0xD001             BEQ.N    ??ecdh_read_public_internal_0
    579                  return ret;
   \       0x22   0x0008             MOVS     R0,R1
   \       0x24   0xE006             B.N      ??ecdh_read_public_internal_1
    580              }
    581          
    582              if ((size_t) (p - buf) != blen) {
   \                     ??ecdh_read_public_internal_0: (+1)
   \       0x26   0x9800             LDR      R0,[SP, #+0]
   \       0x28   0x1B40             SUBS     R0,R0,R5
   \       0x2A   0x42B0             CMP      R0,R6
   \       0x2C   0xD001             BEQ.N    ??ecdh_read_public_internal_2
    583                  return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   \       0x2E   0x....             LDR.N    R0,??DataTable12_1
   \       0x30   0xE000             B.N      ??ecdh_read_public_internal_1
    584              }
    585          
    586              return 0;
   \                     ??ecdh_read_public_internal_2: (+1)
   \       0x32   0x2000             MOVS     R0,#+0
   \                     ??ecdh_read_public_internal_1: (+1)
   \       0x34   0xBDF2             POP      {R1,R4-R7,PC}
    587          }
    588          
    589          /*
    590           * Parse and import the client's public value
    591           */

   \                                 In section .text, align 2, keep-with-next
    592          int mbedtls_ecdh_read_public(mbedtls_ecdh_context *ctx,
    593                                       const unsigned char *buf, size_t blen)
    594          {
   \                     mbedtls_ecdh_read_public: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0x0016             MOVS     R6,R2
    595          #if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
    596              return ecdh_read_public_internal(ctx, buf, blen);
    597          #else
    598              switch (ctx->var) {
   \        0x8   0x78A0             LDRB     R0,[R4, #+2]
   \        0xA   0x2801             CMP      R0,#+1
   \        0xC   0xD105             BNE.N    ??mbedtls_ecdh_read_public_0
    599          #if defined(MBEDTLS_ECDH_VARIANT_EVEREST_ENABLED)
    600                  case MBEDTLS_ECDH_VARIANT_EVEREST:
    601                      return mbedtls_everest_read_public(&ctx->ctx.everest_ecdh,
    602                                                         buf, blen);
    603          #endif
    604                  case MBEDTLS_ECDH_VARIANT_MBEDTLS_2_0:
    605                      return ecdh_read_public_internal(&ctx->ctx.mbed_ecdh,
    606                                                       buf, blen);
   \        0xE   0x0032             MOVS     R2,R6
   \       0x10   0x0029             MOVS     R1,R5
   \       0x12   0x1D20             ADDS     R0,R4,#+4
   \       0x14   0x.... 0x....      BL       ecdh_read_public_internal
   \       0x18   0xE000             B.N      ??mbedtls_ecdh_read_public_1
    607                  default:
    608                      return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   \                     ??mbedtls_ecdh_read_public_0: (+1)
   \       0x1A   0x....             LDR.N    R0,??DataTable12_1
   \                     ??mbedtls_ecdh_read_public_1: (+1)
   \       0x1C   0xBD70             POP      {R4-R6,PC}
    609              }
    610          #endif
    611          }
    612          

   \                                 In section .text, align 2, keep-with-next
    613          static int ecdh_calc_secret_internal(mbedtls_ecdh_context_mbed *ctx,
    614                                               size_t *olen, unsigned char *buf,
    615                                               size_t blen,
    616                                               int (*f_rng)(void *,
    617                                                            unsigned char *,
    618                                                            size_t),
    619                                               void *p_rng,
    620                                               int restart_enabled)
    621          {
   \                     ecdh_calc_secret_internal: (+1)
   \        0x0   0xE92D 0x43FE      PUSH     {R1-R9,LR}
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x000D             MOVS     R5,R1
   \        0x8   0x0016             MOVS     R6,R2
   \        0xA   0x001F             MOVS     R7,R3
    622              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
   \        0xC   0xF07F 0x086D      MVNS     R8,#+109
    623          #if defined(MBEDTLS_ECP_RESTARTABLE)
    624              mbedtls_ecp_restart_ctx *rs_ctx = NULL;
    625          #endif
    626          
    627              if (ctx == NULL || ctx->grp.pbits == 0) {
   \       0x10   0x2C00             CMP      R4,#+0
   \       0x12   0xD002             BEQ.N    ??ecdh_calc_secret_internal_0
   \       0x14   0x6BE0             LDR      R0,[R4, #+60]
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD101             BNE.N    ??ecdh_calc_secret_internal_1
    628                  return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   \                     ??ecdh_calc_secret_internal_0: (+1)
   \       0x1A   0x....             LDR.N    R0,??DataTable12_1
   \       0x1C   0xE038             B.N      ??ecdh_calc_secret_internal_2
    629              }
    630          
    631          #if defined(MBEDTLS_ECP_RESTARTABLE)
    632              if (restart_enabled) {
    633                  rs_ctx = &ctx->rs;
    634              }
    635          #else
    636              (void) restart_enabled;
    637          #endif
    638          
    639          #if defined(MBEDTLS_ECP_RESTARTABLE)
    640              if ((ret = ecdh_compute_shared_restartable(&ctx->grp, &ctx->z, &ctx->Qp,
    641                                                         &ctx->d, f_rng, p_rng,
    642                                                         rs_ctx)) != 0) {
    643                  return ret;
    644              }
    645          #else
    646              if ((ret = mbedtls_ecdh_compute_shared(&ctx->grp, &ctx->z, &ctx->Qp,
    647                                                     &ctx->d, f_rng, p_rng)) != 0) {
   \                     ??ecdh_calc_secret_internal_1: (+1)
   \       0x1E   0x980B             LDR      R0,[SP, #+44]
   \       0x20   0x9001             STR      R0,[SP, #+4]
   \       0x22   0x980A             LDR      R0,[SP, #+40]
   \       0x24   0x9000             STR      R0,[SP, #+0]
   \       0x26   0xF114 0x0360      ADDS     R3,R4,#+96
   \       0x2A   0xF114 0x0280      ADDS     R2,R4,#+128
   \       0x2E   0xF114 0x0198      ADDS     R1,R4,#+152
   \       0x32   0x0020             MOVS     R0,R4
   \       0x34   0x.... 0x....      BL       mbedtls_ecdh_compute_shared
   \       0x38   0x4681             MOV      R9,R0
   \       0x3A   0x2800             CMP      R0,#+0
   \       0x3C   0xD001             BEQ.N    ??ecdh_calc_secret_internal_3
    648                  return ret;
   \       0x3E   0x4648             MOV      R0,R9
   \       0x40   0xE026             B.N      ??ecdh_calc_secret_internal_2
    649              }
    650          #endif /* MBEDTLS_ECP_RESTARTABLE */
    651          
    652              if (mbedtls_mpi_size(&ctx->z) > blen) {
   \                     ??ecdh_calc_secret_internal_3: (+1)
   \       0x42   0xF114 0x0098      ADDS     R0,R4,#+152
   \       0x46   0x.... 0x....      BL       mbedtls_mpi_size
   \       0x4A   0x4287             CMP      R7,R0
   \       0x4C   0xD201             BCS.N    ??ecdh_calc_secret_internal_4
    653                  return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   \       0x4E   0x....             LDR.N    R0,??DataTable12_1
   \       0x50   0xE01E             B.N      ??ecdh_calc_secret_internal_2
    654              }
    655          
    656              *olen = ctx->grp.pbits / 8 + ((ctx->grp.pbits % 8) != 0);
   \                     ??ecdh_calc_secret_internal_4: (+1)
   \       0x52   0xF894 0x003C      LDRB     R0,[R4, #+60]
   \       0x56   0xF010 0x0F07      TST      R0,#0x7
   \       0x5A   0xD001             BEQ.N    ??ecdh_calc_secret_internal_5
   \       0x5C   0x2101             MOVS     R1,#+1
   \       0x5E   0xE000             B.N      ??ecdh_calc_secret_internal_6
   \                     ??ecdh_calc_secret_internal_5: (+1)
   \       0x60   0x2100             MOVS     R1,#+0
   \                     ??ecdh_calc_secret_internal_6: (+1)
   \       0x62   0x6BE0             LDR      R0,[R4, #+60]
   \       0x64   0x08C0             LSRS     R0,R0,#+3
   \       0x66   0xFA50 0xF081      UXTAB    R0,R0,R1
   \       0x6A   0x6028             STR      R0,[R5, #+0]
    657          
    658              if (mbedtls_ecp_get_type(&ctx->grp) == MBEDTLS_ECP_TYPE_MONTGOMERY) {
   \       0x6C   0x0020             MOVS     R0,R4
   \       0x6E   0x.... 0x....      BL       mbedtls_ecp_get_type
   \       0x72   0x2802             CMP      R0,#+2
   \       0x74   0xD106             BNE.N    ??ecdh_calc_secret_internal_7
    659                  return mbedtls_mpi_write_binary_le(&ctx->z, buf, *olen);
   \       0x76   0x682A             LDR      R2,[R5, #+0]
   \       0x78   0x0031             MOVS     R1,R6
   \       0x7A   0xF114 0x0098      ADDS     R0,R4,#+152
   \       0x7E   0x.... 0x....      BL       mbedtls_mpi_write_binary_le
   \       0x82   0xE005             B.N      ??ecdh_calc_secret_internal_2
    660              }
    661          
    662              return mbedtls_mpi_write_binary(&ctx->z, buf, *olen);
   \                     ??ecdh_calc_secret_internal_7: (+1)
   \       0x84   0x682A             LDR      R2,[R5, #+0]
   \       0x86   0x0031             MOVS     R1,R6
   \       0x88   0xF114 0x0098      ADDS     R0,R4,#+152
   \       0x8C   0x.... 0x....      BL       mbedtls_mpi_write_binary
   \                     ??ecdh_calc_secret_internal_2: (+1)
   \       0x90   0xE8BD 0x83FE      POP      {R1-R9,PC}
    663          }
    664          
    665          /*
    666           * Derive and export the shared secret
    667           */

   \                                 In section .text, align 2, keep-with-next
    668          int mbedtls_ecdh_calc_secret(mbedtls_ecdh_context *ctx, size_t *olen,
    669                                       unsigned char *buf, size_t blen,
    670                                       int (*f_rng)(void *, unsigned char *, size_t),
    671                                       void *p_rng)
    672          {
   \                     mbedtls_ecdh_calc_secret: (+1)
   \        0x0   0xE92D 0x41FF      PUSH     {R0-R8,LR}
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x000D             MOVS     R5,R1
   \        0x8   0x0016             MOVS     R6,R2
   \        0xA   0x001F             MOVS     R7,R3
    673              int restart_enabled = 0;
   \        0xC   0xF05F 0x0800      MOVS     R8,#+0
    674          #if defined(MBEDTLS_ECP_RESTARTABLE)
    675              restart_enabled = ctx->restart_enabled;
    676          #endif
    677          
    678          #if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
    679              return ecdh_calc_secret_internal(ctx, olen, buf, blen, f_rng, p_rng,
    680                                               restart_enabled);
    681          #else
    682              switch (ctx->var) {
   \       0x10   0x78A0             LDRB     R0,[R4, #+2]
   \       0x12   0x2801             CMP      R0,#+1
   \       0x14   0xD10C             BNE.N    ??mbedtls_ecdh_calc_secret_0
    683          #if defined(MBEDTLS_ECDH_VARIANT_EVEREST_ENABLED)
    684                  case MBEDTLS_ECDH_VARIANT_EVEREST:
    685                      return mbedtls_everest_calc_secret(&ctx->ctx.everest_ecdh, olen,
    686                                                         buf, blen, f_rng, p_rng);
    687          #endif
    688                  case MBEDTLS_ECDH_VARIANT_MBEDTLS_2_0:
    689                      return ecdh_calc_secret_internal(&ctx->ctx.mbed_ecdh, olen, buf,
    690                                                       blen, f_rng, p_rng,
    691                                                       restart_enabled);
   \       0x16   0xF8CD 0x8008      STR      R8,[SP, #+8]
   \       0x1A   0x980B             LDR      R0,[SP, #+44]
   \       0x1C   0x9001             STR      R0,[SP, #+4]
   \       0x1E   0x980A             LDR      R0,[SP, #+40]
   \       0x20   0x9000             STR      R0,[SP, #+0]
   \       0x22   0x003B             MOVS     R3,R7
   \       0x24   0x0032             MOVS     R2,R6
   \       0x26   0x0029             MOVS     R1,R5
   \       0x28   0x1D20             ADDS     R0,R4,#+4
   \       0x2A   0x.... 0x....      BL       ecdh_calc_secret_internal
   \       0x2E   0xE000             B.N      ??mbedtls_ecdh_calc_secret_1
    692                  default:
    693                      return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   \                     ??mbedtls_ecdh_calc_secret_0: (+1)
   \       0x30   0x....             LDR.N    R0,??DataTable12_1
   \                     ??mbedtls_ecdh_calc_secret_1: (+1)
   \       0x32   0xB004             ADD      SP,SP,#+16
   \       0x34   0xE8BD 0x81F0      POP      {R4-R8,PC}
    694              }
    695          #endif
    696          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \        0x0   0xFFFF'B180        DC32     0xffffb180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \        0x0   0xFFFF'B080        DC32     0xffffb080
    697          #endif /* MBEDTLS_ECDH_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   ecdh_calc_secret_internal
        40   -> mbedtls_ecdh_compute_shared
        40   -> mbedtls_ecp_get_type
        40   -> mbedtls_mpi_size
        40   -> mbedtls_mpi_write_binary
        40   -> mbedtls_mpi_write_binary_le
       8   ecdh_free_internal
         8   -> mbedtls_ecp_group_free
         8   -> mbedtls_ecp_point_free
         8   -> mbedtls_mpi_free
      24   ecdh_get_params_internal
        24   -> mbedtls_ecp_copy
        24   -> mbedtls_mpi_copy
       8   ecdh_init_internal
         8   -> mbedtls_ecp_group_init
         8   -> mbedtls_ecp_point_init
         8   -> mbedtls_mpi_init
      56   ecdh_make_params_internal
        56   -> mbedtls_ecdh_gen_public
        56   -> mbedtls_ecp_tls_write_group
        56   -> mbedtls_ecp_tls_write_point
      40   ecdh_make_public_internal
        40   -> mbedtls_ecdh_gen_public
        40   -> mbedtls_ecp_tls_write_point
      16   ecdh_read_params_internal
        16   -> mbedtls_ecp_tls_read_point
      24   ecdh_read_public_internal
        24   -> mbedtls_ecp_tls_read_point
      16   ecdh_setup_internal
        16   -> mbedtls_ecp_group_load
      40   mbedtls_ecdh_calc_secret
        40   -> ecdh_calc_secret_internal
       0   mbedtls_ecdh_can_do
       8   mbedtls_ecdh_free
         8   -> ecdh_free_internal
      24   mbedtls_ecdh_get_params
        24   -> ecdh_get_params_internal
        24   -> mbedtls_ecdh_grp_id
        24   -> mbedtls_ecdh_setup
       0   mbedtls_ecdh_grp_id
      24   mbedtls_ecdh_init
        24   -> __aeabi_memset
      40   mbedtls_ecdh_make_params
        40   -> ecdh_make_params_internal
      40   mbedtls_ecdh_make_public
        40   -> ecdh_make_public_internal
      32   mbedtls_ecdh_read_params
        32   -> ecdh_read_params_internal
        32   -> mbedtls_ecdh_setup
        32   -> mbedtls_ecp_tls_read_group_id
      16   mbedtls_ecdh_read_public
        16   -> ecdh_read_public_internal
      16   mbedtls_ecdh_setup
        16   -> ecdh_init_internal
        16   -> ecdh_setup_internal


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable12
       4  ??DataTable12_1
     148  ecdh_calc_secret_internal
      44  ecdh_free_internal
      94  ecdh_get_params_internal
      44  ecdh_init_internal
     146  ecdh_make_params_internal
      84  ecdh_make_public_internal
      26  ecdh_read_params_internal
      54  ecdh_read_public_internal
      36  ecdh_setup_internal
      56  mbedtls_ecdh_calc_secret
       6  mbedtls_ecdh_can_do
      36  mbedtls_ecdh_free
     102  mbedtls_ecdh_get_params
       4  mbedtls_ecdh_grp_id
      30  mbedtls_ecdh_init
      58  mbedtls_ecdh_make_params
      58  mbedtls_ecdh_make_public
      80  mbedtls_ecdh_read_params
      30  mbedtls_ecdh_read_public
      34  mbedtls_ecdh_setup

 
 1'178 bytes in section .text
 
 1'178 bytes of CODE memory

Errors: none
Warnings: none
