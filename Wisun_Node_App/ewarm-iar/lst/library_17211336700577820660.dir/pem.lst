###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         29/Mar/2025  15:53:47
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\pem.c
#    Command line                 =
#        -f "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\library_17211336700577820660.dir\pem.o.rsp"
#        ("D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\pem.c"
#        -D DEBUG_EFM=1 -D EFR32FG28B322F1024IM48=1 -D
#        configNUM_SDK_THREAD_LOCAL_STORAGE_POINTERS=2 -D
#        SL_COMPONENT_CATALOG_PRESENT=1 -D
#        MBEDTLS_CONFIG_FILE=<sl_mbedtls_config.h> -D
#        MBEDTLS_PSA_CRYPTO_CONFIG_FILE=<psa_crypto_config.h> -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -D
#        RTT_USE_ASM=0 -lC "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\lst\library_17211336700577820660.dir"
#        --diag_suppress Pa050 -o "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\library_17211336700577820660.dir"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M33 --cmse --cmse -e --fpu=VFPv5_sp --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        9.2\arm\inc\c\DLib_Config_Normal.h" -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\rail\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\wisun\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\.\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\Device\SiliconLabs\EFR32FG28\Include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_project_info\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\common\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\src\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\CMSIS\Core\Include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\CMSIS\RTOS2\Include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\device_init\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emdrv\common\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emlib\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\iostream\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\config\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\config\preset\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\cpu\include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\ports\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emdrv\nvm3\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\peripheral\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\printf\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\printf\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_psa_driver\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\common\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\ble\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\ieee802154\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\wmbus\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\zwave\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\chip\efr32\efr32xg2x\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\sidewalk\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\pa-conversions\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\pa-conversions\efr32xg28\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\rail_util_pti\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\se_manager\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\se_manager\src\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\segger\systemview\SEGGER\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\silicon_labs\silabs_core\memory_manager\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\common\toolchain\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\system\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_core\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_setting\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\cli_util\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\event_manager\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\ns_list\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\ping\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\nanostack\nanostack-libservice\mbed-client-libservice\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\udp_client\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\sleeptimer\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\plugin\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\stack\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\stack\inc\socket\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\autogen\\" -On
#        --use_c++_inline) --dependencies=n "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\library_17211336700577820660.dir\pem.o.iar_deps"
#    Locale                       =  C
#    List file                    =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\lst\library_17211336700577820660.dir\pem.lst
#    Object file                  =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\library_17211336700577820660.dir\pem.o
#    Runtime model:                  
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_file_descriptor     =  0
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#
###############################################################################

D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\pem.c
      1          /*
      2           *  Privacy Enhanced Mail (PEM) decoding
      3           *
      4           *  Copyright The Mbed TLS Contributors
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           */
     19          
     20          #include "common.h"
     21          
     22          #if defined(MBEDTLS_PEM_PARSE_C) || defined(MBEDTLS_PEM_WRITE_C)
     23          
     24          #include "mbedtls/pem.h"
     25          #include "mbedtls/base64.h"
     26          #include "mbedtls/des.h"
     27          #include "mbedtls/aes.h"
     28          #include "mbedtls/md.h"
     29          #include "mbedtls/cipher.h"
     30          #include "mbedtls/platform_util.h"
     31          #include "mbedtls/error.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __vfp int mbedtls_error_add(int, int, char const *, int)
   \                     mbedtls_error_add: (+1)
   \        0x0   0x1808             ADDS     R0,R1,R0
   \        0x2   0x4770             BX       LR
     32          
     33          #include <string.h>
     34          
     35          #include "mbedtls/platform.h"
     36          
     37          #if defined(MBEDTLS_USE_PSA_CRYPTO)
     38          #include "psa/crypto.h"
     39          #endif
     40          
     41          #if defined(MBEDTLS_MD_CAN_MD5) &&  \
     42              defined(MBEDTLS_CIPHER_MODE_CBC) &&                             \
     43              (defined(MBEDTLS_DES_C) || defined(MBEDTLS_AES_C))
     44          #define PEM_RFC1421
     45          #endif /* MBEDTLS_MD_CAN_MD5 &&
     46                    MBEDTLS_CIPHER_MODE_CBC &&
     47                    ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
     48          
     49          #if defined(MBEDTLS_PEM_PARSE_C)

   \                                 In section .text, align 2, keep-with-next
     50          void mbedtls_pem_init(mbedtls_pem_context *ctx)
     51          {
   \                     mbedtls_pem_init: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0007             MOVS     R7,R0
     52              memset(ctx, 0, sizeof(mbedtls_pem_context));
   \        0x4   0x240C             MOVS     R4,#+12
   \        0x6   0x2500             MOVS     R5,#+0
   \        0x8   0x003E             MOVS     R6,R7
   \        0xA   0x002A             MOVS     R2,R5
   \        0xC   0x0021             MOVS     R1,R4
   \        0xE   0x0030             MOVS     R0,R6
   \       0x10   0x.... 0x....      BL       __aeabi_memset
     53          }
   \       0x14   0xBDF1             POP      {R0,R4-R7,PC}
     54          
     55          #if defined(PEM_RFC1421)
     56          /*
     57           * Read a 16-byte hex string and convert it to binary
     58           */
     59          static int pem_get_iv(const unsigned char *s, unsigned char *iv,
     60                                size_t iv_len)
     61          {
     62              size_t i, j, k;
     63          
     64              memset(iv, 0, iv_len);
     65          
     66              for (i = 0; i < iv_len * 2; i++, s++) {
     67                  if (*s >= '0' && *s <= '9') {
     68                      j = *s - '0';
     69                  } else
     70                  if (*s >= 'A' && *s <= 'F') {
     71                      j = *s - '7';
     72                  } else
     73                  if (*s >= 'a' && *s <= 'f') {
     74                      j = *s - 'W';
     75                  } else {
     76                      return MBEDTLS_ERR_PEM_INVALID_ENC_IV;
     77                  }
     78          
     79                  k = ((i & 1) != 0) ? j : j << 4;
     80          
     81                  iv[i >> 1] = (unsigned char) (iv[i >> 1] | k);
     82              }
     83          
     84              return 0;
     85          }
     86          
     87          static int pem_pbkdf1(unsigned char *key, size_t keylen,
     88                                unsigned char *iv,
     89                                const unsigned char *pwd, size_t pwdlen)
     90          {
     91              mbedtls_md_context_t md5_ctx;
     92              const mbedtls_md_info_t *md5_info;
     93              unsigned char md5sum[16];
     94              size_t use_len;
     95              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
     96          
     97              mbedtls_md_init(&md5_ctx);
     98          
     99              /* Prepare the context. (setup() errors gracefully on NULL info.) */
    100              md5_info = mbedtls_md_info_from_type(MBEDTLS_MD_MD5);
    101              if ((ret = mbedtls_md_setup(&md5_ctx, md5_info, 0)) != 0) {
    102                  goto exit;
    103              }
    104          
    105              /*
    106               * key[ 0..15] = MD5(pwd || IV)
    107               */
    108              if ((ret = mbedtls_md_starts(&md5_ctx)) != 0) {
    109                  goto exit;
    110              }
    111              if ((ret = mbedtls_md_update(&md5_ctx, pwd, pwdlen)) != 0) {
    112                  goto exit;
    113              }
    114              if ((ret = mbedtls_md_update(&md5_ctx, iv,  8)) != 0) {
    115                  goto exit;
    116              }
    117              if ((ret = mbedtls_md_finish(&md5_ctx, md5sum)) != 0) {
    118                  goto exit;
    119              }
    120          
    121              if (keylen <= 16) {
    122                  memcpy(key, md5sum, keylen);
    123                  goto exit;
    124              }
    125          
    126              memcpy(key, md5sum, 16);
    127          
    128              /*
    129               * key[16..23] = MD5(key[ 0..15] || pwd || IV])
    130               */
    131              if ((ret = mbedtls_md_starts(&md5_ctx)) != 0) {
    132                  goto exit;
    133              }
    134              if ((ret = mbedtls_md_update(&md5_ctx, md5sum, 16)) != 0) {
    135                  goto exit;
    136              }
    137              if ((ret = mbedtls_md_update(&md5_ctx, pwd, pwdlen)) != 0) {
    138                  goto exit;
    139              }
    140              if ((ret = mbedtls_md_update(&md5_ctx, iv, 8)) != 0) {
    141                  goto exit;
    142              }
    143              if ((ret = mbedtls_md_finish(&md5_ctx, md5sum)) != 0) {
    144                  goto exit;
    145              }
    146          
    147              use_len = 16;
    148              if (keylen < 32) {
    149                  use_len = keylen - 16;
    150              }
    151          
    152              memcpy(key + 16, md5sum, use_len);
    153          
    154          exit:
    155              mbedtls_md_free(&md5_ctx);
    156              mbedtls_platform_zeroize(md5sum, 16);
    157          
    158              return ret;
    159          }
    160          
    161          #if defined(MBEDTLS_DES_C)
    162          /*
    163           * Decrypt with DES-CBC, using PBKDF1 for key derivation
    164           */
    165          static int pem_des_decrypt(unsigned char des_iv[8],
    166                                     unsigned char *buf, size_t buflen,
    167                                     const unsigned char *pwd, size_t pwdlen)
    168          {
    169              mbedtls_des_context des_ctx;
    170              unsigned char des_key[8];
    171              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    172          
    173              mbedtls_des_init(&des_ctx);
    174          
    175              if ((ret = pem_pbkdf1(des_key, 8, des_iv, pwd, pwdlen)) != 0) {
    176                  goto exit;
    177              }
    178          
    179              if ((ret = mbedtls_des_setkey_dec(&des_ctx, des_key)) != 0) {
    180                  goto exit;
    181              }
    182              ret = mbedtls_des_crypt_cbc(&des_ctx, MBEDTLS_DES_DECRYPT, buflen,
    183                                          des_iv, buf, buf);
    184          
    185          exit:
    186              mbedtls_des_free(&des_ctx);
    187              mbedtls_platform_zeroize(des_key, 8);
    188          
    189              return ret;
    190          }
    191          
    192          /*
    193           * Decrypt with 3DES-CBC, using PBKDF1 for key derivation
    194           */
    195          static int pem_des3_decrypt(unsigned char des3_iv[8],
    196                                      unsigned char *buf, size_t buflen,
    197                                      const unsigned char *pwd, size_t pwdlen)
    198          {
    199              mbedtls_des3_context des3_ctx;
    200              unsigned char des3_key[24];
    201              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    202          
    203              mbedtls_des3_init(&des3_ctx);
    204          
    205              if ((ret = pem_pbkdf1(des3_key, 24, des3_iv, pwd, pwdlen)) != 0) {
    206                  goto exit;
    207              }
    208          
    209              if ((ret = mbedtls_des3_set3key_dec(&des3_ctx, des3_key)) != 0) {
    210                  goto exit;
    211              }
    212              ret = mbedtls_des3_crypt_cbc(&des3_ctx, MBEDTLS_DES_DECRYPT, buflen,
    213                                           des3_iv, buf, buf);
    214          
    215          exit:
    216              mbedtls_des3_free(&des3_ctx);
    217              mbedtls_platform_zeroize(des3_key, 24);
    218          
    219              return ret;
    220          }
    221          #endif /* MBEDTLS_DES_C */
    222          
    223          #if defined(MBEDTLS_AES_C)
    224          /*
    225           * Decrypt with AES-XXX-CBC, using PBKDF1 for key derivation
    226           */
    227          static int pem_aes_decrypt(unsigned char aes_iv[16], unsigned int keylen,
    228                                     unsigned char *buf, size_t buflen,
    229                                     const unsigned char *pwd, size_t pwdlen)
    230          {
    231              mbedtls_aes_context aes_ctx;
    232              unsigned char aes_key[32];
    233              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    234          
    235              mbedtls_aes_init(&aes_ctx);
    236          
    237              if ((ret = pem_pbkdf1(aes_key, keylen, aes_iv, pwd, pwdlen)) != 0) {
    238                  goto exit;
    239              }
    240          
    241              if ((ret = mbedtls_aes_setkey_dec(&aes_ctx, aes_key, keylen * 8)) != 0) {
    242                  goto exit;
    243              }
    244              ret = mbedtls_aes_crypt_cbc(&aes_ctx, MBEDTLS_AES_DECRYPT, buflen,
    245                                          aes_iv, buf, buf);
    246          
    247          exit:
    248              mbedtls_aes_free(&aes_ctx);
    249              mbedtls_platform_zeroize(aes_key, keylen);
    250          
    251              return ret;
    252          }
    253          #endif /* MBEDTLS_AES_C */
    254          
    255          #endif /* PEM_RFC1421 */
    256          

   \                                 In section .text, align 2, keep-with-next
    257          int mbedtls_pem_read_buffer(mbedtls_pem_context *ctx, const char *header, const char *footer,
    258                                      const unsigned char *data, const unsigned char *pwd,
    259                                      size_t pwdlen, size_t *use_len)
    260          {
   \                     mbedtls_pem_read_buffer: (+1)
   \        0x0   0xE92D 0x4FF3      PUSH     {R0,R1,R4-R11,LR}
   \        0x4   0xB083             SUB      SP,SP,#+12
   \        0x6   0x0004             MOVS     R4,R0
   \        0x8   0x4693             MOV      R11,R2
   \        0xA   0x001F             MOVS     R7,R3
    261              int ret, enc;
    262              size_t len;
    263              unsigned char *buf;
    264              const unsigned char *s1, *s2, *end;
    265          #if defined(PEM_RFC1421)
    266              unsigned char pem_iv[16];
    267              mbedtls_cipher_type_t enc_alg = MBEDTLS_CIPHER_NONE;
    268          #else
    269              ((void) pwd);
    270              ((void) pwdlen);
    271          #endif /* PEM_RFC1421 */
    272          
    273              if (ctx == NULL) {
   \        0xC   0x2C00             CMP      R4,#+0
   \        0xE   0xD101             BNE.N    ??mbedtls_pem_read_buffer_0
    274                  return MBEDTLS_ERR_PEM_BAD_INPUT_DATA;
   \       0x10   0x....             LDR.N    R0,??DataTable2
   \       0x12   0xE09A             B.N      ??mbedtls_pem_read_buffer_1
    275              }
    276          
    277              s1 = (unsigned char *) strstr((const char *) data, header);
   \                     ??mbedtls_pem_read_buffer_0: (+1)
   \       0x14   0x9904             LDR      R1,[SP, #+16]
   \       0x16   0x0038             MOVS     R0,R7
   \       0x18   0x.... 0x....      BL       strstr
   \       0x1C   0x0006             MOVS     R6,R0
    278          
    279              if (s1 == NULL) {
   \       0x1E   0x2E00             CMP      R6,#+0
   \       0x20   0xD101             BNE.N    ??mbedtls_pem_read_buffer_2
    280                  return MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
   \       0x22   0x....             LDR.N    R0,??DataTable2_1
   \       0x24   0xE091             B.N      ??mbedtls_pem_read_buffer_1
    281              }
    282          
    283              s2 = (unsigned char *) strstr((const char *) data, footer);
   \                     ??mbedtls_pem_read_buffer_2: (+1)
   \       0x26   0x4659             MOV      R1,R11
   \       0x28   0x0038             MOVS     R0,R7
   \       0x2A   0x.... 0x....      BL       strstr
   \       0x2E   0x0005             MOVS     R5,R0
    284          
    285              if (s2 == NULL || s2 <= s1) {
   \       0x30   0x2D00             CMP      R5,#+0
   \       0x32   0xD001             BEQ.N    ??mbedtls_pem_read_buffer_3
   \       0x34   0x42AE             CMP      R6,R5
   \       0x36   0xD301             BCC.N    ??mbedtls_pem_read_buffer_4
    286                  return MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
   \                     ??mbedtls_pem_read_buffer_3: (+1)
   \       0x38   0x....             LDR.N    R0,??DataTable2_1
   \       0x3A   0xE086             B.N      ??mbedtls_pem_read_buffer_1
    287              }
    288          
    289              s1 += strlen(header);
   \                     ??mbedtls_pem_read_buffer_4: (+1)
   \       0x3C   0x9804             LDR      R0,[SP, #+16]
   \       0x3E   0x.... 0x....      BL       strlen
   \       0x42   0xEB06 0x0100      ADD      R1,R6,R0
    290              if (*s1 == ' ') {
   \       0x46   0x7808             LDRB     R0,[R1, #+0]
   \       0x48   0x2820             CMP      R0,#+32
   \       0x4A   0xD100             BNE.N    ??mbedtls_pem_read_buffer_5
    291                  s1++;
   \       0x4C   0x1C49             ADDS     R1,R1,#+1
    292              }
    293              if (*s1 == '\r') {
   \                     ??mbedtls_pem_read_buffer_5: (+1)
   \       0x4E   0x7808             LDRB     R0,[R1, #+0]
   \       0x50   0x280D             CMP      R0,#+13
   \       0x52   0xD100             BNE.N    ??mbedtls_pem_read_buffer_6
    294                  s1++;
   \       0x54   0x1C49             ADDS     R1,R1,#+1
    295              }
    296              if (*s1 == '\n') {
   \                     ??mbedtls_pem_read_buffer_6: (+1)
   \       0x56   0x7808             LDRB     R0,[R1, #+0]
   \       0x58   0x280A             CMP      R0,#+10
   \       0x5A   0xD10C             BNE.N    ??mbedtls_pem_read_buffer_7
    297                  s1++;
   \       0x5C   0xF111 0x0801      ADDS     R8,R1,#+1
    298              } else {
    299                  return MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    300              }
    301          
    302              end = s2;
   \       0x60   0x002E             MOVS     R6,R5
    303              end += strlen(footer);
   \       0x62   0x4658             MOV      R0,R11
   \       0x64   0x.... 0x....      BL       strlen
   \       0x68   0xEB06 0x0900      ADD      R9,R6,R0
    304              if (*end == ' ') {
   \       0x6C   0xF899 0x0000      LDRB     R0,[R9, #+0]
   \       0x70   0x2820             CMP      R0,#+32
   \       0x72   0xD104             BNE.N    ??mbedtls_pem_read_buffer_8
   \       0x74   0xE001             B.N      ??mbedtls_pem_read_buffer_9
   \                     ??mbedtls_pem_read_buffer_7: (+1)
   \       0x76   0x....             LDR.N    R0,??DataTable2_1
   \       0x78   0xE067             B.N      ??mbedtls_pem_read_buffer_1
    305                  end++;
   \                     ??mbedtls_pem_read_buffer_9: (+1)
   \       0x7A   0xF119 0x0901      ADDS     R9,R9,#+1
    306              }
    307              if (*end == '\r') {
   \                     ??mbedtls_pem_read_buffer_8: (+1)
   \       0x7E   0xF899 0x0000      LDRB     R0,[R9, #+0]
   \       0x82   0x280D             CMP      R0,#+13
   \       0x84   0xD101             BNE.N    ??mbedtls_pem_read_buffer_10
    308                  end++;
   \       0x86   0xF119 0x0901      ADDS     R9,R9,#+1
    309              }
    310              if (*end == '\n') {
   \                     ??mbedtls_pem_read_buffer_10: (+1)
   \       0x8A   0xF899 0x0000      LDRB     R0,[R9, #+0]
   \       0x8E   0x280A             CMP      R0,#+10
   \       0x90   0xD101             BNE.N    ??mbedtls_pem_read_buffer_11
    311                  end++;
   \       0x92   0xF119 0x0901      ADDS     R9,R9,#+1
    312              }
    313              *use_len = end - data;
   \                     ??mbedtls_pem_read_buffer_11: (+1)
   \       0x96   0xEBB9 0x0107      SUBS     R1,R9,R7
   \       0x9A   0x9810             LDR      R0,[SP, #+64]
   \       0x9C   0x6001             STR      R1,[R0, #+0]
    314          
    315              enc = 0;
   \       0x9E   0x2000             MOVS     R0,#+0
   \       0xA0   0x9002             STR      R0,[SP, #+8]
    316          
    317              if (s2 - s1 >= 22 && memcmp(s1, "Proc-Type: 4,ENCRYPTED", 22) == 0) {
   \       0xA2   0xEBB5 0x0008      SUBS     R0,R5,R8
   \       0xA6   0x2816             CMP      R0,#+22
   \       0xA8   0xDB08             BLT.N    ??mbedtls_pem_read_buffer_12
   \       0xAA   0x2216             MOVS     R2,#+22
   \       0xAC   0x....             LDR.N    R1,??DataTable2_2
   \       0xAE   0x4640             MOV      R0,R8
   \       0xB0   0x.... 0x....      BL       memcmp
   \       0xB4   0x2800             CMP      R0,#+0
   \       0xB6   0xD101             BNE.N    ??mbedtls_pem_read_buffer_12
    318          #if defined(PEM_RFC1421)
    319                  enc++;
    320          
    321                  s1 += 22;
    322                  if (*s1 == '\r') {
    323                      s1++;
    324                  }
    325                  if (*s1 == '\n') {
    326                      s1++;
    327                  } else {
    328                      return MBEDTLS_ERR_PEM_INVALID_DATA;
    329                  }
    330          
    331          
    332          #if defined(MBEDTLS_DES_C)
    333                  if (s2 - s1 >= 23 && memcmp(s1, "DEK-Info: DES-EDE3-CBC,", 23) == 0) {
    334                      enc_alg = MBEDTLS_CIPHER_DES_EDE3_CBC;
    335          
    336                      s1 += 23;
    337                      if (s2 - s1 < 16 || pem_get_iv(s1, pem_iv, 8) != 0) {
    338                          return MBEDTLS_ERR_PEM_INVALID_ENC_IV;
    339                      }
    340          
    341                      s1 += 16;
    342                  } else if (s2 - s1 >= 18 && memcmp(s1, "DEK-Info: DES-CBC,", 18) == 0) {
    343                      enc_alg = MBEDTLS_CIPHER_DES_CBC;
    344          
    345                      s1 += 18;
    346                      if (s2 - s1 < 16 || pem_get_iv(s1, pem_iv, 8) != 0) {
    347                          return MBEDTLS_ERR_PEM_INVALID_ENC_IV;
    348                      }
    349          
    350                      s1 += 16;
    351                  }
    352          #endif /* MBEDTLS_DES_C */
    353          
    354          #if defined(MBEDTLS_AES_C)
    355                  if (s2 - s1 >= 14 && memcmp(s1, "DEK-Info: AES-", 14) == 0) {
    356                      if (s2 - s1 < 22) {
    357                          return MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG;
    358                      } else if (memcmp(s1, "DEK-Info: AES-128-CBC,", 22) == 0) {
    359                          enc_alg = MBEDTLS_CIPHER_AES_128_CBC;
    360                      } else if (memcmp(s1, "DEK-Info: AES-192-CBC,", 22) == 0) {
    361                          enc_alg = MBEDTLS_CIPHER_AES_192_CBC;
    362                      } else if (memcmp(s1, "DEK-Info: AES-256-CBC,", 22) == 0) {
    363                          enc_alg = MBEDTLS_CIPHER_AES_256_CBC;
    364                      } else {
    365                          return MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG;
    366                      }
    367          
    368                      s1 += 22;
    369                      if (s2 - s1 < 32 || pem_get_iv(s1, pem_iv, 16) != 0) {
    370                          return MBEDTLS_ERR_PEM_INVALID_ENC_IV;
    371                      }
    372          
    373                      s1 += 32;
    374                  }
    375          #endif /* MBEDTLS_AES_C */
    376          
    377                  if (enc_alg == MBEDTLS_CIPHER_NONE) {
    378                      return MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG;
    379                  }
    380          
    381                  if (*s1 == '\r') {
    382                      s1++;
    383                  }
    384                  if (*s1 == '\n') {
    385                      s1++;
    386                  } else {
    387                      return MBEDTLS_ERR_PEM_INVALID_DATA;
    388                  }
    389          #else
    390                  return MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE;
   \       0xB8   0x....             LDR.N    R0,??DataTable2_3
   \       0xBA   0xE046             B.N      ??mbedtls_pem_read_buffer_1
    391          #endif /* PEM_RFC1421 */
    392              }
    393          
    394              if (s1 >= s2) {
   \                     ??mbedtls_pem_read_buffer_12: (+1)
   \       0xBC   0x45A8             CMP      R8,R5
   \       0xBE   0xD301             BCC.N    ??mbedtls_pem_read_buffer_13
    395                  return MBEDTLS_ERR_PEM_INVALID_DATA;
   \       0xC0   0x....             LDR.N    R0,??DataTable2_4
   \       0xC2   0xE042             B.N      ??mbedtls_pem_read_buffer_1
    396              }
    397          
    398              ret = mbedtls_base64_decode(NULL, 0, &len, s1, s2 - s1);
   \                     ??mbedtls_pem_read_buffer_13: (+1)
   \       0xC4   0xEBB5 0x0008      SUBS     R0,R5,R8
   \       0xC8   0x9000             STR      R0,[SP, #+0]
   \       0xCA   0x4643             MOV      R3,R8
   \       0xCC   0xAA01             ADD      R2,SP,#+4
   \       0xCE   0x2100             MOVS     R1,#+0
   \       0xD0   0x2000             MOVS     R0,#+0
   \       0xD2   0x.... 0x....      BL       mbedtls_base64_decode
   \       0xD6   0x4682             MOV      R10,R0
    399          
    400              if (ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER) {
   \       0xD8   0xF11A 0x0F2C      CMN      R10,#+44
   \       0xDC   0xD107             BNE.N    ??mbedtls_pem_read_buffer_14
    401                  return MBEDTLS_ERROR_ADD(MBEDTLS_ERR_PEM_INVALID_DATA, ret);
   \       0xDE   0xF240 0x1391      MOVW     R3,#+401
   \       0xE2   0x....             LDR.N    R2,??DataTable2_5
   \       0xE4   0x4651             MOV      R1,R10
   \       0xE6   0x....             LDR.N    R0,??DataTable2_4
   \       0xE8   0x.... 0x....      BL       mbedtls_error_add
   \       0xEC   0xE02D             B.N      ??mbedtls_pem_read_buffer_1
    402              }
    403          
    404              if ((buf = mbedtls_calloc(1, len)) == NULL) {
   \                     ??mbedtls_pem_read_buffer_14: (+1)
   \       0xEE   0x9901             LDR      R1,[SP, #+4]
   \       0xF0   0x2001             MOVS     R0,#+1
   \       0xF2   0x.... 0x....      BL       sl_calloc
   \       0xF6   0x0006             MOVS     R6,R0
   \       0xF8   0x2E00             CMP      R6,#+0
   \       0xFA   0xD101             BNE.N    ??mbedtls_pem_read_buffer_15
    405                  return MBEDTLS_ERR_PEM_ALLOC_FAILED;
   \       0xFC   0x....             LDR.N    R0,??DataTable2_6
   \       0xFE   0xE024             B.N      ??mbedtls_pem_read_buffer_1
    406              }
    407          
    408              if ((ret = mbedtls_base64_decode(buf, len, &len, s1, s2 - s1)) != 0) {
   \                     ??mbedtls_pem_read_buffer_15: (+1)
   \      0x100   0xEBB5 0x0008      SUBS     R0,R5,R8
   \      0x104   0x9000             STR      R0,[SP, #+0]
   \      0x106   0x4643             MOV      R3,R8
   \      0x108   0xAA01             ADD      R2,SP,#+4
   \      0x10A   0x9901             LDR      R1,[SP, #+4]
   \      0x10C   0x0030             MOVS     R0,R6
   \      0x10E   0x.... 0x....      BL       mbedtls_base64_decode
   \      0x112   0x9000             STR      R0,[SP, #+0]
   \      0x114   0x2800             CMP      R0,#+0
   \      0x116   0xD00B             BEQ.N    ??mbedtls_pem_read_buffer_16
    409                  mbedtls_zeroize_and_free(buf, len);
   \      0x118   0x9901             LDR      R1,[SP, #+4]
   \      0x11A   0x0030             MOVS     R0,R6
   \      0x11C   0x.... 0x....      BL       mbedtls_zeroize_and_free
    410                  return MBEDTLS_ERROR_ADD(MBEDTLS_ERR_PEM_INVALID_DATA, ret);
   \      0x120   0xF44F 0x73CD      MOV      R3,#+410
   \      0x124   0x....             LDR.N    R2,??DataTable2_5
   \      0x126   0x9900             LDR      R1,[SP, #+0]
   \      0x128   0x....             LDR.N    R0,??DataTable2_4
   \      0x12A   0x.... 0x....      BL       mbedtls_error_add
   \      0x12E   0xE00C             B.N      ??mbedtls_pem_read_buffer_1
    411              }
    412          
    413              if (enc != 0) {
   \                     ??mbedtls_pem_read_buffer_16: (+1)
   \      0x130   0x9802             LDR      R0,[SP, #+8]
   \      0x132   0x2800             CMP      R0,#+0
   \      0x134   0xD005             BEQ.N    ??mbedtls_pem_read_buffer_17
    414          #if defined(PEM_RFC1421)
    415                  if (pwd == NULL) {
    416                      mbedtls_zeroize_and_free(buf, len);
    417                      return MBEDTLS_ERR_PEM_PASSWORD_REQUIRED;
    418                  }
    419          
    420                  ret = 0;
    421          
    422          #if defined(MBEDTLS_DES_C)
    423                  if (enc_alg == MBEDTLS_CIPHER_DES_EDE3_CBC) {
    424                      ret = pem_des3_decrypt(pem_iv, buf, len, pwd, pwdlen);
    425                  } else if (enc_alg == MBEDTLS_CIPHER_DES_CBC) {
    426                      ret = pem_des_decrypt(pem_iv, buf, len, pwd, pwdlen);
    427                  }
    428          #endif /* MBEDTLS_DES_C */
    429          
    430          #if defined(MBEDTLS_AES_C)
    431                  if (enc_alg == MBEDTLS_CIPHER_AES_128_CBC) {
    432                      ret = pem_aes_decrypt(pem_iv, 16, buf, len, pwd, pwdlen);
    433                  } else if (enc_alg == MBEDTLS_CIPHER_AES_192_CBC) {
    434                      ret = pem_aes_decrypt(pem_iv, 24, buf, len, pwd, pwdlen);
    435                  } else if (enc_alg == MBEDTLS_CIPHER_AES_256_CBC) {
    436                      ret = pem_aes_decrypt(pem_iv, 32, buf, len, pwd, pwdlen);
    437                  }
    438          #endif /* MBEDTLS_AES_C */
    439          
    440                  if (ret != 0) {
    441                      mbedtls_free(buf);
    442                      return ret;
    443                  }
    444          
    445                  /*
    446                   * The result will be ASN.1 starting with a SEQUENCE tag, with 1 to 3
    447                   * length bytes (allow 4 to be sure) in all known use cases.
    448                   *
    449                   * Use that as a heuristic to try to detect password mismatches.
    450                   */
    451                  if (len <= 2 || buf[0] != 0x30 || buf[1] > 0x83) {
    452                      mbedtls_zeroize_and_free(buf, len);
    453                      return MBEDTLS_ERR_PEM_PASSWORD_MISMATCH;
    454                  }
    455          #else
    456                  mbedtls_zeroize_and_free(buf, len);
   \      0x136   0x9901             LDR      R1,[SP, #+4]
   \      0x138   0x0030             MOVS     R0,R6
   \      0x13A   0x.... 0x....      BL       mbedtls_zeroize_and_free
    457                  return MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE;
   \      0x13E   0x....             LDR.N    R0,??DataTable2_3
   \      0x140   0xE003             B.N      ??mbedtls_pem_read_buffer_1
    458          #endif /* PEM_RFC1421 */
    459              }
    460          
    461              ctx->buf = buf;
   \                     ??mbedtls_pem_read_buffer_17: (+1)
   \      0x142   0x6026             STR      R6,[R4, #+0]
    462              ctx->buflen = len;
   \      0x144   0x9801             LDR      R0,[SP, #+4]
   \      0x146   0x6060             STR      R0,[R4, #+4]
    463          
    464              return 0;
   \      0x148   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_pem_read_buffer_1: (+1)
   \      0x14A   0xB005             ADD      SP,SP,#+20
   \      0x14C   0xE8BD 0x8FF0      POP      {R4-R11,PC}
    465          }
    466          

   \                                 In section .text, align 2, keep-with-next
    467          void mbedtls_pem_free(mbedtls_pem_context *ctx)
    468          {
   \                     mbedtls_pem_free: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    469              if (ctx->buf != NULL) {
   \        0x4   0x6820             LDR      R0,[R4, #+0]
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD003             BEQ.N    ??mbedtls_pem_free_0
    470                  mbedtls_zeroize_and_free(ctx->buf, ctx->buflen);
   \        0xA   0x6861             LDR      R1,[R4, #+4]
   \        0xC   0x6820             LDR      R0,[R4, #+0]
   \        0xE   0x.... 0x....      BL       mbedtls_zeroize_and_free
    471              }
    472              mbedtls_free(ctx->info);
   \                     ??mbedtls_pem_free_0: (+1)
   \       0x12   0x68A0             LDR      R0,[R4, #+8]
   \       0x14   0x.... 0x....      BL       sl_free
    473          
    474              mbedtls_platform_zeroize(ctx, sizeof(mbedtls_pem_context));
   \       0x18   0x210C             MOVS     R1,#+12
   \       0x1A   0x0020             MOVS     R0,R4
   \       0x1C   0x.... 0x....      BL       mbedtls_platform_zeroize
    475          }
   \       0x20   0xBD10             POP      {R4,PC}
    476          #endif /* MBEDTLS_PEM_PARSE_C */
    477          
    478          #if defined(MBEDTLS_PEM_WRITE_C)

   \                                 In section .text, align 2, keep-with-next
    479          int mbedtls_pem_write_buffer(const char *header, const char *footer,
    480                                       const unsigned char *der_data, size_t der_len,
    481                                       unsigned char *buf, size_t buf_len, size_t *olen)
    482          {
   \                     mbedtls_pem_write_buffer: (+1)
   \        0x0   0xE92D 0x4FFD      PUSH     {R0,R2-R11,LR}
   \        0x4   0xB086             SUB      SP,SP,#+24
   \        0x6   0x4688             MOV      R8,R1
   \        0x8   0x9E14             LDR      R6,[SP, #+80]
    483              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
   \        0xA   0xF07F 0x096D      MVNS     R9,#+109
    484              unsigned char *encode_buf = NULL, *c, *p = buf;
   \        0xE   0x2400             MOVS     R4,#+0
   \       0x10   0x9812             LDR      R0,[SP, #+72]
   \       0x12   0x9002             STR      R0,[SP, #+8]
    485              size_t len = 0, use_len, add_len = 0;
   \       0x14   0x2700             MOVS     R7,#+0
   \       0x16   0x2500             MOVS     R5,#+0
    486          
    487              mbedtls_base64_encode(NULL, 0, &use_len, der_data, der_len);
   \       0x18   0x9808             LDR      R0,[SP, #+32]
   \       0x1A   0x9000             STR      R0,[SP, #+0]
   \       0x1C   0x9B07             LDR      R3,[SP, #+28]
   \       0x1E   0xAA01             ADD      R2,SP,#+4
   \       0x20   0x2100             MOVS     R1,#+0
   \       0x22   0x2000             MOVS     R0,#+0
   \       0x24   0x.... 0x....      BL       mbedtls_base64_encode
    488              add_len = strlen(header) + strlen(footer) + (((use_len > 2) ? (use_len - 2) : 0) / 64) + 1;
   \       0x28   0x9806             LDR      R0,[SP, #+24]
   \       0x2A   0x.... 0x....      BL       strlen
   \       0x2E   0x4682             MOV      R10,R0
   \       0x30   0x4640             MOV      R0,R8
   \       0x32   0x.... 0x....      BL       strlen
   \       0x36   0x9901             LDR      R1,[SP, #+4]
   \       0x38   0x2903             CMP      R1,#+3
   \       0x3A   0xD302             BCC.N    ??mbedtls_pem_write_buffer_0
   \       0x3C   0x9901             LDR      R1,[SP, #+4]
   \       0x3E   0x1E89             SUBS     R1,R1,#+2
   \       0x40   0xE000             B.N      ??mbedtls_pem_write_buffer_1
   \                     ??mbedtls_pem_write_buffer_0: (+1)
   \       0x42   0x2100             MOVS     R1,#+0
   \                     ??mbedtls_pem_write_buffer_1: (+1)
   \       0x44   0x0005             MOVS     R5,R0
   \       0x46   0xEB15 0x050A      ADDS     R5,R5,R10
   \       0x4A   0xEB15 0x1591      ADDS     R5,R5,R1, LSR #+6
   \       0x4E   0x1C6D             ADDS     R5,R5,#+1
    489          
    490              if (use_len + add_len > buf_len) {
   \       0x50   0x9913             LDR      R1,[SP, #+76]
   \       0x52   0x9801             LDR      R0,[SP, #+4]
   \       0x54   0x1828             ADDS     R0,R5,R0
   \       0x56   0x4281             CMP      R1,R0
   \       0x58   0xD205             BCS.N    ??mbedtls_pem_write_buffer_2
    491                  *olen = use_len + add_len;
   \       0x5A   0x9801             LDR      R0,[SP, #+4]
   \       0x5C   0x1828             ADDS     R0,R5,R0
   \       0x5E   0x6030             STR      R0,[R6, #+0]
    492                  return MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL;
   \       0x60   0xF07F 0x0029      MVNS     R0,#+41
   \       0x64   0xE078             B.N      ??mbedtls_pem_write_buffer_3
    493              }
    494          
    495              if (use_len != 0 &&
    496                  ((encode_buf = mbedtls_calloc(1, use_len)) == NULL)) {
   \                     ??mbedtls_pem_write_buffer_2: (+1)
   \       0x66   0x9801             LDR      R0,[SP, #+4]
   \       0x68   0x2800             CMP      R0,#+0
   \       0x6A   0xD008             BEQ.N    ??mbedtls_pem_write_buffer_4
   \       0x6C   0x9901             LDR      R1,[SP, #+4]
   \       0x6E   0x2001             MOVS     R0,#+1
   \       0x70   0x.... 0x....      BL       sl_calloc
   \       0x74   0x0004             MOVS     R4,R0
   \       0x76   0x2C00             CMP      R4,#+0
   \       0x78   0xD101             BNE.N    ??mbedtls_pem_write_buffer_4
    497                  return MBEDTLS_ERR_PEM_ALLOC_FAILED;
   \       0x7A   0x....             LDR.N    R0,??DataTable2_6
   \       0x7C   0xE06C             B.N      ??mbedtls_pem_write_buffer_3
    498              }
    499          
    500              if ((ret = mbedtls_base64_encode(encode_buf, use_len, &use_len, der_data,
    501                                               der_len)) != 0) {
   \                     ??mbedtls_pem_write_buffer_4: (+1)
   \       0x7E   0x9808             LDR      R0,[SP, #+32]
   \       0x80   0x9000             STR      R0,[SP, #+0]
   \       0x82   0x9B07             LDR      R3,[SP, #+28]
   \       0x84   0xAA01             ADD      R2,SP,#+4
   \       0x86   0x9901             LDR      R1,[SP, #+4]
   \       0x88   0x0020             MOVS     R0,R4
   \       0x8A   0x.... 0x....      BL       mbedtls_base64_encode
   \       0x8E   0x9005             STR      R0,[SP, #+20]
   \       0x90   0x2800             CMP      R0,#+0
   \       0x92   0xD004             BEQ.N    ??mbedtls_pem_write_buffer_5
    502                  mbedtls_free(encode_buf);
   \       0x94   0x0020             MOVS     R0,R4
   \       0x96   0x.... 0x....      BL       sl_free
    503                  return ret;
   \       0x9A   0x9805             LDR      R0,[SP, #+20]
   \       0x9C   0xE05C             B.N      ??mbedtls_pem_write_buffer_3
    504              }
    505          
    506              memcpy(p, header, strlen(header));
   \                     ??mbedtls_pem_write_buffer_5: (+1)
   \       0x9E   0x9806             LDR      R0,[SP, #+24]
   \       0xA0   0x.... 0x....      BL       strlen
   \       0xA4   0x4683             MOV      R11,R0
   \       0xA6   0x9806             LDR      R0,[SP, #+24]
   \       0xA8   0x9000             STR      R0,[SP, #+0]
   \       0xAA   0xF8DD 0x9008      LDR      R9,[SP, #+8]
   \       0xAE   0x465A             MOV      R2,R11
   \       0xB0   0x9900             LDR      R1,[SP, #+0]
   \       0xB2   0x4648             MOV      R0,R9
   \       0xB4   0x.... 0x....      BL       __aeabi_memcpy
    507              p += strlen(header);
   \       0xB8   0x9806             LDR      R0,[SP, #+24]
   \       0xBA   0x.... 0x....      BL       strlen
   \       0xBE   0x9902             LDR      R1,[SP, #+8]
   \       0xC0   0xEB01 0x0A00      ADD      R10,R1,R0
    508              c = encode_buf;
   \       0xC4   0x46A1             MOV      R9,R4
    509          
    510              while (use_len) {
   \                     ??mbedtls_pem_write_buffer_6: (+1)
   \       0xC6   0x9801             LDR      R0,[SP, #+4]
   \       0xC8   0x2800             CMP      R0,#+0
   \       0xCA   0xD019             BEQ.N    ??mbedtls_pem_write_buffer_7
    511                  len = (use_len > 64) ? 64 : use_len;
   \       0xCC   0x9801             LDR      R0,[SP, #+4]
   \       0xCE   0x2841             CMP      R0,#+65
   \       0xD0   0xD301             BCC.N    ??mbedtls_pem_write_buffer_8
   \       0xD2   0x2740             MOVS     R7,#+64
   \       0xD4   0xE000             B.N      ??mbedtls_pem_write_buffer_9
   \                     ??mbedtls_pem_write_buffer_8: (+1)
   \       0xD6   0x9F01             LDR      R7,[SP, #+4]
    512                  memcpy(p, c, len);
   \                     ??mbedtls_pem_write_buffer_9: (+1)
   \       0xD8   0x9702             STR      R7,[SP, #+8]
   \       0xDA   0xF8CD 0x9000      STR      R9,[SP, #+0]
   \       0xDE   0x46D3             MOV      R11,R10
   \       0xE0   0x9A02             LDR      R2,[SP, #+8]
   \       0xE2   0x9900             LDR      R1,[SP, #+0]
   \       0xE4   0x4658             MOV      R0,R11
   \       0xE6   0x.... 0x....      BL       __aeabi_memcpy
    513                  use_len -= len;
   \       0xEA   0x9801             LDR      R0,[SP, #+4]
   \       0xEC   0x1BC0             SUBS     R0,R0,R7
   \       0xEE   0x9001             STR      R0,[SP, #+4]
    514                  p += len;
   \       0xF0   0xEB0A 0x0107      ADD      R1,R10,R7
    515                  c += len;
   \       0xF4   0x44B9             ADD      R9,R9,R7
    516                  *p++ = '\n';
   \       0xF6   0x200A             MOVS     R0,#+10
   \       0xF8   0x7008             STRB     R0,[R1, #+0]
   \       0xFA   0xF111 0x0A01      ADDS     R10,R1,#+1
   \       0xFE   0xE7E2             B.N      ??mbedtls_pem_write_buffer_6
    517              }
    518          
    519              memcpy(p, footer, strlen(footer));
   \                     ??mbedtls_pem_write_buffer_7: (+1)
   \      0x100   0x4640             MOV      R0,R8
   \      0x102   0x.... 0x....      BL       strlen
   \      0x106   0x9004             STR      R0,[SP, #+16]
   \      0x108   0xF8CD 0x800C      STR      R8,[SP, #+12]
   \      0x10C   0x46D3             MOV      R11,R10
   \      0x10E   0x9A04             LDR      R2,[SP, #+16]
   \      0x110   0x9903             LDR      R1,[SP, #+12]
   \      0x112   0x4658             MOV      R0,R11
   \      0x114   0x.... 0x....      BL       __aeabi_memcpy
    520              p += strlen(footer);
   \      0x118   0x4640             MOV      R0,R8
   \      0x11A   0x.... 0x....      BL       strlen
   \      0x11E   0xEB0A 0x0100      ADD      R1,R10,R0
    521          
    522              *p++ = '\0';
   \      0x122   0x2000             MOVS     R0,#+0
   \      0x124   0x7008             STRB     R0,[R1, #+0]
   \      0x126   0x1C48             ADDS     R0,R1,#+1
   \      0x128   0x9002             STR      R0,[SP, #+8]
    523              *olen = p - buf;
   \      0x12A   0x9902             LDR      R1,[SP, #+8]
   \      0x12C   0x9812             LDR      R0,[SP, #+72]
   \      0x12E   0x1A09             SUBS     R1,R1,R0
   \      0x130   0x6031             STR      R1,[R6, #+0]
    524          
    525              /* Clean any remaining data previously written to the buffer */
    526              memset(buf + *olen, 0, buf_len - *olen);
   \      0x132   0x9913             LDR      R1,[SP, #+76]
   \      0x134   0x6830             LDR      R0,[R6, #+0]
   \      0x136   0x1A09             SUBS     R1,R1,R0
   \      0x138   0x9100             STR      R1,[SP, #+0]
   \      0x13A   0xF05F 0x0B00      MOVS     R11,#+0
   \      0x13E   0x9912             LDR      R1,[SP, #+72]
   \      0x140   0x6830             LDR      R0,[R6, #+0]
   \      0x142   0xEB01 0x0A00      ADD      R10,R1,R0
   \      0x146   0x465A             MOV      R2,R11
   \      0x148   0x9900             LDR      R1,[SP, #+0]
   \      0x14A   0x4650             MOV      R0,R10
   \      0x14C   0x.... 0x....      BL       __aeabi_memset
    527          
    528              mbedtls_free(encode_buf);
   \      0x150   0x0020             MOVS     R0,R4
   \      0x152   0x.... 0x....      BL       sl_free
    529              return 0;
   \      0x156   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_pem_write_buffer_3: (+1)
   \      0x158   0xB009             ADD      SP,SP,#+36
   \      0x15A   0xE8BD 0x8FF0      POP      {R4-R11,PC}
    530          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \        0x0   0xFFFF'EB80        DC32     0xffffeb80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \        0x0   0xFFFF'EF80        DC32     0xffffef80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \        0x0   0xFFFF'EC00        DC32     0xffffec00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \        0x0   0xFFFF'EF00        DC32     0xffffef00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \        0x0   0xFFFF'EE80        DC32     0xffffee80

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x50 0x72          DC8 "Proc-Type: 4,ENCRYPTED"
   \              0x6F 0x63    
   \              0x2D 0x54    
   \              0x79 0x70    
   \              0x65 0x3A    
   \              0x20 0x34    
   \              0x2C 0x45    
   \              0x4E 0x43    
   \              0x52 0x59    
   \              0x50 0x54    
   \              0x45 0x44    
   \              0x00
   \       0x17                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x44 0x3A          DC8 0x44, 0x3A, 0x5C, 0x49, 0x6E, 0x65, 0x73, 0x68
   \              0x5C 0x49    
   \              0x6E 0x65    
   \              0x73 0x68
   \        0x8   0x5F 0x77          DC8 0x5F, 0x77, 0x69, 0x73, 0x75, 0x6E, 0x5C, 0x57
   \              0x69 0x73    
   \              0x75 0x6E    
   \              0x5C 0x57
   \       0x10   0x69 0x73          DC8 0x69, 0x73, 0x75, 0x6E, 0x5F, 0x4E, 0x6F, 0x64
   \              0x75 0x6E    
   \              0x5F 0x4E    
   \              0x6F 0x64
   \       0x18   0x65 0x5F          DC8 0x65, 0x5F, 0x41, 0x70, 0x70, 0x20, 0x31, 0x5C
   \              0x41 0x70    
   \              0x70 0x20    
   \              0x31 0x5C
   \       0x20   0x57 0x69          DC8 0x57, 0x69, 0x73, 0x75, 0x6E, 0x5F, 0x4E, 0x6F
   \              0x73 0x75    
   \              0x6E 0x5F    
   \              0x4E 0x6F
   \       0x28   0x64 0x65          DC8 0x64, 0x65, 0x5F, 0x41, 0x70, 0x70, 0x5C, 0x67
   \              0x5F 0x41    
   \              0x70 0x70    
   \              0x5C 0x67
   \       0x30   0x65 0x63          DC8 0x65, 0x63, 0x6B, 0x6F, 0x5F, 0x73, 0x64, 0x6B
   \              0x6B 0x6F    
   \              0x5F 0x73    
   \              0x64 0x6B
   \       0x38   0x5F 0x34          DC8 0x5F, 0x34, 0x2E, 0x34, 0x2E, 0x35, 0x5C, 0x75
   \              0x2E 0x34    
   \              0x2E 0x35    
   \              0x5C 0x75
   \       0x40   0x74 0x69          DC8 0x74, 0x69, 0x6C, 0x5C, 0x74, 0x68, 0x69, 0x72
   \              0x6C 0x5C    
   \              0x74 0x68    
   \              0x69 0x72
   \       0x48   0x64 0x5F          DC8 0x64, 0x5F, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5C
   \              0x70 0x61    
   \              0x72 0x74    
   \              0x79 0x5C
   \       0x50   0x6D 0x62          DC8 0x6D, 0x62, 0x65, 0x64, 0x74, 0x6C, 0x73, 0x5C
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5C
   \       0x58   0x6C 0x69          DC8 0x6C, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5C
   \              0x62 0x72    
   \              0x61 0x72    
   \              0x79 0x5C
   \       0x60   0x70 0x65          DC8 0x70, 0x65, 0x6D, 0x2E, 0x63, 0
   \              0x6D 0x2E    
   \              0x63 0x00
   \       0x66                      DS8 2
    531          #endif /* MBEDTLS_PEM_WRITE_C */
    532          #endif /* MBEDTLS_PEM_PARSE_C || MBEDTLS_PEM_WRITE_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   mbedtls_error_add
       8   mbedtls_pem_free
         8   -> mbedtls_platform_zeroize
         8   -> mbedtls_zeroize_and_free
         8   -> sl_free
      24   mbedtls_pem_init
        24   -> __aeabi_memset
      56   mbedtls_pem_read_buffer
        56   -> mbedtls_base64_decode
        56   -> mbedtls_error_add
        56   -> mbedtls_zeroize_and_free
        56   -> memcmp
        56   -> sl_calloc
        56   -> strlen
        56   -> strstr
      72   mbedtls_pem_write_buffer
        72   -> __aeabi_memcpy
        72   -> __aeabi_memset
        72   -> mbedtls_base64_encode
        72   -> sl_calloc
        72   -> sl_free
        72   -> strlen


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
      24  ?_0
     104  ?_1
       4  mbedtls_error_add
      34  mbedtls_pem_free
      22  mbedtls_pem_init
     336  mbedtls_pem_read_buffer
     350  mbedtls_pem_write_buffer

 
 128 bytes in section .rodata
 774 bytes in section .text
 
 774 bytes of CODE  memory
 128 bytes of CONST memory

Errors: none
Warnings: none
