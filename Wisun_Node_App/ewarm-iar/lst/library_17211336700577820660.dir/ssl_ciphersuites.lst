###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         29/Mar/2025  15:53:54
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\ssl_ciphersuites.c
#    Command line                 =
#        -f "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\library_17211336700577820660.dir\ssl_ciphersuites.o.rsp"
#        ("D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\ssl_ciphersuites.c"
#        -D DEBUG_EFM=1 -D EFR32FG28B322F1024IM48=1 -D
#        configNUM_SDK_THREAD_LOCAL_STORAGE_POINTERS=2 -D
#        SL_COMPONENT_CATALOG_PRESENT=1 -D
#        MBEDTLS_CONFIG_FILE=<sl_mbedtls_config.h> -D
#        MBEDTLS_PSA_CRYPTO_CONFIG_FILE=<psa_crypto_config.h> -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -D
#        RTT_USE_ASM=0 -lC "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\lst\library_17211336700577820660.dir"
#        --diag_suppress Pa050 -o "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\library_17211336700577820660.dir"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M33 --cmse --cmse -e --fpu=VFPv5_sp --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        9.2\arm\inc\c\DLib_Config_Normal.h" -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\rail\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\wisun\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\.\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\Device\SiliconLabs\EFR32FG28\Include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_project_info\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\common\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\src\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\CMSIS\Core\Include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\CMSIS\RTOS2\Include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\device_init\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emdrv\common\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emlib\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\iostream\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\config\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\config\preset\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\cpu\include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\ports\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emdrv\nvm3\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\peripheral\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\printf\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\printf\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_psa_driver\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\common\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\ble\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\ieee802154\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\wmbus\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\zwave\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\chip\efr32\efr32xg2x\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\sidewalk\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\pa-conversions\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\pa-conversions\efr32xg28\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\rail_util_pti\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\se_manager\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\se_manager\src\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\segger\systemview\SEGGER\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\silicon_labs\silabs_core\memory_manager\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\common\toolchain\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\system\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_core\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_setting\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\cli_util\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\event_manager\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\ns_list\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\ping\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\nanostack\nanostack-libservice\mbed-client-libservice\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\udp_client\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\sleeptimer\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\plugin\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\stack\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\stack\inc\socket\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\autogen\\" -On
#        --use_c++_inline) --dependencies=n "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\library_17211336700577820660.dir\ssl_ciphersuites.o.iar_deps"
#    Locale                       =  C
#    List file                    =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\lst\library_17211336700577820660.dir\ssl_ciphersuites.lst
#    Object file                  =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\library_17211336700577820660.dir\ssl_ciphersuites.o
#    Runtime model:                  
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_file_descriptor     =  0
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#
###############################################################################

D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\ssl_ciphersuites.c
      1          /**
      2           * \file ssl_ciphersuites.c
      3           *
      4           * \brief SSL ciphersuites for Mbed TLS
      5           *
      6           *  Copyright The Mbed TLS Contributors
      7           *  SPDX-License-Identifier: Apache-2.0
      8           *
      9           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
     10           *  not use this file except in compliance with the License.
     11           *  You may obtain a copy of the License at
     12           *
     13           *  http://www.apache.org/licenses/LICENSE-2.0
     14           *
     15           *  Unless required by applicable law or agreed to in writing, software
     16           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     17           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     18           *  See the License for the specific language governing permissions and
     19           *  limitations under the License.
     20           */
     21          
     22          #include "common.h"
     23          
     24          #if defined(MBEDTLS_SSL_TLS_C)
     25          
     26          #include "mbedtls/platform.h"
     27          
     28          #include "mbedtls/ssl_ciphersuites.h"
     29          #include "mbedtls/ssl.h"
     30          #include "ssl_misc.h"

      return 0;
      ^
"D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\ssl_misc.h",2433  Warning[Pe111]: 
          statement is unreachable
     31          #if defined(MBEDTLS_USE_PSA_CRYPTO)
     32          #include "md_psa.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __vfp uint32_t mbedtls_md_psa_alg_from_type(mbedtls_md_type_t)
   \                     mbedtls_md_psa_alg_from_type: (+1)
   \        0x0   0xB2C0             UXTB     R0,R0
   \        0x2   0xF050 0x7000      ORRS     R0,R0,#0x2000000
   \        0x6   0x4770             BX       LR
     33          #endif
     34          
     35          #include <string.h>
     36          
     37          /*
     38           * Ordered from most preferred to least preferred in terms of security.
     39           *
     40           * Current rule (except weak and null which come last):
     41           * 1. By key exchange:
     42           *    Forward-secure non-PSK > forward-secure PSK > ECJPAKE > other non-PSK > other PSK
     43           * 2. By key length and cipher:
     44           *    ChaCha > AES-256 > Camellia-256 > ARIA-256 > AES-128 > Camellia-128 > ARIA-128
     45           * 3. By cipher mode when relevant GCM > CCM > CBC > CCM_8
     46           * 4. By hash function used when relevant
     47           * 5. By key exchange/auth again: EC > non-EC
     48           */

   \                                 In section .rodata, align 4
     49          static const int ciphersuite_preference[] =
   \                     ciphersuite_preference:
   \        0x0   0x0000'C0FF        DC32 49'407, 0
   \              0x0000'0000
     50          {
     51          #if defined(MBEDTLS_SSL_CIPHERSUITES)
     52              MBEDTLS_SSL_CIPHERSUITES,
     53          #else
     54          #if defined(MBEDTLS_SSL_PROTO_TLS1_3)
     55              /* TLS 1.3 ciphersuites */
     56              MBEDTLS_TLS1_3_CHACHA20_POLY1305_SHA256,
     57              MBEDTLS_TLS1_3_AES_256_GCM_SHA384,
     58              MBEDTLS_TLS1_3_AES_128_GCM_SHA256,
     59              MBEDTLS_TLS1_3_AES_128_CCM_SHA256,
     60              MBEDTLS_TLS1_3_AES_128_CCM_8_SHA256,
     61          #endif /* MBEDTLS_SSL_PROTO_TLS1_3 */
     62          
     63              /* Chacha-Poly ephemeral suites */
     64              MBEDTLS_TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,
     65              MBEDTLS_TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,
     66              MBEDTLS_TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256,
     67          
     68              /* All AES-256 ephemeral suites */
     69              MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
     70              MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
     71              MBEDTLS_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384,
     72              MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CCM,
     73              MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CCM,
     74              MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,
     75              MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,
     76              MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,
     77              MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,
     78              MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,
     79              MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA,
     80              MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8,
     81              MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CCM_8,
     82          
     83              /* All CAMELLIA-256 ephemeral suites */
     84              MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384,
     85              MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384,
     86              MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384,
     87              MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384,
     88              MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384,
     89              MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256,
     90              MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA,
     91          
     92              /* All ARIA-256 ephemeral suites */
     93              MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384,
     94              MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384,
     95              MBEDTLS_TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384,
     96              MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384,
     97              MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384,
     98              MBEDTLS_TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384,
     99          
    100              /* All AES-128 ephemeral suites */
    101              MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
    102              MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
    103              MBEDTLS_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,
    104              MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CCM,
    105              MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CCM,
    106              MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,
    107              MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,
    108              MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,
    109              MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
    110              MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,
    111              MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA,
    112              MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8,
    113              MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CCM_8,
    114          
    115              /* All CAMELLIA-128 ephemeral suites */
    116              MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256,
    117              MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256,
    118              MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256,
    119              MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256,
    120              MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256,
    121              MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256,
    122              MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA,
    123          
    124              /* All ARIA-128 ephemeral suites */
    125              MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256,
    126              MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256,
    127              MBEDTLS_TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256,
    128              MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256,
    129              MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256,
    130              MBEDTLS_TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256,
    131          
    132              /* The PSK ephemeral suites */
    133              MBEDTLS_TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256,
    134              MBEDTLS_TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256,
    135              MBEDTLS_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384,
    136              MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CCM,
    137              MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384,
    138              MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384,
    139              MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA,
    140              MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA,
    141              MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384,
    142              MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384,
    143              MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384,
    144              MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CCM_8,
    145              MBEDTLS_TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384,
    146              MBEDTLS_TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384,
    147              MBEDTLS_TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384,
    148          
    149              MBEDTLS_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256,
    150              MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CCM,
    151              MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256,
    152              MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256,
    153              MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA,
    154              MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA,
    155              MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256,
    156              MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256,
    157              MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256,
    158              MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CCM_8,
    159              MBEDTLS_TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256,
    160              MBEDTLS_TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256,
    161              MBEDTLS_TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256,
    162          
    163              /* The ECJPAKE suite */
    164              MBEDTLS_TLS_ECJPAKE_WITH_AES_128_CCM_8,
    165          
    166              /* All AES-256 suites */
    167              MBEDTLS_TLS_RSA_WITH_AES_256_GCM_SHA384,
    168              MBEDTLS_TLS_RSA_WITH_AES_256_CCM,
    169              MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA256,
    170              MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA,
    171              MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384,
    172              MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384,
    173              MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA,
    174              MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384,
    175              MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384,
    176              MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA,
    177              MBEDTLS_TLS_RSA_WITH_AES_256_CCM_8,
    178          
    179              /* All CAMELLIA-256 suites */
    180              MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384,
    181              MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256,
    182              MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA,
    183              MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384,
    184              MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384,
    185              MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384,
    186              MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384,
    187          
    188              /* All ARIA-256 suites */
    189              MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384,
    190              MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384,
    191              MBEDTLS_TLS_RSA_WITH_ARIA_256_GCM_SHA384,
    192              MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384,
    193              MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384,
    194              MBEDTLS_TLS_RSA_WITH_ARIA_256_CBC_SHA384,
    195          
    196              /* All AES-128 suites */
    197              MBEDTLS_TLS_RSA_WITH_AES_128_GCM_SHA256,
    198              MBEDTLS_TLS_RSA_WITH_AES_128_CCM,
    199              MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA256,
    200              MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA,
    201              MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256,
    202              MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256,
    203              MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA,
    204              MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256,
    205              MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256,
    206              MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA,
    207              MBEDTLS_TLS_RSA_WITH_AES_128_CCM_8,
    208          
    209              /* All CAMELLIA-128 suites */
    210              MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256,
    211              MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256,
    212              MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA,
    213              MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256,
    214              MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256,
    215              MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256,
    216              MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256,
    217          
    218              /* All ARIA-128 suites */
    219              MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256,
    220              MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256,
    221              MBEDTLS_TLS_RSA_WITH_ARIA_128_GCM_SHA256,
    222              MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256,
    223              MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256,
    224              MBEDTLS_TLS_RSA_WITH_ARIA_128_CBC_SHA256,
    225          
    226              /* The RSA PSK suites */
    227              MBEDTLS_TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256,
    228              MBEDTLS_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384,
    229              MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384,
    230              MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA,
    231              MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384,
    232              MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384,
    233              MBEDTLS_TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384,
    234              MBEDTLS_TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384,
    235          
    236              MBEDTLS_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256,
    237              MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256,
    238              MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA,
    239              MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256,
    240              MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256,
    241              MBEDTLS_TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256,
    242              MBEDTLS_TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256,
    243          
    244              /* The PSK suites */
    245              MBEDTLS_TLS_PSK_WITH_CHACHA20_POLY1305_SHA256,
    246              MBEDTLS_TLS_PSK_WITH_AES_256_GCM_SHA384,
    247              MBEDTLS_TLS_PSK_WITH_AES_256_CCM,
    248              MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA384,
    249              MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA,
    250              MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384,
    251              MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384,
    252              MBEDTLS_TLS_PSK_WITH_AES_256_CCM_8,
    253              MBEDTLS_TLS_PSK_WITH_ARIA_256_GCM_SHA384,
    254              MBEDTLS_TLS_PSK_WITH_ARIA_256_CBC_SHA384,
    255          
    256              MBEDTLS_TLS_PSK_WITH_AES_128_GCM_SHA256,
    257              MBEDTLS_TLS_PSK_WITH_AES_128_CCM,
    258              MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA256,
    259              MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA,
    260              MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256,
    261              MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256,
    262              MBEDTLS_TLS_PSK_WITH_AES_128_CCM_8,
    263              MBEDTLS_TLS_PSK_WITH_ARIA_128_GCM_SHA256,
    264              MBEDTLS_TLS_PSK_WITH_ARIA_128_CBC_SHA256,
    265          
    266              /* NULL suites */
    267              MBEDTLS_TLS_ECDHE_ECDSA_WITH_NULL_SHA,
    268              MBEDTLS_TLS_ECDHE_RSA_WITH_NULL_SHA,
    269              MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA384,
    270              MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA256,
    271              MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA,
    272              MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA384,
    273              MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA256,
    274              MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA,
    275          
    276              MBEDTLS_TLS_RSA_WITH_NULL_SHA256,
    277              MBEDTLS_TLS_RSA_WITH_NULL_SHA,
    278              MBEDTLS_TLS_RSA_WITH_NULL_MD5,
    279              MBEDTLS_TLS_ECDH_RSA_WITH_NULL_SHA,
    280              MBEDTLS_TLS_ECDH_ECDSA_WITH_NULL_SHA,
    281              MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA384,
    282              MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA256,
    283              MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA,
    284              MBEDTLS_TLS_PSK_WITH_NULL_SHA384,
    285              MBEDTLS_TLS_PSK_WITH_NULL_SHA256,
    286              MBEDTLS_TLS_PSK_WITH_NULL_SHA,
    287          
    288          #endif /* MBEDTLS_SSL_CIPHERSUITES */
    289              0
    290          };
    291          

   \                                 In section .rodata, align 4
    292          static const mbedtls_ssl_ciphersuite_t ciphersuite_definitions[] =
   \                     ciphersuite_definitions:
   \        0x0   0x0000'C009        DC32 49'161, ?_0
   \              0x....'....
   \        0x8   0x05 0x05          DC8 5, 5, 4, 0
   \              0x04 0x00
   \        0xC   0x0303 0x0303      DC16 771, 771
   \       0x10   0x0000'C00A        DC32 49'162, ?_1
   \              0x....'....
   \       0x18   0x07 0x05          DC8 7, 5, 4, 0
   \              0x04 0x00
   \       0x1C   0x0303 0x0303      DC16 771, 771
   \       0x20   0x0000'C023        DC32 49'187, ?_2
   \              0x....'....
   \       0x28   0x05 0x09          DC8 5, 9, 4, 0
   \              0x04 0x00
   \       0x2C   0x0303 0x0303      DC16 771, 771
   \       0x30   0x0000'C0AD        DC32 49'325, ?_3
   \              0x....'....
   \       0x38   0x28 0x09          DC8 40, 9, 4, 0
   \              0x04 0x00
   \       0x3C   0x0303 0x0303      DC16 771, 771
   \       0x40   0x0000'C0AF        DC32 49'327, ?_4
   \              0x....'....
   \       0x48   0x28 0x09          DC8 40, 9, 4, 2
   \              0x04 0x02
   \       0x4C   0x0303 0x0303      DC16 771, 771
   \       0x50   0x0000'C0AC        DC32 49'324, ?_5
   \              0x....'....
   \       0x58   0x26 0x09          DC8 38, 9, 4, 0
   \              0x04 0x00
   \       0x5C   0x0303 0x0303      DC16 771, 771
   \       0x60   0x0000'C0AE        DC32 49'326, ?_6
   \              0x....'....
   \       0x68   0x26 0x09          DC8 38, 9, 4, 2
   \              0x04 0x02
   \       0x6C   0x0303 0x0303      DC16 771, 771
   \       0x70   0x0000'0000        DC32 0, ?_7
   \              0x....'....
   \       0x78   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00
   \       0x7C   0x0000 0x0000      DC16 0, 0
    293          {
    294          #if defined(MBEDTLS_SSL_PROTO_TLS1_3)
    295          #if defined(MBEDTLS_AES_C)
    296          #if defined(MBEDTLS_GCM_C)
    297          #if defined(MBEDTLS_MD_CAN_SHA384)
    298              { MBEDTLS_TLS1_3_AES_256_GCM_SHA384, "TLS1-3-AES-256-GCM-SHA384",
    299                MBEDTLS_CIPHER_AES_256_GCM, MBEDTLS_MD_SHA384,
    300                MBEDTLS_KEY_EXCHANGE_NONE, /* Key exchange not part of ciphersuite in TLS 1.3 */
    301                0,
    302                MBEDTLS_SSL_VERSION_TLS1_3, MBEDTLS_SSL_VERSION_TLS1_3 },
    303          #endif /* MBEDTLS_MD_CAN_SHA384 */
    304          #if defined(MBEDTLS_MD_CAN_SHA256)
    305              { MBEDTLS_TLS1_3_AES_128_GCM_SHA256, "TLS1-3-AES-128-GCM-SHA256",
    306                MBEDTLS_CIPHER_AES_128_GCM, MBEDTLS_MD_SHA256,
    307                MBEDTLS_KEY_EXCHANGE_NONE, /* Key exchange not part of ciphersuite in TLS 1.3 */
    308                0,
    309                MBEDTLS_SSL_VERSION_TLS1_3, MBEDTLS_SSL_VERSION_TLS1_3 },
    310          #endif /* MBEDTLS_MD_CAN_SHA256 */
    311          #endif /* MBEDTLS_GCM_C */
    312          #if defined(MBEDTLS_CCM_C) && defined(MBEDTLS_MD_CAN_SHA256)
    313              { MBEDTLS_TLS1_3_AES_128_CCM_SHA256, "TLS1-3-AES-128-CCM-SHA256",
    314                MBEDTLS_CIPHER_AES_128_CCM, MBEDTLS_MD_SHA256,
    315                MBEDTLS_KEY_EXCHANGE_NONE, /* Key exchange not part of ciphersuite in TLS 1.3 */
    316                0,
    317                MBEDTLS_SSL_VERSION_TLS1_3, MBEDTLS_SSL_VERSION_TLS1_3 },
    318              { MBEDTLS_TLS1_3_AES_128_CCM_8_SHA256, "TLS1-3-AES-128-CCM-8-SHA256",
    319                MBEDTLS_CIPHER_AES_128_CCM, MBEDTLS_MD_SHA256,
    320                MBEDTLS_KEY_EXCHANGE_NONE, /* Key exchange not part of ciphersuite in TLS 1.3 */
    321                MBEDTLS_CIPHERSUITE_SHORT_TAG,
    322                MBEDTLS_SSL_VERSION_TLS1_3, MBEDTLS_SSL_VERSION_TLS1_3 },
    323          #endif /* MBEDTLS_MD_CAN_SHA256 && MBEDTLS_CCM_C */
    324          #endif /* MBEDTLS_AES_C */
    325          #if defined(MBEDTLS_CHACHAPOLY_C) && defined(MBEDTLS_MD_CAN_SHA256)
    326              { MBEDTLS_TLS1_3_CHACHA20_POLY1305_SHA256,
    327                "TLS1-3-CHACHA20-POLY1305-SHA256",
    328                MBEDTLS_CIPHER_CHACHA20_POLY1305, MBEDTLS_MD_SHA256,
    329                MBEDTLS_KEY_EXCHANGE_NONE, /* Key exchange not part of ciphersuite in TLS 1.3 */
    330                0,
    331                MBEDTLS_SSL_VERSION_TLS1_3, MBEDTLS_SSL_VERSION_TLS1_3 },
    332          #endif /* MBEDTLS_CHACHAPOLY_C && MBEDTLS_MD_CAN_SHA256 */
    333          #endif /* MBEDTLS_SSL_PROTO_TLS1_3 */
    334          
    335          #if defined(MBEDTLS_CHACHAPOLY_C) && \
    336              defined(MBEDTLS_MD_CAN_SHA256) && \
    337              defined(MBEDTLS_SSL_PROTO_TLS1_2)
    338          #if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED)
    339              { MBEDTLS_TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,
    340                "TLS-ECDHE-RSA-WITH-CHACHA20-POLY1305-SHA256",
    341                MBEDTLS_CIPHER_CHACHA20_POLY1305, MBEDTLS_MD_SHA256,
    342                MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,
    343                0,
    344                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    345          #endif
    346          #if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)
    347              { MBEDTLS_TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,
    348                "TLS-ECDHE-ECDSA-WITH-CHACHA20-POLY1305-SHA256",
    349                MBEDTLS_CIPHER_CHACHA20_POLY1305, MBEDTLS_MD_SHA256,
    350                MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,
    351                0,
    352                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    353          #endif
    354          #if defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)
    355              { MBEDTLS_TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256,
    356                "TLS-DHE-RSA-WITH-CHACHA20-POLY1305-SHA256",
    357                MBEDTLS_CIPHER_CHACHA20_POLY1305, MBEDTLS_MD_SHA256,
    358                MBEDTLS_KEY_EXCHANGE_DHE_RSA,
    359                0,
    360                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    361          #endif
    362          #if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED)
    363              { MBEDTLS_TLS_PSK_WITH_CHACHA20_POLY1305_SHA256,
    364                "TLS-PSK-WITH-CHACHA20-POLY1305-SHA256",
    365                MBEDTLS_CIPHER_CHACHA20_POLY1305, MBEDTLS_MD_SHA256,
    366                MBEDTLS_KEY_EXCHANGE_PSK,
    367                0,
    368                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    369          #endif
    370          #if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED)
    371              { MBEDTLS_TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256,
    372                "TLS-ECDHE-PSK-WITH-CHACHA20-POLY1305-SHA256",
    373                MBEDTLS_CIPHER_CHACHA20_POLY1305, MBEDTLS_MD_SHA256,
    374                MBEDTLS_KEY_EXCHANGE_ECDHE_PSK,
    375                0,
    376                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    377          #endif
    378          #if defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)
    379              { MBEDTLS_TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256,
    380                "TLS-DHE-PSK-WITH-CHACHA20-POLY1305-SHA256",
    381                MBEDTLS_CIPHER_CHACHA20_POLY1305, MBEDTLS_MD_SHA256,
    382                MBEDTLS_KEY_EXCHANGE_DHE_PSK,
    383                0,
    384                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    385          #endif
    386          #if defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)
    387              { MBEDTLS_TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256,
    388                "TLS-RSA-PSK-WITH-CHACHA20-POLY1305-SHA256",
    389                MBEDTLS_CIPHER_CHACHA20_POLY1305, MBEDTLS_MD_SHA256,
    390                MBEDTLS_KEY_EXCHANGE_RSA_PSK,
    391                0,
    392                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    393          #endif
    394          #endif /* MBEDTLS_CHACHAPOLY_C &&
    395                    MBEDTLS_MD_CAN_SHA256 &&
    396                    MBEDTLS_SSL_PROTO_TLS1_2 */
    397          #if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)
    398          #if defined(MBEDTLS_AES_C)
    399          #if defined(MBEDTLS_MD_CAN_SHA1)
    400          #if defined(MBEDTLS_CIPHER_MODE_CBC)
    401              { MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, "TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA",
    402                MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,
    403                0,
    404                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    405              { MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, "TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA",
    406                MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,
    407                0,
    408                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    409          #endif /* MBEDTLS_CIPHER_MODE_CBC */
    410          #endif /* MBEDTLS_MD_CAN_SHA1 */
    411          #if defined(MBEDTLS_MD_CAN_SHA256)
    412          #if defined(MBEDTLS_CIPHER_MODE_CBC)
    413              { MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, "TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA256",
    414                MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,
    415                0,
    416                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    417          #endif /* MBEDTLS_CIPHER_MODE_CBC */
    418          #if defined(MBEDTLS_GCM_C)
    419              { MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, "TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256",
    420                MBEDTLS_CIPHER_AES_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,
    421                0,
    422                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    423          #endif /* MBEDTLS_GCM_C */
    424          #endif /* MBEDTLS_MD_CAN_SHA256 */
    425          #if defined(MBEDTLS_MD_CAN_SHA384)
    426          #if defined(MBEDTLS_CIPHER_MODE_CBC)
    427              { MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384, "TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA384",
    428                MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,
    429                0,
    430                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    431          #endif /* MBEDTLS_CIPHER_MODE_CBC */
    432          #if defined(MBEDTLS_GCM_C)
    433              { MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, "TLS-ECDHE-ECDSA-WITH-AES-256-GCM-SHA384",
    434                MBEDTLS_CIPHER_AES_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,
    435                0,
    436                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    437          #endif /* MBEDTLS_GCM_C */
    438          #endif /* MBEDTLS_MD_CAN_SHA384 */
    439          #if defined(MBEDTLS_CCM_C)
    440              { MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CCM, "TLS-ECDHE-ECDSA-WITH-AES-256-CCM",
    441                MBEDTLS_CIPHER_AES_256_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,
    442                0,
    443                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    444              { MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8, "TLS-ECDHE-ECDSA-WITH-AES-256-CCM-8",
    445                MBEDTLS_CIPHER_AES_256_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,
    446                MBEDTLS_CIPHERSUITE_SHORT_TAG,
    447                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    448              { MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CCM, "TLS-ECDHE-ECDSA-WITH-AES-128-CCM",
    449                MBEDTLS_CIPHER_AES_128_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,
    450                0,
    451                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    452              { MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8, "TLS-ECDHE-ECDSA-WITH-AES-128-CCM-8",
    453                MBEDTLS_CIPHER_AES_128_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,
    454                MBEDTLS_CIPHERSUITE_SHORT_TAG,
    455                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    456          #endif /* MBEDTLS_CCM_C */
    457          #endif /* MBEDTLS_AES_C */
    458          
    459          #if defined(MBEDTLS_CAMELLIA_C)
    460          #if defined(MBEDTLS_CIPHER_MODE_CBC)
    461          #if defined(MBEDTLS_MD_CAN_SHA256)
    462              { MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256,
    463                "TLS-ECDHE-ECDSA-WITH-CAMELLIA-128-CBC-SHA256",
    464                MBEDTLS_CIPHER_CAMELLIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,
    465                0,
    466                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    467          #endif /* MBEDTLS_MD_CAN_SHA256 */
    468          #if defined(MBEDTLS_MD_CAN_SHA384)
    469              { MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384,
    470                "TLS-ECDHE-ECDSA-WITH-CAMELLIA-256-CBC-SHA384",
    471                MBEDTLS_CIPHER_CAMELLIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,
    472                0,
    473                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    474          #endif /* MBEDTLS_MD_CAN_SHA384 */
    475          #endif /* MBEDTLS_CIPHER_MODE_CBC */
    476          
    477          #if defined(MBEDTLS_GCM_C)
    478          #if defined(MBEDTLS_MD_CAN_SHA256)
    479              { MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256,
    480                "TLS-ECDHE-ECDSA-WITH-CAMELLIA-128-GCM-SHA256",
    481                MBEDTLS_CIPHER_CAMELLIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,
    482                0,
    483                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    484          #endif /* MBEDTLS_MD_CAN_SHA256 */
    485          #if defined(MBEDTLS_MD_CAN_SHA384)
    486              { MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384,
    487                "TLS-ECDHE-ECDSA-WITH-CAMELLIA-256-GCM-SHA384",
    488                MBEDTLS_CIPHER_CAMELLIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,
    489                0,
    490                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    491          #endif /* MBEDTLS_MD_CAN_SHA384 */
    492          #endif /* MBEDTLS_GCM_C */
    493          #endif /* MBEDTLS_CAMELLIA_C */
    494          
    495          #if defined(MBEDTLS_CIPHER_NULL_CIPHER)
    496          #if defined(MBEDTLS_MD_CAN_SHA1)
    497              { MBEDTLS_TLS_ECDHE_ECDSA_WITH_NULL_SHA, "TLS-ECDHE-ECDSA-WITH-NULL-SHA",
    498                MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,
    499                MBEDTLS_CIPHERSUITE_WEAK,
    500                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    501          #endif /* MBEDTLS_MD_CAN_SHA1 */
    502          #endif /* MBEDTLS_CIPHER_NULL_CIPHER */
    503          #endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED */
    504          
    505          #if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED)
    506          #if defined(MBEDTLS_AES_C)
    507          #if defined(MBEDTLS_MD_CAN_SHA1)
    508          #if defined(MBEDTLS_CIPHER_MODE_CBC)
    509              { MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, "TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA",
    510                MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,
    511                0,
    512                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    513              { MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, "TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA",
    514                MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,
    515                0,
    516                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    517          #endif /* MBEDTLS_CIPHER_MODE_CBC */
    518          #endif /* MBEDTLS_MD_CAN_SHA1 */
    519          #if defined(MBEDTLS_MD_CAN_SHA256)
    520          #if defined(MBEDTLS_CIPHER_MODE_CBC)
    521              { MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, "TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA256",
    522                MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,
    523                0,
    524                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    525          #endif /* MBEDTLS_CIPHER_MODE_CBC */
    526          #if defined(MBEDTLS_GCM_C)
    527              { MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, "TLS-ECDHE-RSA-WITH-AES-128-GCM-SHA256",
    528                MBEDTLS_CIPHER_AES_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,
    529                0,
    530                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    531          #endif /* MBEDTLS_GCM_C */
    532          #endif /* MBEDTLS_MD_CAN_SHA256 */
    533          #if defined(MBEDTLS_MD_CAN_SHA384)
    534          #if defined(MBEDTLS_CIPHER_MODE_CBC)
    535              { MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384, "TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA384",
    536                MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,
    537                0,
    538                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    539          #endif /* MBEDTLS_CIPHER_MODE_CBC */
    540          #if defined(MBEDTLS_GCM_C)
    541              { MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, "TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384",
    542                MBEDTLS_CIPHER_AES_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,
    543                0,
    544                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    545          #endif /* MBEDTLS_GCM_C */
    546          #endif /* MBEDTLS_MD_CAN_SHA384 */
    547          #endif /* MBEDTLS_AES_C */
    548          
    549          #if defined(MBEDTLS_CAMELLIA_C)
    550          #if defined(MBEDTLS_CIPHER_MODE_CBC)
    551          #if defined(MBEDTLS_MD_CAN_SHA256)
    552              { MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256,
    553                "TLS-ECDHE-RSA-WITH-CAMELLIA-128-CBC-SHA256",
    554                MBEDTLS_CIPHER_CAMELLIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,
    555                0,
    556                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    557          #endif /* MBEDTLS_MD_CAN_SHA256 */
    558          #if defined(MBEDTLS_MD_CAN_SHA384)
    559              { MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384,
    560                "TLS-ECDHE-RSA-WITH-CAMELLIA-256-CBC-SHA384",
    561                MBEDTLS_CIPHER_CAMELLIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,
    562                0,
    563                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    564          #endif /* MBEDTLS_MD_CAN_SHA384 */
    565          #endif /* MBEDTLS_CIPHER_MODE_CBC */
    566          
    567          #if defined(MBEDTLS_GCM_C)
    568          #if defined(MBEDTLS_MD_CAN_SHA256)
    569              { MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256,
    570                "TLS-ECDHE-RSA-WITH-CAMELLIA-128-GCM-SHA256",
    571                MBEDTLS_CIPHER_CAMELLIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,
    572                0,
    573                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    574          #endif /* MBEDTLS_MD_CAN_SHA256 */
    575          #if defined(MBEDTLS_MD_CAN_SHA384)
    576              { MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384,
    577                "TLS-ECDHE-RSA-WITH-CAMELLIA-256-GCM-SHA384",
    578                MBEDTLS_CIPHER_CAMELLIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,
    579                0,
    580                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    581          #endif /* MBEDTLS_MD_CAN_SHA384 */
    582          #endif /* MBEDTLS_GCM_C */
    583          #endif /* MBEDTLS_CAMELLIA_C */
    584          
    585          #if defined(MBEDTLS_CIPHER_NULL_CIPHER)
    586          #if defined(MBEDTLS_MD_CAN_SHA1)
    587              { MBEDTLS_TLS_ECDHE_RSA_WITH_NULL_SHA, "TLS-ECDHE-RSA-WITH-NULL-SHA",
    588                MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,
    589                MBEDTLS_CIPHERSUITE_WEAK,
    590                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    591          #endif /* MBEDTLS_MD_CAN_SHA1 */
    592          #endif /* MBEDTLS_CIPHER_NULL_CIPHER */
    593          #endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED */
    594          
    595          #if defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)
    596          #if defined(MBEDTLS_AES_C)
    597          #if defined(MBEDTLS_MD_CAN_SHA384) && \
    598              defined(MBEDTLS_GCM_C)
    599              { MBEDTLS_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384, "TLS-DHE-RSA-WITH-AES-256-GCM-SHA384",
    600                MBEDTLS_CIPHER_AES_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_DHE_RSA,
    601                0,
    602                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    603          #endif /* MBEDTLS_MD_CAN_SHA384 && MBEDTLS_GCM_C */
    604          
    605          #if defined(MBEDTLS_MD_CAN_SHA256)
    606          #if defined(MBEDTLS_GCM_C)
    607              { MBEDTLS_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256, "TLS-DHE-RSA-WITH-AES-128-GCM-SHA256",
    608                MBEDTLS_CIPHER_AES_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_RSA,
    609                0,
    610                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    611          #endif /* MBEDTLS_GCM_C */
    612          
    613          #if defined(MBEDTLS_CIPHER_MODE_CBC)
    614              { MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256, "TLS-DHE-RSA-WITH-AES-128-CBC-SHA256",
    615                MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_RSA,
    616                0,
    617                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    618          
    619              { MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256, "TLS-DHE-RSA-WITH-AES-256-CBC-SHA256",
    620                MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_RSA,
    621                0,
    622                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    623          #endif /* MBEDTLS_CIPHER_MODE_CBC */
    624          #endif /* MBEDTLS_MD_CAN_SHA256 */
    625          
    626          #if defined(MBEDTLS_CIPHER_MODE_CBC)
    627          #if defined(MBEDTLS_MD_CAN_SHA1)
    628              { MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA, "TLS-DHE-RSA-WITH-AES-128-CBC-SHA",
    629                MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_DHE_RSA,
    630                0,
    631                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    632          
    633              { MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA, "TLS-DHE-RSA-WITH-AES-256-CBC-SHA",
    634                MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_DHE_RSA,
    635                0,
    636                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    637          #endif /* MBEDTLS_MD_CAN_SHA1 */
    638          #endif /* MBEDTLS_CIPHER_MODE_CBC */
    639          #if defined(MBEDTLS_CCM_C)
    640              { MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CCM, "TLS-DHE-RSA-WITH-AES-256-CCM",
    641                MBEDTLS_CIPHER_AES_256_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_RSA,
    642                0,
    643                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    644              { MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CCM_8, "TLS-DHE-RSA-WITH-AES-256-CCM-8",
    645                MBEDTLS_CIPHER_AES_256_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_RSA,
    646                MBEDTLS_CIPHERSUITE_SHORT_TAG,
    647                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    648              { MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CCM, "TLS-DHE-RSA-WITH-AES-128-CCM",
    649                MBEDTLS_CIPHER_AES_128_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_RSA,
    650                0,
    651                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    652              { MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CCM_8, "TLS-DHE-RSA-WITH-AES-128-CCM-8",
    653                MBEDTLS_CIPHER_AES_128_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_RSA,
    654                MBEDTLS_CIPHERSUITE_SHORT_TAG,
    655                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    656          #endif /* MBEDTLS_CCM_C */
    657          #endif /* MBEDTLS_AES_C */
    658          
    659          #if defined(MBEDTLS_CAMELLIA_C)
    660          #if defined(MBEDTLS_CIPHER_MODE_CBC)
    661          #if defined(MBEDTLS_MD_CAN_SHA256)
    662              { MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256, "TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA256",
    663                MBEDTLS_CIPHER_CAMELLIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_RSA,
    664                0,
    665                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    666          
    667              { MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256, "TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA256",
    668                MBEDTLS_CIPHER_CAMELLIA_256_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_RSA,
    669                0,
    670                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    671          #endif /* MBEDTLS_MD_CAN_SHA256 */
    672          
    673          #if defined(MBEDTLS_MD_CAN_SHA1)
    674              { MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA, "TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA",
    675                MBEDTLS_CIPHER_CAMELLIA_128_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_DHE_RSA,
    676                0,
    677                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    678          
    679              { MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA, "TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA",
    680                MBEDTLS_CIPHER_CAMELLIA_256_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_DHE_RSA,
    681                0,
    682                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    683          #endif /* MBEDTLS_MD_CAN_SHA1 */
    684          #endif /* MBEDTLS_CIPHER_MODE_CBC */
    685          #if defined(MBEDTLS_GCM_C)
    686          #if defined(MBEDTLS_MD_CAN_SHA256)
    687              { MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256, "TLS-DHE-RSA-WITH-CAMELLIA-128-GCM-SHA256",
    688                MBEDTLS_CIPHER_CAMELLIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_RSA,
    689                0,
    690                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    691          #endif /* MBEDTLS_MD_CAN_SHA256 */
    692          
    693          #if defined(MBEDTLS_MD_CAN_SHA384)
    694              { MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384, "TLS-DHE-RSA-WITH-CAMELLIA-256-GCM-SHA384",
    695                MBEDTLS_CIPHER_CAMELLIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_DHE_RSA,
    696                0,
    697                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    698          #endif /* MBEDTLS_MD_CAN_SHA384 */
    699          #endif /* MBEDTLS_GCM_C */
    700          #endif /* MBEDTLS_CAMELLIA_C */
    701          
    702          #endif /* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED */
    703          
    704          #if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)
    705          #if defined(MBEDTLS_AES_C)
    706          #if defined(MBEDTLS_MD_CAN_SHA384) && \
    707              defined(MBEDTLS_GCM_C)
    708              { MBEDTLS_TLS_RSA_WITH_AES_256_GCM_SHA384, "TLS-RSA-WITH-AES-256-GCM-SHA384",
    709                MBEDTLS_CIPHER_AES_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_RSA,
    710                0,
    711                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    712          #endif /* MBEDTLS_MD_CAN_SHA384 && MBEDTLS_GCM_C */
    713          
    714          #if defined(MBEDTLS_MD_CAN_SHA256)
    715          #if defined(MBEDTLS_GCM_C)
    716              { MBEDTLS_TLS_RSA_WITH_AES_128_GCM_SHA256, "TLS-RSA-WITH-AES-128-GCM-SHA256",
    717                MBEDTLS_CIPHER_AES_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA,
    718                0,
    719                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    720          #endif /* MBEDTLS_GCM_C */
    721          
    722          #if defined(MBEDTLS_CIPHER_MODE_CBC)
    723              { MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA256, "TLS-RSA-WITH-AES-128-CBC-SHA256",
    724                MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA,
    725                0,
    726                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    727          
    728              { MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA256, "TLS-RSA-WITH-AES-256-CBC-SHA256",
    729                MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA,
    730                0,
    731                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    732          #endif /* MBEDTLS_CIPHER_MODE_CBC */
    733          #endif /* MBEDTLS_MD_CAN_SHA256 */
    734          
    735          #if defined(MBEDTLS_MD_CAN_SHA1)
    736          #if defined(MBEDTLS_CIPHER_MODE_CBC)
    737              { MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA, "TLS-RSA-WITH-AES-128-CBC-SHA",
    738                MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_RSA,
    739                0,
    740                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    741          
    742              { MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA, "TLS-RSA-WITH-AES-256-CBC-SHA",
    743                MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_RSA,
    744                0,
    745                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    746          #endif /* MBEDTLS_CIPHER_MODE_CBC */
    747          #endif /* MBEDTLS_MD_CAN_SHA1 */
    748          #if defined(MBEDTLS_CCM_C)
    749              { MBEDTLS_TLS_RSA_WITH_AES_256_CCM, "TLS-RSA-WITH-AES-256-CCM",
    750                MBEDTLS_CIPHER_AES_256_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA,
    751                0,
    752                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    753              { MBEDTLS_TLS_RSA_WITH_AES_256_CCM_8, "TLS-RSA-WITH-AES-256-CCM-8",
    754                MBEDTLS_CIPHER_AES_256_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA,
    755                MBEDTLS_CIPHERSUITE_SHORT_TAG,
    756                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    757              { MBEDTLS_TLS_RSA_WITH_AES_128_CCM, "TLS-RSA-WITH-AES-128-CCM",
    758                MBEDTLS_CIPHER_AES_128_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA,
    759                0,
    760                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    761              { MBEDTLS_TLS_RSA_WITH_AES_128_CCM_8, "TLS-RSA-WITH-AES-128-CCM-8",
    762                MBEDTLS_CIPHER_AES_128_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA,
    763                MBEDTLS_CIPHERSUITE_SHORT_TAG,
    764                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    765          #endif /* MBEDTLS_CCM_C */
    766          #endif /* MBEDTLS_AES_C */
    767          
    768          #if defined(MBEDTLS_CAMELLIA_C)
    769          #if defined(MBEDTLS_CIPHER_MODE_CBC)
    770          #if defined(MBEDTLS_MD_CAN_SHA256)
    771              { MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256, "TLS-RSA-WITH-CAMELLIA-128-CBC-SHA256",
    772                MBEDTLS_CIPHER_CAMELLIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA,
    773                0,
    774                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    775          
    776              { MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256, "TLS-RSA-WITH-CAMELLIA-256-CBC-SHA256",
    777                MBEDTLS_CIPHER_CAMELLIA_256_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA,
    778                0,
    779                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    780          #endif /* MBEDTLS_MD_CAN_SHA256 */
    781          
    782          #if defined(MBEDTLS_MD_CAN_SHA1)
    783              { MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA, "TLS-RSA-WITH-CAMELLIA-128-CBC-SHA",
    784                MBEDTLS_CIPHER_CAMELLIA_128_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_RSA,
    785                0,
    786                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    787          
    788              { MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA, "TLS-RSA-WITH-CAMELLIA-256-CBC-SHA",
    789                MBEDTLS_CIPHER_CAMELLIA_256_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_RSA,
    790                0,
    791                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    792          #endif /* MBEDTLS_MD_CAN_SHA1 */
    793          #endif /* MBEDTLS_CIPHER_MODE_CBC */
    794          
    795          #if defined(MBEDTLS_GCM_C)
    796          #if defined(MBEDTLS_MD_CAN_SHA256)
    797              { MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256, "TLS-RSA-WITH-CAMELLIA-128-GCM-SHA256",
    798                MBEDTLS_CIPHER_CAMELLIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA,
    799                0,
    800                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    801          #endif /* MBEDTLS_MD_CAN_SHA256 */
    802          
    803          #if defined(MBEDTLS_MD_CAN_SHA384)
    804              { MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384, "TLS-RSA-WITH-CAMELLIA-256-GCM-SHA384",
    805                MBEDTLS_CIPHER_CAMELLIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_RSA,
    806                0,
    807                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    808          #endif /* MBEDTLS_MD_CAN_SHA384 */
    809          #endif /* MBEDTLS_GCM_C */
    810          #endif /* MBEDTLS_CAMELLIA_C */
    811          
    812          #endif /* MBEDTLS_KEY_EXCHANGE_RSA_ENABLED */
    813          
    814          #if defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED)
    815          #if defined(MBEDTLS_AES_C)
    816          #if defined(MBEDTLS_MD_CAN_SHA1)
    817          #if defined(MBEDTLS_CIPHER_MODE_CBC)
    818              { MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA, "TLS-ECDH-RSA-WITH-AES-128-CBC-SHA",
    819                MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,
    820                0,
    821                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    822              { MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA, "TLS-ECDH-RSA-WITH-AES-256-CBC-SHA",
    823                MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,
    824                0,
    825                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    826          #endif /* MBEDTLS_CIPHER_MODE_CBC */
    827          #endif /* MBEDTLS_MD_CAN_SHA1 */
    828          #if defined(MBEDTLS_MD_CAN_SHA256)
    829          #if defined(MBEDTLS_CIPHER_MODE_CBC)
    830              { MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256, "TLS-ECDH-RSA-WITH-AES-128-CBC-SHA256",
    831                MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,
    832                0,
    833                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    834          #endif /* MBEDTLS_CIPHER_MODE_CBC */
    835          #if defined(MBEDTLS_GCM_C)
    836              { MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256, "TLS-ECDH-RSA-WITH-AES-128-GCM-SHA256",
    837                MBEDTLS_CIPHER_AES_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,
    838                0,
    839                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    840          #endif /* MBEDTLS_GCM_C */
    841          #endif /* MBEDTLS_MD_CAN_SHA256 */
    842          #if defined(MBEDTLS_MD_CAN_SHA384)
    843          #if defined(MBEDTLS_CIPHER_MODE_CBC)
    844              { MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384, "TLS-ECDH-RSA-WITH-AES-256-CBC-SHA384",
    845                MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,
    846                0,
    847                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    848          #endif /* MBEDTLS_CIPHER_MODE_CBC */
    849          #if defined(MBEDTLS_GCM_C)
    850              { MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384, "TLS-ECDH-RSA-WITH-AES-256-GCM-SHA384",
    851                MBEDTLS_CIPHER_AES_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,
    852                0,
    853                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    854          #endif /* MBEDTLS_GCM_C */
    855          #endif /* MBEDTLS_MD_CAN_SHA384 */
    856          #endif /* MBEDTLS_AES_C */
    857          
    858          #if defined(MBEDTLS_CAMELLIA_C)
    859          #if defined(MBEDTLS_CIPHER_MODE_CBC)
    860          #if defined(MBEDTLS_MD_CAN_SHA256)
    861              { MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256,
    862                "TLS-ECDH-RSA-WITH-CAMELLIA-128-CBC-SHA256",
    863                MBEDTLS_CIPHER_CAMELLIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,
    864                0,
    865                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    866          #endif /* MBEDTLS_MD_CAN_SHA256 */
    867          #if defined(MBEDTLS_MD_CAN_SHA384)
    868              { MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384,
    869                "TLS-ECDH-RSA-WITH-CAMELLIA-256-CBC-SHA384",
    870                MBEDTLS_CIPHER_CAMELLIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,
    871                0,
    872                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    873          #endif /* MBEDTLS_MD_CAN_SHA384 */
    874          #endif /* MBEDTLS_CIPHER_MODE_CBC */
    875          
    876          #if defined(MBEDTLS_GCM_C)
    877          #if defined(MBEDTLS_MD_CAN_SHA256)
    878              { MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256,
    879                "TLS-ECDH-RSA-WITH-CAMELLIA-128-GCM-SHA256",
    880                MBEDTLS_CIPHER_CAMELLIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,
    881                0,
    882                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    883          #endif /* MBEDTLS_MD_CAN_SHA256 */
    884          #if defined(MBEDTLS_MD_CAN_SHA384)
    885              { MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384,
    886                "TLS-ECDH-RSA-WITH-CAMELLIA-256-GCM-SHA384",
    887                MBEDTLS_CIPHER_CAMELLIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,
    888                0,
    889                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    890          #endif /* MBEDTLS_MD_CAN_SHA384 */
    891          #endif /* MBEDTLS_GCM_C */
    892          #endif /* MBEDTLS_CAMELLIA_C */
    893          
    894          #if defined(MBEDTLS_CIPHER_NULL_CIPHER)
    895          #if defined(MBEDTLS_MD_CAN_SHA1)
    896              { MBEDTLS_TLS_ECDH_RSA_WITH_NULL_SHA, "TLS-ECDH-RSA-WITH-NULL-SHA",
    897                MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,
    898                MBEDTLS_CIPHERSUITE_WEAK,
    899                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    900          #endif /* MBEDTLS_MD_CAN_SHA1 */
    901          #endif /* MBEDTLS_CIPHER_NULL_CIPHER */
    902          #endif /* MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED */
    903          
    904          #if defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)
    905          #if defined(MBEDTLS_AES_C)
    906          #if defined(MBEDTLS_MD_CAN_SHA1)
    907          #if defined(MBEDTLS_CIPHER_MODE_CBC)
    908              { MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA, "TLS-ECDH-ECDSA-WITH-AES-128-CBC-SHA",
    909                MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,
    910                0,
    911                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    912              { MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA, "TLS-ECDH-ECDSA-WITH-AES-256-CBC-SHA",
    913                MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,
    914                0,
    915                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    916          #endif /* MBEDTLS_CIPHER_MODE_CBC */
    917          #endif /* MBEDTLS_MD_CAN_SHA1 */
    918          #if defined(MBEDTLS_MD_CAN_SHA256)
    919          #if defined(MBEDTLS_CIPHER_MODE_CBC)
    920              { MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256, "TLS-ECDH-ECDSA-WITH-AES-128-CBC-SHA256",
    921                MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,
    922                0,
    923                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    924          #endif /* MBEDTLS_CIPHER_MODE_CBC */
    925          #if defined(MBEDTLS_GCM_C)
    926              { MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256, "TLS-ECDH-ECDSA-WITH-AES-128-GCM-SHA256",
    927                MBEDTLS_CIPHER_AES_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,
    928                0,
    929                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    930          #endif /* MBEDTLS_GCM_C */
    931          #endif /* MBEDTLS_MD_CAN_SHA256 */
    932          #if defined(MBEDTLS_MD_CAN_SHA384)
    933          #if defined(MBEDTLS_CIPHER_MODE_CBC)
    934              { MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384, "TLS-ECDH-ECDSA-WITH-AES-256-CBC-SHA384",
    935                MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,
    936                0,
    937                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    938          #endif /* MBEDTLS_CIPHER_MODE_CBC */
    939          #if defined(MBEDTLS_GCM_C)
    940              { MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384, "TLS-ECDH-ECDSA-WITH-AES-256-GCM-SHA384",
    941                MBEDTLS_CIPHER_AES_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,
    942                0,
    943                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    944          #endif /* MBEDTLS_GCM_C */
    945          #endif /* MBEDTLS_MD_CAN_SHA384 */
    946          #endif /* MBEDTLS_AES_C */
    947          
    948          #if defined(MBEDTLS_CAMELLIA_C)
    949          #if defined(MBEDTLS_CIPHER_MODE_CBC)
    950          #if defined(MBEDTLS_MD_CAN_SHA256)
    951              { MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256,
    952                "TLS-ECDH-ECDSA-WITH-CAMELLIA-128-CBC-SHA256",
    953                MBEDTLS_CIPHER_CAMELLIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,
    954                0,
    955                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    956          #endif /* MBEDTLS_MD_CAN_SHA256 */
    957          #if defined(MBEDTLS_MD_CAN_SHA384)
    958              { MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384,
    959                "TLS-ECDH-ECDSA-WITH-CAMELLIA-256-CBC-SHA384",
    960                MBEDTLS_CIPHER_CAMELLIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,
    961                0,
    962                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    963          #endif /* MBEDTLS_MD_CAN_SHA384 */
    964          #endif /* MBEDTLS_CIPHER_MODE_CBC */
    965          
    966          #if defined(MBEDTLS_GCM_C)
    967          #if defined(MBEDTLS_MD_CAN_SHA256)
    968              { MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256,
    969                "TLS-ECDH-ECDSA-WITH-CAMELLIA-128-GCM-SHA256",
    970                MBEDTLS_CIPHER_CAMELLIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,
    971                0,
    972                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    973          #endif /* MBEDTLS_MD_CAN_SHA256 */
    974          #if defined(MBEDTLS_MD_CAN_SHA384)
    975              { MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384,
    976                "TLS-ECDH-ECDSA-WITH-CAMELLIA-256-GCM-SHA384",
    977                MBEDTLS_CIPHER_CAMELLIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,
    978                0,
    979                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    980          #endif /* MBEDTLS_MD_CAN_SHA384 */
    981          #endif /* MBEDTLS_GCM_C */
    982          #endif /* MBEDTLS_CAMELLIA_C */
    983          
    984          #if defined(MBEDTLS_CIPHER_NULL_CIPHER)
    985          #if defined(MBEDTLS_MD_CAN_SHA1)
    986              { MBEDTLS_TLS_ECDH_ECDSA_WITH_NULL_SHA, "TLS-ECDH-ECDSA-WITH-NULL-SHA",
    987                MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,
    988                MBEDTLS_CIPHERSUITE_WEAK,
    989                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
    990          #endif /* MBEDTLS_MD_CAN_SHA1 */
    991          #endif /* MBEDTLS_CIPHER_NULL_CIPHER */
    992          #endif /* MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */
    993          
    994          #if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED)
    995          #if defined(MBEDTLS_AES_C)
    996          #if defined(MBEDTLS_GCM_C)
    997          #if defined(MBEDTLS_MD_CAN_SHA256)
    998              { MBEDTLS_TLS_PSK_WITH_AES_128_GCM_SHA256, "TLS-PSK-WITH-AES-128-GCM-SHA256",
    999                MBEDTLS_CIPHER_AES_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_PSK,
   1000                0,
   1001                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1002          #endif /* MBEDTLS_MD_CAN_SHA256 */
   1003          
   1004          #if defined(MBEDTLS_MD_CAN_SHA384)
   1005              { MBEDTLS_TLS_PSK_WITH_AES_256_GCM_SHA384, "TLS-PSK-WITH-AES-256-GCM-SHA384",
   1006                MBEDTLS_CIPHER_AES_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_PSK,
   1007                0,
   1008                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1009          #endif /* MBEDTLS_MD_CAN_SHA384 */
   1010          #endif /* MBEDTLS_GCM_C */
   1011          
   1012          #if defined(MBEDTLS_CIPHER_MODE_CBC)
   1013          #if defined(MBEDTLS_MD_CAN_SHA256)
   1014              { MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA256, "TLS-PSK-WITH-AES-128-CBC-SHA256",
   1015                MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_PSK,
   1016                0,
   1017                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1018          #endif /* MBEDTLS_MD_CAN_SHA256 */
   1019          
   1020          #if defined(MBEDTLS_MD_CAN_SHA384)
   1021              { MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA384, "TLS-PSK-WITH-AES-256-CBC-SHA384",
   1022                MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_PSK,
   1023                0,
   1024                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1025          #endif /* MBEDTLS_MD_CAN_SHA384 */
   1026          
   1027          #if defined(MBEDTLS_MD_CAN_SHA1)
   1028              { MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA, "TLS-PSK-WITH-AES-128-CBC-SHA",
   1029                MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_PSK,
   1030                0,
   1031                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1032          
   1033              { MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA, "TLS-PSK-WITH-AES-256-CBC-SHA",
   1034                MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_PSK,
   1035                0,
   1036                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1037          #endif /* MBEDTLS_MD_CAN_SHA1 */
   1038          #endif /* MBEDTLS_CIPHER_MODE_CBC */
   1039          #if defined(MBEDTLS_CCM_C)
   1040              { MBEDTLS_TLS_PSK_WITH_AES_256_CCM, "TLS-PSK-WITH-AES-256-CCM",
   1041                MBEDTLS_CIPHER_AES_256_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_PSK,
   1042                0,
   1043                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1044              { MBEDTLS_TLS_PSK_WITH_AES_256_CCM_8, "TLS-PSK-WITH-AES-256-CCM-8",
   1045                MBEDTLS_CIPHER_AES_256_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_PSK,
   1046                MBEDTLS_CIPHERSUITE_SHORT_TAG,
   1047                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1048              { MBEDTLS_TLS_PSK_WITH_AES_128_CCM, "TLS-PSK-WITH-AES-128-CCM",
   1049                MBEDTLS_CIPHER_AES_128_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_PSK,
   1050                0,
   1051                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1052              { MBEDTLS_TLS_PSK_WITH_AES_128_CCM_8, "TLS-PSK-WITH-AES-128-CCM-8",
   1053                MBEDTLS_CIPHER_AES_128_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_PSK,
   1054                MBEDTLS_CIPHERSUITE_SHORT_TAG,
   1055                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1056          #endif /* MBEDTLS_CCM_C */
   1057          #endif /* MBEDTLS_AES_C */
   1058          
   1059          #if defined(MBEDTLS_CAMELLIA_C)
   1060          #if defined(MBEDTLS_CIPHER_MODE_CBC)
   1061          #if defined(MBEDTLS_MD_CAN_SHA256)
   1062              { MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256, "TLS-PSK-WITH-CAMELLIA-128-CBC-SHA256",
   1063                MBEDTLS_CIPHER_CAMELLIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_PSK,
   1064                0,
   1065                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1066          #endif /* MBEDTLS_MD_CAN_SHA256 */
   1067          
   1068          #if defined(MBEDTLS_MD_CAN_SHA384)
   1069              { MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384, "TLS-PSK-WITH-CAMELLIA-256-CBC-SHA384",
   1070                MBEDTLS_CIPHER_CAMELLIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_PSK,
   1071                0,
   1072                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1073          #endif /* MBEDTLS_MD_CAN_SHA384 */
   1074          #endif /* MBEDTLS_CIPHER_MODE_CBC */
   1075          
   1076          #if defined(MBEDTLS_GCM_C)
   1077          #if defined(MBEDTLS_MD_CAN_SHA256)
   1078              { MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256, "TLS-PSK-WITH-CAMELLIA-128-GCM-SHA256",
   1079                MBEDTLS_CIPHER_CAMELLIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_PSK,
   1080                0,
   1081                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1082          #endif /* MBEDTLS_MD_CAN_SHA256 */
   1083          
   1084          #if defined(MBEDTLS_MD_CAN_SHA384)
   1085              { MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384, "TLS-PSK-WITH-CAMELLIA-256-GCM-SHA384",
   1086                MBEDTLS_CIPHER_CAMELLIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_PSK,
   1087                0,
   1088                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1089          #endif /* MBEDTLS_MD_CAN_SHA384 */
   1090          #endif /* MBEDTLS_GCM_C */
   1091          #endif /* MBEDTLS_CAMELLIA_C */
   1092          
   1093          #endif /* MBEDTLS_KEY_EXCHANGE_PSK_ENABLED */
   1094          
   1095          #if defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)
   1096          #if defined(MBEDTLS_AES_C)
   1097          #if defined(MBEDTLS_GCM_C)
   1098          #if defined(MBEDTLS_MD_CAN_SHA256)
   1099              { MBEDTLS_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256, "TLS-DHE-PSK-WITH-AES-128-GCM-SHA256",
   1100                MBEDTLS_CIPHER_AES_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_PSK,
   1101                0,
   1102                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1103          #endif /* MBEDTLS_MD_CAN_SHA256 */
   1104          
   1105          #if defined(MBEDTLS_MD_CAN_SHA384)
   1106              { MBEDTLS_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384, "TLS-DHE-PSK-WITH-AES-256-GCM-SHA384",
   1107                MBEDTLS_CIPHER_AES_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_DHE_PSK,
   1108                0,
   1109                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1110          #endif /* MBEDTLS_MD_CAN_SHA384 */
   1111          #endif /* MBEDTLS_GCM_C */
   1112          
   1113          #if defined(MBEDTLS_CIPHER_MODE_CBC)
   1114          #if defined(MBEDTLS_MD_CAN_SHA256)
   1115              { MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256, "TLS-DHE-PSK-WITH-AES-128-CBC-SHA256",
   1116                MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_PSK,
   1117                0,
   1118                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1119          #endif /* MBEDTLS_MD_CAN_SHA256 */
   1120          
   1121          #if defined(MBEDTLS_MD_CAN_SHA384)
   1122              { MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384, "TLS-DHE-PSK-WITH-AES-256-CBC-SHA384",
   1123                MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_DHE_PSK,
   1124                0,
   1125                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1126          #endif /* MBEDTLS_MD_CAN_SHA384 */
   1127          
   1128          #if defined(MBEDTLS_MD_CAN_SHA1)
   1129              { MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA, "TLS-DHE-PSK-WITH-AES-128-CBC-SHA",
   1130                MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_DHE_PSK,
   1131                0,
   1132                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1133          
   1134              { MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA, "TLS-DHE-PSK-WITH-AES-256-CBC-SHA",
   1135                MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_DHE_PSK,
   1136                0,
   1137                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1138          #endif /* MBEDTLS_MD_CAN_SHA1 */
   1139          #endif /* MBEDTLS_CIPHER_MODE_CBC */
   1140          #if defined(MBEDTLS_CCM_C)
   1141              { MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CCM, "TLS-DHE-PSK-WITH-AES-256-CCM",
   1142                MBEDTLS_CIPHER_AES_256_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_PSK,
   1143                0,
   1144                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1145              { MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CCM_8, "TLS-DHE-PSK-WITH-AES-256-CCM-8",
   1146                MBEDTLS_CIPHER_AES_256_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_PSK,
   1147                MBEDTLS_CIPHERSUITE_SHORT_TAG,
   1148                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1149              { MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CCM, "TLS-DHE-PSK-WITH-AES-128-CCM",
   1150                MBEDTLS_CIPHER_AES_128_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_PSK,
   1151                0,
   1152                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1153              { MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CCM_8, "TLS-DHE-PSK-WITH-AES-128-CCM-8",
   1154                MBEDTLS_CIPHER_AES_128_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_PSK,
   1155                MBEDTLS_CIPHERSUITE_SHORT_TAG,
   1156                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1157          #endif /* MBEDTLS_CCM_C */
   1158          #endif /* MBEDTLS_AES_C */
   1159          
   1160          #if defined(MBEDTLS_CAMELLIA_C)
   1161          #if defined(MBEDTLS_CIPHER_MODE_CBC)
   1162          #if defined(MBEDTLS_MD_CAN_SHA256)
   1163              { MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256, "TLS-DHE-PSK-WITH-CAMELLIA-128-CBC-SHA256",
   1164                MBEDTLS_CIPHER_CAMELLIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_PSK,
   1165                0,
   1166                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1167          #endif /* MBEDTLS_MD_CAN_SHA256 */
   1168          
   1169          #if defined(MBEDTLS_MD_CAN_SHA384)
   1170              { MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384, "TLS-DHE-PSK-WITH-CAMELLIA-256-CBC-SHA384",
   1171                MBEDTLS_CIPHER_CAMELLIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_DHE_PSK,
   1172                0,
   1173                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1174          #endif /* MBEDTLS_MD_CAN_SHA384 */
   1175          #endif /* MBEDTLS_CIPHER_MODE_CBC */
   1176          
   1177          #if defined(MBEDTLS_GCM_C)
   1178          #if defined(MBEDTLS_MD_CAN_SHA256)
   1179              { MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256, "TLS-DHE-PSK-WITH-CAMELLIA-128-GCM-SHA256",
   1180                MBEDTLS_CIPHER_CAMELLIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_PSK,
   1181                0,
   1182                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1183          #endif /* MBEDTLS_MD_CAN_SHA256 */
   1184          
   1185          #if defined(MBEDTLS_MD_CAN_SHA384)
   1186              { MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384, "TLS-DHE-PSK-WITH-CAMELLIA-256-GCM-SHA384",
   1187                MBEDTLS_CIPHER_CAMELLIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_DHE_PSK,
   1188                0,
   1189                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1190          #endif /* MBEDTLS_MD_CAN_SHA384 */
   1191          #endif /* MBEDTLS_GCM_C */
   1192          #endif /* MBEDTLS_CAMELLIA_C */
   1193          
   1194          #endif /* MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */
   1195          
   1196          #if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED)
   1197          #if defined(MBEDTLS_AES_C)
   1198          
   1199          #if defined(MBEDTLS_CIPHER_MODE_CBC)
   1200          #if defined(MBEDTLS_MD_CAN_SHA256)
   1201              { MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256, "TLS-ECDHE-PSK-WITH-AES-128-CBC-SHA256",
   1202                MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_PSK,
   1203                0,
   1204                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1205          #endif /* MBEDTLS_MD_CAN_SHA256 */
   1206          
   1207          #if defined(MBEDTLS_MD_CAN_SHA384)
   1208              { MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384, "TLS-ECDHE-PSK-WITH-AES-256-CBC-SHA384",
   1209                MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_PSK,
   1210                0,
   1211                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1212          #endif /* MBEDTLS_MD_CAN_SHA384 */
   1213          
   1214          #if defined(MBEDTLS_MD_CAN_SHA1)
   1215              { MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA, "TLS-ECDHE-PSK-WITH-AES-128-CBC-SHA",
   1216                MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDHE_PSK,
   1217                0,
   1218                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1219          
   1220              { MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA, "TLS-ECDHE-PSK-WITH-AES-256-CBC-SHA",
   1221                MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDHE_PSK,
   1222                0,
   1223                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1224          #endif /* MBEDTLS_MD_CAN_SHA1 */
   1225          #endif /* MBEDTLS_CIPHER_MODE_CBC */
   1226          #endif /* MBEDTLS_AES_C */
   1227          
   1228          #if defined(MBEDTLS_CAMELLIA_C)
   1229          #if defined(MBEDTLS_CIPHER_MODE_CBC)
   1230          #if defined(MBEDTLS_MD_CAN_SHA256)
   1231              { MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256,
   1232                "TLS-ECDHE-PSK-WITH-CAMELLIA-128-CBC-SHA256",
   1233                MBEDTLS_CIPHER_CAMELLIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_PSK,
   1234                0,
   1235                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1236          #endif /* MBEDTLS_MD_CAN_SHA256 */
   1237          
   1238          #if defined(MBEDTLS_MD_CAN_SHA384)
   1239              { MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384,
   1240                "TLS-ECDHE-PSK-WITH-CAMELLIA-256-CBC-SHA384",
   1241                MBEDTLS_CIPHER_CAMELLIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_PSK,
   1242                0,
   1243                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1244          #endif /* MBEDTLS_MD_CAN_SHA384 */
   1245          #endif /* MBEDTLS_CIPHER_MODE_CBC */
   1246          #endif /* MBEDTLS_CAMELLIA_C */
   1247          
   1248          #endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED */
   1249          
   1250          #if defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)
   1251          #if defined(MBEDTLS_AES_C)
   1252          #if defined(MBEDTLS_GCM_C)
   1253          #if defined(MBEDTLS_MD_CAN_SHA256)
   1254              { MBEDTLS_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256, "TLS-RSA-PSK-WITH-AES-128-GCM-SHA256",
   1255                MBEDTLS_CIPHER_AES_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA_PSK,
   1256                0,
   1257                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1258          #endif /* MBEDTLS_MD_CAN_SHA256 */
   1259          
   1260          #if defined(MBEDTLS_MD_CAN_SHA384)
   1261              { MBEDTLS_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384, "TLS-RSA-PSK-WITH-AES-256-GCM-SHA384",
   1262                MBEDTLS_CIPHER_AES_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_RSA_PSK,
   1263                0,
   1264                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1265          #endif /* MBEDTLS_MD_CAN_SHA384 */
   1266          #endif /* MBEDTLS_GCM_C */
   1267          
   1268          #if defined(MBEDTLS_CIPHER_MODE_CBC)
   1269          #if defined(MBEDTLS_MD_CAN_SHA256)
   1270              { MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256, "TLS-RSA-PSK-WITH-AES-128-CBC-SHA256",
   1271                MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA_PSK,
   1272                0,
   1273                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1274          #endif /* MBEDTLS_MD_CAN_SHA256 */
   1275          
   1276          #if defined(MBEDTLS_MD_CAN_SHA384)
   1277              { MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384, "TLS-RSA-PSK-WITH-AES-256-CBC-SHA384",
   1278                MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_RSA_PSK,
   1279                0,
   1280                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1281          #endif /* MBEDTLS_MD_CAN_SHA384 */
   1282          
   1283          #if defined(MBEDTLS_MD_CAN_SHA1)
   1284              { MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA, "TLS-RSA-PSK-WITH-AES-128-CBC-SHA",
   1285                MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_RSA_PSK,
   1286                0,
   1287                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1288          
   1289              { MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA, "TLS-RSA-PSK-WITH-AES-256-CBC-SHA",
   1290                MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_RSA_PSK,
   1291                0,
   1292                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1293          #endif /* MBEDTLS_MD_CAN_SHA1 */
   1294          #endif /* MBEDTLS_CIPHER_MODE_CBC */
   1295          #endif /* MBEDTLS_AES_C */
   1296          
   1297          #if defined(MBEDTLS_CAMELLIA_C)
   1298          #if defined(MBEDTLS_CIPHER_MODE_CBC)
   1299          #if defined(MBEDTLS_MD_CAN_SHA256)
   1300              { MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256, "TLS-RSA-PSK-WITH-CAMELLIA-128-CBC-SHA256",
   1301                MBEDTLS_CIPHER_CAMELLIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA_PSK,
   1302                0,
   1303                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1304          #endif /* MBEDTLS_MD_CAN_SHA256 */
   1305          
   1306          #if defined(MBEDTLS_MD_CAN_SHA384)
   1307              { MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384, "TLS-RSA-PSK-WITH-CAMELLIA-256-CBC-SHA384",
   1308                MBEDTLS_CIPHER_CAMELLIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_RSA_PSK,
   1309                0,
   1310                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1311          #endif /* MBEDTLS_MD_CAN_SHA384 */
   1312          #endif /* MBEDTLS_CIPHER_MODE_CBC */
   1313          
   1314          #if defined(MBEDTLS_GCM_C)
   1315          #if defined(MBEDTLS_MD_CAN_SHA256)
   1316              { MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256, "TLS-RSA-PSK-WITH-CAMELLIA-128-GCM-SHA256",
   1317                MBEDTLS_CIPHER_CAMELLIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA_PSK,
   1318                0,
   1319                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1320          #endif /* MBEDTLS_MD_CAN_SHA256 */
   1321          
   1322          #if defined(MBEDTLS_MD_CAN_SHA384)
   1323              { MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384, "TLS-RSA-PSK-WITH-CAMELLIA-256-GCM-SHA384",
   1324                MBEDTLS_CIPHER_CAMELLIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_RSA_PSK,
   1325                0,
   1326                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1327          #endif /* MBEDTLS_MD_CAN_SHA384 */
   1328          #endif /* MBEDTLS_GCM_C */
   1329          #endif /* MBEDTLS_CAMELLIA_C */
   1330          
   1331          #endif /* MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED */
   1332          
   1333          #if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
   1334          #if defined(MBEDTLS_AES_C)
   1335          #if defined(MBEDTLS_CCM_C)
   1336              { MBEDTLS_TLS_ECJPAKE_WITH_AES_128_CCM_8, "TLS-ECJPAKE-WITH-AES-128-CCM-8",
   1337                MBEDTLS_CIPHER_AES_128_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECJPAKE,
   1338                MBEDTLS_CIPHERSUITE_SHORT_TAG,
   1339                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1340          #endif /* MBEDTLS_CCM_C */
   1341          #endif /* MBEDTLS_AES_C */
   1342          #endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */
   1343          
   1344          #if defined(MBEDTLS_CIPHER_NULL_CIPHER)
   1345          #if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)
   1346          #if defined(MBEDTLS_MD_CAN_MD5)
   1347              { MBEDTLS_TLS_RSA_WITH_NULL_MD5, "TLS-RSA-WITH-NULL-MD5",
   1348                MBEDTLS_CIPHER_NULL, MBEDTLS_MD_MD5, MBEDTLS_KEY_EXCHANGE_RSA,
   1349                MBEDTLS_CIPHERSUITE_WEAK,
   1350                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1351          #endif
   1352          
   1353          #if defined(MBEDTLS_MD_CAN_SHA1)
   1354              { MBEDTLS_TLS_RSA_WITH_NULL_SHA, "TLS-RSA-WITH-NULL-SHA",
   1355                MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_RSA,
   1356                MBEDTLS_CIPHERSUITE_WEAK,
   1357                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1358          #endif
   1359          
   1360          #if defined(MBEDTLS_MD_CAN_SHA256)
   1361              { MBEDTLS_TLS_RSA_WITH_NULL_SHA256, "TLS-RSA-WITH-NULL-SHA256",
   1362                MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA,
   1363                MBEDTLS_CIPHERSUITE_WEAK,
   1364                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1365          #endif
   1366          #endif /* MBEDTLS_KEY_EXCHANGE_RSA_ENABLED */
   1367          
   1368          #if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED)
   1369          #if defined(MBEDTLS_MD_CAN_SHA1)
   1370              { MBEDTLS_TLS_PSK_WITH_NULL_SHA, "TLS-PSK-WITH-NULL-SHA",
   1371                MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_PSK,
   1372                MBEDTLS_CIPHERSUITE_WEAK,
   1373                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1374          #endif /* MBEDTLS_MD_CAN_SHA1 */
   1375          
   1376          #if defined(MBEDTLS_MD_CAN_SHA256)
   1377              { MBEDTLS_TLS_PSK_WITH_NULL_SHA256, "TLS-PSK-WITH-NULL-SHA256",
   1378                MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_PSK,
   1379                MBEDTLS_CIPHERSUITE_WEAK,
   1380                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1381          #endif
   1382          
   1383          #if defined(MBEDTLS_MD_CAN_SHA384)
   1384              { MBEDTLS_TLS_PSK_WITH_NULL_SHA384, "TLS-PSK-WITH-NULL-SHA384",
   1385                MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_PSK,
   1386                MBEDTLS_CIPHERSUITE_WEAK,
   1387                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1388          #endif /* MBEDTLS_MD_CAN_SHA384 */
   1389          #endif /* MBEDTLS_KEY_EXCHANGE_PSK_ENABLED */
   1390          
   1391          #if defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)
   1392          #if defined(MBEDTLS_MD_CAN_SHA1)
   1393              { MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA, "TLS-DHE-PSK-WITH-NULL-SHA",
   1394                MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_DHE_PSK,
   1395                MBEDTLS_CIPHERSUITE_WEAK,
   1396                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1397          #endif /* MBEDTLS_MD_CAN_SHA1 */
   1398          
   1399          #if defined(MBEDTLS_MD_CAN_SHA256)
   1400              { MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA256, "TLS-DHE-PSK-WITH-NULL-SHA256",
   1401                MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_PSK,
   1402                MBEDTLS_CIPHERSUITE_WEAK,
   1403                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1404          #endif
   1405          
   1406          #if defined(MBEDTLS_MD_CAN_SHA384)
   1407              { MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA384, "TLS-DHE-PSK-WITH-NULL-SHA384",
   1408                MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_DHE_PSK,
   1409                MBEDTLS_CIPHERSUITE_WEAK,
   1410                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1411          #endif /* MBEDTLS_MD_CAN_SHA384 */
   1412          #endif /* MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */
   1413          
   1414          #if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED)
   1415          #if defined(MBEDTLS_MD_CAN_SHA1)
   1416              { MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA, "TLS-ECDHE-PSK-WITH-NULL-SHA",
   1417                MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDHE_PSK,
   1418                MBEDTLS_CIPHERSUITE_WEAK,
   1419                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1420          #endif /* MBEDTLS_MD_CAN_SHA1 */
   1421          
   1422          #if defined(MBEDTLS_MD_CAN_SHA256)
   1423              { MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA256, "TLS-ECDHE-PSK-WITH-NULL-SHA256",
   1424                MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_PSK,
   1425                MBEDTLS_CIPHERSUITE_WEAK,
   1426                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1427          #endif
   1428          
   1429          #if defined(MBEDTLS_MD_CAN_SHA384)
   1430              { MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA384, "TLS-ECDHE-PSK-WITH-NULL-SHA384",
   1431                MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_PSK,
   1432                MBEDTLS_CIPHERSUITE_WEAK,
   1433                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1434          #endif /* MBEDTLS_MD_CAN_SHA384 */
   1435          #endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED */
   1436          
   1437          #if defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)
   1438          #if defined(MBEDTLS_MD_CAN_SHA1)
   1439              { MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA, "TLS-RSA-PSK-WITH-NULL-SHA",
   1440                MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_RSA_PSK,
   1441                MBEDTLS_CIPHERSUITE_WEAK,
   1442                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1443          #endif /* MBEDTLS_MD_CAN_SHA1 */
   1444          
   1445          #if defined(MBEDTLS_MD_CAN_SHA256)
   1446              { MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA256, "TLS-RSA-PSK-WITH-NULL-SHA256",
   1447                MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA_PSK,
   1448                MBEDTLS_CIPHERSUITE_WEAK,
   1449                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1450          #endif
   1451          
   1452          #if defined(MBEDTLS_MD_CAN_SHA384)
   1453              { MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA384, "TLS-RSA-PSK-WITH-NULL-SHA384",
   1454                MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_RSA_PSK,
   1455                MBEDTLS_CIPHERSUITE_WEAK,
   1456                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1457          #endif /* MBEDTLS_MD_CAN_SHA384 */
   1458          #endif /* MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED */
   1459          #endif /* MBEDTLS_CIPHER_NULL_CIPHER */
   1460          
   1461          #if defined(MBEDTLS_ARIA_C)
   1462          
   1463          #if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)
   1464          
   1465          #if (defined(MBEDTLS_GCM_C) && defined(MBEDTLS_MD_CAN_SHA384))
   1466              { MBEDTLS_TLS_RSA_WITH_ARIA_256_GCM_SHA384,
   1467                "TLS-RSA-WITH-ARIA-256-GCM-SHA384",
   1468                MBEDTLS_CIPHER_ARIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_RSA,
   1469                0,
   1470                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1471          #endif
   1472          #if (defined(MBEDTLS_CIPHER_MODE_CBC) && \
   1473              defined(MBEDTLS_MD_CAN_SHA384))
   1474              { MBEDTLS_TLS_RSA_WITH_ARIA_256_CBC_SHA384,
   1475                "TLS-RSA-WITH-ARIA-256-CBC-SHA384",
   1476                MBEDTLS_CIPHER_ARIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_RSA,
   1477                0,
   1478                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1479          #endif
   1480          #if (defined(MBEDTLS_GCM_C) && defined(MBEDTLS_MD_CAN_SHA256))
   1481              { MBEDTLS_TLS_RSA_WITH_ARIA_128_GCM_SHA256,
   1482                "TLS-RSA-WITH-ARIA-128-GCM-SHA256",
   1483                MBEDTLS_CIPHER_ARIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA,
   1484                0,
   1485                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1486          #endif
   1487          #if (defined(MBEDTLS_CIPHER_MODE_CBC) && \
   1488              defined(MBEDTLS_MD_CAN_SHA256))
   1489              { MBEDTLS_TLS_RSA_WITH_ARIA_128_CBC_SHA256,
   1490                "TLS-RSA-WITH-ARIA-128-CBC-SHA256",
   1491                MBEDTLS_CIPHER_ARIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA,
   1492                0,
   1493                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1494          #endif
   1495          
   1496          #endif /* MBEDTLS_KEY_EXCHANGE_RSA_ENABLED */
   1497          
   1498          #if defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)
   1499          
   1500          #if (defined(MBEDTLS_GCM_C) && defined(MBEDTLS_MD_CAN_SHA384))
   1501              { MBEDTLS_TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384,
   1502                "TLS-RSA-PSK-WITH-ARIA-256-GCM-SHA384",
   1503                MBEDTLS_CIPHER_ARIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_RSA_PSK,
   1504                0,
   1505                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1506          #endif
   1507          #if (defined(MBEDTLS_CIPHER_MODE_CBC) && \
   1508              defined(MBEDTLS_MD_CAN_SHA384))
   1509              { MBEDTLS_TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384,
   1510                "TLS-RSA-PSK-WITH-ARIA-256-CBC-SHA384",
   1511                MBEDTLS_CIPHER_ARIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_RSA_PSK,
   1512                0,
   1513                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1514          #endif
   1515          #if (defined(MBEDTLS_GCM_C) && defined(MBEDTLS_MD_CAN_SHA256))
   1516              { MBEDTLS_TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256,
   1517                "TLS-RSA-PSK-WITH-ARIA-128-GCM-SHA256",
   1518                MBEDTLS_CIPHER_ARIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA_PSK,
   1519                0,
   1520                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1521          #endif
   1522          #if (defined(MBEDTLS_CIPHER_MODE_CBC) && \
   1523              defined(MBEDTLS_MD_CAN_SHA256))
   1524              { MBEDTLS_TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256,
   1525                "TLS-RSA-PSK-WITH-ARIA-128-CBC-SHA256",
   1526                MBEDTLS_CIPHER_ARIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA_PSK,
   1527                0,
   1528                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1529          #endif
   1530          
   1531          #endif /* MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED */
   1532          
   1533          #if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED)
   1534          
   1535          #if (defined(MBEDTLS_GCM_C) && defined(MBEDTLS_MD_CAN_SHA384))
   1536              { MBEDTLS_TLS_PSK_WITH_ARIA_256_GCM_SHA384,
   1537                "TLS-PSK-WITH-ARIA-256-GCM-SHA384",
   1538                MBEDTLS_CIPHER_ARIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_PSK,
   1539                0,
   1540                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1541          #endif
   1542          #if (defined(MBEDTLS_CIPHER_MODE_CBC) && \
   1543              defined(MBEDTLS_MD_CAN_SHA384))
   1544              { MBEDTLS_TLS_PSK_WITH_ARIA_256_CBC_SHA384,
   1545                "TLS-PSK-WITH-ARIA-256-CBC-SHA384",
   1546                MBEDTLS_CIPHER_ARIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_PSK,
   1547                0,
   1548                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1549          #endif
   1550          #if (defined(MBEDTLS_GCM_C) && defined(MBEDTLS_MD_CAN_SHA256))
   1551              { MBEDTLS_TLS_PSK_WITH_ARIA_128_GCM_SHA256,
   1552                "TLS-PSK-WITH-ARIA-128-GCM-SHA256",
   1553                MBEDTLS_CIPHER_ARIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_PSK,
   1554                0,
   1555                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1556          #endif
   1557          #if (defined(MBEDTLS_CIPHER_MODE_CBC) && \
   1558              defined(MBEDTLS_MD_CAN_SHA256))
   1559              { MBEDTLS_TLS_PSK_WITH_ARIA_128_CBC_SHA256,
   1560                "TLS-PSK-WITH-ARIA-128-CBC-SHA256",
   1561                MBEDTLS_CIPHER_ARIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_PSK,
   1562                0,
   1563                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1564          #endif
   1565          
   1566          #endif /* MBEDTLS_KEY_EXCHANGE_PSK_ENABLED */
   1567          
   1568          #if defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED)
   1569          
   1570          #if (defined(MBEDTLS_GCM_C) && defined(MBEDTLS_MD_CAN_SHA384))
   1571              { MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384,
   1572                "TLS-ECDH-RSA-WITH-ARIA-256-GCM-SHA384",
   1573                MBEDTLS_CIPHER_ARIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,
   1574                0,
   1575                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1576          #endif
   1577          #if (defined(MBEDTLS_CIPHER_MODE_CBC) && \
   1578              defined(MBEDTLS_MD_CAN_SHA384))
   1579              { MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384,
   1580                "TLS-ECDH-RSA-WITH-ARIA-256-CBC-SHA384",
   1581                MBEDTLS_CIPHER_ARIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,
   1582                0,
   1583                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1584          #endif
   1585          #if (defined(MBEDTLS_GCM_C) && defined(MBEDTLS_MD_CAN_SHA256))
   1586              { MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256,
   1587                "TLS-ECDH-RSA-WITH-ARIA-128-GCM-SHA256",
   1588                MBEDTLS_CIPHER_ARIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,
   1589                0,
   1590                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1591          #endif
   1592          #if (defined(MBEDTLS_CIPHER_MODE_CBC) && \
   1593              defined(MBEDTLS_MD_CAN_SHA256))
   1594              { MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256,
   1595                "TLS-ECDH-RSA-WITH-ARIA-128-CBC-SHA256",
   1596                MBEDTLS_CIPHER_ARIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,
   1597                0,
   1598                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1599          #endif
   1600          
   1601          #endif /* MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED */
   1602          
   1603          #if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED)
   1604          
   1605          #if (defined(MBEDTLS_GCM_C) && defined(MBEDTLS_MD_CAN_SHA384))
   1606              { MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384,
   1607                "TLS-ECDHE-RSA-WITH-ARIA-256-GCM-SHA384",
   1608                MBEDTLS_CIPHER_ARIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,
   1609                0,
   1610                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1611          #endif
   1612          #if (defined(MBEDTLS_CIPHER_MODE_CBC) && \
   1613              defined(MBEDTLS_MD_CAN_SHA384))
   1614              { MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384,
   1615                "TLS-ECDHE-RSA-WITH-ARIA-256-CBC-SHA384",
   1616                MBEDTLS_CIPHER_ARIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,
   1617                0,
   1618                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1619          #endif
   1620          #if (defined(MBEDTLS_GCM_C) && defined(MBEDTLS_MD_CAN_SHA256))
   1621              { MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256,
   1622                "TLS-ECDHE-RSA-WITH-ARIA-128-GCM-SHA256",
   1623                MBEDTLS_CIPHER_ARIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,
   1624                0,
   1625                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1626          #endif
   1627          #if (defined(MBEDTLS_CIPHER_MODE_CBC) && \
   1628              defined(MBEDTLS_MD_CAN_SHA256))
   1629              { MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256,
   1630                "TLS-ECDHE-RSA-WITH-ARIA-128-CBC-SHA256",
   1631                MBEDTLS_CIPHER_ARIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,
   1632                0,
   1633                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1634          #endif
   1635          
   1636          #endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED */
   1637          
   1638          #if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED)
   1639          
   1640          #if (defined(MBEDTLS_CIPHER_MODE_CBC) && \
   1641              defined(MBEDTLS_MD_CAN_SHA384))
   1642              { MBEDTLS_TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384,
   1643                "TLS-ECDHE-PSK-WITH-ARIA-256-CBC-SHA384",
   1644                MBEDTLS_CIPHER_ARIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_PSK,
   1645                0,
   1646                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1647          #endif
   1648          #if (defined(MBEDTLS_CIPHER_MODE_CBC) && \
   1649              defined(MBEDTLS_MD_CAN_SHA256))
   1650              { MBEDTLS_TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256,
   1651                "TLS-ECDHE-PSK-WITH-ARIA-128-CBC-SHA256",
   1652                MBEDTLS_CIPHER_ARIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_PSK,
   1653                0,
   1654                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1655          #endif
   1656          
   1657          #endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED */
   1658          
   1659          #if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)
   1660          
   1661          #if (defined(MBEDTLS_GCM_C) && defined(MBEDTLS_MD_CAN_SHA384))
   1662              { MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384,
   1663                "TLS-ECDHE-ECDSA-WITH-ARIA-256-GCM-SHA384",
   1664                MBEDTLS_CIPHER_ARIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,
   1665                0,
   1666                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1667          #endif
   1668          #if (defined(MBEDTLS_CIPHER_MODE_CBC) && \
   1669              defined(MBEDTLS_MD_CAN_SHA384))
   1670              { MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384,
   1671                "TLS-ECDHE-ECDSA-WITH-ARIA-256-CBC-SHA384",
   1672                MBEDTLS_CIPHER_ARIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,
   1673                0,
   1674                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1675          #endif
   1676          #if (defined(MBEDTLS_GCM_C) && defined(MBEDTLS_MD_CAN_SHA256))
   1677              { MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256,
   1678                "TLS-ECDHE-ECDSA-WITH-ARIA-128-GCM-SHA256",
   1679                MBEDTLS_CIPHER_ARIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,
   1680                0,
   1681                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1682          #endif
   1683          #if (defined(MBEDTLS_CIPHER_MODE_CBC) && \
   1684              defined(MBEDTLS_MD_CAN_SHA256))
   1685              { MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256,
   1686                "TLS-ECDHE-ECDSA-WITH-ARIA-128-CBC-SHA256",
   1687                MBEDTLS_CIPHER_ARIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,
   1688                0,
   1689                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1690          #endif
   1691          
   1692          #endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED */
   1693          
   1694          #if defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)
   1695          
   1696          #if (defined(MBEDTLS_GCM_C) && defined(MBEDTLS_MD_CAN_SHA384))
   1697              { MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384,
   1698                "TLS-ECDH-ECDSA-WITH-ARIA-256-GCM-SHA384",
   1699                MBEDTLS_CIPHER_ARIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,
   1700                0,
   1701                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1702          #endif
   1703          #if (defined(MBEDTLS_CIPHER_MODE_CBC) && \
   1704              defined(MBEDTLS_MD_CAN_SHA384))
   1705              { MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384,
   1706                "TLS-ECDH-ECDSA-WITH-ARIA-256-CBC-SHA384",
   1707                MBEDTLS_CIPHER_ARIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,
   1708                0,
   1709                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1710          #endif
   1711          #if (defined(MBEDTLS_GCM_C) && defined(MBEDTLS_MD_CAN_SHA256))
   1712              { MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256,
   1713                "TLS-ECDH-ECDSA-WITH-ARIA-128-GCM-SHA256",
   1714                MBEDTLS_CIPHER_ARIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,
   1715                0,
   1716                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1717          #endif
   1718          #if (defined(MBEDTLS_CIPHER_MODE_CBC) && \
   1719              defined(MBEDTLS_MD_CAN_SHA256))
   1720              { MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256,
   1721                "TLS-ECDH-ECDSA-WITH-ARIA-128-CBC-SHA256",
   1722                MBEDTLS_CIPHER_ARIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,
   1723                0,
   1724                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1725          #endif
   1726          
   1727          #endif /* MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */
   1728          
   1729          #if defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)
   1730          
   1731          #if (defined(MBEDTLS_GCM_C) && defined(MBEDTLS_MD_CAN_SHA384))
   1732              { MBEDTLS_TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384,
   1733                "TLS-DHE-RSA-WITH-ARIA-256-GCM-SHA384",
   1734                MBEDTLS_CIPHER_ARIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_DHE_RSA,
   1735                0,
   1736                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1737          #endif
   1738          #if (defined(MBEDTLS_CIPHER_MODE_CBC) && \
   1739              defined(MBEDTLS_MD_CAN_SHA384))
   1740              { MBEDTLS_TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384,
   1741                "TLS-DHE-RSA-WITH-ARIA-256-CBC-SHA384",
   1742                MBEDTLS_CIPHER_ARIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_DHE_RSA,
   1743                0,
   1744                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1745          #endif
   1746          #if (defined(MBEDTLS_GCM_C) && defined(MBEDTLS_MD_CAN_SHA256))
   1747              { MBEDTLS_TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256,
   1748                "TLS-DHE-RSA-WITH-ARIA-128-GCM-SHA256",
   1749                MBEDTLS_CIPHER_ARIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_RSA,
   1750                0,
   1751                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1752          #endif
   1753          #if (defined(MBEDTLS_CIPHER_MODE_CBC) && \
   1754              defined(MBEDTLS_MD_CAN_SHA256))
   1755              { MBEDTLS_TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256,
   1756                "TLS-DHE-RSA-WITH-ARIA-128-CBC-SHA256",
   1757                MBEDTLS_CIPHER_ARIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_RSA,
   1758                0,
   1759                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1760          #endif
   1761          
   1762          #endif /* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED */
   1763          
   1764          #if defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)
   1765          
   1766          #if (defined(MBEDTLS_GCM_C) && defined(MBEDTLS_MD_CAN_SHA384))
   1767              { MBEDTLS_TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384,
   1768                "TLS-DHE-PSK-WITH-ARIA-256-GCM-SHA384",
   1769                MBEDTLS_CIPHER_ARIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_DHE_PSK,
   1770                0,
   1771                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1772          #endif
   1773          #if (defined(MBEDTLS_CIPHER_MODE_CBC) && \
   1774              defined(MBEDTLS_MD_CAN_SHA384))
   1775              { MBEDTLS_TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384,
   1776                "TLS-DHE-PSK-WITH-ARIA-256-CBC-SHA384",
   1777                MBEDTLS_CIPHER_ARIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_DHE_PSK,
   1778                0,
   1779                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1780          #endif
   1781          #if (defined(MBEDTLS_GCM_C) && defined(MBEDTLS_MD_CAN_SHA256))
   1782              { MBEDTLS_TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256,
   1783                "TLS-DHE-PSK-WITH-ARIA-128-GCM-SHA256",
   1784                MBEDTLS_CIPHER_ARIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_PSK,
   1785                0,
   1786                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1787          #endif
   1788          #if (defined(MBEDTLS_CIPHER_MODE_CBC) && \
   1789              defined(MBEDTLS_MD_CAN_SHA256))
   1790              { MBEDTLS_TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256,
   1791                "TLS-DHE-PSK-WITH-ARIA-128-CBC-SHA256",
   1792                MBEDTLS_CIPHER_ARIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_PSK,
   1793                0,
   1794                MBEDTLS_SSL_VERSION_TLS1_2, MBEDTLS_SSL_VERSION_TLS1_2 },
   1795          #endif
   1796          
   1797          #endif /* MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */
   1798          
   1799          #endif /* MBEDTLS_ARIA_C */
   1800          
   1801          
   1802              { 0, "",
   1803                MBEDTLS_CIPHER_NONE, MBEDTLS_MD_NONE, MBEDTLS_KEY_EXCHANGE_NONE,
   1804                0, 0, 0 }
   1805          };
   1806          
   1807          #if defined(MBEDTLS_SSL_CIPHERSUITES)

   \                                 In section .text, align 2, keep-with-next
   1808          const int *mbedtls_ssl_list_ciphersuites(void)
   1809          {
   1810              return ciphersuite_preference;
   \                     mbedtls_ssl_list_ciphersuites: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable5
   \        0x2   0x4770             BX       LR
   1811          }
   1812          #else
   1813          #define MAX_CIPHERSUITES    sizeof(ciphersuite_definitions) /         \
   1814              sizeof(ciphersuite_definitions[0])
   1815          static int supported_ciphersuites[MAX_CIPHERSUITES];
   1816          static int supported_init = 0;
   1817          
   1818          MBEDTLS_CHECK_RETURN_CRITICAL
   1819          static int ciphersuite_is_removed(const mbedtls_ssl_ciphersuite_t *cs_info)
   1820          {
   1821              (void) cs_info;
   1822          
   1823              return 0;
   1824          }
   1825          
   1826          const int *mbedtls_ssl_list_ciphersuites(void)
   1827          {
   1828              /*
   1829               * On initial call filter out all ciphersuites not supported by current
   1830               * build based on presence in the ciphersuite_definitions.
   1831               */
   1832              if (supported_init == 0) {
   1833                  const int *p;
   1834                  int *q;
   1835          
   1836                  for (p = ciphersuite_preference, q = supported_ciphersuites;
   1837                       *p != 0 && q < supported_ciphersuites + MAX_CIPHERSUITES - 1;
   1838                       p++) {
   1839                      const mbedtls_ssl_ciphersuite_t *cs_info;
   1840                      if ((cs_info = mbedtls_ssl_ciphersuite_from_id(*p)) != NULL &&
   1841                          !ciphersuite_is_removed(cs_info)) {
   1842                          *(q++) = *p;
   1843                      }
   1844                  }
   1845                  *q = 0;
   1846          
   1847                  supported_init = 1;
   1848              }
   1849          
   1850              return supported_ciphersuites;
   1851          }
   1852          #endif /* MBEDTLS_SSL_CIPHERSUITES */
   1853          

   \                                 In section .text, align 2, keep-with-next
   1854          const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_string(
   1855              const char *ciphersuite_name)
   1856          {
   \                     mbedtls_ssl_ciphersuite_from_string: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   1857              const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;
   \        0x4   0x....             LDR.N    R5,??DataTable5_1
   1858          
   1859              if (NULL == ciphersuite_name) {
   \        0x6   0x2C00             CMP      R4,#+0
   \        0x8   0xD101             BNE.N    ??mbedtls_ssl_ciphersuite_from_string_0
   1860                  return NULL;
   \        0xA   0x2000             MOVS     R0,#+0
   \        0xC   0xE00D             B.N      ??mbedtls_ssl_ciphersuite_from_string_1
   1861              }
   1862          
   1863              while (cur->id != 0) {
   \                     ??mbedtls_ssl_ciphersuite_from_string_0: (+1)
   \        0xE   0x6828             LDR      R0,[R5, #+0]
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD009             BEQ.N    ??mbedtls_ssl_ciphersuite_from_string_2
   1864                  if (0 == strcmp(cur->name, ciphersuite_name)) {
   \       0x14   0x0021             MOVS     R1,R4
   \       0x16   0x6868             LDR      R0,[R5, #+4]
   \       0x18   0x.... 0x....      BL       strcmp
   \       0x1C   0x2800             CMP      R0,#+0
   \       0x1E   0xD101             BNE.N    ??mbedtls_ssl_ciphersuite_from_string_3
   1865                      return cur;
   \       0x20   0x0028             MOVS     R0,R5
   \       0x22   0xE002             B.N      ??mbedtls_ssl_ciphersuite_from_string_1
   1866                  }
   1867          
   1868                  cur++;
   \                     ??mbedtls_ssl_ciphersuite_from_string_3: (+1)
   \       0x24   0x3510             ADDS     R5,R5,#+16
   \       0x26   0xE7F2             B.N      ??mbedtls_ssl_ciphersuite_from_string_0
   1869              }
   1870          
   1871              return NULL;
   \                     ??mbedtls_ssl_ciphersuite_from_string_2: (+1)
   \       0x28   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_ssl_ciphersuite_from_string_1: (+1)
   \       0x2A   0xBD32             POP      {R1,R4,R5,PC}
   1872          }
   1873          

   \                                 In section .text, align 2, keep-with-next
   1874          const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id(int ciphersuite)
   1875          {
   \                     mbedtls_ssl_ciphersuite_from_id: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   1876              const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;
   \        0x2   0x....             LDR.N    R2,??DataTable5_1
   1877          
   1878              while (cur->id != 0) {
   \                     ??mbedtls_ssl_ciphersuite_from_id_0: (+1)
   \        0x4   0x6810             LDR      R0,[R2, #+0]
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD006             BEQ.N    ??mbedtls_ssl_ciphersuite_from_id_1
   1879                  if (cur->id == ciphersuite) {
   \        0xA   0x6810             LDR      R0,[R2, #+0]
   \        0xC   0x4288             CMP      R0,R1
   \        0xE   0xD101             BNE.N    ??mbedtls_ssl_ciphersuite_from_id_2
   1880                      return cur;
   \       0x10   0x0010             MOVS     R0,R2
   \       0x12   0xE002             B.N      ??mbedtls_ssl_ciphersuite_from_id_3
   1881                  }
   1882          
   1883                  cur++;
   \                     ??mbedtls_ssl_ciphersuite_from_id_2: (+1)
   \       0x14   0x3210             ADDS     R2,R2,#+16
   \       0x16   0xE7F5             B.N      ??mbedtls_ssl_ciphersuite_from_id_0
   1884              }
   1885          
   1886              return NULL;
   \                     ??mbedtls_ssl_ciphersuite_from_id_1: (+1)
   \       0x18   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_ssl_ciphersuite_from_id_3: (+1)
   \       0x1A   0x4770             BX       LR
   1887          }
   1888          

   \                                 In section .text, align 2, keep-with-next
   1889          const char *mbedtls_ssl_get_ciphersuite_name(const int ciphersuite_id)
   1890          {
   \                     mbedtls_ssl_get_ciphersuite_name: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
   1891              const mbedtls_ssl_ciphersuite_t *cur;
   1892          
   1893              cur = mbedtls_ssl_ciphersuite_from_id(ciphersuite_id);
   \        0x4   0x0020             MOVS     R0,R4
   \        0x6   0x.... 0x....      BL       mbedtls_ssl_ciphersuite_from_id
   \        0xA   0x0001             MOVS     R1,R0
   1894          
   1895              if (cur == NULL) {
   \        0xC   0x2900             CMP      R1,#+0
   \        0xE   0xD101             BNE.N    ??mbedtls_ssl_get_ciphersuite_name_0
   1896                  return "unknown";
   \       0x10   0x....             LDR.N    R0,??DataTable5_2
   \       0x12   0xE000             B.N      ??mbedtls_ssl_get_ciphersuite_name_1
   1897              }
   1898          
   1899              return cur->name;
   \                     ??mbedtls_ssl_get_ciphersuite_name_0: (+1)
   \       0x14   0x6848             LDR      R0,[R1, #+4]
   \                     ??mbedtls_ssl_get_ciphersuite_name_1: (+1)
   \       0x16   0xBD10             POP      {R4,PC}
   1900          }
   1901          

   \                                 In section .text, align 2, keep-with-next
   1902          int mbedtls_ssl_get_ciphersuite_id(const char *ciphersuite_name)
   1903          {
   \                     mbedtls_ssl_get_ciphersuite_id: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
   1904              const mbedtls_ssl_ciphersuite_t *cur;
   1905          
   1906              cur = mbedtls_ssl_ciphersuite_from_string(ciphersuite_name);
   \        0x4   0x0020             MOVS     R0,R4
   \        0x6   0x.... 0x....      BL       mbedtls_ssl_ciphersuite_from_string
   \        0xA   0x0001             MOVS     R1,R0
   1907          
   1908              if (cur == NULL) {
   \        0xC   0x2900             CMP      R1,#+0
   \        0xE   0xD101             BNE.N    ??mbedtls_ssl_get_ciphersuite_id_0
   1909                  return 0;
   \       0x10   0x2000             MOVS     R0,#+0
   \       0x12   0xE000             B.N      ??mbedtls_ssl_get_ciphersuite_id_1
   1910              }
   1911          
   1912              return cur->id;
   \                     ??mbedtls_ssl_get_ciphersuite_id_0: (+1)
   \       0x14   0x6808             LDR      R0,[R1, #+0]
   \                     ??mbedtls_ssl_get_ciphersuite_id_1: (+1)
   \       0x16   0xBD10             POP      {R4,PC}
   1913          }
   1914          

   \                                 In section .text, align 2, keep-with-next
   1915          size_t mbedtls_ssl_ciphersuite_get_cipher_key_bitlen(const mbedtls_ssl_ciphersuite_t *info)
   1916          {
   \                     mbedtls_ssl_ciphersuite_get_cipher_key_bitlen: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0xB084             SUB      SP,SP,#+16
   \        0x4   0x0004             MOVS     R4,R0
   1917          #if defined(MBEDTLS_USE_PSA_CRYPTO)
   1918              psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;
   \        0x6   0xF07F 0x0596      MVNS     R5,#+150
   1919              psa_key_type_t key_type;
   1920              psa_algorithm_t alg;
   1921              size_t key_bits;
   1922          
   1923              status = mbedtls_ssl_cipher_to_psa((mbedtls_cipher_type_t)info->cipher,
   1924                                                 info->flags & MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16,
   1925                                                 &alg, &key_type, &key_bits);
   \        0xA   0x7AE0             LDRB     R0,[R4, #+11]
   \        0xC   0x0780             LSLS     R0,R0,#+30
   \        0xE   0xD501             BPL.N    ??mbedtls_ssl_ciphersuite_get_cipher_key_bitlen_0
   \       0x10   0x2108             MOVS     R1,#+8
   \       0x12   0xE000             B.N      ??mbedtls_ssl_ciphersuite_get_cipher_key_bitlen_1
   \                     ??mbedtls_ssl_ciphersuite_get_cipher_key_bitlen_0: (+1)
   \       0x14   0x2110             MOVS     R1,#+16
   \                     ??mbedtls_ssl_ciphersuite_get_cipher_key_bitlen_1: (+1)
   \       0x16   0xA802             ADD      R0,SP,#+8
   \       0x18   0x9000             STR      R0,[SP, #+0]
   \       0x1A   0xAB01             ADD      R3,SP,#+4
   \       0x1C   0xAA03             ADD      R2,SP,#+12
   \       0x1E   0x7A20             LDRB     R0,[R4, #+8]
   \       0x20   0x.... 0x....      BL       mbedtls_ssl_cipher_to_psa
   \       0x24   0x0001             MOVS     R1,R0
   1926          
   1927              if (status != PSA_SUCCESS) {
   \       0x26   0x2900             CMP      R1,#+0
   \       0x28   0xD001             BEQ.N    ??mbedtls_ssl_ciphersuite_get_cipher_key_bitlen_2
   1928                  return 0;
   \       0x2A   0x2000             MOVS     R0,#+0
   \       0x2C   0xE000             B.N      ??mbedtls_ssl_ciphersuite_get_cipher_key_bitlen_3
   1929              }
   1930          
   1931              return key_bits;
   \                     ??mbedtls_ssl_ciphersuite_get_cipher_key_bitlen_2: (+1)
   \       0x2E   0x9802             LDR      R0,[SP, #+8]
   \                     ??mbedtls_ssl_ciphersuite_get_cipher_key_bitlen_3: (+1)
   \       0x30   0xB005             ADD      SP,SP,#+20
   \       0x32   0xBD30             POP      {R4,R5,PC}
   1932          #else
   1933              const mbedtls_cipher_info_t * const cipher_info =
   1934                  mbedtls_cipher_info_from_type((mbedtls_cipher_type_t) info->cipher);
   1935          
   1936              return mbedtls_cipher_info_get_key_bitlen(cipher_info);
   1937          #endif /* MBEDTLS_USE_PSA_CRYPTO */
   1938          }
   1939          
   1940          #if defined(MBEDTLS_PK_C)

   \                                 In section .text, align 2, keep-with-next
   1941          mbedtls_pk_type_t mbedtls_ssl_get_ciphersuite_sig_pk_alg(const mbedtls_ssl_ciphersuite_t *info)
   1942          {
   \                     mbedtls_ssl_get_ciphersuite_sig_pk_alg: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   1943              switch (info->key_exchange) {
   \        0x2   0x7A8A             LDRB     R2,[R1, #+10]
   \        0x4   0x1E52             SUBS     R2,R2,#+1
   \        0x6   0x2A02             CMP      R2,#+2
   \        0x8   0xD907             BLS.N    ??mbedtls_ssl_get_ciphersuite_sig_pk_alg_0
   \        0xA   0x1ED2             SUBS     R2,R2,#+3
   \        0xC   0xD007             BEQ.N    ??mbedtls_ssl_get_ciphersuite_sig_pk_alg_1
   \        0xE   0x1ED2             SUBS     R2,R2,#+3
   \       0x10   0xD003             BEQ.N    ??mbedtls_ssl_get_ciphersuite_sig_pk_alg_0
   \       0x12   0x1E92             SUBS     R2,R2,#+2
   \       0x14   0x2A01             CMP      R2,#+1
   \       0x16   0xD904             BLS.N    ??mbedtls_ssl_get_ciphersuite_sig_pk_alg_2
   \       0x18   0xE005             B.N      ??mbedtls_ssl_get_ciphersuite_sig_pk_alg_3
   1944                  case MBEDTLS_KEY_EXCHANGE_RSA:
   1945                  case MBEDTLS_KEY_EXCHANGE_DHE_RSA:
   1946                  case MBEDTLS_KEY_EXCHANGE_ECDHE_RSA:
   1947                  case MBEDTLS_KEY_EXCHANGE_RSA_PSK:
   1948                      return MBEDTLS_PK_RSA;
   \                     ??mbedtls_ssl_get_ciphersuite_sig_pk_alg_0: (+1)
   \       0x1A   0x2001             MOVS     R0,#+1
   \       0x1C   0xE004             B.N      ??mbedtls_ssl_get_ciphersuite_sig_pk_alg_4
   1949          
   1950                  case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:
   1951                      return MBEDTLS_PK_ECDSA;
   \                     ??mbedtls_ssl_get_ciphersuite_sig_pk_alg_1: (+1)
   \       0x1E   0x2004             MOVS     R0,#+4
   \       0x20   0xE002             B.N      ??mbedtls_ssl_get_ciphersuite_sig_pk_alg_4
   1952          
   1953                  case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
   1954                  case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
   1955                      return MBEDTLS_PK_ECKEY;
   \                     ??mbedtls_ssl_get_ciphersuite_sig_pk_alg_2: (+1)
   \       0x22   0x2002             MOVS     R0,#+2
   \       0x24   0xE000             B.N      ??mbedtls_ssl_get_ciphersuite_sig_pk_alg_4
   1956          
   1957                  default:
   1958                      return MBEDTLS_PK_NONE;
   \                     ??mbedtls_ssl_get_ciphersuite_sig_pk_alg_3: (+1)
   \       0x26   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_ssl_get_ciphersuite_sig_pk_alg_4: (+1)
   \       0x28   0x4770             BX       LR
   1959              }
   1960          }
   1961          
   1962          #if defined(MBEDTLS_USE_PSA_CRYPTO)

   \                                 In section .text, align 2, keep-with-next
   1963          psa_algorithm_t mbedtls_ssl_get_ciphersuite_sig_pk_psa_alg(const mbedtls_ssl_ciphersuite_t *info)
   1964          {
   \                     mbedtls_ssl_get_ciphersuite_sig_pk_psa_alg: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
   1965              switch (info->key_exchange) {
   \        0x4   0x7AA1             LDRB     R1,[R4, #+10]
   \        0x6   0x1E49             SUBS     R1,R1,#+1
   \        0x8   0xD00A             BEQ.N    ??mbedtls_ssl_get_ciphersuite_sig_pk_psa_alg_0
   \        0xA   0x1E49             SUBS     R1,R1,#+1
   \        0xC   0x2901             CMP      R1,#+1
   \        0xE   0xD909             BLS.N    ??mbedtls_ssl_get_ciphersuite_sig_pk_psa_alg_1
   \       0x10   0x1E89             SUBS     R1,R1,#+2
   \       0x12   0xD011             BEQ.N    ??mbedtls_ssl_get_ciphersuite_sig_pk_psa_alg_2
   \       0x14   0x1EC9             SUBS     R1,R1,#+3
   \       0x16   0xD003             BEQ.N    ??mbedtls_ssl_get_ciphersuite_sig_pk_psa_alg_0
   \       0x18   0x1E89             SUBS     R1,R1,#+2
   \       0x1A   0x2901             CMP      R1,#+1
   \       0x1C   0xD914             BLS.N    ??mbedtls_ssl_get_ciphersuite_sig_pk_psa_alg_3
   \       0x1E   0xE015             B.N      ??mbedtls_ssl_get_ciphersuite_sig_pk_psa_alg_4
   1966                  case MBEDTLS_KEY_EXCHANGE_RSA:
   1967                  case MBEDTLS_KEY_EXCHANGE_RSA_PSK:
   1968                      return PSA_ALG_RSA_PKCS1V15_CRYPT;
   \                     ??mbedtls_ssl_get_ciphersuite_sig_pk_psa_alg_0: (+1)
   \       0x20   0x....             LDR.N    R0,??DataTable5_3
   \       0x22   0xE014             B.N      ??mbedtls_ssl_get_ciphersuite_sig_pk_psa_alg_5
   1969                  case MBEDTLS_KEY_EXCHANGE_DHE_RSA:
   1970                  case MBEDTLS_KEY_EXCHANGE_ECDHE_RSA:
   1971                      return PSA_ALG_RSA_PKCS1V15_SIGN(
   1972                          mbedtls_md_psa_alg_from_type((mbedtls_md_type_t) info->mac));
   \                     ??mbedtls_ssl_get_ciphersuite_sig_pk_psa_alg_1: (+1)
   \       0x24   0x7A60             LDRB     R0,[R4, #+9]
   \       0x26   0x.... 0x....      BL       mbedtls_md_psa_alg_from_type
   \       0x2A   0xF000 0x00FF      AND      R0,R0,#0xFF
   \       0x2E   0xF040 0x60C0      ORR      R0,R0,#0x6000000
   \       0x32   0xF450 0x7000      ORRS     R0,R0,#0x200
   \       0x36   0xE00A             B.N      ??mbedtls_ssl_get_ciphersuite_sig_pk_psa_alg_5
   1973          
   1974                  case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:
   1975                      return PSA_ALG_ECDSA(mbedtls_md_psa_alg_from_type((mbedtls_md_type_t) info->mac));
   \                     ??mbedtls_ssl_get_ciphersuite_sig_pk_psa_alg_2: (+1)
   \       0x38   0x7A60             LDRB     R0,[R4, #+9]
   \       0x3A   0x.... 0x....      BL       mbedtls_md_psa_alg_from_type
   \       0x3E   0xF000 0x00FF      AND      R0,R0,#0xFF
   \       0x42   0xF050 0x2006      ORRS     R0,R0,#0x6000600
   \       0x46   0xE002             B.N      ??mbedtls_ssl_get_ciphersuite_sig_pk_psa_alg_5
   1976          
   1977                  case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
   1978                  case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
   1979                      return PSA_ALG_ECDH;
   \                     ??mbedtls_ssl_get_ciphersuite_sig_pk_psa_alg_3: (+1)
   \       0x48   0x....             LDR.N    R0,??DataTable5_4
   \       0x4A   0xE000             B.N      ??mbedtls_ssl_get_ciphersuite_sig_pk_psa_alg_5
   1980          
   1981                  default:
   1982                      return PSA_ALG_NONE;
   \                     ??mbedtls_ssl_get_ciphersuite_sig_pk_psa_alg_4: (+1)
   \       0x4C   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_ssl_get_ciphersuite_sig_pk_psa_alg_5: (+1)
   \       0x4E   0xBD10             POP      {R4,PC}
   1983              }
   1984          }
   1985          

   \                                 In section .text, align 2, keep-with-next
   1986          psa_key_usage_t mbedtls_ssl_get_ciphersuite_sig_pk_psa_usage(const mbedtls_ssl_ciphersuite_t *info)
   1987          {
   \                     mbedtls_ssl_get_ciphersuite_sig_pk_psa_usage: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   1988              switch (info->key_exchange) {
   \        0x2   0x7A8A             LDRB     R2,[R1, #+10]
   \        0x4   0x1E52             SUBS     R2,R2,#+1
   \        0x6   0xD008             BEQ.N    ??mbedtls_ssl_get_ciphersuite_sig_pk_psa_usage_0
   \        0x8   0x1E52             SUBS     R2,R2,#+1
   \        0xA   0x2A02             CMP      R2,#+2
   \        0xC   0xD908             BLS.N    ??mbedtls_ssl_get_ciphersuite_sig_pk_psa_usage_1
   \        0xE   0x1F52             SUBS     R2,R2,#+5
   \       0x10   0xD003             BEQ.N    ??mbedtls_ssl_get_ciphersuite_sig_pk_psa_usage_0
   \       0x12   0x1E92             SUBS     R2,R2,#+2
   \       0x14   0x2A01             CMP      R2,#+1
   \       0x16   0xD906             BLS.N    ??mbedtls_ssl_get_ciphersuite_sig_pk_psa_usage_2
   \       0x18   0xE008             B.N      ??mbedtls_ssl_get_ciphersuite_sig_pk_psa_usage_3
   1989                  case MBEDTLS_KEY_EXCHANGE_RSA:
   1990                  case MBEDTLS_KEY_EXCHANGE_RSA_PSK:
   1991                      return PSA_KEY_USAGE_DECRYPT;
   \                     ??mbedtls_ssl_get_ciphersuite_sig_pk_psa_usage_0: (+1)
   \       0x1A   0xF44F 0x7000      MOV      R0,#+512
   \       0x1E   0xE006             B.N      ??mbedtls_ssl_get_ciphersuite_sig_pk_psa_usage_4
   1992                  case MBEDTLS_KEY_EXCHANGE_DHE_RSA:
   1993                  case MBEDTLS_KEY_EXCHANGE_ECDHE_RSA:
   1994                  case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:
   1995                      return PSA_KEY_USAGE_SIGN_HASH;
   \                     ??mbedtls_ssl_get_ciphersuite_sig_pk_psa_usage_1: (+1)
   \       0x20   0xF44F 0x5080      MOV      R0,#+4096
   \       0x24   0xE003             B.N      ??mbedtls_ssl_get_ciphersuite_sig_pk_psa_usage_4
   1996          
   1997                  case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
   1998                  case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
   1999                      return PSA_KEY_USAGE_DERIVE;
   \                     ??mbedtls_ssl_get_ciphersuite_sig_pk_psa_usage_2: (+1)
   \       0x26   0xF44F 0x4080      MOV      R0,#+16384
   \       0x2A   0xE000             B.N      ??mbedtls_ssl_get_ciphersuite_sig_pk_psa_usage_4
   2000          
   2001                  default:
   2002                      return 0;
   \                     ??mbedtls_ssl_get_ciphersuite_sig_pk_psa_usage_3: (+1)
   \       0x2C   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_ssl_get_ciphersuite_sig_pk_psa_usage_4: (+1)
   \       0x2E   0x4770             BX       LR
   2003              }
   2004          }
   2005          #endif /* MBEDTLS_USE_PSA_CRYPTO */
   2006          

   \                                 In section .text, align 2, keep-with-next
   2007          mbedtls_pk_type_t mbedtls_ssl_get_ciphersuite_sig_alg(const mbedtls_ssl_ciphersuite_t *info)
   2008          {
   \                     mbedtls_ssl_get_ciphersuite_sig_alg: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   2009              switch (info->key_exchange) {
   \        0x2   0x7A8A             LDRB     R2,[R1, #+10]
   \        0x4   0x1E92             SUBS     R2,R2,#+2
   \        0x6   0x2A01             CMP      R2,#+1
   \        0x8   0xD902             BLS.N    ??mbedtls_ssl_get_ciphersuite_sig_alg_0
   \        0xA   0x1E92             SUBS     R2,R2,#+2
   \        0xC   0xD002             BEQ.N    ??mbedtls_ssl_get_ciphersuite_sig_alg_1
   \        0xE   0xE003             B.N      ??mbedtls_ssl_get_ciphersuite_sig_alg_2
   2010                  case MBEDTLS_KEY_EXCHANGE_DHE_RSA:
   2011                  case MBEDTLS_KEY_EXCHANGE_ECDHE_RSA:
   2012                      return MBEDTLS_PK_RSA;
   \                     ??mbedtls_ssl_get_ciphersuite_sig_alg_0: (+1)
   \       0x10   0x2001             MOVS     R0,#+1
   \       0x12   0xE002             B.N      ??mbedtls_ssl_get_ciphersuite_sig_alg_3
   2013          
   2014                  case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:
   2015                      return MBEDTLS_PK_ECDSA;
   \                     ??mbedtls_ssl_get_ciphersuite_sig_alg_1: (+1)
   \       0x14   0x2004             MOVS     R0,#+4
   \       0x16   0xE000             B.N      ??mbedtls_ssl_get_ciphersuite_sig_alg_3
   2016          
   2017                  default:
   2018                      return MBEDTLS_PK_NONE;
   \                     ??mbedtls_ssl_get_ciphersuite_sig_alg_2: (+1)
   \       0x18   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_ssl_get_ciphersuite_sig_alg_3: (+1)
   \       0x1A   0x4770             BX       LR
   2019              }
   2020          }
   2021          
   2022          #endif /* MBEDTLS_PK_C */
   2023          
   2024          #if defined(MBEDTLS_KEY_EXCHANGE_SOME_ECDH_OR_ECDHE_1_2_ENABLED) || \
   2025              defined(MBEDTLS_KEY_EXCHANGE_ECDSA_CERT_REQ_ALLOWED_ENABLED) || \
   2026              defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)

   \                                 In section .text, align 2, keep-with-next
   2027          int mbedtls_ssl_ciphersuite_uses_ec(const mbedtls_ssl_ciphersuite_t *info)
   2028          {
   \                     mbedtls_ssl_ciphersuite_uses_ec: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   2029              switch (info->key_exchange) {
   \        0x2   0x7A8A             LDRB     R2,[R1, #+10]
   \        0x4   0x1ED2             SUBS     R2,R2,#+3
   \        0x6   0x2A01             CMP      R2,#+1
   \        0x8   0xD902             BLS.N    ??mbedtls_ssl_ciphersuite_uses_ec_0
   \        0xA   0x1F52             SUBS     R2,R2,#+5
   \        0xC   0x2A03             CMP      R2,#+3
   \        0xE   0xD801             BHI.N    ??mbedtls_ssl_ciphersuite_uses_ec_1
   2030                  case MBEDTLS_KEY_EXCHANGE_ECDHE_RSA:
   2031                  case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:
   2032                  case MBEDTLS_KEY_EXCHANGE_ECDHE_PSK:
   2033                  case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
   2034                  case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
   2035                  case MBEDTLS_KEY_EXCHANGE_ECJPAKE:
   2036                      return 1;
   \                     ??mbedtls_ssl_ciphersuite_uses_ec_0: (+1)
   \       0x10   0x2001             MOVS     R0,#+1
   \       0x12   0xE000             B.N      ??mbedtls_ssl_ciphersuite_uses_ec_2
   2037          
   2038                  default:
   2039                      return 0;
   \                     ??mbedtls_ssl_ciphersuite_uses_ec_1: (+1)
   \       0x14   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_ssl_ciphersuite_uses_ec_2: (+1)
   \       0x16   0x4770             BX       LR
   2040              }
   2041          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \        0x0   0x....'....        DC32     ciphersuite_preference

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \        0x0   0x....'....        DC32     ciphersuite_definitions

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \        0x0   0x....'....        DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \        0x0   0x0700'0200        DC32     0x7000200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \        0x0   0x0902'0000        DC32     0x9020000

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x54 0x4C          DC8 "TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA"
   \              0x53 0x2D    
   \              0x45 0x43    
   \              0x44 0x48    
   \              0x45 0x2D    
   \              0x45 0x43    
   \              0x44 0x53    
   \              0x41 0x2D    
   \              0x57 0x49    
   \              0x54 0x48    
   \              0x2D 0x41    
   \              0x45 0x53    
   \              0x2D 0x31    
   \              0x32 0x38    
   \              0x2D 0x43    
   \              0x42 0x43    
   \              0x2D 0x53    
   \              0x48 0x41    
   \              0x00
   \       0x25                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x54 0x4C          DC8 "TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA"
   \              0x53 0x2D    
   \              0x45 0x43    
   \              0x44 0x48    
   \              0x45 0x2D    
   \              0x45 0x43    
   \              0x44 0x53    
   \              0x41 0x2D    
   \              0x57 0x49    
   \              0x54 0x48    
   \              0x2D 0x41    
   \              0x45 0x53    
   \              0x2D 0x32    
   \              0x35 0x36    
   \              0x2D 0x43    
   \              0x42 0x43    
   \              0x2D 0x53    
   \              0x48 0x41    
   \              0x00
   \       0x25                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x54 0x4C          DC8 "TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA256"
   \              0x53 0x2D    
   \              0x45 0x43    
   \              0x44 0x48    
   \              0x45 0x2D    
   \              0x45 0x43    
   \              0x44 0x53    
   \              0x41 0x2D    
   \              0x57 0x49    
   \              0x54 0x48    
   \              0x2D 0x41    
   \              0x45 0x53    
   \              0x2D 0x31    
   \              0x32 0x38    
   \              0x2D 0x43    
   \              0x42 0x43    
   \              0x2D 0x53    
   \              0x48 0x41    
   \              0x32 0x35    
   \              0x36 0x00

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x54 0x4C          DC8 "TLS-ECDHE-ECDSA-WITH-AES-256-CCM"
   \              0x53 0x2D    
   \              0x45 0x43    
   \              0x44 0x48    
   \              0x45 0x2D    
   \              0x45 0x43    
   \              0x44 0x53    
   \              0x41 0x2D    
   \              0x57 0x49    
   \              0x54 0x48    
   \              0x2D 0x41    
   \              0x45 0x53    
   \              0x2D 0x32    
   \              0x35 0x36    
   \              0x2D 0x43    
   \              0x43 0x4D    
   \              0x00
   \       0x21                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0x54 0x4C          DC8 "TLS-ECDHE-ECDSA-WITH-AES-256-CCM-8"
   \              0x53 0x2D    
   \              0x45 0x43    
   \              0x44 0x48    
   \              0x45 0x2D    
   \              0x45 0x43    
   \              0x44 0x53    
   \              0x41 0x2D    
   \              0x57 0x49    
   \              0x54 0x48    
   \              0x2D 0x41    
   \              0x45 0x53    
   \              0x2D 0x32    
   \              0x35 0x36    
   \              0x2D 0x43    
   \              0x43 0x4D    
   \              0x2D 0x38    
   \              0x00
   \       0x23                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_5:
   \        0x0   0x54 0x4C          DC8 "TLS-ECDHE-ECDSA-WITH-AES-128-CCM"
   \              0x53 0x2D    
   \              0x45 0x43    
   \              0x44 0x48    
   \              0x45 0x2D    
   \              0x45 0x43    
   \              0x44 0x53    
   \              0x41 0x2D    
   \              0x57 0x49    
   \              0x54 0x48    
   \              0x2D 0x41    
   \              0x45 0x53    
   \              0x2D 0x31    
   \              0x32 0x38    
   \              0x2D 0x43    
   \              0x43 0x4D    
   \              0x00
   \       0x21                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_6:
   \        0x0   0x54 0x4C          DC8 "TLS-ECDHE-ECDSA-WITH-AES-128-CCM-8"
   \              0x53 0x2D    
   \              0x45 0x43    
   \              0x44 0x48    
   \              0x45 0x2D    
   \              0x45 0x43    
   \              0x44 0x53    
   \              0x41 0x2D    
   \              0x57 0x49    
   \              0x54 0x48    
   \              0x2D 0x41    
   \              0x45 0x53    
   \              0x2D 0x31    
   \              0x32 0x38    
   \              0x2D 0x43    
   \              0x43 0x4D    
   \              0x2D 0x38    
   \              0x00
   \       0x23                      DS8 1

   \                                 In section .rodata, align 1
   \                     ?_7:
   \        0x0   0x00               DC8 ""

   \                                 In section .rodata, align 4
   \                     ?_8:
   \        0x0   0x75 0x6E          DC8 "unknown"
   \              0x6B 0x6E    
   \              0x6F 0x77    
   \              0x6E 0x00
   2042          #endif /* MBEDTLS_KEY_EXCHANGE_SOME_ECDH_OR_ECDHE_1_2_ENABLED ||
   2043                  * MBEDTLS_KEY_EXCHANGE_ECDSA_CERT_REQ_ALLOWED_ENABLED ||
   2044                  * MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED*/
   2045          
   2046          #if defined(MBEDTLS_KEY_EXCHANGE_SOME_PSK_ENABLED)
   2047          int mbedtls_ssl_ciphersuite_uses_psk(const mbedtls_ssl_ciphersuite_t *info)
   2048          {
   2049              switch (info->key_exchange) {
   2050                  case MBEDTLS_KEY_EXCHANGE_PSK:
   2051                  case MBEDTLS_KEY_EXCHANGE_RSA_PSK:
   2052                  case MBEDTLS_KEY_EXCHANGE_DHE_PSK:
   2053                  case MBEDTLS_KEY_EXCHANGE_ECDHE_PSK:
   2054                      return 1;
   2055          
   2056                  default:
   2057                      return 0;
   2058              }
   2059          }
   2060          #endif /* MBEDTLS_KEY_EXCHANGE_SOME_PSK_ENABLED */
   2061          
   2062          #endif /* MBEDTLS_SSL_TLS_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   mbedtls_md_psa_alg_from_type
       0   mbedtls_ssl_ciphersuite_from_id
      16   mbedtls_ssl_ciphersuite_from_string
        16   -> strcmp
      32   mbedtls_ssl_ciphersuite_get_cipher_key_bitlen
        32   -> mbedtls_ssl_cipher_to_psa
       0   mbedtls_ssl_ciphersuite_uses_ec
       8   mbedtls_ssl_get_ciphersuite_id
         8   -> mbedtls_ssl_ciphersuite_from_string
       8   mbedtls_ssl_get_ciphersuite_name
         8   -> mbedtls_ssl_ciphersuite_from_id
       0   mbedtls_ssl_get_ciphersuite_sig_alg
       0   mbedtls_ssl_get_ciphersuite_sig_pk_alg
       8   mbedtls_ssl_get_ciphersuite_sig_pk_psa_alg
         8   -> mbedtls_md_psa_alg_from_type
       0   mbedtls_ssl_get_ciphersuite_sig_pk_psa_usage
       0   mbedtls_ssl_list_ciphersuites


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
      40  ?_0
      40  ?_1
      40  ?_2
      36  ?_3
      36  ?_4
      36  ?_5
      36  ?_6
       1  ?_7
       8  ?_8
     128  ciphersuite_definitions
       8  ciphersuite_preference
       8  mbedtls_md_psa_alg_from_type
      28  mbedtls_ssl_ciphersuite_from_id
      44  mbedtls_ssl_ciphersuite_from_string
      52  mbedtls_ssl_ciphersuite_get_cipher_key_bitlen
      24  mbedtls_ssl_ciphersuite_uses_ec
      24  mbedtls_ssl_get_ciphersuite_id
      24  mbedtls_ssl_get_ciphersuite_name
      28  mbedtls_ssl_get_ciphersuite_sig_alg
      42  mbedtls_ssl_get_ciphersuite_sig_pk_alg
      80  mbedtls_ssl_get_ciphersuite_sig_pk_psa_alg
      48  mbedtls_ssl_get_ciphersuite_sig_pk_psa_usage
       4  mbedtls_ssl_list_ciphersuites

 
 409 bytes in section .rodata
 426 bytes in section .text
 
 426 bytes of CODE  memory
 409 bytes of CONST memory

Errors: none
Warnings: 1
