###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         29/Mar/2025  15:53:57
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\psa_crypto_hash.c
#    Command line                 =
#        -f "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\library_17211336700577820660.dir\psa_crypto_hash.o.rsp"
#        ("D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\psa_crypto_hash.c"
#        -D DEBUG_EFM=1 -D EFR32FG28B322F1024IM48=1 -D
#        configNUM_SDK_THREAD_LOCAL_STORAGE_POINTERS=2 -D
#        SL_COMPONENT_CATALOG_PRESENT=1 -D
#        MBEDTLS_CONFIG_FILE=<sl_mbedtls_config.h> -D
#        MBEDTLS_PSA_CRYPTO_CONFIG_FILE=<psa_crypto_config.h> -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -D
#        RTT_USE_ASM=0 -lC "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\lst\library_17211336700577820660.dir"
#        --diag_suppress Pa050 -o "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\library_17211336700577820660.dir"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M33 --cmse --cmse -e --fpu=VFPv5_sp --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        9.2\arm\inc\c\DLib_Config_Normal.h" -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\rail\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\wisun\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\.\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\Device\SiliconLabs\EFR32FG28\Include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_project_info\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\common\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\src\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\CMSIS\Core\Include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\CMSIS\RTOS2\Include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\device_init\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emdrv\common\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emlib\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\iostream\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\config\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\config\preset\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\cpu\include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\ports\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emdrv\nvm3\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\peripheral\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\printf\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\printf\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_psa_driver\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\common\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\ble\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\ieee802154\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\wmbus\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\zwave\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\chip\efr32\efr32xg2x\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\sidewalk\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\pa-conversions\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\pa-conversions\efr32xg28\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\rail_util_pti\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\se_manager\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\se_manager\src\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\segger\systemview\SEGGER\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\silicon_labs\silabs_core\memory_manager\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\common\toolchain\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\system\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_core\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_setting\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\cli_util\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\event_manager\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\ns_list\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\ping\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\nanostack\nanostack-libservice\mbed-client-libservice\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\udp_client\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\sleeptimer\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\plugin\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\stack\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\stack\inc\socket\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\autogen\\" -On
#        --use_c++_inline) --dependencies=n "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\library_17211336700577820660.dir\psa_crypto_hash.o.iar_deps"
#    Locale                       =  C
#    List file                    =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\lst\library_17211336700577820660.dir\psa_crypto_hash.lst
#    Object file                  =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\library_17211336700577820660.dir\psa_crypto_hash.o
#    Runtime model:                  
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#
###############################################################################

D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\psa_crypto_hash.c
      1          /*
      2           *  PSA hashing layer on top of Mbed TLS software crypto
      3           */
      4          /*
      5           *  Copyright The Mbed TLS Contributors
      6           *  SPDX-License-Identifier: Apache-2.0
      7           *
      8           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      9           *  not use this file except in compliance with the License.
     10           *  You may obtain a copy of the License at
     11           *
     12           *  http://www.apache.org/licenses/LICENSE-2.0
     13           *
     14           *  Unless required by applicable law or agreed to in writing, software
     15           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     16           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     17           *  See the License for the specific language governing permissions and
     18           *  limitations under the License.
     19           */
     20          
     21          #include "common.h"
     22          
     23          #if defined(MBEDTLS_PSA_CRYPTO_C)
     24          
     25          #include <psa/crypto.h>
     26          #include "psa_crypto_core.h"
     27          #include "psa_crypto_hash.h"
     28          
     29          #include <mbedtls/error.h>
     30          #include <string.h>
     31          
     32          #if defined(MBEDTLS_PSA_BUILTIN_HASH)

   \                                 In section .text, align 2, keep-with-next
     33          psa_status_t mbedtls_psa_hash_abort(
     34              mbedtls_psa_hash_operation_t *operation)
     35          {
   \                     mbedtls_psa_hash_abort: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
     36              switch (operation->alg) {
   \        0x4   0x6821             LDR      R1,[R4, #+0]
   \        0x6   0x2900             CMP      R1,#+0
   \        0x8   0xD008             BEQ.N    ??mbedtls_psa_hash_abort_0
   \        0xA   0x.... 0x....      LDR.W    R0,??DataTable4
   \        0xE   0x1A09             SUBS     R1,R1,R0
   \       0x10   0xD005             BEQ.N    ??mbedtls_psa_hash_abort_1
   \       0x12   0x1EC9             SUBS     R1,R1,#+3
   \       0x14   0xD007             BEQ.N    ??mbedtls_psa_hash_abort_2
   \       0x16   0x1E49             SUBS     R1,R1,#+1
   \       0x18   0xD009             BEQ.N    ??mbedtls_psa_hash_abort_3
   \       0x1A   0xE00C             B.N      ??mbedtls_psa_hash_abort_4
     37                  case 0:
     38                      /* The object has (apparently) been initialized but it is not
     39                       * in use. It's ok to call abort on such an object, and there's
     40                       * nothing to do. */
     41                      break;
   \                     ??mbedtls_psa_hash_abort_0: (+1)
   \       0x1C   0xE00E             B.N      ??mbedtls_psa_hash_abort_5
     42          #if defined(MBEDTLS_PSA_BUILTIN_ALG_MD5)
     43                  case PSA_ALG_MD5:
     44                      mbedtls_md5_free(&operation->ctx.md5);
     45                      break;
     46          #endif
     47          #if defined(MBEDTLS_PSA_BUILTIN_ALG_RIPEMD160)
     48                  case PSA_ALG_RIPEMD160:
     49                      mbedtls_ripemd160_free(&operation->ctx.ripemd160);
     50                      break;
     51          #endif
     52          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA_1)
     53                  case PSA_ALG_SHA_1:
     54                      mbedtls_sha1_free(&operation->ctx.sha1);
   \                     ??mbedtls_psa_hash_abort_1: (+1)
   \       0x1E   0x1D20             ADDS     R0,R4,#+4
   \       0x20   0x.... 0x....      BL       mbedtls_sha1_free
     55                      break;
   \       0x24   0xE00A             B.N      ??mbedtls_psa_hash_abort_5
     56          #endif
     57          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA_224)
     58                  case PSA_ALG_SHA_224:
     59                      mbedtls_sha256_free(&operation->ctx.sha256);
   \                     ??mbedtls_psa_hash_abort_2: (+1)
   \       0x26   0x1D20             ADDS     R0,R4,#+4
   \       0x28   0x.... 0x....      BL       mbedtls_sha256_free
     60                      break;
   \       0x2C   0xE006             B.N      ??mbedtls_psa_hash_abort_5
     61          #endif
     62          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA_256)
     63                  case PSA_ALG_SHA_256:
     64                      mbedtls_sha256_free(&operation->ctx.sha256);
   \                     ??mbedtls_psa_hash_abort_3: (+1)
   \       0x2E   0x1D20             ADDS     R0,R4,#+4
   \       0x30   0x.... 0x....      BL       mbedtls_sha256_free
     65                      break;
   \       0x34   0xE002             B.N      ??mbedtls_psa_hash_abort_5
     66          #endif
     67          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA_384)
     68                  case PSA_ALG_SHA_384:
     69                      mbedtls_sha512_free(&operation->ctx.sha512);
     70                      break;
     71          #endif
     72          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA_512)
     73                  case PSA_ALG_SHA_512:
     74                      mbedtls_sha512_free(&operation->ctx.sha512);
     75                      break;
     76          #endif
     77          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA3_224)
     78                  case PSA_ALG_SHA3_224:
     79          #endif
     80          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA3_256)
     81                  case PSA_ALG_SHA3_256:
     82          #endif
     83          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA3_384)
     84                  case PSA_ALG_SHA3_384:
     85          #endif
     86          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA3_512)
     87                  case PSA_ALG_SHA3_512:
     88          #endif
     89          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA3_224) || \
     90                      defined(MBEDTLS_PSA_BUILTIN_ALG_SHA3_256) || \
     91                      defined(MBEDTLS_PSA_BUILTIN_ALG_SHA3_384) || \
     92                      defined(MBEDTLS_PSA_BUILTIN_ALG_SHA3_512)
     93                      mbedtls_sha3_free(&operation->ctx.sha3);
     94                      break;
     95          #endif
     96                  default:
     97                      return PSA_ERROR_BAD_STATE;
   \                     ??mbedtls_psa_hash_abort_4: (+1)
   \       0x36   0xF07F 0x0088      MVNS     R0,#+136
   \       0x3A   0xE002             B.N      ??mbedtls_psa_hash_abort_6
     98              }
     99              operation->alg = 0;
   \                     ??mbedtls_psa_hash_abort_5: (+1)
   \       0x3C   0x2000             MOVS     R0,#+0
   \       0x3E   0x6020             STR      R0,[R4, #+0]
    100              return PSA_SUCCESS;
   \       0x40   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_psa_hash_abort_6: (+1)
   \       0x42   0xBD10             POP      {R4,PC}
    101          }
    102          

   \                                 In section .text, align 2, keep-with-next
    103          psa_status_t mbedtls_psa_hash_setup(
    104              mbedtls_psa_hash_operation_t *operation,
    105              psa_algorithm_t alg)
    106          {
   \                     mbedtls_psa_hash_setup: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0005             MOVS     R5,R0
   \        0x4   0x000E             MOVS     R6,R1
    107              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
   \        0x6   0xF07F 0x076D      MVNS     R7,#+109
    108          
    109              /* A context must be freshly initialized before it can be set up. */
    110              if (operation->alg != 0) {
   \        0xA   0x6828             LDR      R0,[R5, #+0]
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD002             BEQ.N    ??mbedtls_psa_hash_setup_0
    111                  return PSA_ERROR_BAD_STATE;
   \       0x10   0xF07F 0x0088      MVNS     R0,#+136
   \       0x14   0xE037             B.N      ??mbedtls_psa_hash_setup_1
    112              }
    113          
    114              switch (alg) {
   \                     ??mbedtls_psa_hash_setup_0: (+1)
   \       0x16   0x0031             MOVS     R1,R6
   \       0x18   0x....             LDR.N    R0,??DataTable4
   \       0x1A   0x1A09             SUBS     R1,R1,R0
   \       0x1C   0xD004             BEQ.N    ??mbedtls_psa_hash_setup_2
   \       0x1E   0x1EC9             SUBS     R1,R1,#+3
   \       0x20   0xD00A             BEQ.N    ??mbedtls_psa_hash_setup_3
   \       0x22   0x1E49             SUBS     R1,R1,#+1
   \       0x24   0xD011             BEQ.N    ??mbedtls_psa_hash_setup_4
   \       0x26   0xE019             B.N      ??mbedtls_psa_hash_setup_5
    115          #if defined(MBEDTLS_PSA_BUILTIN_ALG_MD5)
    116                  case PSA_ALG_MD5:
    117                      mbedtls_md5_init(&operation->ctx.md5);
    118                      ret = mbedtls_md5_starts(&operation->ctx.md5);
    119                      break;
    120          #endif
    121          #if defined(MBEDTLS_PSA_BUILTIN_ALG_RIPEMD160)
    122                  case PSA_ALG_RIPEMD160:
    123                      mbedtls_ripemd160_init(&operation->ctx.ripemd160);
    124                      ret = mbedtls_ripemd160_starts(&operation->ctx.ripemd160);
    125                      break;
    126          #endif
    127          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA_1)
    128                  case PSA_ALG_SHA_1:
    129                      mbedtls_sha1_init(&operation->ctx.sha1);
   \                     ??mbedtls_psa_hash_setup_2: (+1)
   \       0x28   0x1D28             ADDS     R0,R5,#+4
   \       0x2A   0x.... 0x....      BL       mbedtls_sha1_init
    130                      ret = mbedtls_sha1_starts(&operation->ctx.sha1);
   \       0x2E   0x1D28             ADDS     R0,R5,#+4
   \       0x30   0x.... 0x....      BL       mbedtls_sha1_starts
   \       0x34   0x0004             MOVS     R4,R0
    131                      break;
   \       0x36   0xE01C             B.N      ??mbedtls_psa_hash_setup_6
    132          #endif
    133          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA_224)
    134                  case PSA_ALG_SHA_224:
    135                      mbedtls_sha256_init(&operation->ctx.sha256);
   \                     ??mbedtls_psa_hash_setup_3: (+1)
   \       0x38   0x1D28             ADDS     R0,R5,#+4
   \       0x3A   0x.... 0x....      BL       mbedtls_sha256_init
    136                      ret = mbedtls_sha256_starts(&operation->ctx.sha256, 1);
   \       0x3E   0x2101             MOVS     R1,#+1
   \       0x40   0x1D28             ADDS     R0,R5,#+4
   \       0x42   0x.... 0x....      BL       mbedtls_sha256_starts
   \       0x46   0x0004             MOVS     R4,R0
    137                      break;
   \       0x48   0xE013             B.N      ??mbedtls_psa_hash_setup_6
    138          #endif
    139          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA_256)
    140                  case PSA_ALG_SHA_256:
    141                      mbedtls_sha256_init(&operation->ctx.sha256);
   \                     ??mbedtls_psa_hash_setup_4: (+1)
   \       0x4A   0x1D28             ADDS     R0,R5,#+4
   \       0x4C   0x.... 0x....      BL       mbedtls_sha256_init
    142                      ret = mbedtls_sha256_starts(&operation->ctx.sha256, 0);
   \       0x50   0x2100             MOVS     R1,#+0
   \       0x52   0x1D28             ADDS     R0,R5,#+4
   \       0x54   0x.... 0x....      BL       mbedtls_sha256_starts
   \       0x58   0x0004             MOVS     R4,R0
    143                      break;
   \       0x5A   0xE00A             B.N      ??mbedtls_psa_hash_setup_6
    144          #endif
    145          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA_384)
    146                  case PSA_ALG_SHA_384:
    147                      mbedtls_sha512_init(&operation->ctx.sha512);
    148                      ret = mbedtls_sha512_starts(&operation->ctx.sha512, 1);
    149                      break;
    150          #endif
    151          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA_512)
    152                  case PSA_ALG_SHA_512:
    153                      mbedtls_sha512_init(&operation->ctx.sha512);
    154                      ret = mbedtls_sha512_starts(&operation->ctx.sha512, 0);
    155                      break;
    156          #endif
    157          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA3_224)
    158                  case PSA_ALG_SHA3_224:
    159                      mbedtls_sha3_init(&operation->ctx.sha3);
    160                      ret = mbedtls_sha3_starts(&operation->ctx.sha3, MBEDTLS_SHA3_224);
    161                      break;
    162          #endif
    163          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA3_256)
    164                  case PSA_ALG_SHA3_256:
    165                      mbedtls_sha3_init(&operation->ctx.sha3);
    166                      ret = mbedtls_sha3_starts(&operation->ctx.sha3, MBEDTLS_SHA3_256);
    167                      break;
    168          #endif
    169          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA3_384)
    170                  case PSA_ALG_SHA3_384:
    171                      mbedtls_sha3_init(&operation->ctx.sha3);
    172                      ret = mbedtls_sha3_starts(&operation->ctx.sha3, MBEDTLS_SHA3_384);
    173                      break;
    174          #endif
    175          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA3_512)
    176                  case PSA_ALG_SHA3_512:
    177                      mbedtls_sha3_init(&operation->ctx.sha3);
    178                      ret = mbedtls_sha3_starts(&operation->ctx.sha3, MBEDTLS_SHA3_512);
    179                      break;
    180          #endif
    181                  default:
    182                      return PSA_ALG_IS_HASH(alg) ?
    183                             PSA_ERROR_NOT_SUPPORTED :
    184                             PSA_ERROR_INVALID_ARGUMENT;
   \                     ??mbedtls_psa_hash_setup_5: (+1)
   \       0x5C   0xF016 0x46FE      ANDS     R6,R6,#0x7F000000
   \       0x60   0xF1B6 0x7F00      CMP      R6,#+33554432
   \       0x64   0xD102             BNE.N    ??mbedtls_psa_hash_setup_7
   \       0x66   0xF07F 0x0085      MVNS     R0,#+133
   \       0x6A   0xE001             B.N      ??mbedtls_psa_hash_setup_8
   \                     ??mbedtls_psa_hash_setup_7: (+1)
   \       0x6C   0xF07F 0x0086      MVNS     R0,#+134
   \                     ??mbedtls_psa_hash_setup_8: (+1)
   \       0x70   0xE009             B.N      ??mbedtls_psa_hash_setup_1
    185              }
    186              if (ret == 0) {
   \                     ??mbedtls_psa_hash_setup_6: (+1)
   \       0x72   0x2C00             CMP      R4,#+0
   \       0x74   0xD101             BNE.N    ??mbedtls_psa_hash_setup_9
    187                  operation->alg = alg;
   \       0x76   0x602E             STR      R6,[R5, #+0]
   \       0x78   0xE002             B.N      ??mbedtls_psa_hash_setup_10
    188              } else {
    189                  mbedtls_psa_hash_abort(operation);
   \                     ??mbedtls_psa_hash_setup_9: (+1)
   \       0x7A   0x0028             MOVS     R0,R5
   \       0x7C   0x.... 0x....      BL       mbedtls_psa_hash_abort
    190              }
    191              return mbedtls_to_psa_error(ret);
   \                     ??mbedtls_psa_hash_setup_10: (+1)
   \       0x80   0x0020             MOVS     R0,R4
   \       0x82   0x.... 0x....      BL       mbedtls_to_psa_error
   \                     ??mbedtls_psa_hash_setup_1: (+1)
   \       0x86   0xBDF2             POP      {R1,R4-R7,PC}
    192          }
    193          

   \                                 In section .text, align 2, keep-with-next
    194          psa_status_t mbedtls_psa_hash_clone(
    195              const mbedtls_psa_hash_operation_t *source_operation,
    196              mbedtls_psa_hash_operation_t *target_operation)
    197          {
   \                     mbedtls_psa_hash_clone: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
    198              switch (source_operation->alg) {
   \        0x6   0x6821             LDR      R1,[R4, #+0]
   \        0x8   0x2900             CMP      R1,#+0
   \        0xA   0xD007             BEQ.N    ??mbedtls_psa_hash_clone_0
   \        0xC   0x....             LDR.N    R0,??DataTable4
   \        0xE   0x1A09             SUBS     R1,R1,R0
   \       0x10   0xD007             BEQ.N    ??mbedtls_psa_hash_clone_1
   \       0x12   0x1EC9             SUBS     R1,R1,#+3
   \       0x14   0xD00A             BEQ.N    ??mbedtls_psa_hash_clone_2
   \       0x16   0x1E49             SUBS     R1,R1,#+1
   \       0x18   0xD00D             BEQ.N    ??mbedtls_psa_hash_clone_3
   \       0x1A   0xE011             B.N      ??mbedtls_psa_hash_clone_4
    199                  case 0:
    200                      return PSA_ERROR_BAD_STATE;
   \                     ??mbedtls_psa_hash_clone_0: (+1)
   \       0x1C   0xF07F 0x0088      MVNS     R0,#+136
   \       0x20   0xE014             B.N      ??mbedtls_psa_hash_clone_5
    201          #if defined(MBEDTLS_PSA_BUILTIN_ALG_MD5)
    202                  case PSA_ALG_MD5:
    203                      mbedtls_md5_clone(&target_operation->ctx.md5,
    204                                        &source_operation->ctx.md5);
    205                      break;
    206          #endif
    207          #if defined(MBEDTLS_PSA_BUILTIN_ALG_RIPEMD160)
    208                  case PSA_ALG_RIPEMD160:
    209                      mbedtls_ripemd160_clone(&target_operation->ctx.ripemd160,
    210                                              &source_operation->ctx.ripemd160);
    211                      break;
    212          #endif
    213          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA_1)
    214                  case PSA_ALG_SHA_1:
    215                      mbedtls_sha1_clone(&target_operation->ctx.sha1,
    216                                         &source_operation->ctx.sha1);
   \                     ??mbedtls_psa_hash_clone_1: (+1)
   \       0x22   0x1D21             ADDS     R1,R4,#+4
   \       0x24   0x1D28             ADDS     R0,R5,#+4
   \       0x26   0x.... 0x....      BL       mbedtls_sha1_clone
    217                      break;
   \       0x2A   0xE00C             B.N      ??mbedtls_psa_hash_clone_6
    218          #endif
    219          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA_224)
    220                  case PSA_ALG_SHA_224:
    221                      mbedtls_sha256_clone(&target_operation->ctx.sha256,
    222                                           &source_operation->ctx.sha256);
   \                     ??mbedtls_psa_hash_clone_2: (+1)
   \       0x2C   0x1D21             ADDS     R1,R4,#+4
   \       0x2E   0x1D28             ADDS     R0,R5,#+4
   \       0x30   0x.... 0x....      BL       mbedtls_sha256_clone
    223                      break;
   \       0x34   0xE007             B.N      ??mbedtls_psa_hash_clone_6
    224          #endif
    225          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA_256)
    226                  case PSA_ALG_SHA_256:
    227                      mbedtls_sha256_clone(&target_operation->ctx.sha256,
    228                                           &source_operation->ctx.sha256);
   \                     ??mbedtls_psa_hash_clone_3: (+1)
   \       0x36   0x1D21             ADDS     R1,R4,#+4
   \       0x38   0x1D28             ADDS     R0,R5,#+4
   \       0x3A   0x.... 0x....      BL       mbedtls_sha256_clone
    229                      break;
   \       0x3E   0xE002             B.N      ??mbedtls_psa_hash_clone_6
    230          #endif
    231          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA_384)
    232                  case PSA_ALG_SHA_384:
    233                      mbedtls_sha512_clone(&target_operation->ctx.sha512,
    234                                           &source_operation->ctx.sha512);
    235                      break;
    236          #endif
    237          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA_512)
    238                  case PSA_ALG_SHA_512:
    239                      mbedtls_sha512_clone(&target_operation->ctx.sha512,
    240                                           &source_operation->ctx.sha512);
    241                      break;
    242          #endif
    243          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA3_224)
    244                  case PSA_ALG_SHA3_224:
    245          #endif
    246          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA3_256)
    247                  case PSA_ALG_SHA3_256:
    248          #endif
    249          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA3_384)
    250                  case PSA_ALG_SHA3_384:
    251          #endif
    252          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA3_512)
    253                  case PSA_ALG_SHA3_512:
    254          #endif
    255          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA3_224) || \
    256                      defined(MBEDTLS_PSA_BUILTIN_ALG_SHA3_256) || \
    257                      defined(MBEDTLS_PSA_BUILTIN_ALG_SHA3_384) || \
    258                      defined(MBEDTLS_PSA_BUILTIN_ALG_SHA3_512)
    259                      mbedtls_sha3_clone(&target_operation->ctx.sha3,
    260                                         &source_operation->ctx.sha3);
    261                      break;
    262          #endif
    263                  default:
    264                      (void) source_operation;
    265                      (void) target_operation;
    266                      return PSA_ERROR_NOT_SUPPORTED;
   \                     ??mbedtls_psa_hash_clone_4: (+1)
   \       0x40   0xF07F 0x0085      MVNS     R0,#+133
   \       0x44   0xE002             B.N      ??mbedtls_psa_hash_clone_5
    267              }
    268          
    269              target_operation->alg = source_operation->alg;
   \                     ??mbedtls_psa_hash_clone_6: (+1)
   \       0x46   0x6820             LDR      R0,[R4, #+0]
   \       0x48   0x6028             STR      R0,[R5, #+0]
    270              return PSA_SUCCESS;
   \       0x4A   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_psa_hash_clone_5: (+1)
   \       0x4C   0xBD32             POP      {R1,R4,R5,PC}
    271          }
    272          

   \                                 In section .text, align 2, keep-with-next
    273          psa_status_t mbedtls_psa_hash_update(
    274              mbedtls_psa_hash_operation_t *operation,
    275              const uint8_t *input,
    276              size_t input_length)
    277          {
   \                     mbedtls_psa_hash_update: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x000D             MOVS     R5,R1
   \        0x8   0x0016             MOVS     R6,R2
    278              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
   \        0xA   0xF07F 0x076D      MVNS     R7,#+109
    279          
    280              switch (operation->alg) {
   \        0xE   0x6821             LDR      R1,[R4, #+0]
   \       0x10   0x....             LDR.N    R0,??DataTable4
   \       0x12   0x1A09             SUBS     R1,R1,R0
   \       0x14   0xD004             BEQ.N    ??mbedtls_psa_hash_update_0
   \       0x16   0x1EC9             SUBS     R1,R1,#+3
   \       0x18   0xD009             BEQ.N    ??mbedtls_psa_hash_update_1
   \       0x1A   0x1E49             SUBS     R1,R1,#+1
   \       0x1C   0xD00E             BEQ.N    ??mbedtls_psa_hash_update_2
   \       0x1E   0xE014             B.N      ??mbedtls_psa_hash_update_3
    281          #if defined(MBEDTLS_PSA_BUILTIN_ALG_MD5)
    282                  case PSA_ALG_MD5:
    283                      ret = mbedtls_md5_update(&operation->ctx.md5,
    284                                               input, input_length);
    285                      break;
    286          #endif
    287          #if defined(MBEDTLS_PSA_BUILTIN_ALG_RIPEMD160)
    288                  case PSA_ALG_RIPEMD160:
    289                      ret = mbedtls_ripemd160_update(&operation->ctx.ripemd160,
    290                                                     input, input_length);
    291                      break;
    292          #endif
    293          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA_1)
    294                  case PSA_ALG_SHA_1:
    295                      ret = mbedtls_sha1_update(&operation->ctx.sha1,
    296                                                input, input_length);
   \                     ??mbedtls_psa_hash_update_0: (+1)
   \       0x20   0x0032             MOVS     R2,R6
   \       0x22   0x0029             MOVS     R1,R5
   \       0x24   0x1D20             ADDS     R0,R4,#+4
   \       0x26   0x.... 0x....      BL       mbedtls_sha1_update
   \       0x2A   0x4680             MOV      R8,R0
    297                      break;
   \       0x2C   0xE010             B.N      ??mbedtls_psa_hash_update_4
    298          #endif
    299          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA_224)
    300                  case PSA_ALG_SHA_224:
    301                      ret = mbedtls_sha256_update(&operation->ctx.sha256,
    302                                                  input, input_length);
   \                     ??mbedtls_psa_hash_update_1: (+1)
   \       0x2E   0x0032             MOVS     R2,R6
   \       0x30   0x0029             MOVS     R1,R5
   \       0x32   0x1D20             ADDS     R0,R4,#+4
   \       0x34   0x.... 0x....      BL       mbedtls_sha256_update
   \       0x38   0x4680             MOV      R8,R0
    303                      break;
   \       0x3A   0xE009             B.N      ??mbedtls_psa_hash_update_4
    304          #endif
    305          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA_256)
    306                  case PSA_ALG_SHA_256:
    307                      ret = mbedtls_sha256_update(&operation->ctx.sha256,
    308                                                  input, input_length);
   \                     ??mbedtls_psa_hash_update_2: (+1)
   \       0x3C   0x0032             MOVS     R2,R6
   \       0x3E   0x0029             MOVS     R1,R5
   \       0x40   0x1D20             ADDS     R0,R4,#+4
   \       0x42   0x.... 0x....      BL       mbedtls_sha256_update
   \       0x46   0x4680             MOV      R8,R0
    309                      break;
   \       0x48   0xE002             B.N      ??mbedtls_psa_hash_update_4
    310          #endif
    311          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA_384)
    312                  case PSA_ALG_SHA_384:
    313                      ret = mbedtls_sha512_update(&operation->ctx.sha512,
    314                                                  input, input_length);
    315                      break;
    316          #endif
    317          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA_512)
    318                  case PSA_ALG_SHA_512:
    319                      ret = mbedtls_sha512_update(&operation->ctx.sha512,
    320                                                  input, input_length);
    321                      break;
    322          #endif
    323          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA3_224)
    324                  case PSA_ALG_SHA3_224:
    325          #endif
    326          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA3_256)
    327                  case PSA_ALG_SHA3_256:
    328          #endif
    329          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA3_384)
    330                  case PSA_ALG_SHA3_384:
    331          #endif
    332          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA3_512)
    333                  case PSA_ALG_SHA3_512:
    334          #endif
    335          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA3_224) || \
    336              defined(MBEDTLS_PSA_BUILTIN_ALG_SHA3_256) || \
    337              defined(MBEDTLS_PSA_BUILTIN_ALG_SHA3_384) || \
    338              defined(MBEDTLS_PSA_BUILTIN_ALG_SHA3_512)
    339              ret = mbedtls_sha3_update(&operation->ctx.sha3,
    340                                        input, input_length);
    341              break;
    342          #endif
    343                  default:
    344                      (void) input;
    345                      (void) input_length;
    346                      return PSA_ERROR_BAD_STATE;
   \                     ??mbedtls_psa_hash_update_3: (+1)
   \       0x4A   0xF07F 0x0088      MVNS     R0,#+136
   \       0x4E   0xE002             B.N      ??mbedtls_psa_hash_update_5
    347              }
    348          
    349              return mbedtls_to_psa_error(ret);
   \                     ??mbedtls_psa_hash_update_4: (+1)
   \       0x50   0x4640             MOV      R0,R8
   \       0x52   0x.... 0x....      BL       mbedtls_to_psa_error
   \                     ??mbedtls_psa_hash_update_5: (+1)
   \       0x56   0xE8BD 0x81F0      POP      {R4-R8,PC}
    350          }
    351          

   \                                 In section .text, align 2, keep-with-next
    352          psa_status_t mbedtls_psa_hash_finish(
    353              mbedtls_psa_hash_operation_t *operation,
    354              uint8_t *hash,
    355              size_t hash_size,
    356              size_t *hash_length)
    357          {
   \                     mbedtls_psa_hash_finish: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0x4681             MOV      R9,R0
   \        0x6   0x000D             MOVS     R5,R1
   \        0x8   0x0014             MOVS     R4,R2
   \        0xA   0x001E             MOVS     R6,R3
    358              psa_status_t status;
    359              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
   \        0xC   0xF07F 0x076D      MVNS     R7,#+109
    360              size_t actual_hash_length = PSA_HASH_LENGTH(operation->alg);
   \       0x10   0xF899 0x1000      LDRB     R1,[R9, #+0]
   \       0x14   0xF001 0x01FF      AND      R1,R1,#0xFF
   \       0x18   0xF051 0x7100      ORRS     R1,R1,#0x2000000
   \       0x1C   0x....             LDR.N    R0,??DataTable4_1
   \       0x1E   0x4281             CMP      R1,R0
   \       0x20   0xD102             BNE.N    ??mbedtls_psa_hash_finish_0
   \       0x22   0xF05F 0x0810      MOVS     R8,#+16
   \       0x26   0xE091             B.N      ??mbedtls_psa_hash_finish_1
   \                     ??mbedtls_psa_hash_finish_0: (+1)
   \       0x28   0xF899 0x1000      LDRB     R1,[R9, #+0]
   \       0x2C   0xF001 0x01FF      AND      R1,R1,#0xFF
   \       0x30   0xF051 0x7100      ORRS     R1,R1,#0x2000000
   \       0x34   0x....             LDR.N    R0,??DataTable4_2
   \       0x36   0x4281             CMP      R1,R0
   \       0x38   0xD102             BNE.N    ??mbedtls_psa_hash_finish_2
   \       0x3A   0xF05F 0x0814      MOVS     R8,#+20
   \       0x3E   0xE085             B.N      ??mbedtls_psa_hash_finish_1
   \                     ??mbedtls_psa_hash_finish_2: (+1)
   \       0x40   0xF899 0x1000      LDRB     R1,[R9, #+0]
   \       0x44   0xF001 0x01FF      AND      R1,R1,#0xFF
   \       0x48   0xF051 0x7100      ORRS     R1,R1,#0x2000000
   \       0x4C   0x....             LDR.N    R0,??DataTable4
   \       0x4E   0x4281             CMP      R1,R0
   \       0x50   0xD102             BNE.N    ??mbedtls_psa_hash_finish_3
   \       0x52   0xF05F 0x0814      MOVS     R8,#+20
   \       0x56   0xE079             B.N      ??mbedtls_psa_hash_finish_1
   \                     ??mbedtls_psa_hash_finish_3: (+1)
   \       0x58   0xF899 0x1000      LDRB     R1,[R9, #+0]
   \       0x5C   0xF001 0x01FF      AND      R1,R1,#0xFF
   \       0x60   0xF051 0x7100      ORRS     R1,R1,#0x2000000
   \       0x64   0x....             LDR.N    R0,??DataTable4_3
   \       0x66   0x4281             CMP      R1,R0
   \       0x68   0xD102             BNE.N    ??mbedtls_psa_hash_finish_4
   \       0x6A   0xF05F 0x081C      MOVS     R8,#+28
   \       0x6E   0xE06D             B.N      ??mbedtls_psa_hash_finish_1
   \                     ??mbedtls_psa_hash_finish_4: (+1)
   \       0x70   0xF899 0x1000      LDRB     R1,[R9, #+0]
   \       0x74   0xF001 0x01FF      AND      R1,R1,#0xFF
   \       0x78   0xF051 0x7100      ORRS     R1,R1,#0x2000000
   \       0x7C   0x....             LDR.N    R0,??DataTable4_4
   \       0x7E   0x4281             CMP      R1,R0
   \       0x80   0xD102             BNE.N    ??mbedtls_psa_hash_finish_5
   \       0x82   0xF05F 0x0820      MOVS     R8,#+32
   \       0x86   0xE061             B.N      ??mbedtls_psa_hash_finish_1
   \                     ??mbedtls_psa_hash_finish_5: (+1)
   \       0x88   0xF899 0x1000      LDRB     R1,[R9, #+0]
   \       0x8C   0xF001 0x01FF      AND      R1,R1,#0xFF
   \       0x90   0xF051 0x7100      ORRS     R1,R1,#0x2000000
   \       0x94   0x....             LDR.N    R0,??DataTable4_5
   \       0x96   0x4281             CMP      R1,R0
   \       0x98   0xD102             BNE.N    ??mbedtls_psa_hash_finish_6
   \       0x9A   0xF05F 0x0830      MOVS     R8,#+48
   \       0x9E   0xE055             B.N      ??mbedtls_psa_hash_finish_1
   \                     ??mbedtls_psa_hash_finish_6: (+1)
   \       0xA0   0xF899 0x0000      LDRB     R0,[R9, #+0]
   \       0xA4   0xF000 0x00FF      AND      R0,R0,#0xFF
   \       0xA8   0xF050 0x7000      ORRS     R0,R0,#0x2000000
   \       0xAC   0x....             LDR.N    R1,??DataTable4_6
   \       0xAE   0x4288             CMP      R0,R1
   \       0xB0   0xD102             BNE.N    ??mbedtls_psa_hash_finish_7
   \       0xB2   0xF05F 0x0840      MOVS     R8,#+64
   \       0xB6   0xE049             B.N      ??mbedtls_psa_hash_finish_1
   \                     ??mbedtls_psa_hash_finish_7: (+1)
   \       0xB8   0xF899 0x0000      LDRB     R0,[R9, #+0]
   \       0xBC   0xF000 0x00FF      AND      R0,R0,#0xFF
   \       0xC0   0xF050 0x7000      ORRS     R0,R0,#0x2000000
   \       0xC4   0x....             LDR.N    R1,??DataTable4_7
   \       0xC6   0x4288             CMP      R0,R1
   \       0xC8   0xD102             BNE.N    ??mbedtls_psa_hash_finish_8
   \       0xCA   0xF05F 0x081C      MOVS     R8,#+28
   \       0xCE   0xE03D             B.N      ??mbedtls_psa_hash_finish_1
   \                     ??mbedtls_psa_hash_finish_8: (+1)
   \       0xD0   0xF899 0x1000      LDRB     R1,[R9, #+0]
   \       0xD4   0xF001 0x01FF      AND      R1,R1,#0xFF
   \       0xD8   0xF051 0x7100      ORRS     R1,R1,#0x2000000
   \       0xDC   0x....             LDR.N    R0,??DataTable4_8
   \       0xDE   0x4281             CMP      R1,R0
   \       0xE0   0xD102             BNE.N    ??mbedtls_psa_hash_finish_9
   \       0xE2   0xF05F 0x0820      MOVS     R8,#+32
   \       0xE6   0xE031             B.N      ??mbedtls_psa_hash_finish_1
   \                     ??mbedtls_psa_hash_finish_9: (+1)
   \       0xE8   0xF899 0x1000      LDRB     R1,[R9, #+0]
   \       0xEC   0xF001 0x01FF      AND      R1,R1,#0xFF
   \       0xF0   0xF051 0x7100      ORRS     R1,R1,#0x2000000
   \       0xF4   0x....             LDR.N    R0,??DataTable4_9
   \       0xF6   0x4281             CMP      R1,R0
   \       0xF8   0xD102             BNE.N    ??mbedtls_psa_hash_finish_10
   \       0xFA   0xF05F 0x081C      MOVS     R8,#+28
   \       0xFE   0xE025             B.N      ??mbedtls_psa_hash_finish_1
   \                     ??mbedtls_psa_hash_finish_10: (+1)
   \      0x100   0xF899 0x1000      LDRB     R1,[R9, #+0]
   \      0x104   0xF001 0x01FF      AND      R1,R1,#0xFF
   \      0x108   0xF051 0x7100      ORRS     R1,R1,#0x2000000
   \      0x10C   0x....             LDR.N    R0,??DataTable4_10
   \      0x10E   0x4281             CMP      R1,R0
   \      0x110   0xD102             BNE.N    ??mbedtls_psa_hash_finish_11
   \      0x112   0xF05F 0x0820      MOVS     R8,#+32
   \      0x116   0xE019             B.N      ??mbedtls_psa_hash_finish_1
   \                     ??mbedtls_psa_hash_finish_11: (+1)
   \      0x118   0xF899 0x1000      LDRB     R1,[R9, #+0]
   \      0x11C   0xF001 0x01FF      AND      R1,R1,#0xFF
   \      0x120   0xF051 0x7100      ORRS     R1,R1,#0x2000000
   \      0x124   0x....             LDR.N    R0,??DataTable4_11
   \      0x126   0x4281             CMP      R1,R0
   \      0x128   0xD102             BNE.N    ??mbedtls_psa_hash_finish_12
   \      0x12A   0xF05F 0x0830      MOVS     R8,#+48
   \      0x12E   0xE00D             B.N      ??mbedtls_psa_hash_finish_1
   \                     ??mbedtls_psa_hash_finish_12: (+1)
   \      0x130   0xF899 0x1000      LDRB     R1,[R9, #+0]
   \      0x134   0xF001 0x01FF      AND      R1,R1,#0xFF
   \      0x138   0xF051 0x7100      ORRS     R1,R1,#0x2000000
   \      0x13C   0x....             LDR.N    R0,??DataTable4_12
   \      0x13E   0x4281             CMP      R1,R0
   \      0x140   0xD102             BNE.N    ??mbedtls_psa_hash_finish_13
   \      0x142   0xF05F 0x0840      MOVS     R8,#+64
   \      0x146   0xE001             B.N      ??mbedtls_psa_hash_finish_1
   \                     ??mbedtls_psa_hash_finish_13: (+1)
   \      0x148   0xF05F 0x0800      MOVS     R8,#+0
    361          
    362              /* Fill the output buffer with something that isn't a valid hash
    363               * (barring an attack on the hash and deliberately-crafted input),
    364               * in case the caller doesn't check the return status properly. */
    365              *hash_length = hash_size;
   \                     ??mbedtls_psa_hash_finish_1: (+1)
   \      0x14C   0x6034             STR      R4,[R6, #+0]
    366              /* If hash_size is 0 then hash may be NULL and then the
    367               * call to memset would have undefined behavior. */
    368              if (hash_size != 0) {
   \      0x14E   0x2C00             CMP      R4,#+0
   \      0x150   0xD008             BEQ.N    ??mbedtls_psa_hash_finish_14
    369                  memset(hash, '!', hash_size);
   \      0x152   0x9400             STR      R4,[SP, #+0]
   \      0x154   0xF05F 0x0B21      MOVS     R11,#+33
   \      0x158   0x46AA             MOV      R10,R5
   \      0x15A   0x465A             MOV      R2,R11
   \      0x15C   0x9900             LDR      R1,[SP, #+0]
   \      0x15E   0x4650             MOV      R0,R10
   \      0x160   0x.... 0x....      BL       __aeabi_memset
    370              }
    371          
    372              if (hash_size < actual_hash_length) {
   \                     ??mbedtls_psa_hash_finish_14: (+1)
   \      0x164   0x4544             CMP      R4,R8
   \      0x166   0xD202             BCS.N    ??mbedtls_psa_hash_finish_15
    373                  status = PSA_ERROR_BUFFER_TOO_SMALL;
   \      0x168   0xF07F 0x0089      MVNS     R0,#+137
    374                  goto exit;
   \      0x16C   0xE024             B.N      ??mbedtls_psa_hash_finish_16
    375              }
    376          
    377              switch (operation->alg) {
   \                     ??mbedtls_psa_hash_finish_15: (+1)
   \      0x16E   0xF8D9 0x1000      LDR      R1,[R9, #+0]
   \      0x172   0x....             LDR.N    R0,??DataTable4
   \      0x174   0x1A09             SUBS     R1,R1,R0
   \      0x176   0xD004             BEQ.N    ??mbedtls_psa_hash_finish_17
   \      0x178   0x1EC9             SUBS     R1,R1,#+3
   \      0x17A   0xD009             BEQ.N    ??mbedtls_psa_hash_finish_18
   \      0x17C   0x1E49             SUBS     R1,R1,#+1
   \      0x17E   0xD00E             BEQ.N    ??mbedtls_psa_hash_finish_19
   \      0x180   0xE014             B.N      ??mbedtls_psa_hash_finish_20
    378          #if defined(MBEDTLS_PSA_BUILTIN_ALG_MD5)
    379                  case PSA_ALG_MD5:
    380                      ret = mbedtls_md5_finish(&operation->ctx.md5, hash);
    381                      break;
    382          #endif
    383          #if defined(MBEDTLS_PSA_BUILTIN_ALG_RIPEMD160)
    384                  case PSA_ALG_RIPEMD160:
    385                      ret = mbedtls_ripemd160_finish(&operation->ctx.ripemd160, hash);
    386                      break;
    387          #endif
    388          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA_1)
    389                  case PSA_ALG_SHA_1:
    390                      ret = mbedtls_sha1_finish(&operation->ctx.sha1, hash);
   \                     ??mbedtls_psa_hash_finish_17: (+1)
   \      0x182   0x0029             MOVS     R1,R5
   \      0x184   0xF119 0x0004      ADDS     R0,R9,#+4
   \      0x188   0x.... 0x....      BL       mbedtls_sha1_finish
   \      0x18C   0x0007             MOVS     R7,R0
    391                      break;
   \      0x18E   0xE010             B.N      ??mbedtls_psa_hash_finish_21
    392          #endif
    393          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA_224)
    394                  case PSA_ALG_SHA_224:
    395                      ret = mbedtls_sha256_finish(&operation->ctx.sha256, hash);
   \                     ??mbedtls_psa_hash_finish_18: (+1)
   \      0x190   0x0029             MOVS     R1,R5
   \      0x192   0xF119 0x0004      ADDS     R0,R9,#+4
   \      0x196   0x.... 0x....      BL       mbedtls_sha256_finish
   \      0x19A   0x0007             MOVS     R7,R0
    396                      break;
   \      0x19C   0xE009             B.N      ??mbedtls_psa_hash_finish_21
    397          #endif
    398          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA_256)
    399                  case PSA_ALG_SHA_256:
    400                      ret = mbedtls_sha256_finish(&operation->ctx.sha256, hash);
   \                     ??mbedtls_psa_hash_finish_19: (+1)
   \      0x19E   0x0029             MOVS     R1,R5
   \      0x1A0   0xF119 0x0004      ADDS     R0,R9,#+4
   \      0x1A4   0x.... 0x....      BL       mbedtls_sha256_finish
   \      0x1A8   0x0007             MOVS     R7,R0
    401                      break;
   \      0x1AA   0xE002             B.N      ??mbedtls_psa_hash_finish_21
    402          #endif
    403          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA_384)
    404                  case PSA_ALG_SHA_384:
    405                      ret = mbedtls_sha512_finish(&operation->ctx.sha512, hash);
    406                      break;
    407          #endif
    408          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA_512)
    409                  case PSA_ALG_SHA_512:
    410                      ret = mbedtls_sha512_finish(&operation->ctx.sha512, hash);
    411                      break;
    412          #endif
    413          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA3_224)
    414                  case PSA_ALG_SHA3_224:
    415          #endif
    416          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA3_256)
    417                  case PSA_ALG_SHA3_256:
    418          #endif
    419          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA3_384)
    420                  case PSA_ALG_SHA3_384:
    421          #endif
    422          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA3_512)
    423                  case PSA_ALG_SHA3_512:
    424          #endif
    425          #if defined(MBEDTLS_PSA_BUILTIN_ALG_SHA3_224) || \
    426              defined(MBEDTLS_PSA_BUILTIN_ALG_SHA3_256) || \
    427              defined(MBEDTLS_PSA_BUILTIN_ALG_SHA3_384) || \
    428              defined(MBEDTLS_PSA_BUILTIN_ALG_SHA3_512)
    429              ret = mbedtls_sha3_finish(&operation->ctx.sha3, hash, hash_size);
    430              break;
    431          #endif
    432                  default:
    433                      (void) hash;
    434                      return PSA_ERROR_BAD_STATE;
   \                     ??mbedtls_psa_hash_finish_20: (+1)
   \      0x1AC   0xF07F 0x0088      MVNS     R0,#+136
   \      0x1B0   0xE006             B.N      ??mbedtls_psa_hash_finish_22
    435              }
    436              status = mbedtls_to_psa_error(ret);
   \                     ??mbedtls_psa_hash_finish_21: (+1)
   \      0x1B2   0x0038             MOVS     R0,R7
   \      0x1B4   0x.... 0x....      BL       mbedtls_to_psa_error
    437          
    438          exit:
    439              if (status == PSA_SUCCESS) {
   \                     ??mbedtls_psa_hash_finish_16: (+1)
   \      0x1B8   0x2800             CMP      R0,#+0
   \      0x1BA   0xD101             BNE.N    ??mbedtls_psa_hash_finish_23
    440                  *hash_length = actual_hash_length;
   \      0x1BC   0xF8C6 0x8000      STR      R8,[R6, #+0]
    441              }
    442              return status;
   \                     ??mbedtls_psa_hash_finish_23: (+1)
   \                     ??mbedtls_psa_hash_finish_22: (+1)
   \      0x1C0   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}
    443          }
    444          

   \                                 In section .text, align 2, keep-with-next
    445          psa_status_t mbedtls_psa_hash_compute(
    446              psa_algorithm_t alg,
    447              const uint8_t *input,
    448              size_t input_length,
    449              uint8_t *hash,
    450              size_t hash_size,
    451              size_t *hash_length)
    452          {
   \                     mbedtls_psa_hash_compute: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0xB0B8             SUB      SP,SP,#+224
   \        0x6   0x4681             MOV      R9,R0
   \        0x8   0x000C             MOVS     R4,R1
   \        0xA   0x0015             MOVS     R5,R2
   \        0xC   0x001E             MOVS     R6,R3
   \        0xE   0x9F42             LDR      R7,[SP, #+264]
   \       0x10   0xF8DD 0x810C      LDR      R8,[SP, #+268]
    453              mbedtls_psa_hash_operation_t operation = MBEDTLS_PSA_HASH_OPERATION_INIT;
   \       0x14   0xA801             ADD      R0,SP,#+4
   \       0x16   0x21DC             MOVS     R1,#+220
   \       0x18   0x.... 0x....      BL       __aeabi_memclr4
    454              psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;
   \       0x1C   0xF07F 0x0B96      MVNS     R11,#+150
   \       0x20   0xF8CD 0xB000      STR      R11,[SP, #+0]
    455              psa_status_t abort_status = PSA_ERROR_CORRUPTION_DETECTED;
    456          
    457              *hash_length = hash_size;
   \       0x24   0xF8C8 0x7000      STR      R7,[R8, #+0]
    458              status = mbedtls_psa_hash_setup(&operation, alg);
   \       0x28   0x4649             MOV      R1,R9
   \       0x2A   0xA801             ADD      R0,SP,#+4
   \       0x2C   0x.... 0x....      BL       mbedtls_psa_hash_setup
   \       0x30   0x4682             MOV      R10,R0
    459              if (status != PSA_SUCCESS) {
   \       0x32   0xF1BA 0x0F00      CMP      R10,#+0
   \       0x36   0xD111             BNE.N    ??mbedtls_psa_hash_compute_0
    460                  goto exit;
    461              }
    462              status = mbedtls_psa_hash_update(&operation, input, input_length);
   \                     ??mbedtls_psa_hash_compute_1: (+1)
   \       0x38   0x002A             MOVS     R2,R5
   \       0x3A   0x0021             MOVS     R1,R4
   \       0x3C   0xA801             ADD      R0,SP,#+4
   \       0x3E   0x.... 0x....      BL       mbedtls_psa_hash_update
   \       0x42   0x4682             MOV      R10,R0
    463              if (status != PSA_SUCCESS) {
   \       0x44   0xF1BA 0x0F00      CMP      R10,#+0
   \       0x48   0xD108             BNE.N    ??mbedtls_psa_hash_compute_0
    464                  goto exit;
    465              }
    466              status = mbedtls_psa_hash_finish(&operation, hash, hash_size, hash_length);
   \                     ??mbedtls_psa_hash_compute_2: (+1)
   \       0x4A   0x4643             MOV      R3,R8
   \       0x4C   0x003A             MOVS     R2,R7
   \       0x4E   0x0031             MOVS     R1,R6
   \       0x50   0xA801             ADD      R0,SP,#+4
   \       0x52   0x.... 0x....      BL       mbedtls_psa_hash_finish
   \       0x56   0x4682             MOV      R10,R0
    467              if (status != PSA_SUCCESS) {
   \       0x58   0xF1BA 0x0F00      CMP      R10,#+0
    468                  goto exit;
    469              }
    470          
    471          exit:
    472              abort_status = mbedtls_psa_hash_abort(&operation);
   \                     ??mbedtls_psa_hash_compute_0: (+1)
   \       0x5C   0xA801             ADD      R0,SP,#+4
   \       0x5E   0x.... 0x....      BL       mbedtls_psa_hash_abort
   \       0x62   0x0001             MOVS     R1,R0
    473              if (status == PSA_SUCCESS) {
   \       0x64   0xF1BA 0x0F00      CMP      R10,#+0
   \       0x68   0xD101             BNE.N    ??mbedtls_psa_hash_compute_3
    474                  return abort_status;
   \       0x6A   0x0008             MOVS     R0,R1
   \       0x6C   0xE000             B.N      ??mbedtls_psa_hash_compute_4
    475              } else {
    476                  return status;
   \                     ??mbedtls_psa_hash_compute_3: (+1)
   \       0x6E   0x4650             MOV      R0,R10
   \                     ??mbedtls_psa_hash_compute_4: (+1)
   \       0x70   0xB039             ADD      SP,SP,#+228
   \       0x72   0xE8BD 0x8FF0      POP      {R4-R11,PC}
    477              }
    478          
    479          }

   \                                 In section .rodata, align 4
   \        0x0   0x0000'0000        DC32 0, 0
   \              0x0000'0000
   \        0x8                      DS8 212

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \        0x0   0x0200'0005        DC32     0x2000005

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \        0x0   0x0200'0003        DC32     0x2000003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \        0x0   0x0200'0004        DC32     0x2000004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \        0x0   0x0200'0008        DC32     0x2000008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \        0x0   0x0200'0009        DC32     0x2000009

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \        0x0   0x0200'000A        DC32     0x200000a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \        0x0   0x0200'000B        DC32     0x200000b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \        0x0   0x0200'000C        DC32     0x200000c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \        0x0   0x0200'000D        DC32     0x200000d

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \        0x0   0x0200'0010        DC32     0x2000010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \        0x0   0x0200'0011        DC32     0x2000011

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \        0x0   0x0200'0012        DC32     0x2000012

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_12:
   \        0x0   0x0200'0013        DC32     0x2000013
    480          #endif /* MBEDTLS_PSA_BUILTIN_HASH */
    481          
    482          #endif /* MBEDTLS_PSA_CRYPTO_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   mbedtls_psa_hash_abort
         8   -> mbedtls_sha1_free
         8   -> mbedtls_sha256_free
      16   mbedtls_psa_hash_clone
        16   -> mbedtls_sha1_clone
        16   -> mbedtls_sha256_clone
     264   mbedtls_psa_hash_compute
       264   -> __aeabi_memclr4
       264   -> mbedtls_psa_hash_abort
       264   -> mbedtls_psa_hash_finish
       264   -> mbedtls_psa_hash_setup
       264   -> mbedtls_psa_hash_update
      40   mbedtls_psa_hash_finish
        40   -> __aeabi_memset
        40   -> mbedtls_sha1_finish
        40   -> mbedtls_sha256_finish
        40   -> mbedtls_to_psa_error
      24   mbedtls_psa_hash_setup
        24   -> mbedtls_psa_hash_abort
        24   -> mbedtls_sha1_init
        24   -> mbedtls_sha1_starts
        24   -> mbedtls_sha256_init
        24   -> mbedtls_sha256_starts
        24   -> mbedtls_to_psa_error
      24   mbedtls_psa_hash_update
        24   -> mbedtls_sha1_update
        24   -> mbedtls_sha256_update
        24   -> mbedtls_to_psa_error


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
     220  ?_0
      68  mbedtls_psa_hash_abort
      78  mbedtls_psa_hash_clone
     118  mbedtls_psa_hash_compute
     452  mbedtls_psa_hash_finish
     136  mbedtls_psa_hash_setup
      90  mbedtls_psa_hash_update

 
 220 bytes in section .rodata
 994 bytes in section .text
 
 994 bytes of CODE  memory
 220 bytes of CONST memory

Errors: none
Warnings: none
