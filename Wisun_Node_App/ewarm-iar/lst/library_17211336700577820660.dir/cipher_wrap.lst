###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         29/Mar/2025  15:53:43
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\cipher_wrap.c
#    Command line                 =
#        -f "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\library_17211336700577820660.dir\cipher_wrap.o.rsp"
#        ("D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\cipher_wrap.c"
#        -D DEBUG_EFM=1 -D EFR32FG28B322F1024IM48=1 -D
#        configNUM_SDK_THREAD_LOCAL_STORAGE_POINTERS=2 -D
#        SL_COMPONENT_CATALOG_PRESENT=1 -D
#        MBEDTLS_CONFIG_FILE=<sl_mbedtls_config.h> -D
#        MBEDTLS_PSA_CRYPTO_CONFIG_FILE=<psa_crypto_config.h> -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -D
#        RTT_USE_ASM=0 -lC "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\lst\library_17211336700577820660.dir"
#        --diag_suppress Pa050 -o "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\library_17211336700577820660.dir"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M33 --cmse --cmse -e --fpu=VFPv5_sp --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        9.2\arm\inc\c\DLib_Config_Normal.h" -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\rail\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\wisun\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\.\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\Device\SiliconLabs\EFR32FG28\Include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_project_info\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\common\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\src\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\CMSIS\Core\Include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\CMSIS\RTOS2\Include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\device_init\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emdrv\common\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emlib\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\iostream\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\config\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\config\preset\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\cpu\include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\ports\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emdrv\nvm3\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\peripheral\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\printf\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\printf\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_psa_driver\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\common\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\ble\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\ieee802154\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\wmbus\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\zwave\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\chip\efr32\efr32xg2x\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\sidewalk\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\pa-conversions\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\pa-conversions\efr32xg28\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\rail_util_pti\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\se_manager\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\se_manager\src\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\segger\systemview\SEGGER\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\silicon_labs\silabs_core\memory_manager\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\common\toolchain\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\system\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_core\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_setting\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\cli_util\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\event_manager\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\ns_list\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\ping\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\nanostack\nanostack-libservice\mbed-client-libservice\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\udp_client\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\sleeptimer\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\plugin\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\stack\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\stack\inc\socket\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\autogen\\" -On
#        --use_c++_inline) --dependencies=n "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\library_17211336700577820660.dir\cipher_wrap.o.iar_deps"
#    Locale                       =  C
#    List file                    =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\lst\library_17211336700577820660.dir\cipher_wrap.lst
#    Object file                  =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\library_17211336700577820660.dir\cipher_wrap.o
#    Runtime model:                  
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_file_descriptor     =  0
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#
###############################################################################

D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\cipher_wrap.c
      1          /**
      2           * \file cipher_wrap.c
      3           *
      4           * \brief Generic cipher wrapper for Mbed TLS
      5           *
      6           * \author Adriaan de Jong <dejong@fox-it.com>
      7           *
      8           *  Copyright The Mbed TLS Contributors
      9           *  SPDX-License-Identifier: Apache-2.0
     10           *
     11           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
     12           *  not use this file except in compliance with the License.
     13           *  You may obtain a copy of the License at
     14           *
     15           *  http://www.apache.org/licenses/LICENSE-2.0
     16           *
     17           *  Unless required by applicable law or agreed to in writing, software
     18           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     19           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     20           *  See the License for the specific language governing permissions and
     21           *  limitations under the License.
     22           */
     23          
     24          #include "common.h"
     25          
     26          #if defined(MBEDTLS_CIPHER_C)
     27          
     28          #include "cipher_wrap.h"
     29          #include "mbedtls/error.h"
     30          
     31          #if defined(MBEDTLS_CHACHAPOLY_C)
     32          #include "mbedtls/chachapoly.h"
     33          #endif
     34          
     35          #if defined(MBEDTLS_AES_C)
     36          #include "mbedtls/aes.h"
     37          #endif
     38          
     39          #if defined(MBEDTLS_CAMELLIA_C)
     40          #include "mbedtls/camellia.h"
     41          #endif
     42          
     43          #if defined(MBEDTLS_ARIA_C)
     44          #include "mbedtls/aria.h"
     45          #endif
     46          
     47          #if defined(MBEDTLS_DES_C)
     48          #include "mbedtls/des.h"
     49          #endif
     50          
     51          #if defined(MBEDTLS_CHACHA20_C)
     52          #include "mbedtls/chacha20.h"
     53          #endif
     54          
     55          #if defined(MBEDTLS_GCM_C)
     56          #include "mbedtls/gcm.h"
     57          #endif
     58          
     59          #if defined(MBEDTLS_CCM_C)
     60          #include "mbedtls/ccm.h"
     61          #endif
     62          
     63          #if defined(MBEDTLS_NIST_KW_C)
     64          #include "mbedtls/nist_kw.h"
     65          #endif
     66          
     67          #if defined(MBEDTLS_CIPHER_NULL_CIPHER)
     68          #include <string.h>
     69          #endif
     70          
     71          #include "mbedtls/platform.h"
     72          
     73          enum mbedtls_cipher_base_index {
     74          #if defined(MBEDTLS_AES_C)
     75              MBEDTLS_CIPHER_BASE_INDEX_AES,
     76          #endif
     77          #if defined(MBEDTLS_ARIA_C)
     78              MBEDTLS_CIPHER_BASE_INDEX_ARIA,
     79          #endif
     80          #if defined(MBEDTLS_CAMELLIA_C)
     81              MBEDTLS_CIPHER_BASE_INDEX_CAMELLIA,
     82          #endif
     83          #if defined(MBEDTLS_CCM_C) && defined(MBEDTLS_AES_C)
     84              MBEDTLS_CIPHER_BASE_INDEX_CCM_AES,
     85          #endif
     86          #if defined(MBEDTLS_CCM_C) && defined(MBEDTLS_ARIA_C)
     87              MBEDTLS_CIPHER_BASE_INDEX_CCM_ARIA,
     88          #endif
     89          #if defined(MBEDTLS_CCM_C) && defined(MBEDTLS_CAMELLIA_C)
     90              MBEDTLS_CIPHER_BASE_INDEX_CCM_CAMELLIA,
     91          #endif
     92          #if defined(MBEDTLS_CHACHA20_C)
     93              MBEDTLS_CIPHER_BASE_INDEX_CHACHA20_BASE,
     94          #endif
     95          #if defined(MBEDTLS_CHACHAPOLY_C)
     96              MBEDTLS_CIPHER_BASE_INDEX_CHACHAPOLY_BASE,
     97          #endif
     98          #if defined(MBEDTLS_DES_C)
     99              MBEDTLS_CIPHER_BASE_INDEX_DES_EDE3,
    100          #endif
    101          #if defined(MBEDTLS_DES_C)
    102              MBEDTLS_CIPHER_BASE_INDEX_DES_EDE,
    103          #endif
    104          #if defined(MBEDTLS_DES_C)
    105              MBEDTLS_CIPHER_BASE_INDEX_DES,
    106          #endif
    107          #if defined(MBEDTLS_GCM_C) && defined(MBEDTLS_AES_C)
    108              MBEDTLS_CIPHER_BASE_INDEX_GCM_AES,
    109          #endif
    110          #if defined(MBEDTLS_GCM_C) && defined(MBEDTLS_ARIA_C)
    111              MBEDTLS_CIPHER_BASE_INDEX_GCM_ARIA,
    112          #endif
    113          #if defined(MBEDTLS_GCM_C) && defined(MBEDTLS_CAMELLIA_C)
    114              MBEDTLS_CIPHER_BASE_INDEX_GCM_CAMELLIA,
    115          #endif
    116          #if defined(MBEDTLS_NIST_KW_C)
    117              MBEDTLS_CIPHER_BASE_INDEX_KW_AES,
    118          #endif
    119          #if defined(MBEDTLS_CIPHER_NULL_CIPHER)
    120              MBEDTLS_CIPHER_BASE_INDEX_NULL_BASE,
    121          #endif
    122          #if defined(MBEDTLS_CIPHER_MODE_XTS) && defined(MBEDTLS_AES_C)
    123              MBEDTLS_CIPHER_BASE_INDEX_XTS_AES,
    124          #endif
    125              /* Prevent compile failure due to empty enum */
    126              MBEDTLS_CIPHER_BASE_PREVENT_EMPTY_ENUM
    127          };
    128          
    129          #if defined(MBEDTLS_GCM_C)
    130          /* shared by all GCM ciphers */
    131          static void *gcm_ctx_alloc(void)
    132          {
    133              void *ctx = mbedtls_calloc(1, sizeof(mbedtls_gcm_context));
    134          
    135              if (ctx != NULL) {
    136                  mbedtls_gcm_init((mbedtls_gcm_context *) ctx);
    137              }
    138          
    139              return ctx;
    140          }
    141          
    142          static void gcm_ctx_free(void *ctx)
    143          {
    144              mbedtls_gcm_free(ctx);
    145              mbedtls_free(ctx);
    146          }
    147          #endif /* MBEDTLS_GCM_C */
    148          
    149          #if defined(MBEDTLS_CCM_C)
    150          /* shared by all CCM ciphers */

   \                                 In section .text, align 2, keep-with-next
    151          static void *ccm_ctx_alloc(void)
    152          {
   \                     ccm_ctx_alloc: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    153              void *ctx = mbedtls_calloc(1, sizeof(mbedtls_ccm_context));
   \        0x2   0x2184             MOVS     R1,#+132
   \        0x4   0x2001             MOVS     R0,#+1
   \        0x6   0x.... 0x....      BL       sl_calloc
   \        0xA   0x0004             MOVS     R4,R0
    154          
    155              if (ctx != NULL) {
   \        0xC   0x2C00             CMP      R4,#+0
   \        0xE   0xD002             BEQ.N    ??ccm_ctx_alloc_0
    156                  mbedtls_ccm_init((mbedtls_ccm_context *) ctx);
   \       0x10   0x0020             MOVS     R0,R4
   \       0x12   0x.... 0x....      BL       mbedtls_ccm_init
    157              }
    158          
    159              return ctx;
   \                     ??ccm_ctx_alloc_0: (+1)
   \       0x16   0x0020             MOVS     R0,R4
   \       0x18   0xBD10             POP      {R4,PC}
    160          }
    161          

   \                                 In section .text, align 2, keep-with-next
    162          static void ccm_ctx_free(void *ctx)
    163          {
   \                     ccm_ctx_free: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    164              mbedtls_ccm_free(ctx);
   \        0x4   0x0020             MOVS     R0,R4
   \        0x6   0x.... 0x....      BL       mbedtls_ccm_free
    165              mbedtls_free(ctx);
   \        0xA   0x0020             MOVS     R0,R4
   \        0xC   0x.... 0x....      BL       sl_free
    166          }
   \       0x10   0xBD10             POP      {R4,PC}
    167          #endif /* MBEDTLS_CCM_C */
    168          
    169          #if defined(MBEDTLS_AES_C)
    170          

   \                                 In section .text, align 2, keep-with-next
    171          static int aes_crypt_ecb_wrap(void *ctx, mbedtls_operation_t operation,
    172                                        const unsigned char *input, unsigned char *output)
    173          {
   \                     aes_crypt_ecb_wrap: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0007             MOVS     R7,R0
   \        0x4   0x000C             MOVS     R4,R1
   \        0x6   0x0015             MOVS     R5,R2
   \        0x8   0x001E             MOVS     R6,R3
    174              return mbedtls_aes_crypt_ecb((mbedtls_aes_context *) ctx, operation, input, output);
   \        0xA   0x0033             MOVS     R3,R6
   \        0xC   0x002A             MOVS     R2,R5
   \        0xE   0x0021             MOVS     R1,R4
   \       0x10   0xB249             SXTB     R1,R1
   \       0x12   0x0038             MOVS     R0,R7
   \       0x14   0x.... 0x....      BL       mbedtls_aes_crypt_ecb
   \       0x18   0xBDF2             POP      {R1,R4-R7,PC}
    175          }
    176          
    177          #if defined(MBEDTLS_CIPHER_MODE_CBC)

   \                                 In section .text, align 2, keep-with-next
    178          static int aes_crypt_cbc_wrap(void *ctx, mbedtls_operation_t operation, size_t length,
    179                                        unsigned char *iv, const unsigned char *input, unsigned char *output)
    180          {
   \                     aes_crypt_cbc_wrap: (+1)
   \        0x0   0xB5FE             PUSH     {R1-R7,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0x0016             MOVS     R6,R2
   \        0x8   0x001F             MOVS     R7,R3
    181              return mbedtls_aes_crypt_cbc((mbedtls_aes_context *) ctx, operation, length, iv, input,
    182                                           output);
   \        0xA   0x9809             LDR      R0,[SP, #+36]
   \        0xC   0x9001             STR      R0,[SP, #+4]
   \        0xE   0x9808             LDR      R0,[SP, #+32]
   \       0x10   0x9000             STR      R0,[SP, #+0]
   \       0x12   0x003B             MOVS     R3,R7
   \       0x14   0x0032             MOVS     R2,R6
   \       0x16   0x0029             MOVS     R1,R5
   \       0x18   0xB249             SXTB     R1,R1
   \       0x1A   0x0020             MOVS     R0,R4
   \       0x1C   0x.... 0x....      BL       mbedtls_aes_crypt_cbc
   \       0x20   0xBDFE             POP      {R1-R7,PC}
    183          }
    184          #endif /* MBEDTLS_CIPHER_MODE_CBC */
    185          
    186          #if defined(MBEDTLS_CIPHER_MODE_CFB)
    187          static int aes_crypt_cfb128_wrap(void *ctx, mbedtls_operation_t operation,
    188                                           size_t length, size_t *iv_off, unsigned char *iv,
    189                                           const unsigned char *input, unsigned char *output)
    190          {
    191              return mbedtls_aes_crypt_cfb128((mbedtls_aes_context *) ctx, operation, length, iv_off, iv,
    192                                              input, output);
    193          }
    194          #endif /* MBEDTLS_CIPHER_MODE_CFB */
    195          
    196          #if defined(MBEDTLS_CIPHER_MODE_OFB)
    197          static int aes_crypt_ofb_wrap(void *ctx, size_t length, size_t *iv_off,
    198                                        unsigned char *iv, const unsigned char *input, unsigned char *output)
    199          {
    200              return mbedtls_aes_crypt_ofb((mbedtls_aes_context *) ctx, length, iv_off,
    201                                           iv, input, output);
    202          }
    203          #endif /* MBEDTLS_CIPHER_MODE_OFB */
    204          
    205          #if defined(MBEDTLS_CIPHER_MODE_CTR)
    206          static int aes_crypt_ctr_wrap(void *ctx, size_t length, size_t *nc_off,
    207                                        unsigned char *nonce_counter, unsigned char *stream_block,
    208                                        const unsigned char *input, unsigned char *output)
    209          {
    210              return mbedtls_aes_crypt_ctr((mbedtls_aes_context *) ctx, length, nc_off, nonce_counter,
    211                                           stream_block, input, output);
    212          }
    213          #endif /* MBEDTLS_CIPHER_MODE_CTR */
    214          
    215          #if defined(MBEDTLS_CIPHER_MODE_XTS)
    216          static int aes_crypt_xts_wrap(void *ctx, mbedtls_operation_t operation,
    217                                        size_t length,
    218                                        const unsigned char data_unit[16],
    219                                        const unsigned char *input,
    220                                        unsigned char *output)
    221          {
    222              mbedtls_aes_xts_context *xts_ctx = ctx;
    223              int mode;
    224          
    225              switch (operation) {
    226                  case MBEDTLS_ENCRYPT:
    227                      mode = MBEDTLS_AES_ENCRYPT;
    228                      break;
    229                  case MBEDTLS_DECRYPT:
    230                      mode = MBEDTLS_AES_DECRYPT;
    231                      break;
    232                  default:
    233                      return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
    234              }
    235          
    236              return mbedtls_aes_crypt_xts(xts_ctx, mode, length,
    237                                           data_unit, input, output);
    238          }
    239          #endif /* MBEDTLS_CIPHER_MODE_XTS */
    240          

   \                                 In section .text, align 2, keep-with-next
    241          static int aes_setkey_dec_wrap(void *ctx, const unsigned char *key,
    242                                         unsigned int key_bitlen)
    243          {
   \                     aes_setkey_dec_wrap: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0006             MOVS     R6,R0
   \        0x4   0x000C             MOVS     R4,R1
   \        0x6   0x0015             MOVS     R5,R2
    244              return mbedtls_aes_setkey_dec((mbedtls_aes_context *) ctx, key, key_bitlen);
   \        0x8   0x002A             MOVS     R2,R5
   \        0xA   0x0021             MOVS     R1,R4
   \        0xC   0x0030             MOVS     R0,R6
   \        0xE   0x.... 0x....      BL       mbedtls_aes_setkey_dec
   \       0x12   0xBD70             POP      {R4-R6,PC}
    245          }
    246          

   \                                 In section .text, align 2, keep-with-next
    247          static int aes_setkey_enc_wrap(void *ctx, const unsigned char *key,
    248                                         unsigned int key_bitlen)
    249          {
   \                     aes_setkey_enc_wrap: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0006             MOVS     R6,R0
   \        0x4   0x000C             MOVS     R4,R1
   \        0x6   0x0015             MOVS     R5,R2
    250              return mbedtls_aes_setkey_enc((mbedtls_aes_context *) ctx, key, key_bitlen);
   \        0x8   0x002A             MOVS     R2,R5
   \        0xA   0x0021             MOVS     R1,R4
   \        0xC   0x0030             MOVS     R0,R6
   \        0xE   0x.... 0x....      BL       mbedtls_aes_setkey_enc
   \       0x12   0xBD70             POP      {R4-R6,PC}
    251          }
    252          

   \                                 In section .text, align 2, keep-with-next
    253          static void *aes_ctx_alloc(void)
    254          {
   \                     aes_ctx_alloc: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    255              mbedtls_aes_context *aes = mbedtls_calloc(1, sizeof(mbedtls_aes_context));
   \        0x2   0x2124             MOVS     R1,#+36
   \        0x4   0x2001             MOVS     R0,#+1
   \        0x6   0x.... 0x....      BL       sl_calloc
   \        0xA   0x0004             MOVS     R4,R0
    256          
    257              if (aes == NULL) {
   \        0xC   0x2C00             CMP      R4,#+0
   \        0xE   0xD101             BNE.N    ??aes_ctx_alloc_0
    258                  return NULL;
   \       0x10   0x2000             MOVS     R0,#+0
   \       0x12   0xE003             B.N      ??aes_ctx_alloc_1
    259              }
    260          
    261              mbedtls_aes_init(aes);
   \                     ??aes_ctx_alloc_0: (+1)
   \       0x14   0x0020             MOVS     R0,R4
   \       0x16   0x.... 0x....      BL       mbedtls_aes_init
    262          
    263              return aes;
   \       0x1A   0x0020             MOVS     R0,R4
   \                     ??aes_ctx_alloc_1: (+1)
   \       0x1C   0xBD10             POP      {R4,PC}
    264          }
    265          

   \                                 In section .text, align 2, keep-with-next
    266          static void aes_ctx_free(void *ctx)
    267          {
   \                     aes_ctx_free: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    268              mbedtls_aes_free((mbedtls_aes_context *) ctx);
   \        0x4   0x0020             MOVS     R0,R4
   \        0x6   0x.... 0x....      BL       mbedtls_aes_free
    269              mbedtls_free(ctx);
   \        0xA   0x0020             MOVS     R0,R4
   \        0xC   0x.... 0x....      BL       sl_free
    270          }
   \       0x10   0xBD10             POP      {R4,PC}
    271          

   \                                 In section .rodata, align 4
    272          static const mbedtls_cipher_base_t aes_info = {
   \                     aes_info:
   \        0x0   0x02               DC8 2
   \        0x1                      DS8 3
   \        0x4   0x....'....        DC32 aes_crypt_ecb_wrap, aes_crypt_cbc_wrap, aes_setkey_enc_wrap
   \              0x....'....  
   \              0x....'....
   \       0x10   0x....'....        DC32 aes_setkey_dec_wrap, aes_ctx_alloc, aes_ctx_free
   \              0x....'....  
   \              0x....'....
    273              MBEDTLS_CIPHER_ID_AES,
    274              aes_crypt_ecb_wrap,
    275          #if defined(MBEDTLS_CIPHER_MODE_CBC)
    276              aes_crypt_cbc_wrap,
    277          #endif
    278          #if defined(MBEDTLS_CIPHER_MODE_CFB)
    279              aes_crypt_cfb128_wrap,
    280          #endif
    281          #if defined(MBEDTLS_CIPHER_MODE_OFB)
    282              aes_crypt_ofb_wrap,
    283          #endif
    284          #if defined(MBEDTLS_CIPHER_MODE_CTR)
    285              aes_crypt_ctr_wrap,
    286          #endif
    287          #if defined(MBEDTLS_CIPHER_MODE_XTS)
    288              NULL,
    289          #endif
    290          #if defined(MBEDTLS_CIPHER_MODE_STREAM)
    291              NULL,
    292          #endif
    293              aes_setkey_enc_wrap,
    294              aes_setkey_dec_wrap,
    295              aes_ctx_alloc,
    296              aes_ctx_free
    297          };
    298          

   \                                 In section .rodata, align 4
    299          static const mbedtls_cipher_info_t aes_128_ecb_info = {
   \                     aes_128_ecb_info:
   \        0x0   0x....'....        DC32 ?_0
   \        0x4   0x10 0x12          DC8 16, 18, 2, 0
   \              0x02 0x00
    300              "AES-128-ECB",
    301              16,
    302              0 >> MBEDTLS_IV_SIZE_SHIFT,
    303              128 >> MBEDTLS_KEY_BITLEN_SHIFT,
    304              MBEDTLS_MODE_ECB,
    305              MBEDTLS_CIPHER_AES_128_ECB,
    306              0,
    307              MBEDTLS_CIPHER_BASE_INDEX_AES
    308          };
    309          
    310          #if !defined(MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH)

   \                                 In section .rodata, align 4
    311          static const mbedtls_cipher_info_t aes_192_ecb_info = {
   \                     aes_192_ecb_info:
   \        0x0   0x....'....        DC32 ?_1
   \        0x4   0x10 0x13          DC8 16, 19, 3, 0
   \              0x03 0x00
    312              "AES-192-ECB",
    313              16,
    314              0 >> MBEDTLS_IV_SIZE_SHIFT,
    315              192 >> MBEDTLS_KEY_BITLEN_SHIFT,
    316              MBEDTLS_MODE_ECB,
    317              MBEDTLS_CIPHER_AES_192_ECB,
    318              0,
    319              MBEDTLS_CIPHER_BASE_INDEX_AES
    320          };
    321          

   \                                 In section .rodata, align 4
    322          static const mbedtls_cipher_info_t aes_256_ecb_info = {
   \                     aes_256_ecb_info:
   \        0x0   0x....'....        DC32 ?_2
   \        0x4   0x10 0x14          DC8 16, 20, 4, 0
   \              0x04 0x00
    323              "AES-256-ECB",
    324              16,
    325              0 >> MBEDTLS_IV_SIZE_SHIFT,
    326              256 >> MBEDTLS_KEY_BITLEN_SHIFT,
    327              MBEDTLS_MODE_ECB,
    328              MBEDTLS_CIPHER_AES_256_ECB,
    329              0,
    330              MBEDTLS_CIPHER_BASE_INDEX_AES
    331          };
    332          #endif
    333          
    334          #if defined(MBEDTLS_CIPHER_MODE_CBC)

   \                                 In section .rodata, align 4
    335          static const mbedtls_cipher_info_t aes_128_cbc_info = {
   \                     aes_128_cbc_info:
   \        0x0   0x....'....        DC32 ?_3
   \        0x4   0x90 0x22          DC8 144, 34, 5, 0
   \              0x05 0x00
    336              "AES-128-CBC",
    337              16,
    338              16 >> MBEDTLS_IV_SIZE_SHIFT,
    339              128 >> MBEDTLS_KEY_BITLEN_SHIFT,
    340              MBEDTLS_MODE_CBC,
    341              MBEDTLS_CIPHER_AES_128_CBC,
    342              0,
    343              MBEDTLS_CIPHER_BASE_INDEX_AES
    344          };
    345          
    346          #if !defined(MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH)

   \                                 In section .rodata, align 4
    347          static const mbedtls_cipher_info_t aes_192_cbc_info = {
   \                     aes_192_cbc_info:
   \        0x0   0x....'....        DC32 ?_4
   \        0x4   0x90 0x23          DC8 144, 35, 6, 0
   \              0x06 0x00
    348              "AES-192-CBC",
    349              16,
    350              16 >> MBEDTLS_IV_SIZE_SHIFT,
    351              192 >> MBEDTLS_KEY_BITLEN_SHIFT,
    352              MBEDTLS_MODE_CBC,
    353              MBEDTLS_CIPHER_AES_192_CBC,
    354              0,
    355              MBEDTLS_CIPHER_BASE_INDEX_AES
    356          };
    357          

   \                                 In section .rodata, align 4
    358          static const mbedtls_cipher_info_t aes_256_cbc_info = {
   \                     aes_256_cbc_info:
   \        0x0   0x....'....        DC32 ?_5
   \        0x4   0x90 0x24          DC8 144, 36, 7, 0
   \              0x07 0x00
    359              "AES-256-CBC",
    360              16,
    361              16 >> MBEDTLS_IV_SIZE_SHIFT,
    362              256 >> MBEDTLS_KEY_BITLEN_SHIFT,
    363              MBEDTLS_MODE_CBC,
    364              MBEDTLS_CIPHER_AES_256_CBC,
    365              0,
    366              MBEDTLS_CIPHER_BASE_INDEX_AES
    367          };
    368          #endif
    369          #endif /* MBEDTLS_CIPHER_MODE_CBC */
    370          
    371          #if defined(MBEDTLS_CIPHER_MODE_CFB)
    372          static const mbedtls_cipher_info_t aes_128_cfb128_info = {
    373              "AES-128-CFB128",
    374              16,
    375              16 >> MBEDTLS_IV_SIZE_SHIFT,
    376              128 >> MBEDTLS_KEY_BITLEN_SHIFT,
    377              MBEDTLS_MODE_CFB,
    378              MBEDTLS_CIPHER_AES_128_CFB128,
    379              0,
    380              MBEDTLS_CIPHER_BASE_INDEX_AES
    381          };
    382          
    383          #if !defined(MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH)
    384          static const mbedtls_cipher_info_t aes_192_cfb128_info = {
    385              "AES-192-CFB128",
    386              16,
    387              16 >> MBEDTLS_IV_SIZE_SHIFT,
    388              192 >> MBEDTLS_KEY_BITLEN_SHIFT,
    389              MBEDTLS_MODE_CFB,
    390              MBEDTLS_CIPHER_AES_192_CFB128,
    391              0,
    392              MBEDTLS_CIPHER_BASE_INDEX_AES
    393          };
    394          
    395          static const mbedtls_cipher_info_t aes_256_cfb128_info = {
    396              "AES-256-CFB128",
    397              16,
    398              16 >> MBEDTLS_IV_SIZE_SHIFT,
    399              256 >> MBEDTLS_KEY_BITLEN_SHIFT,
    400              MBEDTLS_MODE_CFB,
    401              MBEDTLS_CIPHER_AES_256_CFB128,
    402              0,
    403              MBEDTLS_CIPHER_BASE_INDEX_AES
    404          };
    405          #endif
    406          #endif /* MBEDTLS_CIPHER_MODE_CFB */
    407          
    408          #if defined(MBEDTLS_CIPHER_MODE_OFB)
    409          static const mbedtls_cipher_info_t aes_128_ofb_info = {
    410              "AES-128-OFB",
    411              16,
    412              16 >> MBEDTLS_IV_SIZE_SHIFT,
    413              128 >> MBEDTLS_KEY_BITLEN_SHIFT,
    414              MBEDTLS_MODE_OFB,
    415              MBEDTLS_CIPHER_AES_128_OFB,
    416              0,
    417              MBEDTLS_CIPHER_BASE_INDEX_AES
    418          };
    419          
    420          #if !defined(MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH)
    421          static const mbedtls_cipher_info_t aes_192_ofb_info = {
    422              "AES-192-OFB",
    423              16,
    424              16 >> MBEDTLS_IV_SIZE_SHIFT,
    425              192 >> MBEDTLS_KEY_BITLEN_SHIFT,
    426              MBEDTLS_MODE_OFB,
    427              MBEDTLS_CIPHER_AES_192_OFB,
    428              0,
    429              MBEDTLS_CIPHER_BASE_INDEX_AES
    430          };
    431          
    432          static const mbedtls_cipher_info_t aes_256_ofb_info = {
    433              "AES-256-OFB",
    434              16,
    435              16 >> MBEDTLS_IV_SIZE_SHIFT,
    436              256 >> MBEDTLS_KEY_BITLEN_SHIFT,
    437              MBEDTLS_MODE_OFB,
    438              MBEDTLS_CIPHER_AES_256_OFB,
    439              0,
    440              MBEDTLS_CIPHER_BASE_INDEX_AES
    441          };
    442          #endif
    443          #endif /* MBEDTLS_CIPHER_MODE_OFB */
    444          
    445          #if defined(MBEDTLS_CIPHER_MODE_CTR)
    446          static const mbedtls_cipher_info_t aes_128_ctr_info = {
    447              "AES-128-CTR",
    448              16,
    449              16 >> MBEDTLS_IV_SIZE_SHIFT,
    450              128 >> MBEDTLS_KEY_BITLEN_SHIFT,
    451              MBEDTLS_MODE_CTR,
    452              MBEDTLS_CIPHER_AES_128_CTR,
    453              0,
    454              MBEDTLS_CIPHER_BASE_INDEX_AES
    455          };
    456          
    457          #if !defined(MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH)
    458          static const mbedtls_cipher_info_t aes_192_ctr_info = {
    459              "AES-192-CTR",
    460              16,
    461              16 >> MBEDTLS_IV_SIZE_SHIFT,
    462              192 >> MBEDTLS_KEY_BITLEN_SHIFT,
    463              MBEDTLS_MODE_CTR,
    464              MBEDTLS_CIPHER_AES_192_CTR,
    465              0,
    466              MBEDTLS_CIPHER_BASE_INDEX_AES
    467          };
    468          
    469          static const mbedtls_cipher_info_t aes_256_ctr_info = {
    470              "AES-256-CTR",
    471              16,
    472              16 >> MBEDTLS_IV_SIZE_SHIFT,
    473              256 >> MBEDTLS_KEY_BITLEN_SHIFT,
    474              MBEDTLS_MODE_CTR,
    475              MBEDTLS_CIPHER_AES_256_CTR,
    476              0,
    477              MBEDTLS_CIPHER_BASE_INDEX_AES
    478          };
    479          #endif
    480          #endif /* MBEDTLS_CIPHER_MODE_CTR */
    481          
    482          #if defined(MBEDTLS_CIPHER_MODE_XTS)
    483          static int xts_aes_setkey_enc_wrap(void *ctx, const unsigned char *key,
    484                                             unsigned int key_bitlen)
    485          {
    486              mbedtls_aes_xts_context *xts_ctx = ctx;
    487              return mbedtls_aes_xts_setkey_enc(xts_ctx, key, key_bitlen);
    488          }
    489          
    490          static int xts_aes_setkey_dec_wrap(void *ctx, const unsigned char *key,
    491                                             unsigned int key_bitlen)
    492          {
    493              mbedtls_aes_xts_context *xts_ctx = ctx;
    494              return mbedtls_aes_xts_setkey_dec(xts_ctx, key, key_bitlen);
    495          }
    496          
    497          static void *xts_aes_ctx_alloc(void)
    498          {
    499              mbedtls_aes_xts_context *xts_ctx = mbedtls_calloc(1, sizeof(*xts_ctx));
    500          
    501              if (xts_ctx != NULL) {
    502                  mbedtls_aes_xts_init(xts_ctx);
    503              }
    504          
    505              return xts_ctx;
    506          }
    507          
    508          static void xts_aes_ctx_free(void *ctx)
    509          {
    510              mbedtls_aes_xts_context *xts_ctx = ctx;
    511          
    512              if (xts_ctx == NULL) {
    513                  return;
    514              }
    515          
    516              mbedtls_aes_xts_free(xts_ctx);
    517              mbedtls_free(xts_ctx);
    518          }
    519          
    520          static const mbedtls_cipher_base_t xts_aes_info = {
    521              MBEDTLS_CIPHER_ID_AES,
    522              NULL,
    523          #if defined(MBEDTLS_CIPHER_MODE_CBC)
    524              NULL,
    525          #endif
    526          #if defined(MBEDTLS_CIPHER_MODE_CFB)
    527              NULL,
    528          #endif
    529          #if defined(MBEDTLS_CIPHER_MODE_OFB)
    530              NULL,
    531          #endif
    532          #if defined(MBEDTLS_CIPHER_MODE_CTR)
    533              NULL,
    534          #endif
    535          #if defined(MBEDTLS_CIPHER_MODE_XTS)
    536              aes_crypt_xts_wrap,
    537          #endif
    538          #if defined(MBEDTLS_CIPHER_MODE_STREAM)
    539              NULL,
    540          #endif
    541              xts_aes_setkey_enc_wrap,
    542              xts_aes_setkey_dec_wrap,
    543              xts_aes_ctx_alloc,
    544              xts_aes_ctx_free
    545          };
    546          
    547          static const mbedtls_cipher_info_t aes_128_xts_info = {
    548              "AES-128-XTS",
    549              16,
    550              16 >> MBEDTLS_IV_SIZE_SHIFT,
    551              256 >> MBEDTLS_KEY_BITLEN_SHIFT,
    552              MBEDTLS_MODE_XTS,
    553              MBEDTLS_CIPHER_AES_128_XTS,
    554              0,
    555              MBEDTLS_CIPHER_BASE_INDEX_XTS_AES
    556          };
    557          
    558          #if !defined(MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH)
    559          static const mbedtls_cipher_info_t aes_256_xts_info = {
    560              "AES-256-XTS",
    561              16,
    562              16 >> MBEDTLS_IV_SIZE_SHIFT,
    563              512 >> MBEDTLS_KEY_BITLEN_SHIFT,
    564              MBEDTLS_MODE_XTS,
    565              MBEDTLS_CIPHER_AES_256_XTS,
    566              0,
    567              MBEDTLS_CIPHER_BASE_INDEX_XTS_AES
    568          };
    569          #endif
    570          #endif /* MBEDTLS_CIPHER_MODE_XTS */
    571          
    572          #if defined(MBEDTLS_GCM_C)
    573          static int gcm_aes_setkey_wrap(void *ctx, const unsigned char *key,
    574                                         unsigned int key_bitlen)
    575          {
    576              return mbedtls_gcm_setkey((mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
    577                                        key, key_bitlen);
    578          }
    579          
    580          static const mbedtls_cipher_base_t gcm_aes_info = {
    581              MBEDTLS_CIPHER_ID_AES,
    582              NULL,
    583          #if defined(MBEDTLS_CIPHER_MODE_CBC)
    584              NULL,
    585          #endif
    586          #if defined(MBEDTLS_CIPHER_MODE_CFB)
    587              NULL,
    588          #endif
    589          #if defined(MBEDTLS_CIPHER_MODE_OFB)
    590              NULL,
    591          #endif
    592          #if defined(MBEDTLS_CIPHER_MODE_CTR)
    593              NULL,
    594          #endif
    595          #if defined(MBEDTLS_CIPHER_MODE_XTS)
    596              NULL,
    597          #endif
    598          #if defined(MBEDTLS_CIPHER_MODE_STREAM)
    599              NULL,
    600          #endif
    601              gcm_aes_setkey_wrap,
    602              gcm_aes_setkey_wrap,
    603              gcm_ctx_alloc,
    604              gcm_ctx_free,
    605          };
    606          
    607          static const mbedtls_cipher_info_t aes_128_gcm_info = {
    608              "AES-128-GCM",
    609              16,
    610              12 >> MBEDTLS_IV_SIZE_SHIFT,
    611              128 >> MBEDTLS_KEY_BITLEN_SHIFT,
    612              MBEDTLS_MODE_GCM,
    613              MBEDTLS_CIPHER_AES_128_GCM,
    614              MBEDTLS_CIPHER_VARIABLE_IV_LEN,
    615              MBEDTLS_CIPHER_BASE_INDEX_GCM_AES
    616          };
    617          
    618          #if !defined(MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH)
    619          static const mbedtls_cipher_info_t aes_192_gcm_info = {
    620              "AES-192-GCM",
    621              16,
    622              12 >> MBEDTLS_IV_SIZE_SHIFT,
    623              192 >> MBEDTLS_KEY_BITLEN_SHIFT,
    624              MBEDTLS_MODE_GCM,
    625              MBEDTLS_CIPHER_AES_192_GCM,
    626              MBEDTLS_CIPHER_VARIABLE_IV_LEN,
    627              MBEDTLS_CIPHER_BASE_INDEX_GCM_AES
    628          };
    629          
    630          static const mbedtls_cipher_info_t aes_256_gcm_info = {
    631              "AES-256-GCM",
    632              16,
    633              12 >> MBEDTLS_IV_SIZE_SHIFT,
    634              256 >> MBEDTLS_KEY_BITLEN_SHIFT,
    635              MBEDTLS_MODE_GCM,
    636              MBEDTLS_CIPHER_AES_256_GCM,
    637              MBEDTLS_CIPHER_VARIABLE_IV_LEN,
    638              MBEDTLS_CIPHER_BASE_INDEX_GCM_AES
    639          };
    640          #endif
    641          #endif /* MBEDTLS_GCM_C */
    642          
    643          #if defined(MBEDTLS_CCM_C)

   \                                 In section .text, align 2, keep-with-next
    644          static int ccm_aes_setkey_wrap(void *ctx, const unsigned char *key,
    645                                         unsigned int key_bitlen)
    646          {
   \                     ccm_aes_setkey_wrap: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0006             MOVS     R6,R0
   \        0x4   0x000C             MOVS     R4,R1
   \        0x6   0x0015             MOVS     R5,R2
    647              return mbedtls_ccm_setkey((mbedtls_ccm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
    648                                        key, key_bitlen);
   \        0x8   0x002B             MOVS     R3,R5
   \        0xA   0x0022             MOVS     R2,R4
   \        0xC   0x2102             MOVS     R1,#+2
   \        0xE   0x0030             MOVS     R0,R6
   \       0x10   0x.... 0x....      BL       mbedtls_ccm_setkey
   \       0x14   0xBD70             POP      {R4-R6,PC}
    649          }
    650          

   \                                 In section .rodata, align 4
    651          static const mbedtls_cipher_base_t ccm_aes_info = {
   \                     ccm_aes_info:
   \        0x0   0x02               DC8 2
   \        0x1                      DS8 3
   \        0x4   0x0000'0000        DC32 0x0, 0x0, ccm_aes_setkey_wrap, ccm_aes_setkey_wrap, ccm_ctx_alloc
   \              0x0000'0000  
   \              0x....'....  
   \              0x....'....  
   \              0x....'....
   \       0x18   0x....'....        DC32 ccm_ctx_free
    652              MBEDTLS_CIPHER_ID_AES,
    653              NULL,
    654          #if defined(MBEDTLS_CIPHER_MODE_CBC)
    655              NULL,
    656          #endif
    657          #if defined(MBEDTLS_CIPHER_MODE_CFB)
    658              NULL,
    659          #endif
    660          #if defined(MBEDTLS_CIPHER_MODE_OFB)
    661              NULL,
    662          #endif
    663          #if defined(MBEDTLS_CIPHER_MODE_CTR)
    664              NULL,
    665          #endif
    666          #if defined(MBEDTLS_CIPHER_MODE_XTS)
    667              NULL,
    668          #endif
    669          #if defined(MBEDTLS_CIPHER_MODE_STREAM)
    670              NULL,
    671          #endif
    672              ccm_aes_setkey_wrap,
    673              ccm_aes_setkey_wrap,
    674              ccm_ctx_alloc,
    675              ccm_ctx_free,
    676          };
    677          

   \                                 In section .rodata, align 4
    678          static const mbedtls_cipher_info_t aes_128_ccm_info = {
   \                     aes_128_ccm_info:
   \        0x0   0x....'....        DC32 ?_6
   \        0x4   0x70 0x82          DC8 112, 130, 38, 5
   \              0x26 0x05
    679              "AES-128-CCM",
    680              16,
    681              12 >> MBEDTLS_IV_SIZE_SHIFT,
    682              128 >> MBEDTLS_KEY_BITLEN_SHIFT,
    683              MBEDTLS_MODE_CCM,
    684              MBEDTLS_CIPHER_AES_128_CCM,
    685              MBEDTLS_CIPHER_VARIABLE_IV_LEN,
    686              MBEDTLS_CIPHER_BASE_INDEX_CCM_AES
    687          };
    688          
    689          #if !defined(MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH)

   \                                 In section .rodata, align 4
    690          static const mbedtls_cipher_info_t aes_192_ccm_info = {
   \                     aes_192_ccm_info:
   \        0x0   0x....'....        DC32 ?_7
   \        0x4   0x70 0x83          DC8 112, 131, 39, 5
   \              0x27 0x05
    691              "AES-192-CCM",
    692              16,
    693              12 >> MBEDTLS_IV_SIZE_SHIFT,
    694              192 >> MBEDTLS_KEY_BITLEN_SHIFT,
    695              MBEDTLS_MODE_CCM,
    696              MBEDTLS_CIPHER_AES_192_CCM,
    697              MBEDTLS_CIPHER_VARIABLE_IV_LEN,
    698              MBEDTLS_CIPHER_BASE_INDEX_CCM_AES
    699          };
    700          

   \                                 In section .rodata, align 4
    701          static const mbedtls_cipher_info_t aes_256_ccm_info = {
   \                     aes_256_ccm_info:
   \        0x0   0x....'....        DC32 ?_8
   \        0x4   0x70 0x84          DC8 112, 132, 40, 5
   \              0x28 0x05
    702              "AES-256-CCM",
    703              16,
    704              12 >> MBEDTLS_IV_SIZE_SHIFT,
    705              256 >> MBEDTLS_KEY_BITLEN_SHIFT,
    706              MBEDTLS_MODE_CCM,
    707              MBEDTLS_CIPHER_AES_256_CCM,
    708              MBEDTLS_CIPHER_VARIABLE_IV_LEN,
    709              MBEDTLS_CIPHER_BASE_INDEX_CCM_AES
    710          };
    711          #endif
    712          

   \                                 In section .rodata, align 4
    713          static const mbedtls_cipher_info_t aes_128_ccm_star_no_tag_info = {
   \                     aes_128_ccm_star_no_tag_info:
   \        0x0   0x....'....        DC32 ?_9
   \        0x4   0x70 0x92          DC8 112, 146, 41, 5
   \              0x29 0x05
    714              "AES-128-CCM*-NO-TAG",
    715              16,
    716              12 >> MBEDTLS_IV_SIZE_SHIFT,
    717              128 >> MBEDTLS_KEY_BITLEN_SHIFT,
    718              MBEDTLS_MODE_CCM_STAR_NO_TAG,
    719              MBEDTLS_CIPHER_AES_128_CCM_STAR_NO_TAG,
    720              MBEDTLS_CIPHER_VARIABLE_IV_LEN,
    721              MBEDTLS_CIPHER_BASE_INDEX_CCM_AES
    722          };
    723          
    724          #if !defined(MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH)

   \                                 In section .rodata, align 4
    725          static const mbedtls_cipher_info_t aes_192_ccm_star_no_tag_info = {
   \                     aes_192_ccm_star_no_tag_info:
   \        0x0   0x....'....        DC32 ?_10
   \        0x4   0x70 0x93          DC8 112, 147, 42, 5
   \              0x2A 0x05
    726              "AES-192-CCM*-NO-TAG",
    727              16,
    728              12 >> MBEDTLS_IV_SIZE_SHIFT,
    729              192 >> MBEDTLS_KEY_BITLEN_SHIFT,
    730              MBEDTLS_MODE_CCM_STAR_NO_TAG,
    731              MBEDTLS_CIPHER_AES_192_CCM_STAR_NO_TAG,
    732              MBEDTLS_CIPHER_VARIABLE_IV_LEN,
    733              MBEDTLS_CIPHER_BASE_INDEX_CCM_AES
    734          };
    735          

   \                                 In section .rodata, align 4
    736          static const mbedtls_cipher_info_t aes_256_ccm_star_no_tag_info = {
   \                     aes_256_ccm_star_no_tag_info:
   \        0x0   0x....'....        DC32 ?_11
   \        0x4   0x70 0x94          DC8 112, 148, 43, 5
   \              0x2B 0x05
    737              "AES-256-CCM*-NO-TAG",
    738              16,
    739              12 >> MBEDTLS_IV_SIZE_SHIFT,
    740              256 >> MBEDTLS_KEY_BITLEN_SHIFT,
    741              MBEDTLS_MODE_CCM_STAR_NO_TAG,
    742              MBEDTLS_CIPHER_AES_256_CCM_STAR_NO_TAG,
    743              MBEDTLS_CIPHER_VARIABLE_IV_LEN,
    744              MBEDTLS_CIPHER_BASE_INDEX_CCM_AES
    745          };
    746          #endif
    747          #endif /* MBEDTLS_CCM_C */
    748          
    749          #endif /* MBEDTLS_AES_C */
    750          
    751          #if defined(MBEDTLS_CAMELLIA_C)
    752          
    753          static int camellia_crypt_ecb_wrap(void *ctx, mbedtls_operation_t operation,
    754                                             const unsigned char *input, unsigned char *output)
    755          {
    756              return mbedtls_camellia_crypt_ecb((mbedtls_camellia_context *) ctx, operation, input,
    757                                                output);
    758          }
    759          
    760          #if defined(MBEDTLS_CIPHER_MODE_CBC)
    761          static int camellia_crypt_cbc_wrap(void *ctx, mbedtls_operation_t operation,
    762                                             size_t length, unsigned char *iv,
    763                                             const unsigned char *input, unsigned char *output)
    764          {
    765              return mbedtls_camellia_crypt_cbc((mbedtls_camellia_context *) ctx, operation, length, iv,
    766                                                input, output);
    767          }
    768          #endif /* MBEDTLS_CIPHER_MODE_CBC */
    769          
    770          #if defined(MBEDTLS_CIPHER_MODE_CFB)
    771          static int camellia_crypt_cfb128_wrap(void *ctx, mbedtls_operation_t operation,
    772                                                size_t length, size_t *iv_off, unsigned char *iv,
    773                                                const unsigned char *input, unsigned char *output)
    774          {
    775              return mbedtls_camellia_crypt_cfb128((mbedtls_camellia_context *) ctx, operation, length,
    776                                                   iv_off, iv, input, output);
    777          }
    778          #endif /* MBEDTLS_CIPHER_MODE_CFB */
    779          
    780          #if defined(MBEDTLS_CIPHER_MODE_CTR)
    781          static int camellia_crypt_ctr_wrap(void *ctx, size_t length, size_t *nc_off,
    782                                             unsigned char *nonce_counter, unsigned char *stream_block,
    783                                             const unsigned char *input, unsigned char *output)
    784          {
    785              return mbedtls_camellia_crypt_ctr((mbedtls_camellia_context *) ctx, length, nc_off,
    786                                                nonce_counter, stream_block, input, output);
    787          }
    788          #endif /* MBEDTLS_CIPHER_MODE_CTR */
    789          
    790          static int camellia_setkey_dec_wrap(void *ctx, const unsigned char *key,
    791                                              unsigned int key_bitlen)
    792          {
    793              return mbedtls_camellia_setkey_dec((mbedtls_camellia_context *) ctx, key, key_bitlen);
    794          }
    795          
    796          static int camellia_setkey_enc_wrap(void *ctx, const unsigned char *key,
    797                                              unsigned int key_bitlen)
    798          {
    799              return mbedtls_camellia_setkey_enc((mbedtls_camellia_context *) ctx, key, key_bitlen);
    800          }
    801          
    802          static void *camellia_ctx_alloc(void)
    803          {
    804              mbedtls_camellia_context *ctx;
    805              ctx = mbedtls_calloc(1, sizeof(mbedtls_camellia_context));
    806          
    807              if (ctx == NULL) {
    808                  return NULL;
    809              }
    810          
    811              mbedtls_camellia_init(ctx);
    812          
    813              return ctx;
    814          }
    815          
    816          static void camellia_ctx_free(void *ctx)
    817          {
    818              mbedtls_camellia_free((mbedtls_camellia_context *) ctx);
    819              mbedtls_free(ctx);
    820          }
    821          
    822          static const mbedtls_cipher_base_t camellia_info = {
    823              MBEDTLS_CIPHER_ID_CAMELLIA,
    824              camellia_crypt_ecb_wrap,
    825          #if defined(MBEDTLS_CIPHER_MODE_CBC)
    826              camellia_crypt_cbc_wrap,
    827          #endif
    828          #if defined(MBEDTLS_CIPHER_MODE_CFB)
    829              camellia_crypt_cfb128_wrap,
    830          #endif
    831          #if defined(MBEDTLS_CIPHER_MODE_OFB)
    832              NULL,
    833          #endif
    834          #if defined(MBEDTLS_CIPHER_MODE_CTR)
    835              camellia_crypt_ctr_wrap,
    836          #endif
    837          #if defined(MBEDTLS_CIPHER_MODE_XTS)
    838              NULL,
    839          #endif
    840          #if defined(MBEDTLS_CIPHER_MODE_STREAM)
    841              NULL,
    842          #endif
    843              camellia_setkey_enc_wrap,
    844              camellia_setkey_dec_wrap,
    845              camellia_ctx_alloc,
    846              camellia_ctx_free
    847          };
    848          
    849          static const mbedtls_cipher_info_t camellia_128_ecb_info = {
    850              "CAMELLIA-128-ECB",
    851              16,
    852              0 >> MBEDTLS_IV_SIZE_SHIFT,
    853              128 >> MBEDTLS_KEY_BITLEN_SHIFT,
    854              MBEDTLS_MODE_ECB,
    855              MBEDTLS_CIPHER_CAMELLIA_128_ECB,
    856              0,
    857              MBEDTLS_CIPHER_BASE_INDEX_CAMELLIA
    858          };
    859          
    860          static const mbedtls_cipher_info_t camellia_192_ecb_info = {
    861              "CAMELLIA-192-ECB",
    862              16,
    863              0 >> MBEDTLS_IV_SIZE_SHIFT,
    864              192 >> MBEDTLS_KEY_BITLEN_SHIFT,
    865              MBEDTLS_MODE_ECB,
    866              MBEDTLS_CIPHER_CAMELLIA_192_ECB,
    867              0,
    868              MBEDTLS_CIPHER_BASE_INDEX_CAMELLIA
    869          };
    870          
    871          static const mbedtls_cipher_info_t camellia_256_ecb_info = {
    872              "CAMELLIA-256-ECB",
    873              16,
    874              0 >> MBEDTLS_IV_SIZE_SHIFT,
    875              256 >> MBEDTLS_KEY_BITLEN_SHIFT,
    876              MBEDTLS_MODE_ECB,
    877              MBEDTLS_CIPHER_CAMELLIA_256_ECB,
    878              0,
    879              MBEDTLS_CIPHER_BASE_INDEX_CAMELLIA
    880          };
    881          
    882          #if defined(MBEDTLS_CIPHER_MODE_CBC)
    883          static const mbedtls_cipher_info_t camellia_128_cbc_info = {
    884              "CAMELLIA-128-CBC",
    885              16,
    886              16 >> MBEDTLS_IV_SIZE_SHIFT,
    887              128 >> MBEDTLS_KEY_BITLEN_SHIFT,
    888              MBEDTLS_MODE_CBC,
    889              MBEDTLS_CIPHER_CAMELLIA_128_CBC,
    890              0,
    891              MBEDTLS_CIPHER_BASE_INDEX_CAMELLIA
    892          };
    893          
    894          static const mbedtls_cipher_info_t camellia_192_cbc_info = {
    895              "CAMELLIA-192-CBC",
    896              16,
    897              16 >> MBEDTLS_IV_SIZE_SHIFT,
    898              192 >> MBEDTLS_KEY_BITLEN_SHIFT,
    899              MBEDTLS_MODE_CBC,
    900              MBEDTLS_CIPHER_CAMELLIA_192_CBC,
    901              0,
    902              MBEDTLS_CIPHER_BASE_INDEX_CAMELLIA
    903          };
    904          
    905          static const mbedtls_cipher_info_t camellia_256_cbc_info = {
    906              "CAMELLIA-256-CBC",
    907              16,
    908              16 >> MBEDTLS_IV_SIZE_SHIFT,
    909              256 >> MBEDTLS_KEY_BITLEN_SHIFT,
    910              MBEDTLS_MODE_CBC,
    911              MBEDTLS_CIPHER_CAMELLIA_256_CBC,
    912              0,
    913              MBEDTLS_CIPHER_BASE_INDEX_CAMELLIA
    914          };
    915          #endif /* MBEDTLS_CIPHER_MODE_CBC */
    916          
    917          #if defined(MBEDTLS_CIPHER_MODE_CFB)
    918          static const mbedtls_cipher_info_t camellia_128_cfb128_info = {
    919              "CAMELLIA-128-CFB128",
    920              16,
    921              16 >> MBEDTLS_IV_SIZE_SHIFT,
    922              128 >> MBEDTLS_KEY_BITLEN_SHIFT,
    923              MBEDTLS_MODE_CFB,
    924              MBEDTLS_CIPHER_CAMELLIA_128_CFB128,
    925              0,
    926              MBEDTLS_CIPHER_BASE_INDEX_CAMELLIA
    927          };
    928          
    929          static const mbedtls_cipher_info_t camellia_192_cfb128_info = {
    930              "CAMELLIA-192-CFB128",
    931              16,
    932              16 >> MBEDTLS_IV_SIZE_SHIFT,
    933              192 >> MBEDTLS_KEY_BITLEN_SHIFT,
    934              MBEDTLS_MODE_CFB,
    935              MBEDTLS_CIPHER_CAMELLIA_192_CFB128,
    936              0,
    937              MBEDTLS_CIPHER_BASE_INDEX_CAMELLIA
    938          };
    939          
    940          static const mbedtls_cipher_info_t camellia_256_cfb128_info = {
    941              "CAMELLIA-256-CFB128",
    942              16,
    943              16 >> MBEDTLS_IV_SIZE_SHIFT,
    944              256 >> MBEDTLS_KEY_BITLEN_SHIFT,
    945              MBEDTLS_MODE_CFB,
    946              MBEDTLS_CIPHER_CAMELLIA_256_CFB128,
    947              0,
    948              MBEDTLS_CIPHER_BASE_INDEX_CAMELLIA
    949          };
    950          #endif /* MBEDTLS_CIPHER_MODE_CFB */
    951          
    952          #if defined(MBEDTLS_CIPHER_MODE_CTR)
    953          static const mbedtls_cipher_info_t camellia_128_ctr_info = {
    954              "CAMELLIA-128-CTR",
    955              16,
    956              16 >> MBEDTLS_IV_SIZE_SHIFT,
    957              128 >> MBEDTLS_KEY_BITLEN_SHIFT,
    958              MBEDTLS_MODE_CTR,
    959              MBEDTLS_CIPHER_CAMELLIA_128_CTR,
    960              0,
    961              MBEDTLS_CIPHER_BASE_INDEX_CAMELLIA
    962          };
    963          
    964          static const mbedtls_cipher_info_t camellia_192_ctr_info = {
    965              "CAMELLIA-192-CTR",
    966              16,
    967              16 >> MBEDTLS_IV_SIZE_SHIFT,
    968              192 >> MBEDTLS_KEY_BITLEN_SHIFT,
    969              MBEDTLS_MODE_CTR,
    970              MBEDTLS_CIPHER_CAMELLIA_192_CTR,
    971              0,
    972              MBEDTLS_CIPHER_BASE_INDEX_CAMELLIA
    973          };
    974          
    975          static const mbedtls_cipher_info_t camellia_256_ctr_info = {
    976              "CAMELLIA-256-CTR",
    977              16,
    978              16 >> MBEDTLS_IV_SIZE_SHIFT,
    979              256 >> MBEDTLS_KEY_BITLEN_SHIFT,
    980              MBEDTLS_MODE_CTR,
    981              MBEDTLS_CIPHER_CAMELLIA_256_CTR,
    982              0,
    983              MBEDTLS_CIPHER_BASE_INDEX_CAMELLIA
    984          };
    985          #endif /* MBEDTLS_CIPHER_MODE_CTR */
    986          
    987          #if defined(MBEDTLS_GCM_C)
    988          static int gcm_camellia_setkey_wrap(void *ctx, const unsigned char *key,
    989                                              unsigned int key_bitlen)
    990          {
    991              return mbedtls_gcm_setkey((mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_CAMELLIA,
    992                                        key, key_bitlen);
    993          }
    994          
    995          static const mbedtls_cipher_base_t gcm_camellia_info = {
    996              MBEDTLS_CIPHER_ID_CAMELLIA,
    997              NULL,
    998          #if defined(MBEDTLS_CIPHER_MODE_CBC)
    999              NULL,
   1000          #endif
   1001          #if defined(MBEDTLS_CIPHER_MODE_CFB)
   1002              NULL,
   1003          #endif
   1004          #if defined(MBEDTLS_CIPHER_MODE_OFB)
   1005              NULL,
   1006          #endif
   1007          #if defined(MBEDTLS_CIPHER_MODE_CTR)
   1008              NULL,
   1009          #endif
   1010          #if defined(MBEDTLS_CIPHER_MODE_XTS)
   1011              NULL,
   1012          #endif
   1013          #if defined(MBEDTLS_CIPHER_MODE_STREAM)
   1014              NULL,
   1015          #endif
   1016              gcm_camellia_setkey_wrap,
   1017              gcm_camellia_setkey_wrap,
   1018              gcm_ctx_alloc,
   1019              gcm_ctx_free,
   1020          };
   1021          
   1022          static const mbedtls_cipher_info_t camellia_128_gcm_info = {
   1023              "CAMELLIA-128-GCM",
   1024              16,
   1025              12 >> MBEDTLS_IV_SIZE_SHIFT,
   1026              128 >> MBEDTLS_KEY_BITLEN_SHIFT,
   1027              MBEDTLS_MODE_GCM,
   1028              MBEDTLS_CIPHER_CAMELLIA_128_GCM,
   1029              MBEDTLS_CIPHER_VARIABLE_IV_LEN,
   1030              MBEDTLS_CIPHER_BASE_INDEX_GCM_CAMELLIA
   1031          };
   1032          
   1033          static const mbedtls_cipher_info_t camellia_192_gcm_info = {
   1034              "CAMELLIA-192-GCM",
   1035              16,
   1036              12 >> MBEDTLS_IV_SIZE_SHIFT,
   1037              192 >> MBEDTLS_KEY_BITLEN_SHIFT,
   1038              MBEDTLS_MODE_GCM,
   1039              MBEDTLS_CIPHER_CAMELLIA_192_GCM,
   1040              MBEDTLS_CIPHER_VARIABLE_IV_LEN,
   1041              MBEDTLS_CIPHER_BASE_INDEX_GCM_CAMELLIA
   1042          };
   1043          
   1044          static const mbedtls_cipher_info_t camellia_256_gcm_info = {
   1045              "CAMELLIA-256-GCM",
   1046              16,
   1047              12 >> MBEDTLS_IV_SIZE_SHIFT,
   1048              256 >> MBEDTLS_KEY_BITLEN_SHIFT,
   1049              MBEDTLS_MODE_GCM,
   1050              MBEDTLS_CIPHER_CAMELLIA_256_GCM,
   1051              MBEDTLS_CIPHER_VARIABLE_IV_LEN,
   1052              MBEDTLS_CIPHER_BASE_INDEX_GCM_CAMELLIA
   1053          };
   1054          #endif /* MBEDTLS_GCM_C */
   1055          
   1056          #if defined(MBEDTLS_CCM_C)
   1057          static int ccm_camellia_setkey_wrap(void *ctx, const unsigned char *key,
   1058                                              unsigned int key_bitlen)
   1059          {
   1060              return mbedtls_ccm_setkey((mbedtls_ccm_context *) ctx, MBEDTLS_CIPHER_ID_CAMELLIA,
   1061                                        key, key_bitlen);
   1062          }
   1063          
   1064          static const mbedtls_cipher_base_t ccm_camellia_info = {
   1065              MBEDTLS_CIPHER_ID_CAMELLIA,
   1066              NULL,
   1067          #if defined(MBEDTLS_CIPHER_MODE_CBC)
   1068              NULL,
   1069          #endif
   1070          #if defined(MBEDTLS_CIPHER_MODE_CFB)
   1071              NULL,
   1072          #endif
   1073          #if defined(MBEDTLS_CIPHER_MODE_OFB)
   1074              NULL,
   1075          #endif
   1076          #if defined(MBEDTLS_CIPHER_MODE_CTR)
   1077              NULL,
   1078          #endif
   1079          #if defined(MBEDTLS_CIPHER_MODE_XTS)
   1080              NULL,
   1081          #endif
   1082          #if defined(MBEDTLS_CIPHER_MODE_STREAM)
   1083              NULL,
   1084          #endif
   1085              ccm_camellia_setkey_wrap,
   1086              ccm_camellia_setkey_wrap,
   1087              ccm_ctx_alloc,
   1088              ccm_ctx_free,
   1089          };
   1090          
   1091          static const mbedtls_cipher_info_t camellia_128_ccm_info = {
   1092              "CAMELLIA-128-CCM",
   1093              16,
   1094              12 >> MBEDTLS_IV_SIZE_SHIFT,
   1095              128 >> MBEDTLS_KEY_BITLEN_SHIFT,
   1096              MBEDTLS_MODE_CCM,
   1097              MBEDTLS_CIPHER_CAMELLIA_128_CCM,
   1098              MBEDTLS_CIPHER_VARIABLE_IV_LEN,
   1099              MBEDTLS_CIPHER_BASE_INDEX_CCM_CAMELLIA
   1100          };
   1101          
   1102          static const mbedtls_cipher_info_t camellia_192_ccm_info = {
   1103              "CAMELLIA-192-CCM",
   1104              16,
   1105              12 >> MBEDTLS_IV_SIZE_SHIFT,
   1106              192 >> MBEDTLS_KEY_BITLEN_SHIFT,
   1107              MBEDTLS_MODE_CCM,
   1108              MBEDTLS_CIPHER_CAMELLIA_192_CCM,
   1109              MBEDTLS_CIPHER_VARIABLE_IV_LEN,
   1110              MBEDTLS_CIPHER_BASE_INDEX_CCM_CAMELLIA
   1111          };
   1112          
   1113          static const mbedtls_cipher_info_t camellia_256_ccm_info = {
   1114              "CAMELLIA-256-CCM",
   1115              16,
   1116              12 >> MBEDTLS_IV_SIZE_SHIFT,
   1117              256 >> MBEDTLS_KEY_BITLEN_SHIFT,
   1118              MBEDTLS_MODE_CCM,
   1119              MBEDTLS_CIPHER_CAMELLIA_256_CCM,
   1120              MBEDTLS_CIPHER_VARIABLE_IV_LEN,
   1121              MBEDTLS_CIPHER_BASE_INDEX_CCM_CAMELLIA
   1122          };
   1123          
   1124          static const mbedtls_cipher_info_t camellia_128_ccm_star_no_tag_info = {
   1125              "CAMELLIA-128-CCM*-NO-TAG",
   1126              16,
   1127              12 >> MBEDTLS_IV_SIZE_SHIFT,
   1128              128 >> MBEDTLS_KEY_BITLEN_SHIFT,
   1129              MBEDTLS_MODE_CCM_STAR_NO_TAG,
   1130              MBEDTLS_CIPHER_CAMELLIA_128_CCM_STAR_NO_TAG,
   1131              MBEDTLS_CIPHER_VARIABLE_IV_LEN,
   1132              MBEDTLS_CIPHER_BASE_INDEX_CCM_CAMELLIA
   1133          };
   1134          
   1135          static const mbedtls_cipher_info_t camellia_192_ccm_star_no_tag_info = {
   1136              "CAMELLIA-192-CCM*-NO-TAG",
   1137              16,
   1138              12 >> MBEDTLS_IV_SIZE_SHIFT,
   1139              192 >> MBEDTLS_KEY_BITLEN_SHIFT,
   1140              MBEDTLS_MODE_CCM_STAR_NO_TAG,
   1141              MBEDTLS_CIPHER_CAMELLIA_192_CCM_STAR_NO_TAG,
   1142              MBEDTLS_CIPHER_VARIABLE_IV_LEN,
   1143              MBEDTLS_CIPHER_BASE_INDEX_CCM_CAMELLIA
   1144          };
   1145          
   1146          static const mbedtls_cipher_info_t camellia_256_ccm_star_no_tag_info = {
   1147              "CAMELLIA-256-CCM*-NO-TAG",
   1148              16,
   1149              12 >> MBEDTLS_IV_SIZE_SHIFT,
   1150              256 >> MBEDTLS_KEY_BITLEN_SHIFT,
   1151              MBEDTLS_MODE_CCM_STAR_NO_TAG,
   1152              MBEDTLS_CIPHER_CAMELLIA_256_CCM_STAR_NO_TAG,
   1153              MBEDTLS_CIPHER_VARIABLE_IV_LEN,
   1154              MBEDTLS_CIPHER_BASE_INDEX_CCM_CAMELLIA
   1155          };
   1156          #endif /* MBEDTLS_CCM_C */
   1157          
   1158          #endif /* MBEDTLS_CAMELLIA_C */
   1159          
   1160          #if defined(MBEDTLS_ARIA_C)
   1161          
   1162          static int aria_crypt_ecb_wrap(void *ctx, mbedtls_operation_t operation,
   1163                                         const unsigned char *input, unsigned char *output)
   1164          {
   1165              (void) operation;
   1166              return mbedtls_aria_crypt_ecb((mbedtls_aria_context *) ctx, input,
   1167                                            output);
   1168          }
   1169          
   1170          #if defined(MBEDTLS_CIPHER_MODE_CBC)
   1171          static int aria_crypt_cbc_wrap(void *ctx, mbedtls_operation_t operation,
   1172                                         size_t length, unsigned char *iv,
   1173                                         const unsigned char *input, unsigned char *output)
   1174          {
   1175              return mbedtls_aria_crypt_cbc((mbedtls_aria_context *) ctx, operation, length, iv,
   1176                                            input, output);
   1177          }
   1178          #endif /* MBEDTLS_CIPHER_MODE_CBC */
   1179          
   1180          #if defined(MBEDTLS_CIPHER_MODE_CFB)
   1181          static int aria_crypt_cfb128_wrap(void *ctx, mbedtls_operation_t operation,
   1182                                            size_t length, size_t *iv_off, unsigned char *iv,
   1183                                            const unsigned char *input, unsigned char *output)
   1184          {
   1185              return mbedtls_aria_crypt_cfb128((mbedtls_aria_context *) ctx, operation, length,
   1186                                               iv_off, iv, input, output);
   1187          }
   1188          #endif /* MBEDTLS_CIPHER_MODE_CFB */
   1189          
   1190          #if defined(MBEDTLS_CIPHER_MODE_CTR)
   1191          static int aria_crypt_ctr_wrap(void *ctx, size_t length, size_t *nc_off,
   1192                                         unsigned char *nonce_counter, unsigned char *stream_block,
   1193                                         const unsigned char *input, unsigned char *output)
   1194          {
   1195              return mbedtls_aria_crypt_ctr((mbedtls_aria_context *) ctx, length, nc_off,
   1196                                            nonce_counter, stream_block, input, output);
   1197          }
   1198          #endif /* MBEDTLS_CIPHER_MODE_CTR */
   1199          
   1200          static int aria_setkey_dec_wrap(void *ctx, const unsigned char *key,
   1201                                          unsigned int key_bitlen)
   1202          {
   1203              return mbedtls_aria_setkey_dec((mbedtls_aria_context *) ctx, key, key_bitlen);
   1204          }
   1205          
   1206          static int aria_setkey_enc_wrap(void *ctx, const unsigned char *key,
   1207                                          unsigned int key_bitlen)
   1208          {
   1209              return mbedtls_aria_setkey_enc((mbedtls_aria_context *) ctx, key, key_bitlen);
   1210          }
   1211          
   1212          static void *aria_ctx_alloc(void)
   1213          {
   1214              mbedtls_aria_context *ctx;
   1215              ctx = mbedtls_calloc(1, sizeof(mbedtls_aria_context));
   1216          
   1217              if (ctx == NULL) {
   1218                  return NULL;
   1219              }
   1220          
   1221              mbedtls_aria_init(ctx);
   1222          
   1223              return ctx;
   1224          }
   1225          
   1226          static void aria_ctx_free(void *ctx)
   1227          {
   1228              mbedtls_aria_free((mbedtls_aria_context *) ctx);
   1229              mbedtls_free(ctx);
   1230          }
   1231          
   1232          static const mbedtls_cipher_base_t aria_info = {
   1233              MBEDTLS_CIPHER_ID_ARIA,
   1234              aria_crypt_ecb_wrap,
   1235          #if defined(MBEDTLS_CIPHER_MODE_CBC)
   1236              aria_crypt_cbc_wrap,
   1237          #endif
   1238          #if defined(MBEDTLS_CIPHER_MODE_CFB)
   1239              aria_crypt_cfb128_wrap,
   1240          #endif
   1241          #if defined(MBEDTLS_CIPHER_MODE_OFB)
   1242              NULL,
   1243          #endif
   1244          #if defined(MBEDTLS_CIPHER_MODE_CTR)
   1245              aria_crypt_ctr_wrap,
   1246          #endif
   1247          #if defined(MBEDTLS_CIPHER_MODE_XTS)
   1248              NULL,
   1249          #endif
   1250          #if defined(MBEDTLS_CIPHER_MODE_STREAM)
   1251              NULL,
   1252          #endif
   1253              aria_setkey_enc_wrap,
   1254              aria_setkey_dec_wrap,
   1255              aria_ctx_alloc,
   1256              aria_ctx_free
   1257          };
   1258          
   1259          static const mbedtls_cipher_info_t aria_128_ecb_info = {
   1260              "ARIA-128-ECB",
   1261              16,
   1262              0 >> MBEDTLS_IV_SIZE_SHIFT,
   1263              128 >> MBEDTLS_KEY_BITLEN_SHIFT,
   1264              MBEDTLS_MODE_ECB,
   1265              MBEDTLS_CIPHER_ARIA_128_ECB,
   1266              0,
   1267              MBEDTLS_CIPHER_BASE_INDEX_ARIA
   1268          };
   1269          
   1270          static const mbedtls_cipher_info_t aria_192_ecb_info = {
   1271              "ARIA-192-ECB",
   1272              16,
   1273              0 >> MBEDTLS_IV_SIZE_SHIFT,
   1274              192 >> MBEDTLS_KEY_BITLEN_SHIFT,
   1275              MBEDTLS_MODE_ECB,
   1276              MBEDTLS_CIPHER_ARIA_192_ECB,
   1277              0,
   1278              MBEDTLS_CIPHER_BASE_INDEX_ARIA
   1279          };
   1280          
   1281          static const mbedtls_cipher_info_t aria_256_ecb_info = {
   1282              "ARIA-256-ECB",
   1283              16,
   1284              0 >> MBEDTLS_IV_SIZE_SHIFT,
   1285              256 >> MBEDTLS_KEY_BITLEN_SHIFT,
   1286              MBEDTLS_MODE_ECB,
   1287              MBEDTLS_CIPHER_ARIA_256_ECB,
   1288              0,
   1289              MBEDTLS_CIPHER_BASE_INDEX_ARIA
   1290          };
   1291          
   1292          #if defined(MBEDTLS_CIPHER_MODE_CBC)
   1293          static const mbedtls_cipher_info_t aria_128_cbc_info = {
   1294              "ARIA-128-CBC",
   1295              16,
   1296              16 >> MBEDTLS_IV_SIZE_SHIFT,
   1297              128 >> MBEDTLS_KEY_BITLEN_SHIFT,
   1298              MBEDTLS_MODE_CBC,
   1299              MBEDTLS_CIPHER_ARIA_128_CBC,
   1300              0,
   1301              MBEDTLS_CIPHER_BASE_INDEX_ARIA
   1302          };
   1303          
   1304          static const mbedtls_cipher_info_t aria_192_cbc_info = {
   1305              "ARIA-192-CBC",
   1306              16,
   1307              16 >> MBEDTLS_IV_SIZE_SHIFT,
   1308              192 >> MBEDTLS_KEY_BITLEN_SHIFT,
   1309              MBEDTLS_MODE_CBC,
   1310              MBEDTLS_CIPHER_ARIA_192_CBC,
   1311              0,
   1312              MBEDTLS_CIPHER_BASE_INDEX_ARIA
   1313          };
   1314          
   1315          static const mbedtls_cipher_info_t aria_256_cbc_info = {
   1316              "ARIA-256-CBC",
   1317              16,
   1318              16 >> MBEDTLS_IV_SIZE_SHIFT,
   1319              256 >> MBEDTLS_KEY_BITLEN_SHIFT,
   1320              MBEDTLS_MODE_CBC,
   1321              MBEDTLS_CIPHER_ARIA_256_CBC,
   1322              0,
   1323              MBEDTLS_CIPHER_BASE_INDEX_ARIA
   1324          };
   1325          #endif /* MBEDTLS_CIPHER_MODE_CBC */
   1326          
   1327          #if defined(MBEDTLS_CIPHER_MODE_CFB)
   1328          static const mbedtls_cipher_info_t aria_128_cfb128_info = {
   1329              "ARIA-128-CFB128",
   1330              16,
   1331              16 >> MBEDTLS_IV_SIZE_SHIFT,
   1332              128 >> MBEDTLS_KEY_BITLEN_SHIFT,
   1333              MBEDTLS_MODE_CFB,
   1334              MBEDTLS_CIPHER_ARIA_128_CFB128,
   1335              0,
   1336              MBEDTLS_CIPHER_BASE_INDEX_ARIA
   1337          };
   1338          
   1339          static const mbedtls_cipher_info_t aria_192_cfb128_info = {
   1340              "ARIA-192-CFB128",
   1341              16,
   1342              16 >> MBEDTLS_IV_SIZE_SHIFT,
   1343              192 >> MBEDTLS_KEY_BITLEN_SHIFT,
   1344              MBEDTLS_MODE_CFB,
   1345              MBEDTLS_CIPHER_ARIA_192_CFB128,
   1346              0,
   1347              MBEDTLS_CIPHER_BASE_INDEX_ARIA
   1348          };
   1349          
   1350          static const mbedtls_cipher_info_t aria_256_cfb128_info = {
   1351              "ARIA-256-CFB128",
   1352              16,
   1353              16 >> MBEDTLS_IV_SIZE_SHIFT,
   1354              256 >> MBEDTLS_KEY_BITLEN_SHIFT,
   1355              MBEDTLS_MODE_CFB,
   1356              MBEDTLS_CIPHER_ARIA_256_CFB128,
   1357              0,
   1358              MBEDTLS_CIPHER_BASE_INDEX_ARIA
   1359          };
   1360          #endif /* MBEDTLS_CIPHER_MODE_CFB */
   1361          
   1362          #if defined(MBEDTLS_CIPHER_MODE_CTR)
   1363          static const mbedtls_cipher_info_t aria_128_ctr_info = {
   1364              "ARIA-128-CTR",
   1365              16,
   1366              16 >> MBEDTLS_IV_SIZE_SHIFT,
   1367              128 >> MBEDTLS_KEY_BITLEN_SHIFT,
   1368              MBEDTLS_MODE_CTR,
   1369              MBEDTLS_CIPHER_ARIA_128_CTR,
   1370              0,
   1371              MBEDTLS_CIPHER_BASE_INDEX_ARIA
   1372          };
   1373          
   1374          static const mbedtls_cipher_info_t aria_192_ctr_info = {
   1375              "ARIA-192-CTR",
   1376              16,
   1377              16 >> MBEDTLS_IV_SIZE_SHIFT,
   1378              192 >> MBEDTLS_KEY_BITLEN_SHIFT,
   1379              MBEDTLS_MODE_CTR,
   1380              MBEDTLS_CIPHER_ARIA_192_CTR,
   1381              0,
   1382              MBEDTLS_CIPHER_BASE_INDEX_ARIA
   1383          };
   1384          
   1385          static const mbedtls_cipher_info_t aria_256_ctr_info = {
   1386              "ARIA-256-CTR",
   1387              16,
   1388              16 >> MBEDTLS_IV_SIZE_SHIFT,
   1389              256 >> MBEDTLS_KEY_BITLEN_SHIFT,
   1390              MBEDTLS_MODE_CTR,
   1391              MBEDTLS_CIPHER_ARIA_256_CTR,
   1392              0,
   1393              MBEDTLS_CIPHER_BASE_INDEX_ARIA
   1394          };
   1395          #endif /* MBEDTLS_CIPHER_MODE_CTR */
   1396          
   1397          #if defined(MBEDTLS_GCM_C)
   1398          static int gcm_aria_setkey_wrap(void *ctx, const unsigned char *key,
   1399                                          unsigned int key_bitlen)
   1400          {
   1401              return mbedtls_gcm_setkey((mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_ARIA,
   1402                                        key, key_bitlen);
   1403          }
   1404          
   1405          static const mbedtls_cipher_base_t gcm_aria_info = {
   1406              MBEDTLS_CIPHER_ID_ARIA,
   1407              NULL,
   1408          #if defined(MBEDTLS_CIPHER_MODE_CBC)
   1409              NULL,
   1410          #endif
   1411          #if defined(MBEDTLS_CIPHER_MODE_CFB)
   1412              NULL,
   1413          #endif
   1414          #if defined(MBEDTLS_CIPHER_MODE_OFB)
   1415              NULL,
   1416          #endif
   1417          #if defined(MBEDTLS_CIPHER_MODE_CTR)
   1418              NULL,
   1419          #endif
   1420          #if defined(MBEDTLS_CIPHER_MODE_XTS)
   1421              NULL,
   1422          #endif
   1423          #if defined(MBEDTLS_CIPHER_MODE_STREAM)
   1424              NULL,
   1425          #endif
   1426              gcm_aria_setkey_wrap,
   1427              gcm_aria_setkey_wrap,
   1428              gcm_ctx_alloc,
   1429              gcm_ctx_free,
   1430          };
   1431          
   1432          static const mbedtls_cipher_info_t aria_128_gcm_info = {
   1433              "ARIA-128-GCM",
   1434              16,
   1435              12 >> MBEDTLS_IV_SIZE_SHIFT,
   1436              128 >> MBEDTLS_KEY_BITLEN_SHIFT,
   1437              MBEDTLS_MODE_GCM,
   1438              MBEDTLS_CIPHER_ARIA_128_GCM,
   1439              MBEDTLS_CIPHER_VARIABLE_IV_LEN,
   1440              MBEDTLS_CIPHER_BASE_INDEX_GCM_ARIA
   1441          };
   1442          
   1443          static const mbedtls_cipher_info_t aria_192_gcm_info = {
   1444              "ARIA-192-GCM",
   1445              16,
   1446              12 >> MBEDTLS_IV_SIZE_SHIFT,
   1447              192 >> MBEDTLS_KEY_BITLEN_SHIFT,
   1448              MBEDTLS_MODE_GCM,
   1449              MBEDTLS_CIPHER_ARIA_192_GCM,
   1450              MBEDTLS_CIPHER_VARIABLE_IV_LEN,
   1451              MBEDTLS_CIPHER_BASE_INDEX_GCM_ARIA
   1452          };
   1453          
   1454          static const mbedtls_cipher_info_t aria_256_gcm_info = {
   1455              "ARIA-256-GCM",
   1456              16,
   1457              12 >> MBEDTLS_IV_SIZE_SHIFT,
   1458              256 >> MBEDTLS_KEY_BITLEN_SHIFT,
   1459              MBEDTLS_MODE_GCM,
   1460              MBEDTLS_CIPHER_ARIA_256_GCM,
   1461              MBEDTLS_CIPHER_VARIABLE_IV_LEN,
   1462              MBEDTLS_CIPHER_BASE_INDEX_GCM_ARIA
   1463          };
   1464          #endif /* MBEDTLS_GCM_C */
   1465          
   1466          #if defined(MBEDTLS_CCM_C)
   1467          static int ccm_aria_setkey_wrap(void *ctx, const unsigned char *key,
   1468                                          unsigned int key_bitlen)
   1469          {
   1470              return mbedtls_ccm_setkey((mbedtls_ccm_context *) ctx, MBEDTLS_CIPHER_ID_ARIA,
   1471                                        key, key_bitlen);
   1472          }
   1473          
   1474          static const mbedtls_cipher_base_t ccm_aria_info = {
   1475              MBEDTLS_CIPHER_ID_ARIA,
   1476              NULL,
   1477          #if defined(MBEDTLS_CIPHER_MODE_CBC)
   1478              NULL,
   1479          #endif
   1480          #if defined(MBEDTLS_CIPHER_MODE_CFB)
   1481              NULL,
   1482          #endif
   1483          #if defined(MBEDTLS_CIPHER_MODE_OFB)
   1484              NULL,
   1485          #endif
   1486          #if defined(MBEDTLS_CIPHER_MODE_CTR)
   1487              NULL,
   1488          #endif
   1489          #if defined(MBEDTLS_CIPHER_MODE_XTS)
   1490              NULL,
   1491          #endif
   1492          #if defined(MBEDTLS_CIPHER_MODE_STREAM)
   1493              NULL,
   1494          #endif
   1495              ccm_aria_setkey_wrap,
   1496              ccm_aria_setkey_wrap,
   1497              ccm_ctx_alloc,
   1498              ccm_ctx_free,
   1499          };
   1500          
   1501          static const mbedtls_cipher_info_t aria_128_ccm_info = {
   1502              "ARIA-128-CCM",
   1503              16,
   1504              12 >> MBEDTLS_IV_SIZE_SHIFT,
   1505              128 >> MBEDTLS_KEY_BITLEN_SHIFT,
   1506              MBEDTLS_MODE_CCM,
   1507              MBEDTLS_CIPHER_ARIA_128_CCM,
   1508              MBEDTLS_CIPHER_VARIABLE_IV_LEN,
   1509              MBEDTLS_CIPHER_BASE_INDEX_CCM_ARIA
   1510          };
   1511          
   1512          static const mbedtls_cipher_info_t aria_192_ccm_info = {
   1513              "ARIA-192-CCM",
   1514              16,
   1515              12 >> MBEDTLS_IV_SIZE_SHIFT,
   1516              192 >> MBEDTLS_KEY_BITLEN_SHIFT,
   1517              MBEDTLS_MODE_CCM,
   1518              MBEDTLS_CIPHER_ARIA_192_CCM,
   1519              MBEDTLS_CIPHER_VARIABLE_IV_LEN,
   1520              MBEDTLS_CIPHER_BASE_INDEX_CCM_ARIA
   1521          };
   1522          
   1523          static const mbedtls_cipher_info_t aria_256_ccm_info = {
   1524              "ARIA-256-CCM",
   1525              16,
   1526              12 >> MBEDTLS_IV_SIZE_SHIFT,
   1527              256 >> MBEDTLS_KEY_BITLEN_SHIFT,
   1528              MBEDTLS_MODE_CCM,
   1529              MBEDTLS_CIPHER_ARIA_256_CCM,
   1530              MBEDTLS_CIPHER_VARIABLE_IV_LEN,
   1531              MBEDTLS_CIPHER_BASE_INDEX_CCM_ARIA
   1532          };
   1533          
   1534          static const mbedtls_cipher_info_t aria_128_ccm_star_no_tag_info = {
   1535              "ARIA-128-CCM*-NO-TAG",
   1536              16,
   1537              12 >> MBEDTLS_IV_SIZE_SHIFT,
   1538              128 >> MBEDTLS_KEY_BITLEN_SHIFT,
   1539              MBEDTLS_MODE_CCM_STAR_NO_TAG,
   1540              MBEDTLS_CIPHER_ARIA_128_CCM_STAR_NO_TAG,
   1541              MBEDTLS_CIPHER_VARIABLE_IV_LEN,
   1542              MBEDTLS_CIPHER_BASE_INDEX_CCM_ARIA
   1543          };
   1544          
   1545          static const mbedtls_cipher_info_t aria_192_ccm_star_no_tag_info = {
   1546              "ARIA-192-CCM*-NO-TAG",
   1547              16,
   1548              12 >> MBEDTLS_IV_SIZE_SHIFT,
   1549              192 >> MBEDTLS_KEY_BITLEN_SHIFT,
   1550              MBEDTLS_MODE_CCM_STAR_NO_TAG,
   1551              MBEDTLS_CIPHER_ARIA_192_CCM_STAR_NO_TAG,
   1552              MBEDTLS_CIPHER_VARIABLE_IV_LEN,
   1553              MBEDTLS_CIPHER_BASE_INDEX_CCM_ARIA
   1554          };
   1555          
   1556          static const mbedtls_cipher_info_t aria_256_ccm_star_no_tag_info = {
   1557              "ARIA-256-CCM*-NO-TAG",
   1558              16,
   1559              12 >> MBEDTLS_IV_SIZE_SHIFT,
   1560              256 >> MBEDTLS_KEY_BITLEN_SHIFT,
   1561              MBEDTLS_MODE_CCM_STAR_NO_TAG,
   1562              MBEDTLS_CIPHER_ARIA_256_CCM_STAR_NO_TAG,
   1563              MBEDTLS_CIPHER_VARIABLE_IV_LEN,
   1564              MBEDTLS_CIPHER_BASE_INDEX_CCM_ARIA
   1565          };
   1566          #endif /* MBEDTLS_CCM_C */
   1567          
   1568          #endif /* MBEDTLS_ARIA_C */
   1569          
   1570          #if defined(MBEDTLS_DES_C)
   1571          
   1572          static int des_crypt_ecb_wrap(void *ctx, mbedtls_operation_t operation,
   1573                                        const unsigned char *input, unsigned char *output)
   1574          {
   1575              ((void) operation);
   1576              return mbedtls_des_crypt_ecb((mbedtls_des_context *) ctx, input, output);
   1577          }
   1578          
   1579          static int des3_crypt_ecb_wrap(void *ctx, mbedtls_operation_t operation,
   1580                                         const unsigned char *input, unsigned char *output)
   1581          {
   1582              ((void) operation);
   1583              return mbedtls_des3_crypt_ecb((mbedtls_des3_context *) ctx, input, output);
   1584          }
   1585          
   1586          #if defined(MBEDTLS_CIPHER_MODE_CBC)
   1587          static int des_crypt_cbc_wrap(void *ctx, mbedtls_operation_t operation, size_t length,
   1588                                        unsigned char *iv, const unsigned char *input, unsigned char *output)
   1589          {
   1590              return mbedtls_des_crypt_cbc((mbedtls_des_context *) ctx, operation, length, iv, input,
   1591                                           output);
   1592          }
   1593          #endif /* MBEDTLS_CIPHER_MODE_CBC */
   1594          
   1595          #if defined(MBEDTLS_CIPHER_MODE_CBC)
   1596          static int des3_crypt_cbc_wrap(void *ctx, mbedtls_operation_t operation, size_t length,
   1597                                         unsigned char *iv, const unsigned char *input, unsigned char *output)
   1598          {
   1599              return mbedtls_des3_crypt_cbc((mbedtls_des3_context *) ctx, operation, length, iv, input,
   1600                                            output);
   1601          }
   1602          #endif /* MBEDTLS_CIPHER_MODE_CBC */
   1603          
   1604          static int des_setkey_dec_wrap(void *ctx, const unsigned char *key,
   1605                                         unsigned int key_bitlen)
   1606          {
   1607              ((void) key_bitlen);
   1608          
   1609              return mbedtls_des_setkey_dec((mbedtls_des_context *) ctx, key);
   1610          }
   1611          
   1612          static int des_setkey_enc_wrap(void *ctx, const unsigned char *key,
   1613                                         unsigned int key_bitlen)
   1614          {
   1615              ((void) key_bitlen);
   1616          
   1617              return mbedtls_des_setkey_enc((mbedtls_des_context *) ctx, key);
   1618          }
   1619          
   1620          static int des3_set2key_dec_wrap(void *ctx, const unsigned char *key,
   1621                                           unsigned int key_bitlen)
   1622          {
   1623              ((void) key_bitlen);
   1624          
   1625              return mbedtls_des3_set2key_dec((mbedtls_des3_context *) ctx, key);
   1626          }
   1627          
   1628          static int des3_set2key_enc_wrap(void *ctx, const unsigned char *key,
   1629                                           unsigned int key_bitlen)
   1630          {
   1631              ((void) key_bitlen);
   1632          
   1633              return mbedtls_des3_set2key_enc((mbedtls_des3_context *) ctx, key);
   1634          }
   1635          
   1636          static int des3_set3key_dec_wrap(void *ctx, const unsigned char *key,
   1637                                           unsigned int key_bitlen)
   1638          {
   1639              ((void) key_bitlen);
   1640          
   1641              return mbedtls_des3_set3key_dec((mbedtls_des3_context *) ctx, key);
   1642          }
   1643          
   1644          static int des3_set3key_enc_wrap(void *ctx, const unsigned char *key,
   1645                                           unsigned int key_bitlen)
   1646          {
   1647              ((void) key_bitlen);
   1648          
   1649              return mbedtls_des3_set3key_enc((mbedtls_des3_context *) ctx, key);
   1650          }
   1651          
   1652          static void *des_ctx_alloc(void)
   1653          {
   1654              mbedtls_des_context *des = mbedtls_calloc(1, sizeof(mbedtls_des_context));
   1655          
   1656              if (des == NULL) {
   1657                  return NULL;
   1658              }
   1659          
   1660              mbedtls_des_init(des);
   1661          
   1662              return des;
   1663          }
   1664          
   1665          static void des_ctx_free(void *ctx)
   1666          {
   1667              mbedtls_des_free((mbedtls_des_context *) ctx);
   1668              mbedtls_free(ctx);
   1669          }
   1670          
   1671          static void *des3_ctx_alloc(void)
   1672          {
   1673              mbedtls_des3_context *des3;
   1674              des3 = mbedtls_calloc(1, sizeof(mbedtls_des3_context));
   1675          
   1676              if (des3 == NULL) {
   1677                  return NULL;
   1678              }
   1679          
   1680              mbedtls_des3_init(des3);
   1681          
   1682              return des3;
   1683          }
   1684          
   1685          static void des3_ctx_free(void *ctx)
   1686          {
   1687              mbedtls_des3_free((mbedtls_des3_context *) ctx);
   1688              mbedtls_free(ctx);
   1689          }
   1690          
   1691          static const mbedtls_cipher_base_t des_info = {
   1692              MBEDTLS_CIPHER_ID_DES,
   1693              des_crypt_ecb_wrap,
   1694          #if defined(MBEDTLS_CIPHER_MODE_CBC)
   1695              des_crypt_cbc_wrap,
   1696          #endif
   1697          #if defined(MBEDTLS_CIPHER_MODE_CFB)
   1698              NULL,
   1699          #endif
   1700          #if defined(MBEDTLS_CIPHER_MODE_OFB)
   1701              NULL,
   1702          #endif
   1703          #if defined(MBEDTLS_CIPHER_MODE_CTR)
   1704              NULL,
   1705          #endif
   1706          #if defined(MBEDTLS_CIPHER_MODE_XTS)
   1707              NULL,
   1708          #endif
   1709          #if defined(MBEDTLS_CIPHER_MODE_STREAM)
   1710              NULL,
   1711          #endif
   1712              des_setkey_enc_wrap,
   1713              des_setkey_dec_wrap,
   1714              des_ctx_alloc,
   1715              des_ctx_free
   1716          };
   1717          
   1718          static const mbedtls_cipher_info_t des_ecb_info = {
   1719              "DES-ECB",
   1720              8,
   1721              0 >> MBEDTLS_IV_SIZE_SHIFT,
   1722              MBEDTLS_KEY_LENGTH_DES >> MBEDTLS_KEY_BITLEN_SHIFT,
   1723              MBEDTLS_MODE_ECB,
   1724              MBEDTLS_CIPHER_DES_ECB,
   1725              0,
   1726              MBEDTLS_CIPHER_BASE_INDEX_DES
   1727          };
   1728          
   1729          #if defined(MBEDTLS_CIPHER_MODE_CBC)
   1730          static const mbedtls_cipher_info_t des_cbc_info = {
   1731              "DES-CBC",
   1732              8,
   1733              8 >> MBEDTLS_IV_SIZE_SHIFT,
   1734              MBEDTLS_KEY_LENGTH_DES >> MBEDTLS_KEY_BITLEN_SHIFT,
   1735              MBEDTLS_MODE_CBC,
   1736              MBEDTLS_CIPHER_DES_CBC,
   1737              0,
   1738              MBEDTLS_CIPHER_BASE_INDEX_DES
   1739          };
   1740          #endif /* MBEDTLS_CIPHER_MODE_CBC */
   1741          
   1742          static const mbedtls_cipher_base_t des_ede_info = {
   1743              MBEDTLS_CIPHER_ID_DES,
   1744              des3_crypt_ecb_wrap,
   1745          #if defined(MBEDTLS_CIPHER_MODE_CBC)
   1746              des3_crypt_cbc_wrap,
   1747          #endif
   1748          #if defined(MBEDTLS_CIPHER_MODE_CFB)
   1749              NULL,
   1750          #endif
   1751          #if defined(MBEDTLS_CIPHER_MODE_OFB)
   1752              NULL,
   1753          #endif
   1754          #if defined(MBEDTLS_CIPHER_MODE_CTR)
   1755              NULL,
   1756          #endif
   1757          #if defined(MBEDTLS_CIPHER_MODE_XTS)
   1758              NULL,
   1759          #endif
   1760          #if defined(MBEDTLS_CIPHER_MODE_STREAM)
   1761              NULL,
   1762          #endif
   1763              des3_set2key_enc_wrap,
   1764              des3_set2key_dec_wrap,
   1765              des3_ctx_alloc,
   1766              des3_ctx_free
   1767          };
   1768          
   1769          static const mbedtls_cipher_info_t des_ede_ecb_info = {
   1770              "DES-EDE-ECB",
   1771              8,
   1772              0 >> MBEDTLS_IV_SIZE_SHIFT,
   1773              MBEDTLS_KEY_LENGTH_DES_EDE >> MBEDTLS_KEY_BITLEN_SHIFT,
   1774              MBEDTLS_MODE_ECB,
   1775              MBEDTLS_CIPHER_DES_EDE_ECB,
   1776              0,
   1777              MBEDTLS_CIPHER_BASE_INDEX_DES_EDE
   1778          };
   1779          
   1780          #if defined(MBEDTLS_CIPHER_MODE_CBC)
   1781          static const mbedtls_cipher_info_t des_ede_cbc_info = {
   1782              "DES-EDE-CBC",
   1783              8,
   1784              8 >> MBEDTLS_IV_SIZE_SHIFT,
   1785              MBEDTLS_KEY_LENGTH_DES_EDE >> MBEDTLS_KEY_BITLEN_SHIFT,
   1786              MBEDTLS_MODE_CBC,
   1787              MBEDTLS_CIPHER_DES_EDE_CBC,
   1788              0,
   1789              MBEDTLS_CIPHER_BASE_INDEX_DES_EDE
   1790          };
   1791          #endif /* MBEDTLS_CIPHER_MODE_CBC */
   1792          
   1793          static const mbedtls_cipher_base_t des_ede3_info = {
   1794              MBEDTLS_CIPHER_ID_3DES,
   1795              des3_crypt_ecb_wrap,
   1796          #if defined(MBEDTLS_CIPHER_MODE_CBC)
   1797              des3_crypt_cbc_wrap,
   1798          #endif
   1799          #if defined(MBEDTLS_CIPHER_MODE_CFB)
   1800              NULL,
   1801          #endif
   1802          #if defined(MBEDTLS_CIPHER_MODE_OFB)
   1803              NULL,
   1804          #endif
   1805          #if defined(MBEDTLS_CIPHER_MODE_CTR)
   1806              NULL,
   1807          #endif
   1808          #if defined(MBEDTLS_CIPHER_MODE_XTS)
   1809              NULL,
   1810          #endif
   1811          #if defined(MBEDTLS_CIPHER_MODE_STREAM)
   1812              NULL,
   1813          #endif
   1814              des3_set3key_enc_wrap,
   1815              des3_set3key_dec_wrap,
   1816              des3_ctx_alloc,
   1817              des3_ctx_free
   1818          };
   1819          
   1820          static const mbedtls_cipher_info_t des_ede3_ecb_info = {
   1821              "DES-EDE3-ECB",
   1822              8,
   1823              0 >> MBEDTLS_IV_SIZE_SHIFT,
   1824              MBEDTLS_KEY_LENGTH_DES_EDE3 >> MBEDTLS_KEY_BITLEN_SHIFT,
   1825              MBEDTLS_MODE_ECB,
   1826              MBEDTLS_CIPHER_DES_EDE3_ECB,
   1827              0,
   1828              MBEDTLS_CIPHER_BASE_INDEX_DES_EDE3
   1829          };
   1830          #if defined(MBEDTLS_CIPHER_MODE_CBC)
   1831          static const mbedtls_cipher_info_t des_ede3_cbc_info = {
   1832              "DES-EDE3-CBC",
   1833              8,
   1834              8 >> MBEDTLS_IV_SIZE_SHIFT,
   1835              MBEDTLS_KEY_LENGTH_DES_EDE3 >> MBEDTLS_KEY_BITLEN_SHIFT,
   1836              MBEDTLS_MODE_CBC,
   1837              MBEDTLS_CIPHER_DES_EDE3_CBC,
   1838              0,
   1839              MBEDTLS_CIPHER_BASE_INDEX_DES_EDE3
   1840          };
   1841          #endif /* MBEDTLS_CIPHER_MODE_CBC */
   1842          #endif /* MBEDTLS_DES_C */
   1843          
   1844          #if defined(MBEDTLS_CHACHA20_C)
   1845          
   1846          static int chacha20_setkey_wrap(void *ctx, const unsigned char *key,
   1847                                          unsigned int key_bitlen)
   1848          {
   1849              if (key_bitlen != 256U) {
   1850                  return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
   1851              }
   1852          
   1853              if (0 != mbedtls_chacha20_setkey((mbedtls_chacha20_context *) ctx, key)) {
   1854                  return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
   1855              }
   1856          
   1857              return 0;
   1858          }
   1859          
   1860          static int chacha20_stream_wrap(void *ctx,  size_t length,
   1861                                          const unsigned char *input,
   1862                                          unsigned char *output)
   1863          {
   1864              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
   1865          
   1866              ret = mbedtls_chacha20_update(ctx, length, input, output);
   1867              if (ret == MBEDTLS_ERR_CHACHA20_BAD_INPUT_DATA) {
   1868                  return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
   1869              }
   1870          
   1871              return ret;
   1872          }
   1873          
   1874          static void *chacha20_ctx_alloc(void)
   1875          {
   1876              mbedtls_chacha20_context *ctx;
   1877              ctx = mbedtls_calloc(1, sizeof(mbedtls_chacha20_context));
   1878          
   1879              if (ctx == NULL) {
   1880                  return NULL;
   1881              }
   1882          
   1883              mbedtls_chacha20_init(ctx);
   1884          
   1885              return ctx;
   1886          }
   1887          
   1888          static void chacha20_ctx_free(void *ctx)
   1889          {
   1890              mbedtls_chacha20_free((mbedtls_chacha20_context *) ctx);
   1891              mbedtls_free(ctx);
   1892          }
   1893          
   1894          static const mbedtls_cipher_base_t chacha20_base_info = {
   1895              MBEDTLS_CIPHER_ID_CHACHA20,
   1896              NULL,
   1897          #if defined(MBEDTLS_CIPHER_MODE_CBC)
   1898              NULL,
   1899          #endif
   1900          #if defined(MBEDTLS_CIPHER_MODE_CFB)
   1901              NULL,
   1902          #endif
   1903          #if defined(MBEDTLS_CIPHER_MODE_OFB)
   1904              NULL,
   1905          #endif
   1906          #if defined(MBEDTLS_CIPHER_MODE_CTR)
   1907              NULL,
   1908          #endif
   1909          #if defined(MBEDTLS_CIPHER_MODE_XTS)
   1910              NULL,
   1911          #endif
   1912          #if defined(MBEDTLS_CIPHER_MODE_STREAM)
   1913              chacha20_stream_wrap,
   1914          #endif
   1915              chacha20_setkey_wrap,
   1916              chacha20_setkey_wrap,
   1917              chacha20_ctx_alloc,
   1918              chacha20_ctx_free
   1919          };
   1920          static const mbedtls_cipher_info_t chacha20_info = {
   1921              "CHACHA20",
   1922              1,
   1923              12 >> MBEDTLS_IV_SIZE_SHIFT,
   1924              256 >> MBEDTLS_KEY_BITLEN_SHIFT,
   1925              MBEDTLS_MODE_STREAM,
   1926              MBEDTLS_CIPHER_CHACHA20,
   1927              0,
   1928              MBEDTLS_CIPHER_BASE_INDEX_CHACHA20_BASE
   1929          };
   1930          #endif /* MBEDTLS_CHACHA20_C */
   1931          
   1932          #if defined(MBEDTLS_CHACHAPOLY_C)
   1933          
   1934          static int chachapoly_setkey_wrap(void *ctx,
   1935                                            const unsigned char *key,
   1936                                            unsigned int key_bitlen)
   1937          {
   1938              if (key_bitlen != 256U) {
   1939                  return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
   1940              }
   1941          
   1942              if (0 != mbedtls_chachapoly_setkey((mbedtls_chachapoly_context *) ctx, key)) {
   1943                  return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
   1944              }
   1945          
   1946              return 0;
   1947          }
   1948          
   1949          static void *chachapoly_ctx_alloc(void)
   1950          {
   1951              mbedtls_chachapoly_context *ctx;
   1952              ctx = mbedtls_calloc(1, sizeof(mbedtls_chachapoly_context));
   1953          
   1954              if (ctx == NULL) {
   1955                  return NULL;
   1956              }
   1957          
   1958              mbedtls_chachapoly_init(ctx);
   1959          
   1960              return ctx;
   1961          }
   1962          
   1963          static void chachapoly_ctx_free(void *ctx)
   1964          {
   1965              mbedtls_chachapoly_free((mbedtls_chachapoly_context *) ctx);
   1966              mbedtls_free(ctx);
   1967          }
   1968          
   1969          static const mbedtls_cipher_base_t chachapoly_base_info = {
   1970              MBEDTLS_CIPHER_ID_CHACHA20,
   1971              NULL,
   1972          #if defined(MBEDTLS_CIPHER_MODE_CBC)
   1973              NULL,
   1974          #endif
   1975          #if defined(MBEDTLS_CIPHER_MODE_CFB)
   1976              NULL,
   1977          #endif
   1978          #if defined(MBEDTLS_CIPHER_MODE_OFB)
   1979              NULL,
   1980          #endif
   1981          #if defined(MBEDTLS_CIPHER_MODE_CTR)
   1982              NULL,
   1983          #endif
   1984          #if defined(MBEDTLS_CIPHER_MODE_XTS)
   1985              NULL,
   1986          #endif
   1987          #if defined(MBEDTLS_CIPHER_MODE_STREAM)
   1988              NULL,
   1989          #endif
   1990              chachapoly_setkey_wrap,
   1991              chachapoly_setkey_wrap,
   1992              chachapoly_ctx_alloc,
   1993              chachapoly_ctx_free
   1994          };
   1995          static const mbedtls_cipher_info_t chachapoly_info = {
   1996              "CHACHA20-POLY1305",
   1997              1,
   1998              12 >> MBEDTLS_IV_SIZE_SHIFT,
   1999              256 >> MBEDTLS_KEY_BITLEN_SHIFT,
   2000              MBEDTLS_MODE_CHACHAPOLY,
   2001              MBEDTLS_CIPHER_CHACHA20_POLY1305,
   2002              0,
   2003              MBEDTLS_CIPHER_BASE_INDEX_CHACHAPOLY_BASE
   2004          };
   2005          #endif /* MBEDTLS_CHACHAPOLY_C */
   2006          
   2007          #if defined(MBEDTLS_CIPHER_NULL_CIPHER)
   2008          static int null_crypt_stream(void *ctx, size_t length,
   2009                                       const unsigned char *input,
   2010                                       unsigned char *output)
   2011          {
   2012              ((void) ctx);
   2013              memmove(output, input, length);
   2014              return 0;
   2015          }
   2016          
   2017          static int null_setkey(void *ctx, const unsigned char *key,
   2018                                 unsigned int key_bitlen)
   2019          {
   2020              ((void) ctx);
   2021              ((void) key);
   2022              ((void) key_bitlen);
   2023          
   2024              return 0;
   2025          }
   2026          
   2027          static void *null_ctx_alloc(void)
   2028          {
   2029              return (void *) 1;
   2030          }
   2031          
   2032          static void null_ctx_free(void *ctx)
   2033          {
   2034              ((void) ctx);
   2035          }
   2036          
   2037          static const mbedtls_cipher_base_t null_base_info = {
   2038              MBEDTLS_CIPHER_ID_NULL,
   2039              NULL,
   2040          #if defined(MBEDTLS_CIPHER_MODE_CBC)
   2041              NULL,
   2042          #endif
   2043          #if defined(MBEDTLS_CIPHER_MODE_CFB)
   2044              NULL,
   2045          #endif
   2046          #if defined(MBEDTLS_CIPHER_MODE_OFB)
   2047              NULL,
   2048          #endif
   2049          #if defined(MBEDTLS_CIPHER_MODE_CTR)
   2050              NULL,
   2051          #endif
   2052          #if defined(MBEDTLS_CIPHER_MODE_XTS)
   2053              NULL,
   2054          #endif
   2055          #if defined(MBEDTLS_CIPHER_MODE_STREAM)
   2056              null_crypt_stream,
   2057          #endif
   2058              null_setkey,
   2059              null_setkey,
   2060              null_ctx_alloc,
   2061              null_ctx_free
   2062          };
   2063          
   2064          static const mbedtls_cipher_info_t null_cipher_info = {
   2065              "NULL",
   2066              1,
   2067              0 >> MBEDTLS_IV_SIZE_SHIFT,
   2068              0 >> MBEDTLS_KEY_BITLEN_SHIFT,
   2069              MBEDTLS_MODE_STREAM,
   2070              MBEDTLS_CIPHER_NULL,
   2071              0,
   2072              MBEDTLS_CIPHER_BASE_INDEX_NULL_BASE
   2073          };
   2074          #endif /* defined(MBEDTLS_CIPHER_NULL_CIPHER) */
   2075          
   2076          #if defined(MBEDTLS_NIST_KW_C)

   \                                 In section .text, align 2, keep-with-next
   2077          static void *kw_ctx_alloc(void)
   2078          {
   \                     kw_ctx_alloc: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   2079              void *ctx = mbedtls_calloc(1, sizeof(mbedtls_nist_kw_context));
   \        0x2   0x2148             MOVS     R1,#+72
   \        0x4   0x2001             MOVS     R0,#+1
   \        0x6   0x.... 0x....      BL       sl_calloc
   \        0xA   0x0004             MOVS     R4,R0
   2080          
   2081              if (ctx != NULL) {
   \        0xC   0x2C00             CMP      R4,#+0
   \        0xE   0xD002             BEQ.N    ??kw_ctx_alloc_0
   2082                  mbedtls_nist_kw_init((mbedtls_nist_kw_context *) ctx);
   \       0x10   0x0020             MOVS     R0,R4
   \       0x12   0x.... 0x....      BL       mbedtls_nist_kw_init
   2083              }
   2084          
   2085              return ctx;
   \                     ??kw_ctx_alloc_0: (+1)
   \       0x16   0x0020             MOVS     R0,R4
   \       0x18   0xBD10             POP      {R4,PC}
   2086          }
   2087          

   \                                 In section .text, align 2, keep-with-next
   2088          static void kw_ctx_free(void *ctx)
   2089          {
   \                     kw_ctx_free: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
   2090              mbedtls_nist_kw_free(ctx);
   \        0x4   0x0020             MOVS     R0,R4
   \        0x6   0x.... 0x....      BL       mbedtls_nist_kw_free
   2091              mbedtls_free(ctx);
   \        0xA   0x0020             MOVS     R0,R4
   \        0xC   0x.... 0x....      BL       sl_free
   2092          }
   \       0x10   0xBD10             POP      {R4,PC}
   2093          

   \                                 In section .text, align 2, keep-with-next
   2094          static int kw_aes_setkey_wrap(void *ctx, const unsigned char *key,
   2095                                        unsigned int key_bitlen)
   2096          {
   \                     kw_aes_setkey_wrap: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0x0016             MOVS     R6,R2
   2097              return mbedtls_nist_kw_setkey((mbedtls_nist_kw_context *) ctx,
   2098                                            MBEDTLS_CIPHER_ID_AES, key, key_bitlen, 1);
   \        0x8   0x2001             MOVS     R0,#+1
   \        0xA   0x9000             STR      R0,[SP, #+0]
   \        0xC   0x0033             MOVS     R3,R6
   \        0xE   0x002A             MOVS     R2,R5
   \       0x10   0x2102             MOVS     R1,#+2
   \       0x12   0x0020             MOVS     R0,R4
   \       0x14   0x.... 0x....      BL       mbedtls_nist_kw_setkey
   \       0x18   0xBD76             POP      {R1,R2,R4-R6,PC}
   2099          }
   2100          

   \                                 In section .text, align 2, keep-with-next
   2101          static int kw_aes_setkey_unwrap(void *ctx, const unsigned char *key,
   2102                                          unsigned int key_bitlen)
   2103          {
   \                     kw_aes_setkey_unwrap: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0x0016             MOVS     R6,R2
   2104              return mbedtls_nist_kw_setkey((mbedtls_nist_kw_context *) ctx,
   2105                                            MBEDTLS_CIPHER_ID_AES, key, key_bitlen, 0);
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0x9000             STR      R0,[SP, #+0]
   \        0xC   0x0033             MOVS     R3,R6
   \        0xE   0x002A             MOVS     R2,R5
   \       0x10   0x2102             MOVS     R1,#+2
   \       0x12   0x0020             MOVS     R0,R4
   \       0x14   0x.... 0x....      BL       mbedtls_nist_kw_setkey
   \       0x18   0xBD76             POP      {R1,R2,R4-R6,PC}
   2106          }
   2107          

   \                                 In section .rodata, align 4
   2108          static const mbedtls_cipher_base_t kw_aes_info = {
   \                     kw_aes_info:
   \        0x0   0x02               DC8 2
   \        0x1                      DS8 3
   \        0x4   0x0000'0000        DC32 0x0, 0x0, kw_aes_setkey_wrap, kw_aes_setkey_unwrap, kw_ctx_alloc
   \              0x0000'0000  
   \              0x....'....  
   \              0x....'....  
   \              0x....'....
   \       0x18   0x....'....        DC32 kw_ctx_free
   2109              MBEDTLS_CIPHER_ID_AES,
   2110              NULL,
   2111          #if defined(MBEDTLS_CIPHER_MODE_CBC)
   2112              NULL,
   2113          #endif
   2114          #if defined(MBEDTLS_CIPHER_MODE_CFB)
   2115              NULL,
   2116          #endif
   2117          #if defined(MBEDTLS_CIPHER_MODE_OFB)
   2118              NULL,
   2119          #endif
   2120          #if defined(MBEDTLS_CIPHER_MODE_CTR)
   2121              NULL,
   2122          #endif
   2123          #if defined(MBEDTLS_CIPHER_MODE_XTS)
   2124              NULL,
   2125          #endif
   2126          #if defined(MBEDTLS_CIPHER_MODE_STREAM)
   2127              NULL,
   2128          #endif
   2129              kw_aes_setkey_wrap,
   2130              kw_aes_setkey_unwrap,
   2131              kw_ctx_alloc,
   2132              kw_ctx_free,
   2133          };
   2134          

   \                                 In section .rodata, align 4
   2135          static const mbedtls_cipher_info_t aes_128_nist_kw_info = {
   \                     aes_128_nist_kw_info:
   \        0x0   0x....'....        DC32 ?_12
   \        0x4   0x10 0xC2          DC8 16, 194, 78, 8
   \              0x4E 0x08
   2136              "AES-128-KW",
   2137              16,
   2138              0 >> MBEDTLS_IV_SIZE_SHIFT,
   2139              128 >> MBEDTLS_KEY_BITLEN_SHIFT,
   2140              MBEDTLS_MODE_KW,
   2141              MBEDTLS_CIPHER_AES_128_KW,
   2142              0,
   2143              MBEDTLS_CIPHER_BASE_INDEX_KW_AES
   2144          };
   2145          
   2146          #if !defined(MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH)

   \                                 In section .rodata, align 4
   2147          static const mbedtls_cipher_info_t aes_192_nist_kw_info = {
   \                     aes_192_nist_kw_info:
   \        0x0   0x....'....        DC32 ?_13
   \        0x4   0x10 0xC3          DC8 16, 195, 79, 8
   \              0x4F 0x08
   2148              "AES-192-KW",
   2149              16,
   2150              0 >> MBEDTLS_IV_SIZE_SHIFT,
   2151              192 >> MBEDTLS_KEY_BITLEN_SHIFT,
   2152              MBEDTLS_MODE_KW,
   2153              MBEDTLS_CIPHER_AES_192_KW,
   2154              0,
   2155              MBEDTLS_CIPHER_BASE_INDEX_KW_AES
   2156          };
   2157          

   \                                 In section .rodata, align 4
   2158          static const mbedtls_cipher_info_t aes_256_nist_kw_info = {
   \                     aes_256_nist_kw_info:
   \        0x0   0x....'....        DC32 ?_14
   \        0x4   0x10 0xC4          DC8 16, 196, 80, 8
   \              0x50 0x08
   2159              "AES-256-KW",
   2160              16,
   2161              0 >> MBEDTLS_IV_SIZE_SHIFT,
   2162              256 >> MBEDTLS_KEY_BITLEN_SHIFT,
   2163              MBEDTLS_MODE_KW,
   2164              MBEDTLS_CIPHER_AES_256_KW,
   2165              0,
   2166              MBEDTLS_CIPHER_BASE_INDEX_KW_AES
   2167          };
   2168          #endif
   2169          

   \                                 In section .rodata, align 4
   2170          static const mbedtls_cipher_info_t aes_128_nist_kwp_info = {
   \                     aes_128_nist_kwp_info:
   \        0x0   0x....'....        DC32 ?_15
   \        0x4   0x10 0xD2          DC8 16, 210, 81, 8
   \              0x51 0x08
   2171              "AES-128-KWP",
   2172              16,
   2173              0 >> MBEDTLS_IV_SIZE_SHIFT,
   2174              128 >> MBEDTLS_KEY_BITLEN_SHIFT,
   2175              MBEDTLS_MODE_KWP,
   2176              MBEDTLS_CIPHER_AES_128_KWP,
   2177              0,
   2178              MBEDTLS_CIPHER_BASE_INDEX_KW_AES
   2179          };
   2180          
   2181          #if !defined(MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH)

   \                                 In section .rodata, align 4
   2182          static const mbedtls_cipher_info_t aes_192_nist_kwp_info = {
   \                     aes_192_nist_kwp_info:
   \        0x0   0x....'....        DC32 ?_16
   \        0x4   0x10 0xD3          DC8 16, 211, 82, 8
   \              0x52 0x08
   2183              "AES-192-KWP",
   2184              16,
   2185              0 >> MBEDTLS_IV_SIZE_SHIFT,
   2186              192 >> MBEDTLS_KEY_BITLEN_SHIFT,
   2187              MBEDTLS_MODE_KWP,
   2188              MBEDTLS_CIPHER_AES_192_KWP,
   2189              0,
   2190              MBEDTLS_CIPHER_BASE_INDEX_KW_AES
   2191          };
   2192          

   \                                 In section .rodata, align 4
   2193          static const mbedtls_cipher_info_t aes_256_nist_kwp_info = {
   \                     aes_256_nist_kwp_info:
   \        0x0   0x....'....        DC32 ?_17
   \        0x4   0x10 0xD4          DC8 16, 212, 83, 8
   \              0x53 0x08
   2194              "AES-256-KWP",
   2195              16,
   2196              0 >> MBEDTLS_IV_SIZE_SHIFT,
   2197              256 >> MBEDTLS_KEY_BITLEN_SHIFT,
   2198              MBEDTLS_MODE_KWP,
   2199              MBEDTLS_CIPHER_AES_256_KWP,
   2200              0,
   2201              MBEDTLS_CIPHER_BASE_INDEX_KW_AES
   2202          };
   2203          #endif
   2204          #endif /* MBEDTLS_NIST_KW_C */
   2205          

   \                                 In section .rodata, align 4
   2206          const mbedtls_cipher_definition_t mbedtls_cipher_definitions[] =
   \                     mbedtls_cipher_definitions:
   \        0x0   0x02               DC8 2
   \        0x1                      DS8 3
   \        0x4   0x....'....        DC32 aes_128_ecb_info
   \        0x8   0x03               DC8 3
   \        0x9                      DS8 3
   \        0xC   0x....'....        DC32 aes_192_ecb_info
   \       0x10   0x04               DC8 4
   \       0x11                      DS8 3
   \       0x14   0x....'....        DC32 aes_256_ecb_info
   \       0x18   0x05               DC8 5
   \       0x19                      DS8 3
   \       0x1C   0x....'....        DC32 aes_128_cbc_info
   \       0x20   0x06               DC8 6
   \       0x21                      DS8 3
   \       0x24   0x....'....        DC32 aes_192_cbc_info
   \       0x28   0x07               DC8 7
   \       0x29                      DS8 3
   \       0x2C   0x....'....        DC32 aes_256_cbc_info
   \       0x30   0x26               DC8 38
   \       0x31                      DS8 3
   \       0x34   0x....'....        DC32 aes_128_ccm_info
   \       0x38   0x27               DC8 39
   \       0x39                      DS8 3
   \       0x3C   0x....'....        DC32 aes_192_ccm_info
   \       0x40   0x28               DC8 40
   \       0x41                      DS8 3
   \       0x44   0x....'....        DC32 aes_256_ccm_info
   \       0x48   0x29               DC8 41
   \       0x49                      DS8 3
   \       0x4C   0x....'....        DC32 aes_128_ccm_star_no_tag_info
   \       0x50   0x2A               DC8 42
   \       0x51                      DS8 3
   \       0x54   0x....'....        DC32 aes_192_ccm_star_no_tag_info
   \       0x58   0x2B               DC8 43
   \       0x59                      DS8 3
   \       0x5C   0x....'....        DC32 aes_256_ccm_star_no_tag_info
   \       0x60   0x4E               DC8 78
   \       0x61                      DS8 3
   \       0x64   0x....'....        DC32 aes_128_nist_kw_info
   \       0x68   0x4F               DC8 79
   \       0x69                      DS8 3
   \       0x6C   0x....'....        DC32 aes_192_nist_kw_info
   \       0x70   0x50               DC8 80
   \       0x71                      DS8 3
   \       0x74   0x....'....        DC32 aes_256_nist_kw_info
   \       0x78   0x51               DC8 81
   \       0x79                      DS8 3
   \       0x7C   0x....'....        DC32 aes_128_nist_kwp_info
   \       0x80   0x52               DC8 82
   \       0x81                      DS8 3
   \       0x84   0x....'....        DC32 aes_192_nist_kwp_info
   \       0x88   0x53               DC8 83
   \       0x89                      DS8 3
   \       0x8C   0x....'....        DC32 aes_256_nist_kwp_info
   \       0x90   0x00               DC8 0
   \       0x91                      DS8 3
   \       0x94   0x0000'0000        DC32 0x0
   2207          {
   2208          #if defined(MBEDTLS_AES_C)
   2209              { MBEDTLS_CIPHER_AES_128_ECB,          &aes_128_ecb_info },
   2210          #if !defined(MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH)
   2211              { MBEDTLS_CIPHER_AES_192_ECB,          &aes_192_ecb_info },
   2212              { MBEDTLS_CIPHER_AES_256_ECB,          &aes_256_ecb_info },
   2213          #endif
   2214          #if defined(MBEDTLS_CIPHER_MODE_CBC)
   2215              { MBEDTLS_CIPHER_AES_128_CBC,          &aes_128_cbc_info },
   2216          #if !defined(MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH)
   2217              { MBEDTLS_CIPHER_AES_192_CBC,          &aes_192_cbc_info },
   2218              { MBEDTLS_CIPHER_AES_256_CBC,          &aes_256_cbc_info },
   2219          #endif
   2220          #endif
   2221          #if defined(MBEDTLS_CIPHER_MODE_CFB)
   2222              { MBEDTLS_CIPHER_AES_128_CFB128,       &aes_128_cfb128_info },
   2223          #if !defined(MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH)
   2224              { MBEDTLS_CIPHER_AES_192_CFB128,       &aes_192_cfb128_info },
   2225              { MBEDTLS_CIPHER_AES_256_CFB128,       &aes_256_cfb128_info },
   2226          #endif
   2227          #endif
   2228          #if defined(MBEDTLS_CIPHER_MODE_OFB)
   2229              { MBEDTLS_CIPHER_AES_128_OFB,          &aes_128_ofb_info },
   2230          #if !defined(MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH)
   2231              { MBEDTLS_CIPHER_AES_192_OFB,          &aes_192_ofb_info },
   2232              { MBEDTLS_CIPHER_AES_256_OFB,          &aes_256_ofb_info },
   2233          #endif
   2234          #endif
   2235          #if defined(MBEDTLS_CIPHER_MODE_CTR)
   2236              { MBEDTLS_CIPHER_AES_128_CTR,          &aes_128_ctr_info },
   2237          #if !defined(MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH)
   2238              { MBEDTLS_CIPHER_AES_192_CTR,          &aes_192_ctr_info },
   2239              { MBEDTLS_CIPHER_AES_256_CTR,          &aes_256_ctr_info },
   2240          #endif
   2241          #endif
   2242          #if defined(MBEDTLS_CIPHER_MODE_XTS)
   2243              { MBEDTLS_CIPHER_AES_128_XTS,          &aes_128_xts_info },
   2244          #if !defined(MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH)
   2245              { MBEDTLS_CIPHER_AES_256_XTS,          &aes_256_xts_info },
   2246          #endif
   2247          #endif
   2248          #if defined(MBEDTLS_GCM_C)
   2249              { MBEDTLS_CIPHER_AES_128_GCM,          &aes_128_gcm_info },
   2250          #if !defined(MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH)
   2251              { MBEDTLS_CIPHER_AES_192_GCM,          &aes_192_gcm_info },
   2252              { MBEDTLS_CIPHER_AES_256_GCM,          &aes_256_gcm_info },
   2253          #endif
   2254          #endif
   2255          #if defined(MBEDTLS_CCM_C)
   2256              { MBEDTLS_CIPHER_AES_128_CCM,          &aes_128_ccm_info },
   2257          #if !defined(MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH)
   2258              { MBEDTLS_CIPHER_AES_192_CCM,          &aes_192_ccm_info },
   2259              { MBEDTLS_CIPHER_AES_256_CCM,          &aes_256_ccm_info },
   2260          #endif
   2261              { MBEDTLS_CIPHER_AES_128_CCM_STAR_NO_TAG,          &aes_128_ccm_star_no_tag_info },
   2262          #if !defined(MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH)
   2263              { MBEDTLS_CIPHER_AES_192_CCM_STAR_NO_TAG,          &aes_192_ccm_star_no_tag_info },
   2264              { MBEDTLS_CIPHER_AES_256_CCM_STAR_NO_TAG,          &aes_256_ccm_star_no_tag_info },
   2265          #endif
   2266          #endif
   2267          #endif /* MBEDTLS_AES_C */
   2268          
   2269          #if defined(MBEDTLS_CAMELLIA_C)
   2270              { MBEDTLS_CIPHER_CAMELLIA_128_ECB,     &camellia_128_ecb_info },
   2271              { MBEDTLS_CIPHER_CAMELLIA_192_ECB,     &camellia_192_ecb_info },
   2272              { MBEDTLS_CIPHER_CAMELLIA_256_ECB,     &camellia_256_ecb_info },
   2273          #if defined(MBEDTLS_CIPHER_MODE_CBC)
   2274              { MBEDTLS_CIPHER_CAMELLIA_128_CBC,     &camellia_128_cbc_info },
   2275              { MBEDTLS_CIPHER_CAMELLIA_192_CBC,     &camellia_192_cbc_info },
   2276              { MBEDTLS_CIPHER_CAMELLIA_256_CBC,     &camellia_256_cbc_info },
   2277          #endif
   2278          #if defined(MBEDTLS_CIPHER_MODE_CFB)
   2279              { MBEDTLS_CIPHER_CAMELLIA_128_CFB128,  &camellia_128_cfb128_info },
   2280              { MBEDTLS_CIPHER_CAMELLIA_192_CFB128,  &camellia_192_cfb128_info },
   2281              { MBEDTLS_CIPHER_CAMELLIA_256_CFB128,  &camellia_256_cfb128_info },
   2282          #endif
   2283          #if defined(MBEDTLS_CIPHER_MODE_CTR)
   2284              { MBEDTLS_CIPHER_CAMELLIA_128_CTR,     &camellia_128_ctr_info },
   2285              { MBEDTLS_CIPHER_CAMELLIA_192_CTR,     &camellia_192_ctr_info },
   2286              { MBEDTLS_CIPHER_CAMELLIA_256_CTR,     &camellia_256_ctr_info },
   2287          #endif
   2288          #if defined(MBEDTLS_GCM_C)
   2289              { MBEDTLS_CIPHER_CAMELLIA_128_GCM,     &camellia_128_gcm_info },
   2290              { MBEDTLS_CIPHER_CAMELLIA_192_GCM,     &camellia_192_gcm_info },
   2291              { MBEDTLS_CIPHER_CAMELLIA_256_GCM,     &camellia_256_gcm_info },
   2292          #endif
   2293          #if defined(MBEDTLS_CCM_C)
   2294              { MBEDTLS_CIPHER_CAMELLIA_128_CCM,     &camellia_128_ccm_info },
   2295              { MBEDTLS_CIPHER_CAMELLIA_192_CCM,     &camellia_192_ccm_info },
   2296              { MBEDTLS_CIPHER_CAMELLIA_256_CCM,     &camellia_256_ccm_info },
   2297              { MBEDTLS_CIPHER_CAMELLIA_128_CCM_STAR_NO_TAG,     &camellia_128_ccm_star_no_tag_info },
   2298              { MBEDTLS_CIPHER_CAMELLIA_192_CCM_STAR_NO_TAG,     &camellia_192_ccm_star_no_tag_info },
   2299              { MBEDTLS_CIPHER_CAMELLIA_256_CCM_STAR_NO_TAG,     &camellia_256_ccm_star_no_tag_info },
   2300          #endif
   2301          #endif /* MBEDTLS_CAMELLIA_C */
   2302          
   2303          #if defined(MBEDTLS_ARIA_C)
   2304              { MBEDTLS_CIPHER_ARIA_128_ECB,     &aria_128_ecb_info },
   2305              { MBEDTLS_CIPHER_ARIA_192_ECB,     &aria_192_ecb_info },
   2306              { MBEDTLS_CIPHER_ARIA_256_ECB,     &aria_256_ecb_info },
   2307          #if defined(MBEDTLS_CIPHER_MODE_CBC)
   2308              { MBEDTLS_CIPHER_ARIA_128_CBC,     &aria_128_cbc_info },
   2309              { MBEDTLS_CIPHER_ARIA_192_CBC,     &aria_192_cbc_info },
   2310              { MBEDTLS_CIPHER_ARIA_256_CBC,     &aria_256_cbc_info },
   2311          #endif
   2312          #if defined(MBEDTLS_CIPHER_MODE_CFB)
   2313              { MBEDTLS_CIPHER_ARIA_128_CFB128,  &aria_128_cfb128_info },
   2314              { MBEDTLS_CIPHER_ARIA_192_CFB128,  &aria_192_cfb128_info },
   2315              { MBEDTLS_CIPHER_ARIA_256_CFB128,  &aria_256_cfb128_info },
   2316          #endif
   2317          #if defined(MBEDTLS_CIPHER_MODE_CTR)
   2318              { MBEDTLS_CIPHER_ARIA_128_CTR,     &aria_128_ctr_info },
   2319              { MBEDTLS_CIPHER_ARIA_192_CTR,     &aria_192_ctr_info },
   2320              { MBEDTLS_CIPHER_ARIA_256_CTR,     &aria_256_ctr_info },
   2321          #endif
   2322          #if defined(MBEDTLS_GCM_C)
   2323              { MBEDTLS_CIPHER_ARIA_128_GCM,     &aria_128_gcm_info },
   2324              { MBEDTLS_CIPHER_ARIA_192_GCM,     &aria_192_gcm_info },
   2325              { MBEDTLS_CIPHER_ARIA_256_GCM,     &aria_256_gcm_info },
   2326          #endif
   2327          #if defined(MBEDTLS_CCM_C)
   2328              { MBEDTLS_CIPHER_ARIA_128_CCM,     &aria_128_ccm_info },
   2329              { MBEDTLS_CIPHER_ARIA_192_CCM,     &aria_192_ccm_info },
   2330              { MBEDTLS_CIPHER_ARIA_256_CCM,     &aria_256_ccm_info },
   2331              { MBEDTLS_CIPHER_ARIA_128_CCM_STAR_NO_TAG,     &aria_128_ccm_star_no_tag_info },
   2332              { MBEDTLS_CIPHER_ARIA_192_CCM_STAR_NO_TAG,     &aria_192_ccm_star_no_tag_info },
   2333              { MBEDTLS_CIPHER_ARIA_256_CCM_STAR_NO_TAG,     &aria_256_ccm_star_no_tag_info },
   2334          #endif
   2335          #endif /* MBEDTLS_ARIA_C */
   2336          
   2337          #if defined(MBEDTLS_DES_C)
   2338              { MBEDTLS_CIPHER_DES_ECB,              &des_ecb_info },
   2339              { MBEDTLS_CIPHER_DES_EDE_ECB,          &des_ede_ecb_info },
   2340              { MBEDTLS_CIPHER_DES_EDE3_ECB,         &des_ede3_ecb_info },
   2341          #if defined(MBEDTLS_CIPHER_MODE_CBC)
   2342              { MBEDTLS_CIPHER_DES_CBC,              &des_cbc_info },
   2343              { MBEDTLS_CIPHER_DES_EDE_CBC,          &des_ede_cbc_info },
   2344              { MBEDTLS_CIPHER_DES_EDE3_CBC,         &des_ede3_cbc_info },
   2345          #endif
   2346          #endif /* MBEDTLS_DES_C */
   2347          
   2348          #if defined(MBEDTLS_CHACHA20_C)
   2349              { MBEDTLS_CIPHER_CHACHA20,             &chacha20_info },
   2350          #endif
   2351          
   2352          #if defined(MBEDTLS_CHACHAPOLY_C)
   2353              { MBEDTLS_CIPHER_CHACHA20_POLY1305,    &chachapoly_info },
   2354          #endif
   2355          
   2356          #if defined(MBEDTLS_NIST_KW_C)
   2357              { MBEDTLS_CIPHER_AES_128_KW,          &aes_128_nist_kw_info },
   2358          #if !defined(MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH)
   2359              { MBEDTLS_CIPHER_AES_192_KW,          &aes_192_nist_kw_info },
   2360              { MBEDTLS_CIPHER_AES_256_KW,          &aes_256_nist_kw_info },
   2361          #endif
   2362              { MBEDTLS_CIPHER_AES_128_KWP,         &aes_128_nist_kwp_info },
   2363          #if !defined(MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH)
   2364              { MBEDTLS_CIPHER_AES_192_KWP,         &aes_192_nist_kwp_info },
   2365              { MBEDTLS_CIPHER_AES_256_KWP,         &aes_256_nist_kwp_info },
   2366          #endif
   2367          #endif
   2368          
   2369          #if defined(MBEDTLS_CIPHER_NULL_CIPHER)
   2370              { MBEDTLS_CIPHER_NULL,                 &null_cipher_info },
   2371          #endif /* MBEDTLS_CIPHER_NULL_CIPHER */
   2372          
   2373              { MBEDTLS_CIPHER_NONE, NULL }
   2374          };
   2375          
   2376          #define NUM_CIPHERS (sizeof(mbedtls_cipher_definitions) /      \
   2377                               sizeof(mbedtls_cipher_definitions[0]))

   \                                 In section .bss, align 4
   2378          int mbedtls_cipher_supported[NUM_CIPHERS];
   \                     mbedtls_cipher_supported:
   \        0x0                      DS8 76
   2379          

   \                                 In section .data, align 4
   2380          const mbedtls_cipher_base_t *mbedtls_cipher_base_lookup_table[] = {
   \                     mbedtls_cipher_base_lookup_table:
   \        0x0   0x....'....        DC32 aes_info, ccm_aes_info, kw_aes_info, 0x0
   \              0x....'....  
   \              0x....'....  
   \              0x0000'0000

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x41 0x45          DC8 "AES-128-ECB"
   \              0x53 0x2D    
   \              0x31 0x32    
   \              0x38 0x2D    
   \              0x45 0x43    
   \              0x42 0x00

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x41 0x45          DC8 "AES-192-ECB"
   \              0x53 0x2D    
   \              0x31 0x39    
   \              0x32 0x2D    
   \              0x45 0x43    
   \              0x42 0x00

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x41 0x45          DC8 "AES-256-ECB"
   \              0x53 0x2D    
   \              0x32 0x35    
   \              0x36 0x2D    
   \              0x45 0x43    
   \              0x42 0x00

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x41 0x45          DC8 "AES-128-CBC"
   \              0x53 0x2D    
   \              0x31 0x32    
   \              0x38 0x2D    
   \              0x43 0x42    
   \              0x43 0x00

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0x41 0x45          DC8 "AES-192-CBC"
   \              0x53 0x2D    
   \              0x31 0x39    
   \              0x32 0x2D    
   \              0x43 0x42    
   \              0x43 0x00

   \                                 In section .rodata, align 4
   \                     ?_5:
   \        0x0   0x41 0x45          DC8 "AES-256-CBC"
   \              0x53 0x2D    
   \              0x32 0x35    
   \              0x36 0x2D    
   \              0x43 0x42    
   \              0x43 0x00

   \                                 In section .rodata, align 4
   \                     ?_6:
   \        0x0   0x41 0x45          DC8 "AES-128-CCM"
   \              0x53 0x2D    
   \              0x31 0x32    
   \              0x38 0x2D    
   \              0x43 0x43    
   \              0x4D 0x00

   \                                 In section .rodata, align 4
   \                     ?_7:
   \        0x0   0x41 0x45          DC8 "AES-192-CCM"
   \              0x53 0x2D    
   \              0x31 0x39    
   \              0x32 0x2D    
   \              0x43 0x43    
   \              0x4D 0x00

   \                                 In section .rodata, align 4
   \                     ?_8:
   \        0x0   0x41 0x45          DC8 "AES-256-CCM"
   \              0x53 0x2D    
   \              0x32 0x35    
   \              0x36 0x2D    
   \              0x43 0x43    
   \              0x4D 0x00

   \                                 In section .rodata, align 4
   \                     ?_9:
   \        0x0   0x41 0x45          DC8 "AES-128-CCM*-NO-TAG"
   \              0x53 0x2D    
   \              0x31 0x32    
   \              0x38 0x2D    
   \              0x43 0x43    
   \              0x4D 0x2A    
   \              0x2D 0x4E    
   \              0x4F 0x2D    
   \              0x54 0x41    
   \              0x47 0x00

   \                                 In section .rodata, align 4
   \                     ?_10:
   \        0x0   0x41 0x45          DC8 "AES-192-CCM*-NO-TAG"
   \              0x53 0x2D    
   \              0x31 0x39    
   \              0x32 0x2D    
   \              0x43 0x43    
   \              0x4D 0x2A    
   \              0x2D 0x4E    
   \              0x4F 0x2D    
   \              0x54 0x41    
   \              0x47 0x00

   \                                 In section .rodata, align 4
   \                     ?_11:
   \        0x0   0x41 0x45          DC8 "AES-256-CCM*-NO-TAG"
   \              0x53 0x2D    
   \              0x32 0x35    
   \              0x36 0x2D    
   \              0x43 0x43    
   \              0x4D 0x2A    
   \              0x2D 0x4E    
   \              0x4F 0x2D    
   \              0x54 0x41    
   \              0x47 0x00

   \                                 In section .rodata, align 4
   \                     ?_12:
   \        0x0   0x41 0x45          DC8 "AES-128-KW"
   \              0x53 0x2D    
   \              0x31 0x32    
   \              0x38 0x2D    
   \              0x4B 0x57    
   \              0x00
   \        0xB                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_13:
   \        0x0   0x41 0x45          DC8 "AES-192-KW"
   \              0x53 0x2D    
   \              0x31 0x39    
   \              0x32 0x2D    
   \              0x4B 0x57    
   \              0x00
   \        0xB                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_14:
   \        0x0   0x41 0x45          DC8 "AES-256-KW"
   \              0x53 0x2D    
   \              0x32 0x35    
   \              0x36 0x2D    
   \              0x4B 0x57    
   \              0x00
   \        0xB                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_15:
   \        0x0   0x41 0x45          DC8 "AES-128-KWP"
   \              0x53 0x2D    
   \              0x31 0x32    
   \              0x38 0x2D    
   \              0x4B 0x57    
   \              0x50 0x00

   \                                 In section .rodata, align 4
   \                     ?_16:
   \        0x0   0x41 0x45          DC8 "AES-192-KWP"
   \              0x53 0x2D    
   \              0x31 0x39    
   \              0x32 0x2D    
   \              0x4B 0x57    
   \              0x50 0x00

   \                                 In section .rodata, align 4
   \                     ?_17:
   \        0x0   0x41 0x45          DC8 "AES-256-KWP"
   \              0x53 0x2D    
   \              0x32 0x35    
   \              0x36 0x2D    
   \              0x4B 0x57    
   \              0x50 0x00
   2381          #if defined(MBEDTLS_AES_C)
   2382              [MBEDTLS_CIPHER_BASE_INDEX_AES] = &aes_info,
   2383          #endif
   2384          #if defined(MBEDTLS_ARIA_C)
   2385              [MBEDTLS_CIPHER_BASE_INDEX_ARIA] = &aria_info,
   2386          #endif
   2387          #if defined(MBEDTLS_CAMELLIA_C)
   2388              [MBEDTLS_CIPHER_BASE_INDEX_CAMELLIA] = &camellia_info,
   2389          #endif
   2390          #if defined(MBEDTLS_CCM_C) && defined(MBEDTLS_AES_C)
   2391              [MBEDTLS_CIPHER_BASE_INDEX_CCM_AES] = &ccm_aes_info,
   2392          #endif
   2393          #if defined(MBEDTLS_CCM_C) && defined(MBEDTLS_ARIA_C)
   2394              [MBEDTLS_CIPHER_BASE_INDEX_CCM_ARIA] = &ccm_aria_info,
   2395          #endif
   2396          #if defined(MBEDTLS_CCM_C) && defined(MBEDTLS_CAMELLIA_C)
   2397              [MBEDTLS_CIPHER_BASE_INDEX_CCM_CAMELLIA] = &ccm_camellia_info,
   2398          #endif
   2399          #if defined(MBEDTLS_CHACHA20_C)
   2400              [MBEDTLS_CIPHER_BASE_INDEX_CHACHA20_BASE] = &chacha20_base_info,
   2401          #endif
   2402          #if defined(MBEDTLS_CHACHAPOLY_C)
   2403              [MBEDTLS_CIPHER_BASE_INDEX_CHACHAPOLY_BASE] = &chachapoly_base_info,
   2404          #endif
   2405          #if defined(MBEDTLS_DES_C)
   2406              [MBEDTLS_CIPHER_BASE_INDEX_DES_EDE3] = &des_ede3_info,
   2407          #endif
   2408          #if defined(MBEDTLS_DES_C)
   2409              [MBEDTLS_CIPHER_BASE_INDEX_DES_EDE] = &des_ede_info,
   2410          #endif
   2411          #if defined(MBEDTLS_DES_C)
   2412              [MBEDTLS_CIPHER_BASE_INDEX_DES] = &des_info,
   2413          #endif
   2414          #if defined(MBEDTLS_GCM_C) && defined(MBEDTLS_AES_C)
   2415              [MBEDTLS_CIPHER_BASE_INDEX_GCM_AES] = &gcm_aes_info,
   2416          #endif
   2417          #if defined(MBEDTLS_GCM_C) && defined(MBEDTLS_ARIA_C)
   2418              [MBEDTLS_CIPHER_BASE_INDEX_GCM_ARIA] = &gcm_aria_info,
   2419          #endif
   2420          #if defined(MBEDTLS_GCM_C) && defined(MBEDTLS_CAMELLIA_C)
   2421              [MBEDTLS_CIPHER_BASE_INDEX_GCM_CAMELLIA] = &gcm_camellia_info,
   2422          #endif
   2423          #if defined(MBEDTLS_NIST_KW_C)
   2424              [MBEDTLS_CIPHER_BASE_INDEX_KW_AES] = &kw_aes_info,
   2425          #endif
   2426          #if defined(MBEDTLS_CIPHER_NULL_CIPHER)
   2427              [MBEDTLS_CIPHER_BASE_INDEX_NULL_BASE] = &null_base_info,
   2428          #endif
   2429          #if defined(MBEDTLS_CIPHER_MODE_XTS) && defined(MBEDTLS_AES_C)
   2430              [MBEDTLS_CIPHER_BASE_INDEX_XTS_AES] = &xts_aes_info,
   2431          #endif
   2432              [MBEDTLS_CIPHER_BASE_PREVENT_EMPTY_ENUM] = NULL
   2433          };
   2434          
   2435          #endif /* MBEDTLS_CIPHER_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   aes_crypt_cbc_wrap
        32   -> mbedtls_aes_crypt_cbc
      24   aes_crypt_ecb_wrap
        24   -> mbedtls_aes_crypt_ecb
       8   aes_ctx_alloc
         8   -> mbedtls_aes_init
         8   -> sl_calloc
       8   aes_ctx_free
         8   -> mbedtls_aes_free
         8   -> sl_free
      16   aes_setkey_dec_wrap
        16   -> mbedtls_aes_setkey_dec
      16   aes_setkey_enc_wrap
        16   -> mbedtls_aes_setkey_enc
      16   ccm_aes_setkey_wrap
        16   -> mbedtls_ccm_setkey
       8   ccm_ctx_alloc
         8   -> mbedtls_ccm_init
         8   -> sl_calloc
       8   ccm_ctx_free
         8   -> mbedtls_ccm_free
         8   -> sl_free
      24   kw_aes_setkey_unwrap
        24   -> mbedtls_nist_kw_setkey
      24   kw_aes_setkey_wrap
        24   -> mbedtls_nist_kw_setkey
       8   kw_ctx_alloc
         8   -> mbedtls_nist_kw_init
         8   -> sl_calloc
       8   kw_ctx_free
         8   -> mbedtls_nist_kw_free
         8   -> sl_free


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?_0
      12  ?_1
      20  ?_10
      20  ?_11
      12  ?_12
      12  ?_13
      12  ?_14
      12  ?_15
      12  ?_16
      12  ?_17
      12  ?_2
      12  ?_3
      12  ?_4
      12  ?_5
      12  ?_6
      12  ?_7
      12  ?_8
      20  ?_9
       8  aes_128_cbc_info
       8  aes_128_ccm_info
       8  aes_128_ccm_star_no_tag_info
       8  aes_128_ecb_info
       8  aes_128_nist_kw_info
       8  aes_128_nist_kwp_info
       8  aes_192_cbc_info
       8  aes_192_ccm_info
       8  aes_192_ccm_star_no_tag_info
       8  aes_192_ecb_info
       8  aes_192_nist_kw_info
       8  aes_192_nist_kwp_info
       8  aes_256_cbc_info
       8  aes_256_ccm_info
       8  aes_256_ccm_star_no_tag_info
       8  aes_256_ecb_info
       8  aes_256_nist_kw_info
       8  aes_256_nist_kwp_info
      34  aes_crypt_cbc_wrap
      26  aes_crypt_ecb_wrap
      30  aes_ctx_alloc
      18  aes_ctx_free
      28  aes_info
      20  aes_setkey_dec_wrap
      20  aes_setkey_enc_wrap
      28  ccm_aes_info
      22  ccm_aes_setkey_wrap
      26  ccm_ctx_alloc
      18  ccm_ctx_free
      28  kw_aes_info
      26  kw_aes_setkey_unwrap
      26  kw_aes_setkey_wrap
      26  kw_ctx_alloc
      18  kw_ctx_free
      16  mbedtls_cipher_base_lookup_table
     152  mbedtls_cipher_definitions
      76  mbedtls_cipher_supported

 
  76 bytes in section .bss
  16 bytes in section .data
 620 bytes in section .rodata
 310 bytes in section .text
 
 310 bytes of CODE  memory
 620 bytes of CONST memory
  92 bytes of DATA  memory

Errors: none
Warnings: none
