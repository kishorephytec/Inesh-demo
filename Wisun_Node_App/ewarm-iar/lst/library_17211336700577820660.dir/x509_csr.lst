###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         29/Mar/2025  15:54:09
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\x509_csr.c
#    Command line                 =
#        -f "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\library_17211336700577820660.dir\x509_csr.o.rsp"
#        ("D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\x509_csr.c"
#        -D DEBUG_EFM=1 -D EFR32FG28B322F1024IM48=1 -D
#        configNUM_SDK_THREAD_LOCAL_STORAGE_POINTERS=2 -D
#        SL_COMPONENT_CATALOG_PRESENT=1 -D
#        MBEDTLS_CONFIG_FILE=<sl_mbedtls_config.h> -D
#        MBEDTLS_PSA_CRYPTO_CONFIG_FILE=<psa_crypto_config.h> -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -D
#        RTT_USE_ASM=0 -lC "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\lst\library_17211336700577820660.dir"
#        --diag_suppress Pa050 -o "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\library_17211336700577820660.dir"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M33 --cmse --cmse -e --fpu=VFPv5_sp --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        9.2\arm\inc\c\DLib_Config_Normal.h" -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\rail\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\wisun\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\.\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\Device\SiliconLabs\EFR32FG28\Include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_project_info\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\common\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\src\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\CMSIS\Core\Include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\CMSIS\RTOS2\Include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\device_init\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emdrv\common\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emlib\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\iostream\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\config\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\config\preset\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\cpu\include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\ports\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emdrv\nvm3\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\peripheral\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\printf\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\printf\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_psa_driver\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\common\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\ble\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\ieee802154\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\wmbus\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\zwave\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\chip\efr32\efr32xg2x\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\sidewalk\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\pa-conversions\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\pa-conversions\efr32xg28\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\rail_util_pti\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\se_manager\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\se_manager\src\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\segger\systemview\SEGGER\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\silicon_labs\silabs_core\memory_manager\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\common\toolchain\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\system\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_core\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_setting\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\cli_util\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\event_manager\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\ns_list\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\ping\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\nanostack\nanostack-libservice\mbed-client-libservice\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\udp_client\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\sleeptimer\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\plugin\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\stack\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\stack\inc\socket\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\autogen\\" -On
#        --use_c++_inline) --dependencies=n "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\library_17211336700577820660.dir\x509_csr.o.iar_deps"
#    Locale                       =  C
#    List file                    =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\lst\library_17211336700577820660.dir\x509_csr.lst
#    Object file                  =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\library_17211336700577820660.dir\x509_csr.o
#    Runtime model:                  
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_file_descriptor     =  0
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#      __iar_require _Printf      =  flags,widths
#
###############################################################################

D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\x509_csr.c
      1          /*
      2           *  X.509 Certificate Signing Request (CSR) parsing
      3           *
      4           *  Copyright The Mbed TLS Contributors
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           */
     19          /*
     20           *  The ITU-T X.509 standard defines a certificate format for PKI.
     21           *
     22           *  http://www.ietf.org/rfc/rfc5280.txt (Certificates and CRLs)
     23           *  http://www.ietf.org/rfc/rfc3279.txt (Alg IDs for CRLs)
     24           *  http://www.ietf.org/rfc/rfc2986.txt (CSRs, aka PKCS#10)
     25           *
     26           *  http://www.itu.int/ITU-T/studygroups/com17/languages/X.680-0207.pdf
     27           *  http://www.itu.int/ITU-T/studygroups/com17/languages/X.690-0207.pdf
     28           */
     29          
     30          #include "common.h"
     31          
     32          #if defined(MBEDTLS_X509_CSR_PARSE_C)
     33          
     34          #include "mbedtls/x509_csr.h"
     35          #include "mbedtls/error.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __vfp int mbedtls_error_add(int, int, char const *, int)
   \                     mbedtls_error_add: (+1)
   \        0x0   0x1808             ADDS     R0,R1,R0
   \        0x2   0x4770             BX       LR
     36          #include "mbedtls/oid.h"
     37          #include "mbedtls/platform_util.h"
     38          
     39          #include <string.h>
     40          
     41          #if defined(MBEDTLS_PEM_PARSE_C)
     42          #include "mbedtls/pem.h"
     43          #endif
     44          
     45          #include "mbedtls/platform.h"
     46          
     47          #if defined(MBEDTLS_FS_IO) || defined(EFIX64) || defined(EFI32)
     48          #include <stdio.h>
     49          #endif
     50          
     51          /*
     52           *  Version  ::=  INTEGER  {  v1(0)  }
     53           */

   \                                 In section .text, align 2, keep-with-next
     54          static int x509_csr_get_version(unsigned char **p,
     55                                          const unsigned char *end,
     56                                          int *ver)
     57          {
   \                     x509_csr_get_version: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x000D             MOVS     R5,R1
   \        0x8   0x0016             MOVS     R6,R2
     58              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
   \        0xA   0xF07F 0x086D      MVNS     R8,#+109
     59          
     60              if ((ret = mbedtls_asn1_get_int(p, end, ver)) != 0) {
   \        0xE   0x0032             MOVS     R2,R6
   \       0x10   0x0029             MOVS     R1,R5
   \       0x12   0x0020             MOVS     R0,R4
   \       0x14   0x.... 0x....      BL       mbedtls_asn1_get_int
   \       0x18   0x0007             MOVS     R7,R0
   \       0x1A   0x2800             CMP      R0,#+0
   \       0x1C   0xD00F             BEQ.N    ??x509_csr_get_version_0
     61                  if (ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG) {
   \       0x1E   0xF117 0x0F62      CMN      R7,#+98
   \       0x22   0xD103             BNE.N    ??x509_csr_get_version_1
     62                      *ver = 0;
   \       0x24   0x2000             MOVS     R0,#+0
   \       0x26   0x6030             STR      R0,[R6, #+0]
     63                      return 0;
   \       0x28   0x2000             MOVS     R0,#+0
   \       0x2A   0xE009             B.N      ??x509_csr_get_version_2
     64                  }
     65          
     66                  return MBEDTLS_ERROR_ADD(MBEDTLS_ERR_X509_INVALID_VERSION, ret);
   \                     ??x509_csr_get_version_1: (+1)
   \       0x2C   0x2342             MOVS     R3,#+66
   \       0x2E   0x.... 0x....      LDR.W    R2,??DataTable6_1
   \       0x32   0x0039             MOVS     R1,R7
   \       0x34   0x.... 0x....      LDR.W    R0,??DataTable6_2
   \       0x38   0x.... 0x....      BL       mbedtls_error_add
   \       0x3C   0xE000             B.N      ??x509_csr_get_version_2
     67              }
     68          
     69              return 0;
   \                     ??x509_csr_get_version_0: (+1)
   \       0x3E   0x2000             MOVS     R0,#+0
   \                     ??x509_csr_get_version_2: (+1)
   \       0x40   0xE8BD 0x81F0      POP      {R4-R8,PC}
     70          }
     71          
     72          /*
     73           * Parse CSR extension requests in DER format
     74           */

   \                                 In section .text, align 2, keep-with-next
     75          static int x509_csr_parse_extensions(mbedtls_x509_csr *csr,
     76                                               unsigned char **p, const unsigned char *end)
     77          {
   \                     x509_csr_parse_extensions: (+1)
   \        0x0   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \        0x4   0xB085             SUB      SP,SP,#+20
   \        0x6   0x4680             MOV      R8,R0
   \        0x8   0x000D             MOVS     R5,R1
   \        0xA   0x0016             MOVS     R6,R2
     78              int ret;
     79              size_t len;
     80              unsigned char *end_ext_data;
     81              while (*p < end) {
   \                     ??x509_csr_parse_extensions_0: (+1)
   \        0xC   0x6828             LDR      R0,[R5, #+0]
   \        0xE   0x42B0             CMP      R0,R6
   \       0x10   0xF080 0x80A4      BCS.W    ??x509_csr_parse_extensions_1
     82                  mbedtls_x509_buf extn_oid = { 0, 0, NULL };
   \       0x14   0xAB02             ADD      R3,SP,#+8
   \       0x16   0x2200             MOVS     R2,#+0
   \       0x18   0x2000             MOVS     R0,#+0
   \       0x1A   0x2100             MOVS     R1,#+0
   \       0x1C   0xE883 0x0007      STM      R3,{R0-R2}
     83                  int ext_type = 0;
   \       0x20   0x2000             MOVS     R0,#+0
   \       0x22   0x9000             STR      R0,[SP, #+0]
     84          
     85                  /* Read sequence tag */
     86                  if ((ret = mbedtls_asn1_get_tag(p, end, &len,
     87                                                  MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE)) != 0) {
   \       0x24   0x2330             MOVS     R3,#+48
   \       0x26   0xAA01             ADD      R2,SP,#+4
   \       0x28   0x0031             MOVS     R1,R6
   \       0x2A   0x0028             MOVS     R0,R5
   \       0x2C   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \       0x30   0x4681             MOV      R9,R0
   \       0x32   0x2800             CMP      R0,#+0
   \       0x34   0xD008             BEQ.N    ??x509_csr_parse_extensions_2
     88                      return MBEDTLS_ERROR_ADD(MBEDTLS_ERR_X509_INVALID_EXTENSIONS, ret);
   \       0x36   0x2358             MOVS     R3,#+88
   \       0x38   0x.... 0x....      LDR.W    R2,??DataTable6_1
   \       0x3C   0x4649             MOV      R1,R9
   \       0x3E   0x.... 0x....      LDR.W    R0,??DataTable6_3
   \       0x42   0x.... 0x....      BL       mbedtls_error_add
   \       0x46   0xE097             B.N      ??x509_csr_parse_extensions_3
     89                  }
     90          
     91                  end_ext_data = *p + len;
   \                     ??x509_csr_parse_extensions_2: (+1)
   \       0x48   0x6829             LDR      R1,[R5, #+0]
   \       0x4A   0x9801             LDR      R0,[SP, #+4]
   \       0x4C   0x4408             ADD      R0,R1,R0
   \       0x4E   0x0007             MOVS     R7,R0
     92          
     93                  /* Get extension ID */
     94                  if ((ret = mbedtls_asn1_get_tag(p, end_ext_data, &extn_oid.len,
     95                                                  MBEDTLS_ASN1_OID)) != 0) {
   \       0x50   0x2306             MOVS     R3,#+6
   \       0x52   0xAA03             ADD      R2,SP,#+12
   \       0x54   0x0039             MOVS     R1,R7
   \       0x56   0x0028             MOVS     R0,R5
   \       0x58   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \       0x5C   0x0004             MOVS     R4,R0
   \       0x5E   0x2800             CMP      R0,#+0
   \       0x60   0xD008             BEQ.N    ??x509_csr_parse_extensions_4
     96                      return MBEDTLS_ERROR_ADD(MBEDTLS_ERR_X509_INVALID_EXTENSIONS, ret);
   \       0x62   0x2360             MOVS     R3,#+96
   \       0x64   0x.... 0x....      LDR.W    R2,??DataTable6_1
   \       0x68   0x0021             MOVS     R1,R4
   \       0x6A   0x.... 0x....      LDR.W    R0,??DataTable6_3
   \       0x6E   0x.... 0x....      BL       mbedtls_error_add
   \       0x72   0xE081             B.N      ??x509_csr_parse_extensions_3
     97                  }
     98          
     99                  extn_oid.tag = MBEDTLS_ASN1_OID;
   \                     ??x509_csr_parse_extensions_4: (+1)
   \       0x74   0x2006             MOVS     R0,#+6
   \       0x76   0x9002             STR      R0,[SP, #+8]
    100                  extn_oid.p = *p;
   \       0x78   0x6828             LDR      R0,[R5, #+0]
   \       0x7A   0x9004             STR      R0,[SP, #+16]
    101                  *p += extn_oid.len;
   \       0x7C   0x6829             LDR      R1,[R5, #+0]
   \       0x7E   0x9803             LDR      R0,[SP, #+12]
   \       0x80   0x4408             ADD      R0,R1,R0
   \       0x82   0x6028             STR      R0,[R5, #+0]
    102          
    103                  /* Data should be octet string type */
    104                  if ((ret = mbedtls_asn1_get_tag(p, end_ext_data, &len,
    105                                                  MBEDTLS_ASN1_OCTET_STRING)) != 0) {
   \       0x84   0x2304             MOVS     R3,#+4
   \       0x86   0xAA01             ADD      R2,SP,#+4
   \       0x88   0x0039             MOVS     R1,R7
   \       0x8A   0x0028             MOVS     R0,R5
   \       0x8C   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \       0x90   0x4681             MOV      R9,R0
   \       0x92   0x2800             CMP      R0,#+0
   \       0x94   0xD008             BEQ.N    ??x509_csr_parse_extensions_5
    106                      return MBEDTLS_ERROR_ADD(MBEDTLS_ERR_X509_INVALID_EXTENSIONS, ret);
   \       0x96   0x236A             MOVS     R3,#+106
   \       0x98   0x.... 0x....      LDR.W    R2,??DataTable6_1
   \       0x9C   0x4649             MOV      R1,R9
   \       0x9E   0x.... 0x....      LDR.W    R0,??DataTable6_3
   \       0xA2   0x.... 0x....      BL       mbedtls_error_add
   \       0xA6   0xE067             B.N      ??x509_csr_parse_extensions_3
    107                  }
    108          
    109                  if (*p + len != end_ext_data) {
   \                     ??x509_csr_parse_extensions_5: (+1)
   \       0xA8   0x6829             LDR      R1,[R5, #+0]
   \       0xAA   0x9801             LDR      R0,[SP, #+4]
   \       0xAC   0x4408             ADD      R0,R1,R0
   \       0xAE   0x42B8             CMP      R0,R7
   \       0xB0   0xD009             BEQ.N    ??x509_csr_parse_extensions_6
    110                      return MBEDTLS_ERROR_ADD(MBEDTLS_ERR_X509_INVALID_EXTENSIONS,
    111                                               MBEDTLS_ERR_ASN1_LENGTH_MISMATCH);
   \       0xB2   0x236F             MOVS     R3,#+111
   \       0xB4   0x.... 0x....      LDR.W    R2,??DataTable6_1
   \       0xB8   0xF07F 0x0165      MVNS     R1,#+101
   \       0xBC   0x.... 0x....      LDR.W    R0,??DataTable6_3
   \       0xC0   0x.... 0x....      BL       mbedtls_error_add
   \       0xC4   0xE058             B.N      ??x509_csr_parse_extensions_3
    112                  }
    113          
    114                  /*
    115                   * Detect supported extensions and skip unsupported extensions
    116                   */
    117                  ret = mbedtls_oid_get_x509_ext_type(&extn_oid, &ext_type);
   \                     ??x509_csr_parse_extensions_6: (+1)
   \       0xC6   0x4669             MOV      R1,SP
   \       0xC8   0xA802             ADD      R0,SP,#+8
   \       0xCA   0x.... 0x....      BL       mbedtls_oid_get_x509_ext_type
   \       0xCE   0x0004             MOVS     R4,R0
    118          
    119                  if (ret == 0) {
   \       0xD0   0x2C00             CMP      R4,#+0
   \       0xD2   0xD141             BNE.N    ??x509_csr_parse_extensions_7
    120                      /* Forbid repeated extensions */
    121                      if ((csr->ext_types & ext_type) != 0) {
   \       0xD4   0xF8D8 0x1100      LDR      R1,[R8, #+256]
   \       0xD8   0x9800             LDR      R0,[SP, #+0]
   \       0xDA   0x4201             TST      R1,R0
   \       0xDC   0xD009             BEQ.N    ??x509_csr_parse_extensions_8
    122                          return MBEDTLS_ERROR_ADD(MBEDTLS_ERR_X509_INVALID_EXTENSIONS,
    123                                                   MBEDTLS_ERR_ASN1_INVALID_DATA);
   \       0xDE   0x237B             MOVS     R3,#+123
   \       0xE0   0x.... 0x....      LDR.W    R2,??DataTable6_1
   \       0xE4   0xF07F 0x0167      MVNS     R1,#+103
   \       0xE8   0x.... 0x....      LDR.W    R0,??DataTable6_3
   \       0xEC   0x.... 0x....      BL       mbedtls_error_add
   \       0xF0   0xE042             B.N      ??x509_csr_parse_extensions_3
    124                      }
    125          
    126                      csr->ext_types |= ext_type;
   \                     ??x509_csr_parse_extensions_8: (+1)
   \       0xF2   0xF8D8 0x1100      LDR      R1,[R8, #+256]
   \       0xF6   0x9800             LDR      R0,[SP, #+0]
   \       0xF8   0x4301             ORRS     R1,R0,R1
   \       0xFA   0xF8C8 0x1100      STR      R1,[R8, #+256]
    127          
    128                      switch (ext_type) {
   \       0xFE   0x9800             LDR      R0,[SP, #+0]
   \      0x100   0x2804             CMP      R0,#+4
   \      0x102   0xD005             BEQ.N    ??x509_csr_parse_extensions_9
   \      0x104   0x2820             CMP      R0,#+32
   \      0x106   0xD00F             BEQ.N    ??x509_csr_parse_extensions_10
   \      0x108   0xF5B0 0x3F80      CMP      R0,#+65536
   \      0x10C   0xD018             BEQ.N    ??x509_csr_parse_extensions_11
   \      0x10E   0xE023             B.N      ??x509_csr_parse_extensions_12
    129                          case MBEDTLS_X509_EXT_KEY_USAGE:
    130                              /* Parse key usage */
    131                              if ((ret = mbedtls_x509_get_key_usage(p, end_ext_data,
    132                                                                    &csr->key_usage)) != 0) {
   \                     ??x509_csr_parse_extensions_9: (+1)
   \      0x110   0xF118 0x02E8      ADDS     R2,R8,#+232
   \      0x114   0x0039             MOVS     R1,R7
   \      0x116   0x0028             MOVS     R0,R5
   \      0x118   0x.... 0x....      BL       mbedtls_x509_get_key_usage
   \      0x11C   0x0004             MOVS     R4,R0
   \      0x11E   0x2800             CMP      R0,#+0
   \      0x120   0xD001             BEQ.N    ??x509_csr_parse_extensions_13
    133                                  return ret;
   \      0x122   0x0020             MOVS     R0,R4
   \      0x124   0xE028             B.N      ??x509_csr_parse_extensions_3
    134                              }
    135                              break;
   \                     ??x509_csr_parse_extensions_13: (+1)
   \      0x126   0xE017             B.N      ??x509_csr_parse_extensions_7
    136          
    137                          case MBEDTLS_X509_EXT_SUBJECT_ALT_NAME:
    138                              /* Parse subject alt name */
    139                              if ((ret = mbedtls_x509_get_subject_alt_name(p, end_ext_data,
    140                                                                           &csr->subject_alt_names)) != 0) {
   \                     ??x509_csr_parse_extensions_10: (+1)
   \      0x128   0xF118 0x02F0      ADDS     R2,R8,#+240
   \      0x12C   0x0039             MOVS     R1,R7
   \      0x12E   0x0028             MOVS     R0,R5
   \      0x130   0x.... 0x....      BL       mbedtls_x509_get_subject_alt_name
   \      0x134   0x0004             MOVS     R4,R0
   \      0x136   0x2800             CMP      R0,#+0
   \      0x138   0xD001             BEQ.N    ??x509_csr_parse_extensions_14
    141                                  return ret;
   \      0x13A   0x0020             MOVS     R0,R4
   \      0x13C   0xE01C             B.N      ??x509_csr_parse_extensions_3
    142                              }
    143                              break;
   \                     ??x509_csr_parse_extensions_14: (+1)
   \      0x13E   0xE00B             B.N      ??x509_csr_parse_extensions_7
    144          
    145                          case MBEDTLS_X509_EXT_NS_CERT_TYPE:
    146                              /* Parse netscape certificate type */
    147                              if ((ret = mbedtls_x509_get_ns_cert_type(p, end_ext_data,
    148                                                                       &csr->ns_cert_type)) != 0) {
   \                     ??x509_csr_parse_extensions_11: (+1)
   \      0x140   0xF118 0x02EC      ADDS     R2,R8,#+236
   \      0x144   0x0039             MOVS     R1,R7
   \      0x146   0x0028             MOVS     R0,R5
   \      0x148   0x.... 0x....      BL       mbedtls_x509_get_ns_cert_type
   \      0x14C   0x0004             MOVS     R4,R0
   \      0x14E   0x2800             CMP      R0,#+0
   \      0x150   0xD001             BEQ.N    ??x509_csr_parse_extensions_15
    149                                  return ret;
   \      0x152   0x0020             MOVS     R0,R4
   \      0x154   0xE010             B.N      ??x509_csr_parse_extensions_3
    150                              }
    151                              break;
   \                     ??x509_csr_parse_extensions_15: (+1)
   \      0x156   0xE7FF             B.N      ??x509_csr_parse_extensions_7
    152                          default:
    153                              break;
    154                      }
    155                  }
    156                  *p = end_ext_data;
   \                     ??x509_csr_parse_extensions_12: (+1)
   \                     ??x509_csr_parse_extensions_7: (+1)
   \      0x158   0x602F             STR      R7,[R5, #+0]
   \      0x15A   0xE757             B.N      ??x509_csr_parse_extensions_0
    157              }
    158          
    159              if (*p != end) {
   \                     ??x509_csr_parse_extensions_1: (+1)
   \      0x15C   0x6828             LDR      R0,[R5, #+0]
   \      0x15E   0x42B0             CMP      R0,R6
   \      0x160   0xD009             BEQ.N    ??x509_csr_parse_extensions_16
    160                  return MBEDTLS_ERROR_ADD(MBEDTLS_ERR_X509_INVALID_EXTENSIONS,
    161                                           MBEDTLS_ERR_ASN1_LENGTH_MISMATCH);
   \      0x162   0x23A1             MOVS     R3,#+161
   \      0x164   0x.... 0x....      LDR.W    R2,??DataTable6_1
   \      0x168   0xF07F 0x0165      MVNS     R1,#+101
   \      0x16C   0x.... 0x....      LDR.W    R0,??DataTable6_3
   \      0x170   0x.... 0x....      BL       mbedtls_error_add
   \      0x174   0xE000             B.N      ??x509_csr_parse_extensions_3
    162              }
    163          
    164              return 0;
   \                     ??x509_csr_parse_extensions_16: (+1)
   \      0x176   0x2000             MOVS     R0,#+0
   \                     ??x509_csr_parse_extensions_3: (+1)
   \      0x178   0xB005             ADD      SP,SP,#+20
   \      0x17A   0xE8BD 0x83F0      POP      {R4-R9,PC}
    165          }

   \                                 In section .rodata, align 4
   \        0x0   0x0000'0000        DC32 0, 0, 0x0
   \              0x0000'0000  
   \              0x0000'0000
    166          
    167          /*
    168           * Parse CSR attributes in DER format
    169           */

   \                                 In section .text, align 2, keep-with-next
    170          static int x509_csr_parse_attributes(mbedtls_x509_csr *csr,
    171                                               const unsigned char *start, const unsigned char *end)
    172          {
   \                     x509_csr_parse_attributes: (+1)
   \        0x0   0xE92D 0x47F3      PUSH     {R0,R1,R4-R10,LR}
   \        0x4   0xB084             SUB      SP,SP,#+16
   \        0x6   0x0004             MOVS     R4,R0
   \        0x8   0x0015             MOVS     R5,R2
    173              int ret;
    174              size_t len;
    175              unsigned char *end_attr_data;
    176              unsigned char **p = (unsigned char **) &start;
   \        0xA   0xAF05             ADD      R7,SP,#+20
    177          
    178              while (*p < end) {
   \                     ??x509_csr_parse_attributes_0: (+1)
   \        0xC   0x6838             LDR      R0,[R7, #+0]
   \        0xE   0x42A8             CMP      R0,R5
   \       0x10   0xF080 0x8087      BCS.W    ??x509_csr_parse_attributes_1
    179                  mbedtls_x509_buf attr_oid = { 0, 0, NULL };
   \       0x14   0xAB01             ADD      R3,SP,#+4
   \       0x16   0x2200             MOVS     R2,#+0
   \       0x18   0x2000             MOVS     R0,#+0
   \       0x1A   0x2100             MOVS     R1,#+0
   \       0x1C   0xE883 0x0007      STM      R3,{R0-R2}
    180          
    181                  if ((ret = mbedtls_asn1_get_tag(p, end, &len,
    182                                                  MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE)) != 0) {
   \       0x20   0x2330             MOVS     R3,#+48
   \       0x22   0x466A             MOV      R2,SP
   \       0x24   0x0029             MOVS     R1,R5
   \       0x26   0x0038             MOVS     R0,R7
   \       0x28   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \       0x2C   0x4680             MOV      R8,R0
   \       0x2E   0x2800             CMP      R0,#+0
   \       0x30   0xD008             BEQ.N    ??x509_csr_parse_attributes_2
    183                      return MBEDTLS_ERROR_ADD(MBEDTLS_ERR_X509_INVALID_EXTENSIONS, ret);
   \       0x32   0x23B7             MOVS     R3,#+183
   \       0x34   0x.... 0x....      LDR.W    R2,??DataTable6_1
   \       0x38   0x4641             MOV      R1,R8
   \       0x3A   0x.... 0x....      LDR.W    R0,??DataTable6_3
   \       0x3E   0x.... 0x....      BL       mbedtls_error_add
   \       0x42   0xE07C             B.N      ??x509_csr_parse_attributes_3
    184                  }
    185                  end_attr_data = *p + len;
   \                     ??x509_csr_parse_attributes_2: (+1)
   \       0x44   0x6839             LDR      R1,[R7, #+0]
   \       0x46   0x9800             LDR      R0,[SP, #+0]
   \       0x48   0x4408             ADD      R0,R1,R0
   \       0x4A   0x0006             MOVS     R6,R0
    186          
    187                  /* Get attribute ID */
    188                  if ((ret = mbedtls_asn1_get_tag(p, end_attr_data, &attr_oid.len,
    189                                                  MBEDTLS_ASN1_OID)) != 0) {
   \       0x4C   0x2306             MOVS     R3,#+6
   \       0x4E   0xAA02             ADD      R2,SP,#+8
   \       0x50   0x0031             MOVS     R1,R6
   \       0x52   0x0038             MOVS     R0,R7
   \       0x54   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \       0x58   0x4682             MOV      R10,R0
   \       0x5A   0x2800             CMP      R0,#+0
   \       0x5C   0xD008             BEQ.N    ??x509_csr_parse_attributes_4
    190                      return MBEDTLS_ERROR_ADD(MBEDTLS_ERR_X509_INVALID_EXTENSIONS, ret);
   \       0x5E   0x23BE             MOVS     R3,#+190
   \       0x60   0x.... 0x....      LDR.W    R2,??DataTable6_1
   \       0x64   0x4651             MOV      R1,R10
   \       0x66   0x.... 0x....      LDR.W    R0,??DataTable6_3
   \       0x6A   0x.... 0x....      BL       mbedtls_error_add
   \       0x6E   0xE066             B.N      ??x509_csr_parse_attributes_3
    191                  }
    192          
    193                  attr_oid.tag = MBEDTLS_ASN1_OID;
   \                     ??x509_csr_parse_attributes_4: (+1)
   \       0x70   0x2006             MOVS     R0,#+6
   \       0x72   0x9001             STR      R0,[SP, #+4]
    194                  attr_oid.p = *p;
   \       0x74   0x6838             LDR      R0,[R7, #+0]
   \       0x76   0x9003             STR      R0,[SP, #+12]
    195                  *p += attr_oid.len;
   \       0x78   0x6839             LDR      R1,[R7, #+0]
   \       0x7A   0x9802             LDR      R0,[SP, #+8]
   \       0x7C   0x4408             ADD      R0,R1,R0
   \       0x7E   0x6038             STR      R0,[R7, #+0]
    196          
    197                  /* Check that this is an extension-request attribute */
    198                  if (MBEDTLS_OID_CMP(MBEDTLS_OID_PKCS9_CSR_EXT_REQ, &attr_oid) == 0) {
   \       0x80   0x9802             LDR      R0,[SP, #+8]
   \       0x82   0x2809             CMP      R0,#+9
   \       0x84   0xD107             BNE.N    ??x509_csr_parse_attributes_5
   \       0x86   0x9A02             LDR      R2,[SP, #+8]
   \       0x88   0x9903             LDR      R1,[SP, #+12]
   \       0x8A   0x.... 0x....      LDR.W    R0,??DataTable6_4
   \       0x8E   0x.... 0x....      BL       memcmp
   \       0x92   0x2800             CMP      R0,#+0
   \       0x94   0xD001             BEQ.N    ??x509_csr_parse_attributes_6
   \                     ??x509_csr_parse_attributes_5: (+1)
   \       0x96   0x2001             MOVS     R0,#+1
   \       0x98   0xE000             B.N      ??x509_csr_parse_attributes_7
   \                     ??x509_csr_parse_attributes_6: (+1)
   \       0x9A   0x2000             MOVS     R0,#+0
   \                     ??x509_csr_parse_attributes_7: (+1)
   \       0x9C   0xB2C0             UXTB     R0,R0
   \       0x9E   0x2800             CMP      R0,#+0
   \       0xA0   0xD13D             BNE.N    ??x509_csr_parse_attributes_8
    199                      if ((ret = mbedtls_asn1_get_tag(p, end, &len,
    200                                                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SET)) != 0) {
   \       0xA2   0x2331             MOVS     R3,#+49
   \       0xA4   0x466A             MOV      R2,SP
   \       0xA6   0x0029             MOVS     R1,R5
   \       0xA8   0x0038             MOVS     R0,R7
   \       0xAA   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \       0xAE   0x4681             MOV      R9,R0
   \       0xB0   0x2800             CMP      R0,#+0
   \       0xB2   0xD008             BEQ.N    ??x509_csr_parse_attributes_9
    201                          return MBEDTLS_ERROR_ADD(MBEDTLS_ERR_X509_INVALID_EXTENSIONS, ret);
   \       0xB4   0x23C9             MOVS     R3,#+201
   \       0xB6   0x.... 0x....      LDR.W    R2,??DataTable6_1
   \       0xBA   0x4649             MOV      R1,R9
   \       0xBC   0x.... 0x....      LDR.W    R0,??DataTable6_3
   \       0xC0   0x.... 0x....      BL       mbedtls_error_add
   \       0xC4   0xE03B             B.N      ??x509_csr_parse_attributes_3
    202                      }
    203          
    204                      if ((ret = mbedtls_asn1_get_tag(p, end, &len,
    205                                                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE)) !=
    206                          0) {
   \                     ??x509_csr_parse_attributes_9: (+1)
   \       0xC6   0x2330             MOVS     R3,#+48
   \       0xC8   0x466A             MOV      R2,SP
   \       0xCA   0x0029             MOVS     R1,R5
   \       0xCC   0x0038             MOVS     R0,R7
   \       0xCE   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \       0xD2   0x4680             MOV      R8,R0
   \       0xD4   0x2800             CMP      R0,#+0
   \       0xD6   0xD008             BEQ.N    ??x509_csr_parse_attributes_10
    207                          return MBEDTLS_ERROR_ADD(MBEDTLS_ERR_X509_INVALID_EXTENSIONS, ret);
   \       0xD8   0x23CF             MOVS     R3,#+207
   \       0xDA   0x.... 0x....      LDR.W    R2,??DataTable6_1
   \       0xDE   0x4641             MOV      R1,R8
   \       0xE0   0x.... 0x....      LDR.W    R0,??DataTable6_3
   \       0xE4   0x.... 0x....      BL       mbedtls_error_add
   \       0xE8   0xE029             B.N      ??x509_csr_parse_attributes_3
    208                      }
    209          
    210                      if ((ret = x509_csr_parse_extensions(csr, p, *p + len)) != 0) {
   \                     ??x509_csr_parse_attributes_10: (+1)
   \       0xEA   0x6839             LDR      R1,[R7, #+0]
   \       0xEC   0x9800             LDR      R0,[SP, #+0]
   \       0xEE   0xEB01 0x0200      ADD      R2,R1,R0
   \       0xF2   0x0039             MOVS     R1,R7
   \       0xF4   0x0020             MOVS     R0,R4
   \       0xF6   0x.... 0x....      BL       x509_csr_parse_extensions
   \       0xFA   0x4682             MOV      R10,R0
   \       0xFC   0x2800             CMP      R0,#+0
   \       0xFE   0xD001             BEQ.N    ??x509_csr_parse_attributes_11
    211                          return ret;
   \      0x100   0x4650             MOV      R0,R10
   \      0x102   0xE01C             B.N      ??x509_csr_parse_attributes_3
    212                      }
    213          
    214                      if (*p != end_attr_data) {
   \                     ??x509_csr_parse_attributes_11: (+1)
   \      0x104   0x6838             LDR      R0,[R7, #+0]
   \      0x106   0x42B0             CMP      R0,R6
   \      0x108   0xD009             BEQ.N    ??x509_csr_parse_attributes_8
    215                          return MBEDTLS_ERROR_ADD(MBEDTLS_ERR_X509_INVALID_EXTENSIONS,
    216                                                   MBEDTLS_ERR_ASN1_LENGTH_MISMATCH);
   \      0x10A   0x23D8             MOVS     R3,#+216
   \      0x10C   0x.... 0x....      LDR.W    R2,??DataTable6_1
   \      0x110   0xF07F 0x0165      MVNS     R1,#+101
   \      0x114   0x.... 0x....      LDR.W    R0,??DataTable6_3
   \      0x118   0x.... 0x....      BL       mbedtls_error_add
   \      0x11C   0xE00F             B.N      ??x509_csr_parse_attributes_3
    217                      }
    218                  }
    219          
    220                  *p = end_attr_data;
   \                     ??x509_csr_parse_attributes_8: (+1)
   \      0x11E   0x603E             STR      R6,[R7, #+0]
   \      0x120   0xE774             B.N      ??x509_csr_parse_attributes_0
    221              }
    222          
    223              if (*p != end) {
   \                     ??x509_csr_parse_attributes_1: (+1)
   \      0x122   0x6838             LDR      R0,[R7, #+0]
   \      0x124   0x42A8             CMP      R0,R5
   \      0x126   0xD009             BEQ.N    ??x509_csr_parse_attributes_12
    224                  return MBEDTLS_ERROR_ADD(MBEDTLS_ERR_X509_INVALID_EXTENSIONS,
    225                                           MBEDTLS_ERR_ASN1_LENGTH_MISMATCH);
   \      0x128   0x23E1             MOVS     R3,#+225
   \      0x12A   0x.... 0x....      LDR.W    R2,??DataTable6_1
   \      0x12E   0xF07F 0x0165      MVNS     R1,#+101
   \      0x132   0x.... 0x....      LDR.W    R0,??DataTable6_3
   \      0x136   0x.... 0x....      BL       mbedtls_error_add
   \      0x13A   0xE000             B.N      ??x509_csr_parse_attributes_3
    226              }
    227          
    228              return 0;
   \                     ??x509_csr_parse_attributes_12: (+1)
   \      0x13C   0x2000             MOVS     R0,#+0
   \                     ??x509_csr_parse_attributes_3: (+1)
   \      0x13E   0xB006             ADD      SP,SP,#+24
   \      0x140   0xE8BD 0x87F0      POP      {R4-R10,PC}
    229          }

   \                                 In section .rodata, align 4
   \        0x0   0x0000'0000        DC32 0, 0, 0x0
   \              0x0000'0000  
   \              0x0000'0000
    230          
    231          /*
    232           * Parse a CSR in DER format
    233           */

   \                                 In section .text, align 2, keep-with-next
    234          int mbedtls_x509_csr_parse_der(mbedtls_x509_csr *csr,
    235                                         const unsigned char *buf, size_t buflen)
    236          {
   \                     mbedtls_x509_csr_parse_der: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0xB086             SUB      SP,SP,#+24
   \        0x6   0x0004             MOVS     R4,R0
   \        0x8   0x000D             MOVS     R5,R1
   \        0xA   0x0016             MOVS     R6,R2
    237              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
   \        0xC   0xF07F 0x0B6D      MVNS     R11,#+109
    238              size_t len;
    239              unsigned char *p, *end;
    240              mbedtls_x509_buf sig_params;
    241          
    242              memset(&sig_params, 0, sizeof(mbedtls_x509_buf));
   \       0x10   0xF05F 0x090C      MOVS     R9,#+12
   \       0x14   0x2700             MOVS     R7,#+0
   \       0x16   0xF10D 0x080C      ADD      R8,SP,#+12
   \       0x1A   0x003A             MOVS     R2,R7
   \       0x1C   0x4649             MOV      R1,R9
   \       0x1E   0x4640             MOV      R0,R8
   \       0x20   0x.... 0x....      BL       __aeabi_memset
    243          
    244              /*
    245               * Check for valid input
    246               */
    247              if (csr == NULL || buf == NULL || buflen == 0) {
   \       0x24   0x2C00             CMP      R4,#+0
   \       0x26   0xD003             BEQ.N    ??mbedtls_x509_csr_parse_der_0
   \       0x28   0x2D00             CMP      R5,#+0
   \       0x2A   0xD001             BEQ.N    ??mbedtls_x509_csr_parse_der_0
   \       0x2C   0x2E00             CMP      R6,#+0
   \       0x2E   0xD102             BNE.N    ??mbedtls_x509_csr_parse_der_1
    248                  return MBEDTLS_ERR_X509_BAD_INPUT_DATA;
   \                     ??mbedtls_x509_csr_parse_der_0: (+1)
   \       0x30   0x.... 0x....      LDR.W    R0,??DataTable6_5
   \       0x34   0xE128             B.N      ??mbedtls_x509_csr_parse_der_2
    249              }
    250          
    251              mbedtls_x509_csr_init(csr);
   \                     ??mbedtls_x509_csr_parse_der_1: (+1)
   \       0x36   0x0020             MOVS     R0,R4
   \       0x38   0x.... 0x....      BL       mbedtls_x509_csr_init
    252          
    253              /*
    254               * first copy the raw DER data
    255               */
    256              p = mbedtls_calloc(1, len = buflen);
   \       0x3C   0x9602             STR      R6,[SP, #+8]
   \       0x3E   0x9902             LDR      R1,[SP, #+8]
   \       0x40   0x2001             MOVS     R0,#+1
   \       0x42   0x.... 0x....      BL       sl_calloc
   \       0x46   0x9001             STR      R0,[SP, #+4]
    257          
    258              if (p == NULL) {
   \       0x48   0x9801             LDR      R0,[SP, #+4]
   \       0x4A   0x2800             CMP      R0,#+0
   \       0x4C   0xD102             BNE.N    ??mbedtls_x509_csr_parse_der_3
    259                  return MBEDTLS_ERR_X509_ALLOC_FAILED;
   \       0x4E   0x.... 0x....      LDR.W    R0,??DataTable6_6
   \       0x52   0xE119             B.N      ??mbedtls_x509_csr_parse_der_2
    260              }
    261          
    262              memcpy(p, buf, buflen);
   \                     ??mbedtls_x509_csr_parse_der_3: (+1)
   \       0x54   0x0037             MOVS     R7,R6
   \       0x56   0x46A8             MOV      R8,R5
   \       0x58   0xF8DD 0x9004      LDR      R9,[SP, #+4]
   \       0x5C   0x003A             MOVS     R2,R7
   \       0x5E   0x4641             MOV      R1,R8
   \       0x60   0x4648             MOV      R0,R9
   \       0x62   0x.... 0x....      BL       __aeabi_memcpy
    263          
    264              csr->raw.p = p;
   \       0x66   0x9801             LDR      R0,[SP, #+4]
   \       0x68   0x60A0             STR      R0,[R4, #+8]
    265              csr->raw.len = len;
   \       0x6A   0x9802             LDR      R0,[SP, #+8]
   \       0x6C   0x6060             STR      R0,[R4, #+4]
    266              end = p + len;
   \       0x6E   0x9901             LDR      R1,[SP, #+4]
   \       0x70   0x9802             LDR      R0,[SP, #+8]
   \       0x72   0xEB01 0x0900      ADD      R9,R1,R0
    267          
    268              /*
    269               *  CertificationRequest ::= SEQUENCE {
    270               *       certificationRequestInfo CertificationRequestInfo,
    271               *       signatureAlgorithm AlgorithmIdentifier,
    272               *       signature          BIT STRING
    273               *  }
    274               */
    275              if ((ret = mbedtls_asn1_get_tag(&p, end, &len,
    276                                              MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE)) != 0) {
   \       0x76   0x2330             MOVS     R3,#+48
   \       0x78   0xAA02             ADD      R2,SP,#+8
   \       0x7A   0x4649             MOV      R1,R9
   \       0x7C   0xA801             ADD      R0,SP,#+4
   \       0x7E   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \       0x82   0x4682             MOV      R10,R0
   \       0x84   0x2800             CMP      R0,#+0
   \       0x86   0xD005             BEQ.N    ??mbedtls_x509_csr_parse_der_4
    277                  mbedtls_x509_csr_free(csr);
   \       0x88   0x0020             MOVS     R0,R4
   \       0x8A   0x.... 0x....      BL       mbedtls_x509_csr_free
    278                  return MBEDTLS_ERR_X509_INVALID_FORMAT;
   \       0x8E   0x.... 0x....      LDR.W    R0,??DataTable6_7
   \       0x92   0xE0F9             B.N      ??mbedtls_x509_csr_parse_der_2
    279              }
    280          
    281              if (len != (size_t) (end - p)) {
   \                     ??mbedtls_x509_csr_parse_der_4: (+1)
   \       0x94   0x9902             LDR      R1,[SP, #+8]
   \       0x96   0x9801             LDR      R0,[SP, #+4]
   \       0x98   0xEBB9 0x0000      SUBS     R0,R9,R0
   \       0x9C   0x4281             CMP      R1,R0
   \       0x9E   0xD00D             BEQ.N    ??mbedtls_x509_csr_parse_der_5
    282                  mbedtls_x509_csr_free(csr);
   \       0xA0   0x0020             MOVS     R0,R4
   \       0xA2   0x.... 0x....      BL       mbedtls_x509_csr_free
    283                  return MBEDTLS_ERROR_ADD(MBEDTLS_ERR_X509_INVALID_FORMAT,
    284                                           MBEDTLS_ERR_ASN1_LENGTH_MISMATCH);
   \       0xA6   0xF44F 0x738E      MOV      R3,#+284
   \       0xAA   0x.... 0x....      LDR.W    R2,??DataTable6_1
   \       0xAE   0xF07F 0x0165      MVNS     R1,#+101
   \       0xB2   0x.... 0x....      LDR.W    R0,??DataTable6_7
   \       0xB6   0x.... 0x....      BL       mbedtls_error_add
   \       0xBA   0xE0E5             B.N      ??mbedtls_x509_csr_parse_der_2
    285              }
    286          
    287              /*
    288               *  CertificationRequestInfo ::= SEQUENCE {
    289               */
    290              csr->cri.p = p;
   \                     ??mbedtls_x509_csr_parse_der_5: (+1)
   \       0xBC   0x9801             LDR      R0,[SP, #+4]
   \       0xBE   0x6160             STR      R0,[R4, #+20]
    291          
    292              if ((ret = mbedtls_asn1_get_tag(&p, end, &len,
    293                                              MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE)) != 0) {
   \       0xC0   0x2330             MOVS     R3,#+48
   \       0xC2   0xAA02             ADD      R2,SP,#+8
   \       0xC4   0x4649             MOV      R1,R9
   \       0xC6   0xA801             ADD      R0,SP,#+4
   \       0xC8   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \       0xCC   0x0007             MOVS     R7,R0
   \       0xCE   0x2800             CMP      R0,#+0
   \       0xD0   0xD00C             BEQ.N    ??mbedtls_x509_csr_parse_der_6
    294                  mbedtls_x509_csr_free(csr);
   \       0xD2   0x0020             MOVS     R0,R4
   \       0xD4   0x.... 0x....      BL       mbedtls_x509_csr_free
    295                  return MBEDTLS_ERROR_ADD(MBEDTLS_ERR_X509_INVALID_FORMAT, ret);
   \       0xD8   0xF240 0x1327      MOVW     R3,#+295
   \       0xDC   0x.... 0x....      LDR.W    R2,??DataTable6_1
   \       0xE0   0x0039             MOVS     R1,R7
   \       0xE2   0x.... 0x....      LDR.W    R0,??DataTable6_7
   \       0xE6   0x.... 0x....      BL       mbedtls_error_add
   \       0xEA   0xE0CD             B.N      ??mbedtls_x509_csr_parse_der_2
    296              }
    297          
    298              end = p + len;
   \                     ??mbedtls_x509_csr_parse_der_6: (+1)
   \       0xEC   0x9901             LDR      R1,[SP, #+4]
   \       0xEE   0x9802             LDR      R0,[SP, #+8]
   \       0xF0   0xEB01 0x0A00      ADD      R10,R1,R0
    299              csr->cri.len = end - csr->cri.p;
   \       0xF4   0x6960             LDR      R0,[R4, #+20]
   \       0xF6   0xEBBA 0x0000      SUBS     R0,R10,R0
   \       0xFA   0x6120             STR      R0,[R4, #+16]
    300          
    301              /*
    302               *  Version  ::=  INTEGER {  v1(0) }
    303               */
    304              if ((ret = x509_csr_get_version(&p, end, &csr->version)) != 0) {
   \       0xFC   0xF114 0x0218      ADDS     R2,R4,#+24
   \      0x100   0x4651             MOV      R1,R10
   \      0x102   0xA801             ADD      R0,SP,#+4
   \      0x104   0x.... 0x....      BL       x509_csr_get_version
   \      0x108   0x4680             MOV      R8,R0
   \      0x10A   0x2800             CMP      R0,#+0
   \      0x10C   0xD004             BEQ.N    ??mbedtls_x509_csr_parse_der_7
    305                  mbedtls_x509_csr_free(csr);
   \      0x10E   0x0020             MOVS     R0,R4
   \      0x110   0x.... 0x....      BL       mbedtls_x509_csr_free
    306                  return ret;
   \      0x114   0x4640             MOV      R0,R8
   \      0x116   0xE0B7             B.N      ??mbedtls_x509_csr_parse_der_2
    307              }
    308          
    309              if (csr->version != 0) {
   \                     ??mbedtls_x509_csr_parse_der_7: (+1)
   \      0x118   0x69A0             LDR      R0,[R4, #+24]
   \      0x11A   0x2800             CMP      R0,#+0
   \      0x11C   0xD005             BEQ.N    ??mbedtls_x509_csr_parse_der_8
    310                  mbedtls_x509_csr_free(csr);
   \      0x11E   0x0020             MOVS     R0,R4
   \      0x120   0x.... 0x....      BL       mbedtls_x509_csr_free
    311                  return MBEDTLS_ERR_X509_UNKNOWN_VERSION;
   \      0x124   0x.... 0x....      LDR.W    R0,??DataTable6_8
   \      0x128   0xE0AE             B.N      ??mbedtls_x509_csr_parse_der_2
    312              }
    313          
    314              csr->version++;
   \                     ??mbedtls_x509_csr_parse_der_8: (+1)
   \      0x12A   0x69A0             LDR      R0,[R4, #+24]
   \      0x12C   0x1C40             ADDS     R0,R0,#+1
   \      0x12E   0x61A0             STR      R0,[R4, #+24]
    315          
    316              /*
    317               *  subject               Name
    318               */
    319              csr->subject_raw.p = p;
   \      0x130   0x9801             LDR      R0,[SP, #+4]
   \      0x132   0x6260             STR      R0,[R4, #+36]
    320          
    321              if ((ret = mbedtls_asn1_get_tag(&p, end, &len,
    322                                              MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE)) != 0) {
   \      0x134   0x2330             MOVS     R3,#+48
   \      0x136   0xAA02             ADD      R2,SP,#+8
   \      0x138   0x4651             MOV      R1,R10
   \      0x13A   0xA801             ADD      R0,SP,#+4
   \      0x13C   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \      0x140   0x0007             MOVS     R7,R0
   \      0x142   0x2800             CMP      R0,#+0
   \      0x144   0xD00C             BEQ.N    ??mbedtls_x509_csr_parse_der_9
    323                  mbedtls_x509_csr_free(csr);
   \      0x146   0x0020             MOVS     R0,R4
   \      0x148   0x.... 0x....      BL       mbedtls_x509_csr_free
    324                  return MBEDTLS_ERROR_ADD(MBEDTLS_ERR_X509_INVALID_FORMAT, ret);
   \      0x14C   0xF44F 0x73A2      MOV      R3,#+324
   \      0x150   0x.... 0x....      LDR.W    R2,??DataTable6_1
   \      0x154   0x0039             MOVS     R1,R7
   \      0x156   0x.... 0x....      LDR.W    R0,??DataTable6_7
   \      0x15A   0x.... 0x....      BL       mbedtls_error_add
   \      0x15E   0xE093             B.N      ??mbedtls_x509_csr_parse_der_2
    325              }
    326          
    327              if ((ret = mbedtls_x509_get_name(&p, p + len, &csr->subject)) != 0) {
   \                     ??mbedtls_x509_csr_parse_der_9: (+1)
   \      0x160   0xF114 0x0228      ADDS     R2,R4,#+40
   \      0x164   0x9901             LDR      R1,[SP, #+4]
   \      0x166   0x9802             LDR      R0,[SP, #+8]
   \      0x168   0x4401             ADD      R1,R1,R0
   \      0x16A   0xA801             ADD      R0,SP,#+4
   \      0x16C   0x.... 0x....      BL       mbedtls_x509_get_name
   \      0x170   0x4680             MOV      R8,R0
   \      0x172   0x2800             CMP      R0,#+0
   \      0x174   0xD004             BEQ.N    ??mbedtls_x509_csr_parse_der_10
    328                  mbedtls_x509_csr_free(csr);
   \      0x176   0x0020             MOVS     R0,R4
   \      0x178   0x.... 0x....      BL       mbedtls_x509_csr_free
    329                  return ret;
   \      0x17C   0x4640             MOV      R0,R8
   \      0x17E   0xE083             B.N      ??mbedtls_x509_csr_parse_der_2
    330              }
    331          
    332              csr->subject_raw.len = p - csr->subject_raw.p;
   \                     ??mbedtls_x509_csr_parse_der_10: (+1)
   \      0x180   0x9901             LDR      R1,[SP, #+4]
   \      0x182   0x6A60             LDR      R0,[R4, #+36]
   \      0x184   0x1A09             SUBS     R1,R1,R0
   \      0x186   0x6221             STR      R1,[R4, #+32]
    333          
    334              /*
    335               *  subjectPKInfo SubjectPublicKeyInfo
    336               */
    337              if ((ret = mbedtls_pk_parse_subpubkey(&p, end, &csr->pk)) != 0) {
   \      0x188   0xF114 0x0248      ADDS     R2,R4,#+72
   \      0x18C   0x4651             MOV      R1,R10
   \      0x18E   0xA801             ADD      R0,SP,#+4
   \      0x190   0x.... 0x....      BL       mbedtls_pk_parse_subpubkey
   \      0x194   0x0007             MOVS     R7,R0
   \      0x196   0x2800             CMP      R0,#+0
   \      0x198   0xD004             BEQ.N    ??mbedtls_x509_csr_parse_der_11
    338                  mbedtls_x509_csr_free(csr);
   \      0x19A   0x0020             MOVS     R0,R4
   \      0x19C   0x.... 0x....      BL       mbedtls_x509_csr_free
    339                  return ret;
   \      0x1A0   0x0038             MOVS     R0,R7
   \      0x1A2   0xE071             B.N      ??mbedtls_x509_csr_parse_der_2
    340              }
    341          
    342              /*
    343               *  attributes    [0] Attributes
    344               *
    345               *  The list of possible attributes is open-ended, though RFC 2985
    346               *  (PKCS#9) defines a few in section 5.4. We currently don't support any,
    347               *  so we just ignore them. This is a safe thing to do as the worst thing
    348               *  that could happen is that we issue a certificate that does not match
    349               *  the requester's expectations - this cannot cause a violation of our
    350               *  signature policies.
    351               */
    352              if ((ret = mbedtls_asn1_get_tag(&p, end, &len,
    353                                              MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_CONTEXT_SPECIFIC)) !=
    354                  0) {
   \                     ??mbedtls_x509_csr_parse_der_11: (+1)
   \      0x1A4   0x23A0             MOVS     R3,#+160
   \      0x1A6   0xAA02             ADD      R2,SP,#+8
   \      0x1A8   0x4651             MOV      R1,R10
   \      0x1AA   0xA801             ADD      R0,SP,#+4
   \      0x1AC   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \      0x1B0   0x4680             MOV      R8,R0
   \      0x1B2   0x2800             CMP      R0,#+0
   \      0x1B4   0xD00C             BEQ.N    ??mbedtls_x509_csr_parse_der_12
    355                  mbedtls_x509_csr_free(csr);
   \      0x1B6   0x0020             MOVS     R0,R4
   \      0x1B8   0x.... 0x....      BL       mbedtls_x509_csr_free
    356                  return MBEDTLS_ERROR_ADD(MBEDTLS_ERR_X509_INVALID_FORMAT, ret);
   \      0x1BC   0xF44F 0x73B2      MOV      R3,#+356
   \      0x1C0   0x.... 0x....      LDR.W    R2,??DataTable6_1
   \      0x1C4   0x4641             MOV      R1,R8
   \      0x1C6   0x.... 0x....      LDR.W    R0,??DataTable6_7
   \      0x1CA   0x.... 0x....      BL       mbedtls_error_add
   \      0x1CE   0xE05B             B.N      ??mbedtls_x509_csr_parse_der_2
    357              }
    358          
    359              if ((ret = x509_csr_parse_attributes(csr, p, p + len)) != 0) {
   \                     ??mbedtls_x509_csr_parse_der_12: (+1)
   \      0x1D0   0x9901             LDR      R1,[SP, #+4]
   \      0x1D2   0x9802             LDR      R0,[SP, #+8]
   \      0x1D4   0xEB01 0x0200      ADD      R2,R1,R0
   \      0x1D8   0x9901             LDR      R1,[SP, #+4]
   \      0x1DA   0x0020             MOVS     R0,R4
   \      0x1DC   0x.... 0x....      BL       x509_csr_parse_attributes
   \      0x1E0   0x0007             MOVS     R7,R0
   \      0x1E2   0x2800             CMP      R0,#+0
   \      0x1E4   0xD004             BEQ.N    ??mbedtls_x509_csr_parse_der_13
    360                  mbedtls_x509_csr_free(csr);
   \      0x1E6   0x0020             MOVS     R0,R4
   \      0x1E8   0x.... 0x....      BL       mbedtls_x509_csr_free
    361                  return ret;
   \      0x1EC   0x0038             MOVS     R0,R7
   \      0x1EE   0xE04B             B.N      ??mbedtls_x509_csr_parse_der_2
    362              }
    363          
    364              p += len;
   \                     ??mbedtls_x509_csr_parse_der_13: (+1)
   \      0x1F0   0x9801             LDR      R0,[SP, #+4]
   \      0x1F2   0x9902             LDR      R1,[SP, #+8]
   \      0x1F4   0x4408             ADD      R0,R0,R1
   \      0x1F6   0x9001             STR      R0,[SP, #+4]
    365          
    366              end = csr->raw.p + csr->raw.len;
   \      0x1F8   0x68A1             LDR      R1,[R4, #+8]
   \      0x1FA   0x6860             LDR      R0,[R4, #+4]
   \      0x1FC   0xEB01 0x0900      ADD      R9,R1,R0
    367          
    368              /*
    369               *  signatureAlgorithm   AlgorithmIdentifier,
    370               *  signature            BIT STRING
    371               */
    372              if ((ret = mbedtls_x509_get_alg(&p, end, &csr->sig_oid, &sig_params)) != 0) {
   \      0x200   0xAB03             ADD      R3,SP,#+12
   \      0x202   0xF514 0x7282      ADDS     R2,R4,#+260
   \      0x206   0x4649             MOV      R1,R9
   \      0x208   0xA801             ADD      R0,SP,#+4
   \      0x20A   0x.... 0x....      BL       mbedtls_x509_get_alg
   \      0x20E   0x4680             MOV      R8,R0
   \      0x210   0x2800             CMP      R0,#+0
   \      0x212   0xD004             BEQ.N    ??mbedtls_x509_csr_parse_der_14
    373                  mbedtls_x509_csr_free(csr);
   \      0x214   0x0020             MOVS     R0,R4
   \      0x216   0x.... 0x....      BL       mbedtls_x509_csr_free
    374                  return ret;
   \      0x21A   0x4640             MOV      R0,R8
   \      0x21C   0xE034             B.N      ??mbedtls_x509_csr_parse_der_2
    375              }
    376          
    377              if ((ret = mbedtls_x509_get_sig_alg(&csr->sig_oid, &sig_params,
    378                                                  &csr->sig_md, &csr->sig_pk,
    379                                                  &csr->sig_opts)) != 0) {
   \                     ??mbedtls_x509_csr_parse_der_14: (+1)
   \      0x21E   0xF514 0x7090      ADDS     R0,R4,#+288
   \      0x222   0x9000             STR      R0,[SP, #+0]
   \      0x224   0xF204 0x131D      ADDW     R3,R4,#+285
   \      0x228   0xF514 0x728E      ADDS     R2,R4,#+284
   \      0x22C   0xA903             ADD      R1,SP,#+12
   \      0x22E   0xF514 0x7082      ADDS     R0,R4,#+260
   \      0x232   0x.... 0x....      BL       mbedtls_x509_get_sig_alg
   \      0x236   0x0007             MOVS     R7,R0
   \      0x238   0x2800             CMP      R0,#+0
   \      0x23A   0xD005             BEQ.N    ??mbedtls_x509_csr_parse_der_15
    380                  mbedtls_x509_csr_free(csr);
   \      0x23C   0x0020             MOVS     R0,R4
   \      0x23E   0x.... 0x....      BL       mbedtls_x509_csr_free
    381                  return MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG;
   \      0x242   0x.... 0x....      LDR.W    R0,??DataTable6_9
   \      0x246   0xE01F             B.N      ??mbedtls_x509_csr_parse_der_2
    382              }
    383          
    384              if ((ret = mbedtls_x509_get_sig(&p, end, &csr->sig)) != 0) {
   \                     ??mbedtls_x509_csr_parse_der_15: (+1)
   \      0x248   0xF514 0x7288      ADDS     R2,R4,#+272
   \      0x24C   0x4649             MOV      R1,R9
   \      0x24E   0xA801             ADD      R0,SP,#+4
   \      0x250   0x.... 0x....      BL       mbedtls_x509_get_sig
   \      0x254   0x4680             MOV      R8,R0
   \      0x256   0x2800             CMP      R0,#+0
   \      0x258   0xD004             BEQ.N    ??mbedtls_x509_csr_parse_der_16
    385                  mbedtls_x509_csr_free(csr);
   \      0x25A   0x0020             MOVS     R0,R4
   \      0x25C   0x.... 0x....      BL       mbedtls_x509_csr_free
    386                  return ret;
   \      0x260   0x4640             MOV      R0,R8
   \      0x262   0xE011             B.N      ??mbedtls_x509_csr_parse_der_2
    387              }
    388          
    389              if (p != end) {
   \                     ??mbedtls_x509_csr_parse_der_16: (+1)
   \      0x264   0x9801             LDR      R0,[SP, #+4]
   \      0x266   0x4548             CMP      R0,R9
   \      0x268   0xD00D             BEQ.N    ??mbedtls_x509_csr_parse_der_17
    390                  mbedtls_x509_csr_free(csr);
   \      0x26A   0x0020             MOVS     R0,R4
   \      0x26C   0x.... 0x....      BL       mbedtls_x509_csr_free
    391                  return MBEDTLS_ERROR_ADD(MBEDTLS_ERR_X509_INVALID_FORMAT,
    392                                           MBEDTLS_ERR_ASN1_LENGTH_MISMATCH);
   \      0x270   0xF44F 0x73C4      MOV      R3,#+392
   \      0x274   0x.... 0x....      LDR.W    R2,??DataTable6_1
   \      0x278   0xF07F 0x0165      MVNS     R1,#+101
   \      0x27C   0x.... 0x....      LDR.W    R0,??DataTable6_7
   \      0x280   0x.... 0x....      BL       mbedtls_error_add
   \      0x284   0xE000             B.N      ??mbedtls_x509_csr_parse_der_2
    393              }
    394          
    395              return 0;
   \                     ??mbedtls_x509_csr_parse_der_17: (+1)
   \      0x286   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_x509_csr_parse_der_2: (+1)
   \      0x288   0xB007             ADD      SP,SP,#+28
   \      0x28A   0xE8BD 0x8FF0      POP      {R4-R11,PC}
    396          }
    397          
    398          /*
    399           * Parse a CSR, allowing for PEM or raw DER encoding
    400           */

   \                                 In section .text, align 2, keep-with-next
    401          int mbedtls_x509_csr_parse(mbedtls_x509_csr *csr, const unsigned char *buf, size_t buflen)
    402          {
   \                     mbedtls_x509_csr_parse: (+1)
   \        0x0   0xE92D 0x41F8      PUSH     {R3-R8,LR}
   \        0x4   0xB087             SUB      SP,SP,#+28
   \        0x6   0x0004             MOVS     R4,R0
   \        0x8   0x000D             MOVS     R5,R1
   \        0xA   0x0016             MOVS     R6,R2
    403          #if defined(MBEDTLS_PEM_PARSE_C)
    404              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
   \        0xC   0xF07F 0x076D      MVNS     R7,#+109
    405              size_t use_len;
    406              mbedtls_pem_context pem;
    407          #endif
    408          
    409              /*
    410               * Check for valid input
    411               */
    412              if (csr == NULL || buf == NULL || buflen == 0) {
   \       0x10   0x2C00             CMP      R4,#+0
   \       0x12   0xD003             BEQ.N    ??mbedtls_x509_csr_parse_0
   \       0x14   0x2D00             CMP      R5,#+0
   \       0x16   0xD001             BEQ.N    ??mbedtls_x509_csr_parse_0
   \       0x18   0x2E00             CMP      R6,#+0
   \       0x1A   0xD101             BNE.N    ??mbedtls_x509_csr_parse_1
    413                  return MBEDTLS_ERR_X509_BAD_INPUT_DATA;
   \                     ??mbedtls_x509_csr_parse_0: (+1)
   \       0x1C   0x....             LDR.N    R0,??DataTable6_5
   \       0x1E   0xE03A             B.N      ??mbedtls_x509_csr_parse_2
    414              }
    415          
    416          #if defined(MBEDTLS_PEM_PARSE_C)
    417              /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    418              if (buf[buflen - 1] == '\0') {
   \                     ??mbedtls_x509_csr_parse_1: (+1)
   \       0x20   0xEB05 0x0006      ADD      R0,R5,R6
   \       0x24   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD12F             BNE.N    ??mbedtls_x509_csr_parse_3
    419                  mbedtls_pem_init(&pem);
   \       0x2C   0xA804             ADD      R0,SP,#+16
   \       0x2E   0x.... 0x....      BL       mbedtls_pem_init
    420                  ret = mbedtls_pem_read_buffer(&pem,
    421                                                "-----BEGIN CERTIFICATE REQUEST-----",
    422                                                "-----END CERTIFICATE REQUEST-----",
    423                                                buf, NULL, 0, &use_len);
   \       0x32   0xA803             ADD      R0,SP,#+12
   \       0x34   0x9002             STR      R0,[SP, #+8]
   \       0x36   0x2000             MOVS     R0,#+0
   \       0x38   0x9001             STR      R0,[SP, #+4]
   \       0x3A   0x2000             MOVS     R0,#+0
   \       0x3C   0x9000             STR      R0,[SP, #+0]
   \       0x3E   0x002B             MOVS     R3,R5
   \       0x40   0x....             LDR.N    R2,??DataTable6_10
   \       0x42   0x....             LDR.N    R1,??DataTable6_11
   \       0x44   0xA804             ADD      R0,SP,#+16
   \       0x46   0x.... 0x....      BL       mbedtls_pem_read_buffer
   \       0x4A   0x0007             MOVS     R7,R0
    424                  if (ret == MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT) {
   \       0x4C   0x.... 0x....      LDR.W    R8,??DataTable6_12
   \       0x50   0x4547             CMP      R7,R8
   \       0x52   0xD10C             BNE.N    ??mbedtls_x509_csr_parse_4
    425                      ret = mbedtls_pem_read_buffer(&pem,
    426                                                    "-----BEGIN NEW CERTIFICATE REQUEST-----",
    427                                                    "-----END NEW CERTIFICATE REQUEST-----",
    428                                                    buf, NULL, 0, &use_len);
   \       0x54   0xA803             ADD      R0,SP,#+12
   \       0x56   0x9002             STR      R0,[SP, #+8]
   \       0x58   0x2000             MOVS     R0,#+0
   \       0x5A   0x9001             STR      R0,[SP, #+4]
   \       0x5C   0x2000             MOVS     R0,#+0
   \       0x5E   0x9000             STR      R0,[SP, #+0]
   \       0x60   0x002B             MOVS     R3,R5
   \       0x62   0x....             LDR.N    R2,??DataTable6_13
   \       0x64   0x....             LDR.N    R1,??DataTable6_14
   \       0x66   0xA804             ADD      R0,SP,#+16
   \       0x68   0x.... 0x....      BL       mbedtls_pem_read_buffer
   \       0x6C   0x0007             MOVS     R7,R0
    429                  }
    430          
    431                  if (ret == 0) {
   \                     ??mbedtls_x509_csr_parse_4: (+1)
   \       0x6E   0x2F00             CMP      R7,#+0
   \       0x70   0xD105             BNE.N    ??mbedtls_x509_csr_parse_5
    432                      /*
    433                       * Was PEM encoded, parse the result
    434                       */
    435                      ret = mbedtls_x509_csr_parse_der(csr, pem.buf, pem.buflen);
   \       0x72   0x9A05             LDR      R2,[SP, #+20]
   \       0x74   0x9904             LDR      R1,[SP, #+16]
   \       0x76   0x0020             MOVS     R0,R4
   \       0x78   0x.... 0x....      BL       mbedtls_x509_csr_parse_der
   \       0x7C   0x0007             MOVS     R7,R0
    436                  }
    437          
    438                  mbedtls_pem_free(&pem);
   \                     ??mbedtls_x509_csr_parse_5: (+1)
   \       0x7E   0xA804             ADD      R0,SP,#+16
   \       0x80   0x.... 0x....      BL       mbedtls_pem_free
    439                  if (ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT) {
   \       0x84   0x4547             CMP      R7,R8
   \       0x86   0xD001             BEQ.N    ??mbedtls_x509_csr_parse_3
    440                      return ret;
   \       0x88   0x0038             MOVS     R0,R7
   \       0x8A   0xE004             B.N      ??mbedtls_x509_csr_parse_2
    441                  }
    442              }
    443          #endif /* MBEDTLS_PEM_PARSE_C */
    444              return mbedtls_x509_csr_parse_der(csr, buf, buflen);
   \                     ??mbedtls_x509_csr_parse_3: (+1)
   \       0x8C   0x0032             MOVS     R2,R6
   \       0x8E   0x0029             MOVS     R1,R5
   \       0x90   0x0020             MOVS     R0,R4
   \       0x92   0x.... 0x....      BL       mbedtls_x509_csr_parse_der
   \                     ??mbedtls_x509_csr_parse_2: (+1)
   \       0x96   0xB008             ADD      SP,SP,#+32
   \       0x98   0xE8BD 0x81F0      POP      {R4-R8,PC}
    445          }
    446          
    447          #if defined(MBEDTLS_FS_IO)
    448          /*
    449           * Load a CSR into the structure
    450           */
    451          int mbedtls_x509_csr_parse_file(mbedtls_x509_csr *csr, const char *path)
    452          {
    453              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    454              size_t n;
    455              unsigned char *buf;
    456          
    457              if ((ret = mbedtls_pk_load_file(path, &buf, &n)) != 0) {
    458                  return ret;
    459              }
    460          
    461              ret = mbedtls_x509_csr_parse(csr, buf, n);
    462          
    463              mbedtls_zeroize_and_free(buf, n);
    464          
    465              return ret;
    466          }
    467          #endif /* MBEDTLS_FS_IO */
    468          
    469          #if !defined(MBEDTLS_X509_REMOVE_INFO)
    470          #define BEFORE_COLON    14
    471          #define BC              "14"
    472          /*
    473           * Return an informational string about the CSR.
    474           */

   \                                 In section .text, align 2, keep-with-next
    475          int mbedtls_x509_csr_info(char *buf, size_t size, const char *prefix,
    476                                    const mbedtls_x509_csr *csr)
    477          {
   \                     mbedtls_x509_csr_info: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0xB088             SUB      SP,SP,#+32
   \        0x6   0x0004             MOVS     R4,R0
   \        0x8   0x000F             MOVS     R7,R1
   \        0xA   0x0015             MOVS     R5,R2
   \        0xC   0x001E             MOVS     R6,R3
    478              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
   \        0xE   0xF07F 0x096D      MVNS     R9,#+109
    479              size_t n;
    480              char *p;
    481              char key_size_str[BEFORE_COLON];
    482          
    483              p = buf;
   \       0x12   0x9403             STR      R4,[SP, #+12]
    484              n = size;
   \       0x14   0x9702             STR      R7,[SP, #+8]
    485          
    486              ret = mbedtls_snprintf(p, n, "%sCSR version   : %d",
    487                                     prefix, csr->version);
   \       0x16   0x69B0             LDR      R0,[R6, #+24]
   \       0x18   0x9000             STR      R0,[SP, #+0]
   \       0x1A   0x002B             MOVS     R3,R5
   \       0x1C   0x....             LDR.N    R2,??DataTable6_15
   \       0x1E   0x9902             LDR      R1,[SP, #+8]
   \       0x20   0x9803             LDR      R0,[SP, #+12]
   \       0x22   0x.... 0x....      BL       snprintf
   \       0x26   0x4680             MOV      R8,R0
    488              MBEDTLS_X509_SAFE_SNPRINTF;
   \       0x28   0xF1B8 0x0F00      CMP      R8,#+0
   \       0x2C   0xD402             BMI.N    ??mbedtls_x509_csr_info_0
   \       0x2E   0x9802             LDR      R0,[SP, #+8]
   \       0x30   0x4580             CMP      R8,R0
   \       0x32   0xD301             BCC.N    ??mbedtls_x509_csr_info_1
   \                     ??mbedtls_x509_csr_info_0: (+1)
   \       0x34   0x....             LDR.N    R0,??DataTable6_16
   \       0x36   0xE11D             B.N      ??mbedtls_x509_csr_info_2
   \                     ??mbedtls_x509_csr_info_1: (+1)
   \       0x38   0x9802             LDR      R0,[SP, #+8]
   \       0x3A   0xEBB0 0x0008      SUBS     R0,R0,R8
   \       0x3E   0x9002             STR      R0,[SP, #+8]
   \       0x40   0x9803             LDR      R0,[SP, #+12]
   \       0x42   0x4440             ADD      R0,R0,R8
   \       0x44   0x9003             STR      R0,[SP, #+12]
    489          
    490              ret = mbedtls_snprintf(p, n, "\n%ssubject name  : ", prefix);
   \       0x46   0x002B             MOVS     R3,R5
   \       0x48   0x....             LDR.N    R2,??DataTable6_17
   \       0x4A   0x9902             LDR      R1,[SP, #+8]
   \       0x4C   0x9803             LDR      R0,[SP, #+12]
   \       0x4E   0x.... 0x....      BL       snprintf
   \       0x52   0x4681             MOV      R9,R0
    491              MBEDTLS_X509_SAFE_SNPRINTF;
   \       0x54   0xF1B9 0x0F00      CMP      R9,#+0
   \       0x58   0xD402             BMI.N    ??mbedtls_x509_csr_info_3
   \       0x5A   0x9802             LDR      R0,[SP, #+8]
   \       0x5C   0x4581             CMP      R9,R0
   \       0x5E   0xD301             BCC.N    ??mbedtls_x509_csr_info_4
   \                     ??mbedtls_x509_csr_info_3: (+1)
   \       0x60   0x....             LDR.N    R0,??DataTable6_16
   \       0x62   0xE107             B.N      ??mbedtls_x509_csr_info_2
   \                     ??mbedtls_x509_csr_info_4: (+1)
   \       0x64   0x9802             LDR      R0,[SP, #+8]
   \       0x66   0xEBB0 0x0009      SUBS     R0,R0,R9
   \       0x6A   0x9002             STR      R0,[SP, #+8]
   \       0x6C   0x9803             LDR      R0,[SP, #+12]
   \       0x6E   0x4448             ADD      R0,R0,R9
   \       0x70   0x9003             STR      R0,[SP, #+12]
    492              ret = mbedtls_x509_dn_gets(p, n, &csr->subject);
   \       0x72   0xF116 0x0228      ADDS     R2,R6,#+40
   \       0x76   0x9902             LDR      R1,[SP, #+8]
   \       0x78   0x9803             LDR      R0,[SP, #+12]
   \       0x7A   0x.... 0x....      BL       mbedtls_x509_dn_gets
   \       0x7E   0x4680             MOV      R8,R0
    493              MBEDTLS_X509_SAFE_SNPRINTF;
   \       0x80   0xF1B8 0x0F00      CMP      R8,#+0
   \       0x84   0xD402             BMI.N    ??mbedtls_x509_csr_info_5
   \       0x86   0x9802             LDR      R0,[SP, #+8]
   \       0x88   0x4580             CMP      R8,R0
   \       0x8A   0xD301             BCC.N    ??mbedtls_x509_csr_info_6
   \                     ??mbedtls_x509_csr_info_5: (+1)
   \       0x8C   0x....             LDR.N    R0,??DataTable6_16
   \       0x8E   0xE0F1             B.N      ??mbedtls_x509_csr_info_2
   \                     ??mbedtls_x509_csr_info_6: (+1)
   \       0x90   0x9802             LDR      R0,[SP, #+8]
   \       0x92   0xEBB0 0x0008      SUBS     R0,R0,R8
   \       0x96   0x9002             STR      R0,[SP, #+8]
   \       0x98   0x9803             LDR      R0,[SP, #+12]
   \       0x9A   0x4440             ADD      R0,R0,R8
   \       0x9C   0x9003             STR      R0,[SP, #+12]
    494          
    495              ret = mbedtls_snprintf(p, n, "\n%ssigned using  : ", prefix);
   \       0x9E   0x002B             MOVS     R3,R5
   \       0xA0   0x....             LDR.N    R2,??DataTable6_18
   \       0xA2   0x9902             LDR      R1,[SP, #+8]
   \       0xA4   0x9803             LDR      R0,[SP, #+12]
   \       0xA6   0x.... 0x....      BL       snprintf
   \       0xAA   0x4681             MOV      R9,R0
    496              MBEDTLS_X509_SAFE_SNPRINTF;
   \       0xAC   0xF1B9 0x0F00      CMP      R9,#+0
   \       0xB0   0xD402             BMI.N    ??mbedtls_x509_csr_info_7
   \       0xB2   0x9802             LDR      R0,[SP, #+8]
   \       0xB4   0x4581             CMP      R9,R0
   \       0xB6   0xD301             BCC.N    ??mbedtls_x509_csr_info_8
   \                     ??mbedtls_x509_csr_info_7: (+1)
   \       0xB8   0x....             LDR.N    R0,??DataTable6_16
   \       0xBA   0xE0DB             B.N      ??mbedtls_x509_csr_info_2
   \                     ??mbedtls_x509_csr_info_8: (+1)
   \       0xBC   0x9802             LDR      R0,[SP, #+8]
   \       0xBE   0xEBB0 0x0009      SUBS     R0,R0,R9
   \       0xC2   0x9002             STR      R0,[SP, #+8]
   \       0xC4   0x9803             LDR      R0,[SP, #+12]
   \       0xC6   0x4448             ADD      R0,R0,R9
   \       0xC8   0x9003             STR      R0,[SP, #+12]
    497          
    498              ret = mbedtls_x509_sig_alg_gets(p, n, &csr->sig_oid, csr->sig_pk, csr->sig_md,
    499                                              csr->sig_opts);
   \       0xCA   0xF8D6 0x0120      LDR      R0,[R6, #+288]
   \       0xCE   0x9001             STR      R0,[SP, #+4]
   \       0xD0   0xF896 0x011C      LDRB     R0,[R6, #+284]
   \       0xD4   0x9000             STR      R0,[SP, #+0]
   \       0xD6   0xF896 0x311D      LDRB     R3,[R6, #+285]
   \       0xDA   0xF516 0x7282      ADDS     R2,R6,#+260
   \       0xDE   0x9902             LDR      R1,[SP, #+8]
   \       0xE0   0x9803             LDR      R0,[SP, #+12]
   \       0xE2   0x.... 0x....      BL       mbedtls_x509_sig_alg_gets
   \       0xE6   0x4680             MOV      R8,R0
    500              MBEDTLS_X509_SAFE_SNPRINTF;
   \       0xE8   0xF1B8 0x0F00      CMP      R8,#+0
   \       0xEC   0xD402             BMI.N    ??mbedtls_x509_csr_info_9
   \       0xEE   0x9802             LDR      R0,[SP, #+8]
   \       0xF0   0x4580             CMP      R8,R0
   \       0xF2   0xD301             BCC.N    ??mbedtls_x509_csr_info_10
   \                     ??mbedtls_x509_csr_info_9: (+1)
   \       0xF4   0x....             LDR.N    R0,??DataTable6_16
   \       0xF6   0xE0BD             B.N      ??mbedtls_x509_csr_info_2
   \                     ??mbedtls_x509_csr_info_10: (+1)
   \       0xF8   0x9802             LDR      R0,[SP, #+8]
   \       0xFA   0xEBB0 0x0008      SUBS     R0,R0,R8
   \       0xFE   0x9002             STR      R0,[SP, #+8]
   \      0x100   0x9803             LDR      R0,[SP, #+12]
   \      0x102   0x4440             ADD      R0,R0,R8
   \      0x104   0x9003             STR      R0,[SP, #+12]
    501          
    502              if ((ret = mbedtls_x509_key_size_helper(key_size_str, BEFORE_COLON,
    503                                                      mbedtls_pk_get_name(&csr->pk))) != 0) {
   \      0x106   0xF116 0x0048      ADDS     R0,R6,#+72
   \      0x10A   0x.... 0x....      BL       mbedtls_pk_get_name
   \      0x10E   0x0002             MOVS     R2,R0
   \      0x110   0x210E             MOVS     R1,#+14
   \      0x112   0xA804             ADD      R0,SP,#+16
   \      0x114   0x.... 0x....      BL       mbedtls_x509_key_size_helper
   \      0x118   0x4681             MOV      R9,R0
   \      0x11A   0x2800             CMP      R0,#+0
   \      0x11C   0xD001             BEQ.N    ??mbedtls_x509_csr_info_11
    504                  return ret;
   \      0x11E   0x4648             MOV      R0,R9
   \      0x120   0xE0A8             B.N      ??mbedtls_x509_csr_info_2
    505              }
    506          
    507              ret = mbedtls_snprintf(p, n, "\n%s%-" BC "s: %d bits\n", prefix, key_size_str,
    508                                     (int) mbedtls_pk_get_bitlen(&csr->pk));
   \                     ??mbedtls_x509_csr_info_11: (+1)
   \      0x122   0xF116 0x0048      ADDS     R0,R6,#+72
   \      0x126   0x.... 0x....      BL       mbedtls_pk_get_bitlen
   \      0x12A   0x9001             STR      R0,[SP, #+4]
   \      0x12C   0xA804             ADD      R0,SP,#+16
   \      0x12E   0x9000             STR      R0,[SP, #+0]
   \      0x130   0x002B             MOVS     R3,R5
   \      0x132   0x....             LDR.N    R2,??DataTable6_19
   \      0x134   0x9902             LDR      R1,[SP, #+8]
   \      0x136   0x9803             LDR      R0,[SP, #+12]
   \      0x138   0x.... 0x....      BL       snprintf
   \      0x13C   0x4680             MOV      R8,R0
    509              MBEDTLS_X509_SAFE_SNPRINTF;
   \      0x13E   0xF1B8 0x0F00      CMP      R8,#+0
   \      0x142   0xD402             BMI.N    ??mbedtls_x509_csr_info_12
   \      0x144   0x9802             LDR      R0,[SP, #+8]
   \      0x146   0x4580             CMP      R8,R0
   \      0x148   0xD301             BCC.N    ??mbedtls_x509_csr_info_13
   \                     ??mbedtls_x509_csr_info_12: (+1)
   \      0x14A   0x....             LDR.N    R0,??DataTable6_16
   \      0x14C   0xE092             B.N      ??mbedtls_x509_csr_info_2
   \                     ??mbedtls_x509_csr_info_13: (+1)
   \      0x14E   0x9802             LDR      R0,[SP, #+8]
   \      0x150   0xEBB0 0x0008      SUBS     R0,R0,R8
   \      0x154   0x9002             STR      R0,[SP, #+8]
   \      0x156   0x9803             LDR      R0,[SP, #+12]
   \      0x158   0x4440             ADD      R0,R0,R8
   \      0x15A   0x9003             STR      R0,[SP, #+12]
    510          
    511              /*
    512               * Optional extensions
    513               */
    514          
    515              if (csr->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME) {
   \      0x15C   0xF896 0x0100      LDRB     R0,[R6, #+256]
   \      0x160   0x0680             LSLS     R0,R0,#+26
   \      0x162   0xD521             BPL.N    ??mbedtls_x509_csr_info_14
    516                  ret = mbedtls_snprintf(p, n, "\n%ssubject alt name  :", prefix);
   \      0x164   0x002B             MOVS     R3,R5
   \      0x166   0x....             LDR.N    R2,??DataTable6_20
   \      0x168   0x9902             LDR      R1,[SP, #+8]
   \      0x16A   0x9803             LDR      R0,[SP, #+12]
   \      0x16C   0x.... 0x....      BL       snprintf
   \      0x170   0x4681             MOV      R9,R0
    517                  MBEDTLS_X509_SAFE_SNPRINTF;
   \      0x172   0xF1B9 0x0F00      CMP      R9,#+0
   \      0x176   0xD402             BMI.N    ??mbedtls_x509_csr_info_15
   \      0x178   0x9802             LDR      R0,[SP, #+8]
   \      0x17A   0x4581             CMP      R9,R0
   \      0x17C   0xD301             BCC.N    ??mbedtls_x509_csr_info_16
   \                     ??mbedtls_x509_csr_info_15: (+1)
   \      0x17E   0x....             LDR.N    R0,??DataTable6_16
   \      0x180   0xE078             B.N      ??mbedtls_x509_csr_info_2
   \                     ??mbedtls_x509_csr_info_16: (+1)
   \      0x182   0x9802             LDR      R0,[SP, #+8]
   \      0x184   0xEBB0 0x0009      SUBS     R0,R0,R9
   \      0x188   0x9002             STR      R0,[SP, #+8]
   \      0x18A   0x9803             LDR      R0,[SP, #+12]
   \      0x18C   0x4448             ADD      R0,R0,R9
   \      0x18E   0x9003             STR      R0,[SP, #+12]
    518          
    519                  if ((ret = mbedtls_x509_info_subject_alt_name(&p, &n,
    520                                                                &csr->subject_alt_names,
    521                                                                prefix)) != 0) {
   \      0x190   0x002B             MOVS     R3,R5
   \      0x192   0xF116 0x02F0      ADDS     R2,R6,#+240
   \      0x196   0xA902             ADD      R1,SP,#+8
   \      0x198   0xA803             ADD      R0,SP,#+12
   \      0x19A   0x.... 0x....      BL       mbedtls_x509_info_subject_alt_name
   \      0x19E   0x4680             MOV      R8,R0
   \      0x1A0   0x2800             CMP      R0,#+0
   \      0x1A2   0xD001             BEQ.N    ??mbedtls_x509_csr_info_14
    522                      return ret;
   \      0x1A4   0x4640             MOV      R0,R8
   \      0x1A6   0xE065             B.N      ??mbedtls_x509_csr_info_2
    523                  }
    524              }
    525          
    526              if (csr->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE) {
   \                     ??mbedtls_x509_csr_info_14: (+1)
   \      0x1A8   0xF8D6 0x0100      LDR      R0,[R6, #+256]
   \      0x1AC   0x03C0             LSLS     R0,R0,#+15
   \      0x1AE   0xD520             BPL.N    ??mbedtls_x509_csr_info_17
    527                  ret = mbedtls_snprintf(p, n, "\n%scert. type        : ", prefix);
   \      0x1B0   0x002B             MOVS     R3,R5
   \      0x1B2   0x....             LDR.N    R2,??DataTable6_21
   \      0x1B4   0x9902             LDR      R1,[SP, #+8]
   \      0x1B6   0x9803             LDR      R0,[SP, #+12]
   \      0x1B8   0x.... 0x....      BL       snprintf
   \      0x1BC   0x4681             MOV      R9,R0
    528                  MBEDTLS_X509_SAFE_SNPRINTF;
   \      0x1BE   0xF1B9 0x0F00      CMP      R9,#+0
   \      0x1C2   0xD402             BMI.N    ??mbedtls_x509_csr_info_18
   \      0x1C4   0x9802             LDR      R0,[SP, #+8]
   \      0x1C6   0x4581             CMP      R9,R0
   \      0x1C8   0xD301             BCC.N    ??mbedtls_x509_csr_info_19
   \                     ??mbedtls_x509_csr_info_18: (+1)
   \      0x1CA   0x....             LDR.N    R0,??DataTable6_16
   \      0x1CC   0xE052             B.N      ??mbedtls_x509_csr_info_2
   \                     ??mbedtls_x509_csr_info_19: (+1)
   \      0x1CE   0x9802             LDR      R0,[SP, #+8]
   \      0x1D0   0xEBB0 0x0009      SUBS     R0,R0,R9
   \      0x1D4   0x9002             STR      R0,[SP, #+8]
   \      0x1D6   0x9803             LDR      R0,[SP, #+12]
   \      0x1D8   0x4448             ADD      R0,R0,R9
   \      0x1DA   0x9003             STR      R0,[SP, #+12]
    529          
    530                  if ((ret = mbedtls_x509_info_cert_type(&p, &n, csr->ns_cert_type)) != 0) {
   \      0x1DC   0xF896 0x20EC      LDRB     R2,[R6, #+236]
   \      0x1E0   0xA902             ADD      R1,SP,#+8
   \      0x1E2   0xA803             ADD      R0,SP,#+12
   \      0x1E4   0x.... 0x....      BL       mbedtls_x509_info_cert_type
   \      0x1E8   0x4680             MOV      R8,R0
   \      0x1EA   0x2800             CMP      R0,#+0
   \      0x1EC   0xD001             BEQ.N    ??mbedtls_x509_csr_info_17
    531                      return ret;
   \      0x1EE   0x4640             MOV      R0,R8
   \      0x1F0   0xE040             B.N      ??mbedtls_x509_csr_info_2
    532                  }
    533              }
    534          
    535              if (csr->ext_types & MBEDTLS_X509_EXT_KEY_USAGE) {
   \                     ??mbedtls_x509_csr_info_17: (+1)
   \      0x1F2   0xF896 0x0100      LDRB     R0,[R6, #+256]
   \      0x1F6   0x0740             LSLS     R0,R0,#+29
   \      0x1F8   0xD520             BPL.N    ??mbedtls_x509_csr_info_20
    536                  ret = mbedtls_snprintf(p, n, "\n%skey usage         : ", prefix);
   \      0x1FA   0x002B             MOVS     R3,R5
   \      0x1FC   0x....             LDR.N    R2,??DataTable6_22
   \      0x1FE   0x9902             LDR      R1,[SP, #+8]
   \      0x200   0x9803             LDR      R0,[SP, #+12]
   \      0x202   0x.... 0x....      BL       snprintf
   \      0x206   0x4681             MOV      R9,R0
    537                  MBEDTLS_X509_SAFE_SNPRINTF;
   \      0x208   0xF1B9 0x0F00      CMP      R9,#+0
   \      0x20C   0xD402             BMI.N    ??mbedtls_x509_csr_info_21
   \      0x20E   0x9802             LDR      R0,[SP, #+8]
   \      0x210   0x4581             CMP      R9,R0
   \      0x212   0xD301             BCC.N    ??mbedtls_x509_csr_info_22
   \                     ??mbedtls_x509_csr_info_21: (+1)
   \      0x214   0x....             LDR.N    R0,??DataTable6_16
   \      0x216   0xE02D             B.N      ??mbedtls_x509_csr_info_2
   \                     ??mbedtls_x509_csr_info_22: (+1)
   \      0x218   0x9802             LDR      R0,[SP, #+8]
   \      0x21A   0xEBB0 0x0009      SUBS     R0,R0,R9
   \      0x21E   0x9002             STR      R0,[SP, #+8]
   \      0x220   0x9803             LDR      R0,[SP, #+12]
   \      0x222   0x4448             ADD      R0,R0,R9
   \      0x224   0x9003             STR      R0,[SP, #+12]
    538          
    539                  if ((ret = mbedtls_x509_info_key_usage(&p, &n, csr->key_usage)) != 0) {
   \      0x226   0xF8D6 0x20E8      LDR      R2,[R6, #+232]
   \      0x22A   0xA902             ADD      R1,SP,#+8
   \      0x22C   0xA803             ADD      R0,SP,#+12
   \      0x22E   0x.... 0x....      BL       mbedtls_x509_info_key_usage
   \      0x232   0x4680             MOV      R8,R0
   \      0x234   0x2800             CMP      R0,#+0
   \      0x236   0xD001             BEQ.N    ??mbedtls_x509_csr_info_20
    540                      return ret;
   \      0x238   0x4640             MOV      R0,R8
   \      0x23A   0xE01B             B.N      ??mbedtls_x509_csr_info_2
    541                  }
    542              }
    543          
    544              if (csr->ext_types != 0) {
   \                     ??mbedtls_x509_csr_info_20: (+1)
   \      0x23C   0xF8D6 0x0100      LDR      R0,[R6, #+256]
   \      0x240   0x2800             CMP      R0,#+0
   \      0x242   0xD014             BEQ.N    ??mbedtls_x509_csr_info_23
    545                  ret = mbedtls_snprintf(p, n, "\n");
   \      0x244   0x....             ADR.N    R2,??DataTable6
   \      0x246   0x9902             LDR      R1,[SP, #+8]
   \      0x248   0x9803             LDR      R0,[SP, #+12]
   \      0x24A   0x.... 0x....      BL       snprintf
   \      0x24E   0x4680             MOV      R8,R0
    546                  MBEDTLS_X509_SAFE_SNPRINTF;
   \      0x250   0xF1B8 0x0F00      CMP      R8,#+0
   \      0x254   0xD402             BMI.N    ??mbedtls_x509_csr_info_24
   \      0x256   0x9802             LDR      R0,[SP, #+8]
   \      0x258   0x4580             CMP      R8,R0
   \      0x25A   0xD301             BCC.N    ??mbedtls_x509_csr_info_25
   \                     ??mbedtls_x509_csr_info_24: (+1)
   \      0x25C   0x....             LDR.N    R0,??DataTable6_16
   \      0x25E   0xE009             B.N      ??mbedtls_x509_csr_info_2
   \                     ??mbedtls_x509_csr_info_25: (+1)
   \      0x260   0x9802             LDR      R0,[SP, #+8]
   \      0x262   0xEBB0 0x0008      SUBS     R0,R0,R8
   \      0x266   0x9002             STR      R0,[SP, #+8]
   \      0x268   0x9803             LDR      R0,[SP, #+12]
   \      0x26A   0x4440             ADD      R0,R0,R8
   \      0x26C   0x9003             STR      R0,[SP, #+12]
    547              }
    548          
    549              return (int) (size - n);
   \                     ??mbedtls_x509_csr_info_23: (+1)
   \      0x26E   0x9802             LDR      R0,[SP, #+8]
   \      0x270   0x1A3F             SUBS     R7,R7,R0
   \      0x272   0x0038             MOVS     R0,R7
   \                     ??mbedtls_x509_csr_info_2: (+1)
   \      0x274   0xB009             ADD      SP,SP,#+36
   \      0x276   0xE8BD 0x83F0      POP      {R4-R9,PC}
    550          }
    551          #endif /* MBEDTLS_X509_REMOVE_INFO */
    552          
    553          /*
    554           * Initialize a CSR
    555           */

   \                                 In section .text, align 2, keep-with-next
    556          void mbedtls_x509_csr_init(mbedtls_x509_csr *csr)
    557          {
   \                     mbedtls_x509_csr_init: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0007             MOVS     R7,R0
    558              memset(csr, 0, sizeof(mbedtls_x509_csr));
   \        0x4   0xF44F 0x7492      MOV      R4,#+292
   \        0x8   0x2500             MOVS     R5,#+0
   \        0xA   0x003E             MOVS     R6,R7
   \        0xC   0x002A             MOVS     R2,R5
   \        0xE   0x0021             MOVS     R1,R4
   \       0x10   0x0030             MOVS     R0,R6
   \       0x12   0x.... 0x....      BL       __aeabi_memset
    559          }
   \       0x16   0xBDF1             POP      {R0,R4-R7,PC}
    560          
    561          /*
    562           * Unallocate all CSR data
    563           */

   \                                 In section .text, align 2, keep-with-next
    564          void mbedtls_x509_csr_free(mbedtls_x509_csr *csr)
    565          {
   \                     mbedtls_x509_csr_free: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    566              if (csr == NULL) {
   \        0x4   0x2C00             CMP      R4,#+0
   \        0x6   0xD016             BEQ.N    ??mbedtls_x509_csr_free_0
    567                  return;
    568              }
    569          
    570              mbedtls_pk_free(&csr->pk);
   \                     ??mbedtls_x509_csr_free_1: (+1)
   \        0x8   0xF114 0x0048      ADDS     R0,R4,#+72
   \        0xC   0x.... 0x....      BL       mbedtls_pk_free
    571          
    572          #if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
    573              mbedtls_free(csr->sig_opts);
    574          #endif
    575          
    576              mbedtls_asn1_free_named_data_list_shallow(csr->subject.next);
   \       0x10   0x6C20             LDR      R0,[R4, #+64]
   \       0x12   0x.... 0x....      BL       mbedtls_asn1_free_named_data_list_shallow
    577              mbedtls_asn1_sequence_free(csr->subject_alt_names.next);
   \       0x16   0xF8D4 0x00FC      LDR      R0,[R4, #+252]
   \       0x1A   0x.... 0x....      BL       mbedtls_asn1_sequence_free
    578          
    579              if (csr->raw.p != NULL) {
   \       0x1E   0x68A0             LDR      R0,[R4, #+8]
   \       0x20   0x2800             CMP      R0,#+0
   \       0x22   0xD003             BEQ.N    ??mbedtls_x509_csr_free_2
    580                  mbedtls_zeroize_and_free(csr->raw.p, csr->raw.len);
   \       0x24   0x6861             LDR      R1,[R4, #+4]
   \       0x26   0x68A0             LDR      R0,[R4, #+8]
   \       0x28   0x.... 0x....      BL       mbedtls_zeroize_and_free
    581              }
    582          
    583              mbedtls_platform_zeroize(csr, sizeof(mbedtls_x509_csr));
   \                     ??mbedtls_x509_csr_free_2: (+1)
   \       0x2C   0xF44F 0x7192      MOV      R1,#+292
   \       0x30   0x0020             MOVS     R0,R4
   \       0x32   0x.... 0x....      BL       mbedtls_platform_zeroize
    584          }
   \                     ??mbedtls_x509_csr_free_0: (+1)
   \       0x36   0xBD10             POP      {R4,PC}

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \        0x0   0x0A 0x00          DC8      "\n",0x0,0x0   
   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \        0x0   0xFFFF'DE00        DC32     0xffffde00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \        0x0   0xFFFF'DB00        DC32     0xffffdb00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \        0x0   0xFFFF'D800        DC32     0xffffd800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \        0x0   0xFFFF'D780        DC32     0xffffd780

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \        0x0   0xFFFF'DE80        DC32     0xffffde80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \        0x0   0xFFFF'DA80        DC32     0xffffda80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \        0x0   0xFFFF'DA00        DC32     0xffffda00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_10:
   \        0x0   0x....'....        DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_11:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_12:
   \        0x0   0xFFFF'EF80        DC32     0xffffef80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_13:
   \        0x0   0x....'....        DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_14:
   \        0x0   0x....'....        DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_15:
   \        0x0   0x....'....        DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_16:
   \        0x0   0xFFFF'D680        DC32     0xffffd680

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_17:
   \        0x0   0x....'....        DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_18:
   \        0x0   0x....'....        DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_19:
   \        0x0   0x....'....        DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_20:
   \        0x0   0x....'....        DC32     ?_10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_21:
   \        0x0   0x....'....        DC32     ?_11

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_22:
   \        0x0   0x....'....        DC32     ?_12

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x44 0x3A          DC8 0x44, 0x3A, 0x5C, 0x49, 0x6E, 0x65, 0x73, 0x68
   \              0x5C 0x49    
   \              0x6E 0x65    
   \              0x73 0x68
   \        0x8   0x5F 0x77          DC8 0x5F, 0x77, 0x69, 0x73, 0x75, 0x6E, 0x5C, 0x57
   \              0x69 0x73    
   \              0x75 0x6E    
   \              0x5C 0x57
   \       0x10   0x69 0x73          DC8 0x69, 0x73, 0x75, 0x6E, 0x5F, 0x4E, 0x6F, 0x64
   \              0x75 0x6E    
   \              0x5F 0x4E    
   \              0x6F 0x64
   \       0x18   0x65 0x5F          DC8 0x65, 0x5F, 0x41, 0x70, 0x70, 0x20, 0x31, 0x5C
   \              0x41 0x70    
   \              0x70 0x20    
   \              0x31 0x5C
   \       0x20   0x57 0x69          DC8 0x57, 0x69, 0x73, 0x75, 0x6E, 0x5F, 0x4E, 0x6F
   \              0x73 0x75    
   \              0x6E 0x5F    
   \              0x4E 0x6F
   \       0x28   0x64 0x65          DC8 0x64, 0x65, 0x5F, 0x41, 0x70, 0x70, 0x5C, 0x67
   \              0x5F 0x41    
   \              0x70 0x70    
   \              0x5C 0x67
   \       0x30   0x65 0x63          DC8 0x65, 0x63, 0x6B, 0x6F, 0x5F, 0x73, 0x64, 0x6B
   \              0x6B 0x6F    
   \              0x5F 0x73    
   \              0x64 0x6B
   \       0x38   0x5F 0x34          DC8 0x5F, 0x34, 0x2E, 0x34, 0x2E, 0x35, 0x5C, 0x75
   \              0x2E 0x34    
   \              0x2E 0x35    
   \              0x5C 0x75
   \       0x40   0x74 0x69          DC8 0x74, 0x69, 0x6C, 0x5C, 0x74, 0x68, 0x69, 0x72
   \              0x6C 0x5C    
   \              0x74 0x68    
   \              0x69 0x72
   \       0x48   0x64 0x5F          DC8 0x64, 0x5F, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5C
   \              0x70 0x61    
   \              0x72 0x74    
   \              0x79 0x5C
   \       0x50   0x6D 0x62          DC8 0x6D, 0x62, 0x65, 0x64, 0x74, 0x6C, 0x73, 0x5C
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5C
   \       0x58   0x6C 0x69          DC8 0x6C, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5C
   \              0x62 0x72    
   \              0x61 0x72    
   \              0x79 0x5C
   \       0x60   0x78 0x35          DC8 0x78, 0x35, 0x30, 0x39, 0x5F, 0x63, 0x73, 0x72
   \              0x30 0x39    
   \              0x5F 0x63    
   \              0x73 0x72
   \       0x68   0x2E 0x63          DC8 0x2E, 0x63, 0
   \              0x00
   \       0x6B                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x2A 0x86          DC8 "*\206H\206\367\015\001\t\016"
   \              0x48 0x86    
   \              0xF7 0x0D    
   \              0x01 0x09    
   \              0x0E 0x00
   \        0xA                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x2D 0x2D          DC8 "-----BEGIN CERTIFICATE REQUEST-----"
   \              0x2D 0x2D    
   \              0x2D 0x42    
   \              0x45 0x47    
   \              0x49 0x4E    
   \              0x20 0x43    
   \              0x45 0x52    
   \              0x54 0x49    
   \              0x46 0x49    
   \              0x43 0x41    
   \              0x54 0x45    
   \              0x20 0x52    
   \              0x45 0x51    
   \              0x55 0x45    
   \              0x53 0x54    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x00

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x2D 0x2D          DC8 "-----END CERTIFICATE REQUEST-----"
   \              0x2D 0x2D    
   \              0x2D 0x45    
   \              0x4E 0x44    
   \              0x20 0x43    
   \              0x45 0x52    
   \              0x54 0x49    
   \              0x46 0x49    
   \              0x43 0x41    
   \              0x54 0x45    
   \              0x20 0x52    
   \              0x45 0x51    
   \              0x55 0x45    
   \              0x53 0x54    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x00
   \       0x22                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0x2D 0x2D          DC8 "-----BEGIN NEW CERTIFICATE REQUEST-----"
   \              0x2D 0x2D    
   \              0x2D 0x42    
   \              0x45 0x47    
   \              0x49 0x4E    
   \              0x20 0x4E    
   \              0x45 0x57    
   \              0x20 0x43    
   \              0x45 0x52    
   \              0x54 0x49    
   \              0x46 0x49    
   \              0x43 0x41    
   \              0x54 0x45    
   \              0x20 0x52    
   \              0x45 0x51    
   \              0x55 0x45    
   \              0x53 0x54    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x00

   \                                 In section .rodata, align 4
   \                     ?_5:
   \        0x0   0x2D 0x2D          DC8 "-----END NEW CERTIFICATE REQUEST-----"
   \              0x2D 0x2D    
   \              0x2D 0x45    
   \              0x4E 0x44    
   \              0x20 0x4E    
   \              0x45 0x57    
   \              0x20 0x43    
   \              0x45 0x52    
   \              0x54 0x49    
   \              0x46 0x49    
   \              0x43 0x41    
   \              0x54 0x45    
   \              0x20 0x52    
   \              0x45 0x51    
   \              0x55 0x45    
   \              0x53 0x54    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x00
   \       0x26                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_6:
   \        0x0   0x25 0x73          DC8 "%sCSR version   : %d"
   \              0x43 0x53    
   \              0x52 0x20    
   \              0x76 0x65    
   \              0x72 0x73    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x20 0x20    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x00
   \       0x15                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_7:
   \        0x0   0x0A 0x25          DC8 "\012%ssubject name  : "
   \              0x73 0x73    
   \              0x75 0x62    
   \              0x6A 0x65    
   \              0x63 0x74    
   \              0x20 0x6E    
   \              0x61 0x6D    
   \              0x65 0x20    
   \              0x20 0x3A    
   \              0x20 0x00

   \                                 In section .rodata, align 4
   \                     ?_8:
   \        0x0   0x0A 0x25          DC8 "\012%ssigned using  : "
   \              0x73 0x73    
   \              0x69 0x67    
   \              0x6E 0x65    
   \              0x64 0x20    
   \              0x75 0x73    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x20 0x3A    
   \              0x20 0x00

   \                                 In section .rodata, align 4
   \                     ?_9:
   \        0x0   0x0A 0x25          DC8 "\012%s%-14s: %d bits\012"
   \              0x73 0x25    
   \              0x2D 0x31    
   \              0x34 0x73    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x20 0x62    
   \              0x69 0x74    
   \              0x73 0x0A    
   \              0x00
   \       0x13                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_10:
   \        0x0   0x0A 0x25          DC8 "\012%ssubject alt name  :"
   \              0x73 0x73    
   \              0x75 0x62    
   \              0x6A 0x65    
   \              0x63 0x74    
   \              0x20 0x61    
   \              0x6C 0x74    
   \              0x20 0x6E    
   \              0x61 0x6D    
   \              0x65 0x20    
   \              0x20 0x3A    
   \              0x00
   \       0x17                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_11:
   \        0x0   0x0A 0x25          DC8 "\012%scert. type        : "
   \              0x73 0x63    
   \              0x65 0x72    
   \              0x74 0x2E    
   \              0x20 0x74    
   \              0x79 0x70    
   \              0x65 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x20 0x00

   \                                 In section .rodata, align 4
   \                     ?_12:
   \        0x0   0x0A 0x25          DC8 "\012%skey usage         : "
   \              0x73 0x6B    
   \              0x65 0x79    
   \              0x20 0x75    
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x20 0x00

   \                                 In section .rodata, align 2
   \        0x0   0x0A 0x00          DC8 "\012"
    585          
    586          #endif /* MBEDTLS_X509_CSR_PARSE_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   mbedtls_error_add
       8   mbedtls_x509_csr_free
         8   -> mbedtls_asn1_free_named_data_list_shallow
         8   -> mbedtls_asn1_sequence_free
         8   -> mbedtls_pk_free
         8   -> mbedtls_platform_zeroize
         8   -> mbedtls_zeroize_and_free
      64   mbedtls_x509_csr_info
        64   -> mbedtls_pk_get_bitlen
        64   -> mbedtls_pk_get_name
        64   -> mbedtls_x509_dn_gets
        64   -> mbedtls_x509_info_cert_type
        64   -> mbedtls_x509_info_key_usage
        64   -> mbedtls_x509_info_subject_alt_name
        64   -> mbedtls_x509_key_size_helper
        64   -> mbedtls_x509_sig_alg_gets
        64   -> snprintf
      24   mbedtls_x509_csr_init
        24   -> __aeabi_memset
      56   mbedtls_x509_csr_parse
        56   -> mbedtls_pem_free
        56   -> mbedtls_pem_init
        56   -> mbedtls_pem_read_buffer
        56   -> mbedtls_x509_csr_parse_der
      64   mbedtls_x509_csr_parse_der
        64   -> __aeabi_memcpy
        64   -> __aeabi_memset
        64   -> mbedtls_asn1_get_tag
        64   -> mbedtls_error_add
        64   -> mbedtls_pk_parse_subpubkey
        64   -> mbedtls_x509_csr_free
        64   -> mbedtls_x509_csr_init
        64   -> mbedtls_x509_get_alg
        64   -> mbedtls_x509_get_name
        64   -> mbedtls_x509_get_sig
        64   -> mbedtls_x509_get_sig_alg
        64   -> sl_calloc
        64   -> x509_csr_get_version
        64   -> x509_csr_parse_attributes
      24   x509_csr_get_version
        24   -> mbedtls_asn1_get_int
        24   -> mbedtls_error_add
      56   x509_csr_parse_attributes
        56   -> mbedtls_asn1_get_tag
        56   -> mbedtls_error_add
        56   -> memcmp
        56   -> x509_csr_parse_extensions
      48   x509_csr_parse_extensions
        48   -> mbedtls_asn1_get_tag
        48   -> mbedtls_error_add
        48   -> mbedtls_oid_get_x509_ext_type
        48   -> mbedtls_x509_get_key_usage
        48   -> mbedtls_x509_get_ns_cert_type
        48   -> mbedtls_x509_get_subject_alt_name


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_10
       4  ??DataTable6_11
       4  ??DataTable6_12
       4  ??DataTable6_13
       4  ??DataTable6_14
       4  ??DataTable6_15
       4  ??DataTable6_16
       4  ??DataTable6_17
       4  ??DataTable6_18
       4  ??DataTable6_19
       4  ??DataTable6_2
       4  ??DataTable6_20
       4  ??DataTable6_21
       4  ??DataTable6_22
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       4  ??DataTable6_9
     108  ?_0
      12  ?_1
      24  ?_10
      24  ?_11
      24  ?_12
       2  ?_13
      12  ?_14
      12  ?_15
      36  ?_2
      36  ?_3
      40  ?_4
      40  ?_5
      24  ?_6
      20  ?_7
      20  ?_8
      20  ?_9
       4  mbedtls_error_add
      56  mbedtls_x509_csr_free
     634  mbedtls_x509_csr_info
      24  mbedtls_x509_csr_init
     156  mbedtls_x509_csr_parse
     654  mbedtls_x509_csr_parse_der
      68  x509_csr_get_version
     324  x509_csr_parse_attributes
     382  x509_csr_parse_extensions

 
   454 bytes in section .rodata
 2'394 bytes in section .text
 
 2'394 bytes of CODE  memory
   454 bytes of CONST memory

Errors: none
Warnings: none
