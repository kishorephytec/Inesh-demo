###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         29/Mar/2025  15:53:29
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\source\lib\lib_ascii.c
#    Command line      =
#        -f "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\lib_9910682656167710914.dir\lib_ascii.o.rsp"
#        ("D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\source\lib\lib_ascii.c"
#        -D DEBUG_EFM=1 -D EFR32FG28B322F1024IM48=1 -D
#        configNUM_SDK_THREAD_LOCAL_STORAGE_POINTERS=2 -D
#        SL_COMPONENT_CATALOG_PRESENT=1 -D
#        MBEDTLS_CONFIG_FILE=<sl_mbedtls_config.h> -D
#        MBEDTLS_PSA_CRYPTO_CONFIG_FILE=<psa_crypto_config.h> -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -D
#        RTT_USE_ASM=0 -lC "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\lst\lib_9910682656167710914.dir"
#        --diag_suppress Pa050 -o "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\lib_9910682656167710914.dir" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M33 --cmse --cmse
#        -e --fpu=VFPv5_sp --dlib_config "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.2\arm\inc\c\DLib_Config_Normal.h" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\source\lib\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\rail\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\config\wisun\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\.\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\Device\SiliconLabs\EFR32FG28\Include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_project_info\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\common\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\cli\src\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\CMSIS\Core\Include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\CMSIS\RTOS2\Include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\device_init\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emdrv\common\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emlib\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\iostream\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\config\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\config\preset\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_mbedtls_support\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\mbedtls\library\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\cpu\include\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\ports\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\source\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\kernel\include\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\emdrv\nvm3\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\peripheral\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\printf\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\printf\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\sl_psa_driver\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\common\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\ble\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\ieee802154\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\wmbus\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\zwave\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\chip\efr32\efr32xg2x\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\protocol\sidewalk\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\pa-conversions\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\pa-conversions\efr32xg28\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\radio\rail_lib\plugin\rail_util_pti\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\se_manager\inc\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\security\sl_component\se_manager\src\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\third_party\segger\systemview\SEGGER\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\util\silicon_labs\silabs_core\memory_manager\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\common\toolchain\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\system\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_core\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\app_setting\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\cli_util\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\event_manager\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\ns_list\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\ping\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\trace_util\nanostack\nanostack-libservice\mbed-client-libservice\\"
#        -I "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\app\wisun\component\udp_client\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\platform\service\sleeptimer\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\plugin\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\stack\inc\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\gecko_sdk_4.4.5\protocol\wisun\stack\inc\socket\\" -I
#        "D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\autogen\\" -On
#        --use_c++_inline) --dependencies=n "D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\lib_9910682656167710914.dir\lib_ascii.o.iar_deps"
#    Locale            =  C
#    List file         =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\lst\lib_9910682656167710914.dir\lib_ascii.lst
#    Object file       =
#        D:\Inesh_wisun\Wisun_Node_App
#        1\Wisun_Node_App\ewarm-iar\obj\lib_9910682656167710914.dir\lib_ascii.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

D:\Inesh_wisun\Wisun_Node_App 1\Wisun_Node_App\gecko_sdk_4.4.5\platform\micrium_os\common\source\lib\lib_ascii.c
      1          /***************************************************************************//**
      2           * @file
      3           * @brief Common - Ascii Character Operations
      4           *******************************************************************************
      5           * # License
      6           * <b>Copyright 2018 Silicon Laboratories Inc. www.silabs.com</b>
      7           *******************************************************************************
      8           *
      9           * The licensor of this software is Silicon Laboratories Inc.  Your use of this
     10           * software is governed by the terms of Silicon Labs Master Software License
     11           * Agreement (MSLA) available at
     12           * www.silabs.com/about-us/legal/master-software-license-agreement.  This
     13           * software is distributed to you in Source Code format and is governed by the
     14           * sections of the MSLA applicable to Source Code.
     15           *
     16           ******************************************************************************/
     17          
     18          /********************************************************************************************************
     19           ********************************************************************************************************
     20           *                                               INCLUDE FILES
     21           ********************************************************************************************************
     22           *******************************************************************************************************/
     23          
     24          #include  <common/include/lib_ascii.h>
     25          #include  <cpu/include/cpu.h>
     26          
     27          /********************************************************************************************************
     28           ********************************************************************************************************
     29           *                                           GLOBAL FUNCTIONS
     30           ********************************************************************************************************
     31           *******************************************************************************************************/
     32          
     33          /****************************************************************************************************//**
     34           *                                               ASCII_IsAlpha()
     35           *
     36           * @brief    Determines whether a character is an alphabetic character.
     37           *
     38           * @param    c   Character to examine.
     39           *
     40           * @return   DEF_YES, the character is alphabetic.
     41           *           DEF_NO, the character is NOT alphabetic.
     42           *
     43           * @note     (1) ISO/IEC 9899:TC2, Section 7.4.1.2.(2) states that "isalpha() returns true only for the
     44           *               characters for which isupper() or islower() is true".
     45           *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     46          CPU_BOOLEAN ASCII_IsAlpha(CPU_CHAR c)
     47          {
   \                     ASCII_IsAlpha: (+1)
   \        0x0   0x0001             MOVS     R1,R0
     48            CPU_BOOLEAN alpha;
     49          
     50            alpha = ASCII_IS_ALPHA(c);
   \        0x2   0x0008             MOVS     R0,R1
   \        0x4   0xB2C0             UXTB     R0,R0
   \        0x6   0x2841             CMP      R0,#+65
   \        0x8   0xDB05             BLT.N    ??ASCII_IsAlpha_0
   \        0xA   0x0008             MOVS     R0,R1
   \        0xC   0xB2C0             UXTB     R0,R0
   \        0xE   0x285B             CMP      R0,#+91
   \       0x10   0xDA01             BGE.N    ??ASCII_IsAlpha_0
   \       0x12   0x2001             MOVS     R0,#+1
   \       0x14   0xE000             B.N      ??ASCII_IsAlpha_1
   \                     ??ASCII_IsAlpha_0: (+1)
   \       0x16   0x2000             MOVS     R0,#+0
   \                     ??ASCII_IsAlpha_1: (+1)
   \       0x18   0x2801             CMP      R0,#+1
   \       0x1A   0xD00C             BEQ.N    ??ASCII_IsAlpha_2
   \       0x1C   0x0008             MOVS     R0,R1
   \       0x1E   0xB2C0             UXTB     R0,R0
   \       0x20   0x2861             CMP      R0,#+97
   \       0x22   0xDB05             BLT.N    ??ASCII_IsAlpha_3
   \       0x24   0x0008             MOVS     R0,R1
   \       0x26   0xB2C0             UXTB     R0,R0
   \       0x28   0x287B             CMP      R0,#+123
   \       0x2A   0xDA01             BGE.N    ??ASCII_IsAlpha_3
   \       0x2C   0x2001             MOVS     R0,#+1
   \       0x2E   0xE000             B.N      ??ASCII_IsAlpha_4
   \                     ??ASCII_IsAlpha_3: (+1)
   \       0x30   0x2000             MOVS     R0,#+0
   \                     ??ASCII_IsAlpha_4: (+1)
   \       0x32   0x2801             CMP      R0,#+1
   \       0x34   0xD101             BNE.N    ??ASCII_IsAlpha_5
   \                     ??ASCII_IsAlpha_2: (+1)
   \       0x36   0x2001             MOVS     R0,#+1
   \       0x38   0xE000             B.N      ??ASCII_IsAlpha_6
   \                     ??ASCII_IsAlpha_5: (+1)
   \       0x3A   0x2000             MOVS     R0,#+0
     51          
     52            return (alpha);
   \                     ??ASCII_IsAlpha_6: (+1)
   \       0x3C   0xB2C0             UXTB     R0,R0
   \       0x3E   0x4770             BX       LR
     53          }
     54          
     55          /****************************************************************************************************//**
     56           *                                           ASCII_IsAlphaNum()
     57           *
     58           * @brief    Determines whether a character is an alphanumeric character.
     59           *
     60           * @param    c   Character to examine.
     61           *
     62           * @return   DEF_YES, the character is alphanumeric.
     63           *           DEF_NO, the character is NOT alphanumeric.
     64           *
     65           * @note     (1) ISO/IEC 9899:TC2, Section 7.4.1.1.(2) states that "isalnum() ... tests for any character
     66           *               for which isalpha() or isdigit() is true".
     67           *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     68          CPU_BOOLEAN ASCII_IsAlphaNum(CPU_CHAR c)
     69          {
   \                     ASCII_IsAlphaNum: (+1)
   \        0x0   0x0001             MOVS     R1,R0
     70            CPU_BOOLEAN alpha_num;
     71          
     72            alpha_num = ASCII_IS_ALPHA_NUM(c);
   \        0x2   0x0008             MOVS     R0,R1
   \        0x4   0xB2C0             UXTB     R0,R0
   \        0x6   0x2841             CMP      R0,#+65
   \        0x8   0xDB05             BLT.N    ??ASCII_IsAlphaNum_0
   \        0xA   0x0008             MOVS     R0,R1
   \        0xC   0xB2C0             UXTB     R0,R0
   \        0xE   0x285B             CMP      R0,#+91
   \       0x10   0xDA01             BGE.N    ??ASCII_IsAlphaNum_0
   \       0x12   0x2001             MOVS     R0,#+1
   \       0x14   0xE000             B.N      ??ASCII_IsAlphaNum_1
   \                     ??ASCII_IsAlphaNum_0: (+1)
   \       0x16   0x2000             MOVS     R0,#+0
   \                     ??ASCII_IsAlphaNum_1: (+1)
   \       0x18   0x2801             CMP      R0,#+1
   \       0x1A   0xD00C             BEQ.N    ??ASCII_IsAlphaNum_2
   \       0x1C   0x0008             MOVS     R0,R1
   \       0x1E   0xB2C0             UXTB     R0,R0
   \       0x20   0x2861             CMP      R0,#+97
   \       0x22   0xDB05             BLT.N    ??ASCII_IsAlphaNum_3
   \       0x24   0x0008             MOVS     R0,R1
   \       0x26   0xB2C0             UXTB     R0,R0
   \       0x28   0x287B             CMP      R0,#+123
   \       0x2A   0xDA01             BGE.N    ??ASCII_IsAlphaNum_3
   \       0x2C   0x2001             MOVS     R0,#+1
   \       0x2E   0xE000             B.N      ??ASCII_IsAlphaNum_4
   \                     ??ASCII_IsAlphaNum_3: (+1)
   \       0x30   0x2000             MOVS     R0,#+0
   \                     ??ASCII_IsAlphaNum_4: (+1)
   \       0x32   0x2801             CMP      R0,#+1
   \       0x34   0xD101             BNE.N    ??ASCII_IsAlphaNum_5
   \                     ??ASCII_IsAlphaNum_2: (+1)
   \       0x36   0x2001             MOVS     R0,#+1
   \       0x38   0xE000             B.N      ??ASCII_IsAlphaNum_6
   \                     ??ASCII_IsAlphaNum_5: (+1)
   \       0x3A   0x2000             MOVS     R0,#+0
   \                     ??ASCII_IsAlphaNum_6: (+1)
   \       0x3C   0x2801             CMP      R0,#+1
   \       0x3E   0xD00C             BEQ.N    ??ASCII_IsAlphaNum_7
   \       0x40   0x0008             MOVS     R0,R1
   \       0x42   0xB2C0             UXTB     R0,R0
   \       0x44   0x2830             CMP      R0,#+48
   \       0x46   0xDB05             BLT.N    ??ASCII_IsAlphaNum_8
   \       0x48   0x0008             MOVS     R0,R1
   \       0x4A   0xB2C0             UXTB     R0,R0
   \       0x4C   0x283A             CMP      R0,#+58
   \       0x4E   0xDA01             BGE.N    ??ASCII_IsAlphaNum_8
   \       0x50   0x2001             MOVS     R0,#+1
   \       0x52   0xE000             B.N      ??ASCII_IsAlphaNum_9
   \                     ??ASCII_IsAlphaNum_8: (+1)
   \       0x54   0x2000             MOVS     R0,#+0
   \                     ??ASCII_IsAlphaNum_9: (+1)
   \       0x56   0x2801             CMP      R0,#+1
   \       0x58   0xD101             BNE.N    ??ASCII_IsAlphaNum_10
   \                     ??ASCII_IsAlphaNum_7: (+1)
   \       0x5A   0x2001             MOVS     R0,#+1
   \       0x5C   0xE000             B.N      ??ASCII_IsAlphaNum_11
   \                     ??ASCII_IsAlphaNum_10: (+1)
   \       0x5E   0x2000             MOVS     R0,#+0
     73          
     74            return (alpha_num);
   \                     ??ASCII_IsAlphaNum_11: (+1)
   \       0x60   0xB2C0             UXTB     R0,R0
   \       0x62   0x4770             BX       LR
     75          }
     76          
     77          /****************************************************************************************************//**
     78           *                                               ASCII_IsLower()
     79           *
     80           * @brief    Determines whether a character is a lowercase alphabetic character.
     81           *
     82           * @param    c   Character to examine.
     83           *
     84           * @return   DEF_YES, the character is lowercase alphabetic.
     85           *           DEF_NO, the character is lowercase alphabetic.
     86           *
     87           * @note     (1) ISO/IEC 9899:TC2, Section 7.4.1.7.(2)  states that "islower() returns true only for
     88           *               the lowercase letters".
     89           *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     90          CPU_BOOLEAN ASCII_IsLower(CPU_CHAR c)
     91          {
   \                     ASCII_IsLower: (+1)
   \        0x0   0x0001             MOVS     R1,R0
     92            CPU_BOOLEAN lower;
     93          
     94            lower = ASCII_IS_LOWER(c);
   \        0x2   0x0008             MOVS     R0,R1
   \        0x4   0xB2C0             UXTB     R0,R0
   \        0x6   0x2861             CMP      R0,#+97
   \        0x8   0xDB05             BLT.N    ??ASCII_IsLower_0
   \        0xA   0x0008             MOVS     R0,R1
   \        0xC   0xB2C0             UXTB     R0,R0
   \        0xE   0x287B             CMP      R0,#+123
   \       0x10   0xDA01             BGE.N    ??ASCII_IsLower_0
   \       0x12   0x2001             MOVS     R0,#+1
   \       0x14   0xE000             B.N      ??ASCII_IsLower_1
   \                     ??ASCII_IsLower_0: (+1)
   \       0x16   0x2000             MOVS     R0,#+0
     95          
     96            return (lower);
   \                     ??ASCII_IsLower_1: (+1)
   \       0x18   0xB2C0             UXTB     R0,R0
   \       0x1A   0x4770             BX       LR
     97          }
     98          
     99          /****************************************************************************************************//**
    100           *                                               ASCII_IsUpper()
    101           *
    102           * @brief    Determines whether a character is an uppercase alphabetic character.
    103           *
    104           * @param    c   Character to examine.
    105           *
    106           * @return   DEF_YES, the character is uppercase alphabetic.
    107           *           DEF_NO, the character is uppercase alphabetic.
    108           *
    109           * @note     (1) ISO/IEC 9899:TC2, Section 7.4.1.11.(2) states that "isupper() returns true only for
    110           *               the uppercase letters".
    111           *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    112          CPU_BOOLEAN ASCII_IsUpper(CPU_CHAR c)
    113          {
   \                     ASCII_IsUpper: (+1)
   \        0x0   0x0001             MOVS     R1,R0
    114            CPU_BOOLEAN upper;
    115          
    116            upper = ASCII_IS_UPPER(c);
   \        0x2   0x0008             MOVS     R0,R1
   \        0x4   0xB2C0             UXTB     R0,R0
   \        0x6   0x2841             CMP      R0,#+65
   \        0x8   0xDB05             BLT.N    ??ASCII_IsUpper_0
   \        0xA   0x0008             MOVS     R0,R1
   \        0xC   0xB2C0             UXTB     R0,R0
   \        0xE   0x285B             CMP      R0,#+91
   \       0x10   0xDA01             BGE.N    ??ASCII_IsUpper_0
   \       0x12   0x2001             MOVS     R0,#+1
   \       0x14   0xE000             B.N      ??ASCII_IsUpper_1
   \                     ??ASCII_IsUpper_0: (+1)
   \       0x16   0x2000             MOVS     R0,#+0
    117          
    118            return (upper);
   \                     ??ASCII_IsUpper_1: (+1)
   \       0x18   0xB2C0             UXTB     R0,R0
   \       0x1A   0x4770             BX       LR
    119          }
    120          
    121          /****************************************************************************************************//**
    122           *                                               ASCII_IsDig()
    123           *
    124           * @brief    Determines whether a character is a decimal-digit character.
    125           *
    126           * @param    c   Character to examine.
    127           *
    128           * @return   DEF_YES, the character is a decimal-digit character.
    129           *           DEF_NO, the character is NOT a decimal-digit character.
    130           *
    131           * @note     (1) ISO/IEC 9899:TC2, Section 7.4.1.5.(2)  states that "isdigit()  ... tests for any
    132           *               decimal-digit character".
    133           *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    134          CPU_BOOLEAN ASCII_IsDig(CPU_CHAR c)
    135          {
   \                     ASCII_IsDig: (+1)
   \        0x0   0x0001             MOVS     R1,R0
    136            CPU_BOOLEAN dig;
    137          
    138            dig = ASCII_IS_DIG(c);
   \        0x2   0x0008             MOVS     R0,R1
   \        0x4   0xB2C0             UXTB     R0,R0
   \        0x6   0x2830             CMP      R0,#+48
   \        0x8   0xDB05             BLT.N    ??ASCII_IsDig_0
   \        0xA   0x0008             MOVS     R0,R1
   \        0xC   0xB2C0             UXTB     R0,R0
   \        0xE   0x283A             CMP      R0,#+58
   \       0x10   0xDA01             BGE.N    ??ASCII_IsDig_0
   \       0x12   0x2001             MOVS     R0,#+1
   \       0x14   0xE000             B.N      ??ASCII_IsDig_1
   \                     ??ASCII_IsDig_0: (+1)
   \       0x16   0x2000             MOVS     R0,#+0
    139          
    140            return (dig);
   \                     ??ASCII_IsDig_1: (+1)
   \       0x18   0xB2C0             UXTB     R0,R0
   \       0x1A   0x4770             BX       LR
    141          }
    142          
    143          /****************************************************************************************************//**
    144           *                                               ASCII_IsDigOct()
    145           *
    146           * @brief    Determines whether a character is an octal-digit character.
    147           *
    148           * @param    c   Character to examine.
    149           *
    150           * @return   DEF_YES, the character is an octal-digit.
    151           *           DEF_NO, the character is NOT an octal-digit.
    152           *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    153          CPU_BOOLEAN ASCII_IsDigOct(CPU_CHAR c)
    154          {
   \                     ASCII_IsDigOct: (+1)
   \        0x0   0x0001             MOVS     R1,R0
    155            CPU_BOOLEAN dig_oct;
    156          
    157            dig_oct = ASCII_IS_DIG_OCT(c);
   \        0x2   0x0008             MOVS     R0,R1
   \        0x4   0xB2C0             UXTB     R0,R0
   \        0x6   0x2830             CMP      R0,#+48
   \        0x8   0xDB05             BLT.N    ??ASCII_IsDigOct_0
   \        0xA   0x0008             MOVS     R0,R1
   \        0xC   0xB2C0             UXTB     R0,R0
   \        0xE   0x2838             CMP      R0,#+56
   \       0x10   0xDA01             BGE.N    ??ASCII_IsDigOct_0
   \       0x12   0x2001             MOVS     R0,#+1
   \       0x14   0xE000             B.N      ??ASCII_IsDigOct_1
   \                     ??ASCII_IsDigOct_0: (+1)
   \       0x16   0x2000             MOVS     R0,#+0
    158          
    159            return (dig_oct);
   \                     ??ASCII_IsDigOct_1: (+1)
   \       0x18   0xB2C0             UXTB     R0,R0
   \       0x1A   0x4770             BX       LR
    160          }
    161          
    162          /****************************************************************************************************//**
    163           *                                               ASCII_IsDigHex()
    164           *
    165           * @brief    Determine whether a character is a hexadecimal-digit character.
    166           *
    167           * @param    c   Character to examine.
    168           *
    169           * @return   DEF_YES, the character is a hexadecimal-digit character.
    170           *           DEF_NO, the character is NOT a hexadecimal-digit character.
    171           *
    172           * @note     (1) ISO/IEC 9899:TC2, Section 7.4.1.12.(2) states that "isxdigit() ... tests for any
    173           *               hexadecimal-digit character".
    174           *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    175          CPU_BOOLEAN ASCII_IsDigHex(CPU_CHAR c)
    176          {
   \                     ASCII_IsDigHex: (+1)
   \        0x0   0x0001             MOVS     R1,R0
    177            CPU_BOOLEAN dig_hex;
    178          
    179            dig_hex = ASCII_IS_DIG_HEX(c);
   \        0x2   0x0008             MOVS     R0,R1
   \        0x4   0xB2C0             UXTB     R0,R0
   \        0x6   0x2830             CMP      R0,#+48
   \        0x8   0xDB03             BLT.N    ??ASCII_IsDigHex_0
   \        0xA   0x0008             MOVS     R0,R1
   \        0xC   0xB2C0             UXTB     R0,R0
   \        0xE   0x283A             CMP      R0,#+58
   \       0x10   0xDB0F             BLT.N    ??ASCII_IsDigHex_1
   \                     ??ASCII_IsDigHex_0: (+1)
   \       0x12   0x0008             MOVS     R0,R1
   \       0x14   0xB2C0             UXTB     R0,R0
   \       0x16   0x2841             CMP      R0,#+65
   \       0x18   0xDB03             BLT.N    ??ASCII_IsDigHex_2
   \       0x1A   0x0008             MOVS     R0,R1
   \       0x1C   0xB2C0             UXTB     R0,R0
   \       0x1E   0x2847             CMP      R0,#+71
   \       0x20   0xDB07             BLT.N    ??ASCII_IsDigHex_1
   \                     ??ASCII_IsDigHex_2: (+1)
   \       0x22   0x0008             MOVS     R0,R1
   \       0x24   0xB2C0             UXTB     R0,R0
   \       0x26   0x2861             CMP      R0,#+97
   \       0x28   0xDB05             BLT.N    ??ASCII_IsDigHex_3
   \       0x2A   0x0008             MOVS     R0,R1
   \       0x2C   0xB2C0             UXTB     R0,R0
   \       0x2E   0x2867             CMP      R0,#+103
   \       0x30   0xDA01             BGE.N    ??ASCII_IsDigHex_3
   \                     ??ASCII_IsDigHex_1: (+1)
   \       0x32   0x2001             MOVS     R0,#+1
   \       0x34   0xE000             B.N      ??ASCII_IsDigHex_4
   \                     ??ASCII_IsDigHex_3: (+1)
   \       0x36   0x2000             MOVS     R0,#+0
    180          
    181            return (dig_hex);
   \                     ??ASCII_IsDigHex_4: (+1)
   \       0x38   0xB2C0             UXTB     R0,R0
   \       0x3A   0x4770             BX       LR
    182          }
    183          
    184          /****************************************************************************************************//**
    185           *                                               ASCII_IsBlank()
    186           *
    187           * @brief    Determines whether a character is a standard blank character.
    188           *
    189           * @param    c   Character to examine.
    190           *
    191           * @return   DEF_YES, the character is a standard blank character.
    192           *           DEF_NO, the character is NOT a standard blank character.
    193           *
    194           * @note     (1) ISO/IEC 9899:TC2, Section 7.4.1.3.(2) states that "isblank() returns true only for
    195           *               the standard blank characters".
    196           *
    197           * @note     (2) ISO/IEC 9899:TC2, Section 7.4.1.3.(2) defines "the standard blank characters" as
    198           *               the "space (' '), and horizontal tab ('\t')".
    199           *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    200          CPU_BOOLEAN ASCII_IsBlank(CPU_CHAR c)
    201          {
   \                     ASCII_IsBlank: (+1)
   \        0x0   0x0001             MOVS     R1,R0
    202            CPU_BOOLEAN blank;
    203          
    204            blank = ASCII_IS_BLANK(c);
   \        0x2   0x0008             MOVS     R0,R1
   \        0x4   0xB2C0             UXTB     R0,R0
   \        0x6   0x2820             CMP      R0,#+32
   \        0x8   0xD003             BEQ.N    ??ASCII_IsBlank_0
   \        0xA   0x0008             MOVS     R0,R1
   \        0xC   0xB2C0             UXTB     R0,R0
   \        0xE   0x2809             CMP      R0,#+9
   \       0x10   0xD101             BNE.N    ??ASCII_IsBlank_1
   \                     ??ASCII_IsBlank_0: (+1)
   \       0x12   0x2001             MOVS     R0,#+1
   \       0x14   0xE000             B.N      ??ASCII_IsBlank_2
   \                     ??ASCII_IsBlank_1: (+1)
   \       0x16   0x2000             MOVS     R0,#+0
    205          
    206            return (blank);
   \                     ??ASCII_IsBlank_2: (+1)
   \       0x18   0xB2C0             UXTB     R0,R0
   \       0x1A   0x4770             BX       LR
    207          }
    208          
    209          /****************************************************************************************************//**
    210           *                                               ASCII_IsSpace()
    211           *
    212           * @brief    Determines whether a character is a white-space character.
    213           *
    214           * @param    c   Character to examine.
    215           *
    216           * @return   DEF_YES, the character is a white-space character.
    217           *           DEF_NO, the character is NOT a white-space character.
    218           *
    219           * @note     (1) ISO/IEC 9899:TC2, Section 7.4.1.10.(2) states that "isspace() returns true only
    220           *               for the standard white-space characters".
    221           *
    222           * @note     (2) ISO/IEC 9899:TC2, Section 7.4.1.10.(2) defines "the standard white-space characters"
    223           *               as the "space (' '), form feed ('\f'), new-line ('\n'), carriage return ('\r'),
    224           *               horizontal tab ('\t'), and vertical tab ('\v')".
    225           *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    226          CPU_BOOLEAN ASCII_IsSpace(CPU_CHAR c)
    227          {
   \                     ASCII_IsSpace: (+1)
   \        0x0   0x0001             MOVS     R1,R0
    228            CPU_BOOLEAN space;
    229          
    230            space = ASCII_IS_SPACE(c);
   \        0x2   0x0008             MOVS     R0,R1
   \        0x4   0xB2C0             UXTB     R0,R0
   \        0x6   0x2820             CMP      R0,#+32
   \        0x8   0xD013             BEQ.N    ??ASCII_IsSpace_0
   \        0xA   0x0008             MOVS     R0,R1
   \        0xC   0xB2C0             UXTB     R0,R0
   \        0xE   0x280D             CMP      R0,#+13
   \       0x10   0xD00F             BEQ.N    ??ASCII_IsSpace_0
   \       0x12   0x0008             MOVS     R0,R1
   \       0x14   0xB2C0             UXTB     R0,R0
   \       0x16   0x280A             CMP      R0,#+10
   \       0x18   0xD00B             BEQ.N    ??ASCII_IsSpace_0
   \       0x1A   0x0008             MOVS     R0,R1
   \       0x1C   0xB2C0             UXTB     R0,R0
   \       0x1E   0x280C             CMP      R0,#+12
   \       0x20   0xD007             BEQ.N    ??ASCII_IsSpace_0
   \       0x22   0x0008             MOVS     R0,R1
   \       0x24   0xB2C0             UXTB     R0,R0
   \       0x26   0x2809             CMP      R0,#+9
   \       0x28   0xD003             BEQ.N    ??ASCII_IsSpace_0
   \       0x2A   0x0008             MOVS     R0,R1
   \       0x2C   0xB2C0             UXTB     R0,R0
   \       0x2E   0x280B             CMP      R0,#+11
   \       0x30   0xD101             BNE.N    ??ASCII_IsSpace_1
   \                     ??ASCII_IsSpace_0: (+1)
   \       0x32   0x2001             MOVS     R0,#+1
   \       0x34   0xE000             B.N      ??ASCII_IsSpace_2
   \                     ??ASCII_IsSpace_1: (+1)
   \       0x36   0x2000             MOVS     R0,#+0
    231          
    232            return (space);
   \                     ??ASCII_IsSpace_2: (+1)
   \       0x38   0xB2C0             UXTB     R0,R0
   \       0x3A   0x4770             BX       LR
    233          }
    234          
    235          /****************************************************************************************************//**
    236           *                                               ASCII_IsPrint()
    237           *
    238           * @brief    Determines whether a character is a printing character.
    239           *
    240           * @param    c   Character to examine.
    241           *
    242           * @return   DEF_YES, the character is a printing character.
    243           *           DEF_NO, the character is NOT a printing character.
    244           *
    245           * @note     (1) ISO/IEC 9899:TC2, Section 7.4.1.8.(2) states that "isprint() ... tests for any
    246           *               printing character including space (' ')".
    247           *
    248           * @note     (2) ISO/IEC 9899:TC2, Section 7.4.(3), Note 169, states that in "the seven-bit US
    249           *               ASCII character set, the printing characters are those whose values lie from
    250           *               0x20 (space) through 0x7E (tilde)".
    251           *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    252          CPU_BOOLEAN ASCII_IsPrint(CPU_CHAR c)
    253          {
   \                     ASCII_IsPrint: (+1)
   \        0x0   0x0001             MOVS     R1,R0
    254            CPU_BOOLEAN print;
    255          
    256            print = ASCII_IS_PRINT(c);
   \        0x2   0x0008             MOVS     R0,R1
   \        0x4   0xB2C0             UXTB     R0,R0
   \        0x6   0x2820             CMP      R0,#+32
   \        0x8   0xDB05             BLT.N    ??ASCII_IsPrint_0
   \        0xA   0x0008             MOVS     R0,R1
   \        0xC   0xB2C0             UXTB     R0,R0
   \        0xE   0x287F             CMP      R0,#+127
   \       0x10   0xDA01             BGE.N    ??ASCII_IsPrint_0
   \       0x12   0x2001             MOVS     R0,#+1
   \       0x14   0xE000             B.N      ??ASCII_IsPrint_1
   \                     ??ASCII_IsPrint_0: (+1)
   \       0x16   0x2000             MOVS     R0,#+0
    257          
    258            return (print);
   \                     ??ASCII_IsPrint_1: (+1)
   \       0x18   0xB2C0             UXTB     R0,R0
   \       0x1A   0x4770             BX       LR
    259          }
    260          
    261          /****************************************************************************************************//**
    262           *                                               ASCII_IsGraph()
    263           *
    264           * @brief    Determines whether a character is any printing character except a space character.
    265           *
    266           * @param    c   Character to examine.
    267           *
    268           * @return   DEF_YES, the character is a graphic.
    269           *           DEF_NO, the character is NOT a graphic.
    270           *
    271           * @note     (1) ISO/IEC 9899:TC2, Section 7.4.1.6.(2) states that "isgraph() ... tests for any
    272           *               printing character except space (' ')".
    273           *
    274           * @note     (2) ISO/IEC 9899:TC2, Section 7.4.(3), Note 169, states that in "the seven-bit US
    275           *               ASCII character set, the printing characters are those whose values lie from
    276           *               0x20 (space) through 0x7E (tilde)".
    277           *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    278          CPU_BOOLEAN ASCII_IsGraph(CPU_CHAR c)
    279          {
   \                     ASCII_IsGraph: (+1)
   \        0x0   0x0001             MOVS     R1,R0
    280            CPU_BOOLEAN graph;
    281          
    282            graph = ASCII_IS_GRAPH(c);
   \        0x2   0x0008             MOVS     R0,R1
   \        0x4   0xB2C0             UXTB     R0,R0
   \        0x6   0x2821             CMP      R0,#+33
   \        0x8   0xDB05             BLT.N    ??ASCII_IsGraph_0
   \        0xA   0x0008             MOVS     R0,R1
   \        0xC   0xB2C0             UXTB     R0,R0
   \        0xE   0x287F             CMP      R0,#+127
   \       0x10   0xDA01             BGE.N    ??ASCII_IsGraph_0
   \       0x12   0x2001             MOVS     R0,#+1
   \       0x14   0xE000             B.N      ??ASCII_IsGraph_1
   \                     ??ASCII_IsGraph_0: (+1)
   \       0x16   0x2000             MOVS     R0,#+0
    283          
    284            return (graph);
   \                     ??ASCII_IsGraph_1: (+1)
   \       0x18   0xB2C0             UXTB     R0,R0
   \       0x1A   0x4770             BX       LR
    285          }
    286          
    287          /****************************************************************************************************//**
    288           *                                               ASCII_IsPunct()
    289           *
    290           * @brief    Determines whether a character is a punctuation character.
    291           *
    292           * @param    c   Character to examine.
    293           *
    294           * @return   DEF_YES, the character is punctuation.
    295           *           DEF_NO, the character is NOT punctuation.
    296           *
    297           * @note     (1) ISO/IEC 9899:TC2, Section 7.4.1.9.(2) states that "ispunct() returns true for every
    298           *               printing character for which neither isspace() nor isalnum() is true".
    299           *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    300          CPU_BOOLEAN ASCII_IsPunct(CPU_CHAR c)
    301          {
   \                     ASCII_IsPunct: (+1)
   \        0x0   0x0001             MOVS     R1,R0
    302            CPU_BOOLEAN punct;
    303          
    304            punct = ASCII_IS_PUNCT(c);
   \        0x2   0x0008             MOVS     R0,R1
   \        0x4   0xB2C0             UXTB     R0,R0
   \        0x6   0x2821             CMP      R0,#+33
   \        0x8   0xDB03             BLT.N    ??ASCII_IsPunct_0
   \        0xA   0x0008             MOVS     R0,R1
   \        0xC   0xB2C0             UXTB     R0,R0
   \        0xE   0x2830             CMP      R0,#+48
   \       0x10   0xDB17             BLT.N    ??ASCII_IsPunct_1
   \                     ??ASCII_IsPunct_0: (+1)
   \       0x12   0x0008             MOVS     R0,R1
   \       0x14   0xB2C0             UXTB     R0,R0
   \       0x16   0x283A             CMP      R0,#+58
   \       0x18   0xDB03             BLT.N    ??ASCII_IsPunct_2
   \       0x1A   0x0008             MOVS     R0,R1
   \       0x1C   0xB2C0             UXTB     R0,R0
   \       0x1E   0x2841             CMP      R0,#+65
   \       0x20   0xDB0F             BLT.N    ??ASCII_IsPunct_1
   \                     ??ASCII_IsPunct_2: (+1)
   \       0x22   0x0008             MOVS     R0,R1
   \       0x24   0xB2C0             UXTB     R0,R0
   \       0x26   0x285B             CMP      R0,#+91
   \       0x28   0xDB03             BLT.N    ??ASCII_IsPunct_3
   \       0x2A   0x0008             MOVS     R0,R1
   \       0x2C   0xB2C0             UXTB     R0,R0
   \       0x2E   0x2861             CMP      R0,#+97
   \       0x30   0xDB07             BLT.N    ??ASCII_IsPunct_1
   \                     ??ASCII_IsPunct_3: (+1)
   \       0x32   0x0008             MOVS     R0,R1
   \       0x34   0xB2C0             UXTB     R0,R0
   \       0x36   0x287B             CMP      R0,#+123
   \       0x38   0xDB05             BLT.N    ??ASCII_IsPunct_4
   \       0x3A   0x0008             MOVS     R0,R1
   \       0x3C   0xB2C0             UXTB     R0,R0
   \       0x3E   0x287F             CMP      R0,#+127
   \       0x40   0xDA01             BGE.N    ??ASCII_IsPunct_4
   \                     ??ASCII_IsPunct_1: (+1)
   \       0x42   0x2001             MOVS     R0,#+1
   \       0x44   0xE000             B.N      ??ASCII_IsPunct_5
   \                     ??ASCII_IsPunct_4: (+1)
   \       0x46   0x2000             MOVS     R0,#+0
    305          
    306            return (punct);
   \                     ??ASCII_IsPunct_5: (+1)
   \       0x48   0xB2C0             UXTB     R0,R0
   \       0x4A   0x4770             BX       LR
    307          }
    308          
    309          /****************************************************************************************************//**
    310           *                                               ASCII_IsCtrl()
    311           *
    312           * @brief    Determines whether a character is a control character.
    313           *
    314           * @param    c   Character to examine.
    315           *
    316           * @return   DEF_YES, the character is a control character.
    317           *           DEF_NO, the character is NOT a control character.
    318           *
    319           * @note     (1) ISO/IEC 9899:TC2, Section 7.4.1.4.(2) states that "iscntrl() ... tests for any
    320           *               control character".
    321           *
    322           * @note     (2) ISO/IEC 9899:TC2, Section 7.4.(3), Note 169, states that in "the seven-bit US
    323           *               ASCII character set, ... the control characters are those whose values lie from
    324           *               0 (NUL) through 0x1F (US), and the character 0x7F (DEL)".
    325           *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    326          CPU_BOOLEAN ASCII_IsCtrl(CPU_CHAR c)
    327          {
   \                     ASCII_IsCtrl: (+1)
   \        0x0   0x0001             MOVS     R1,R0
    328            CPU_BOOLEAN ctrl;
    329          
    330            ctrl = ASCII_IS_CTRL(c);
   \        0x2   0x0008             MOVS     R0,R1
   \        0x4   0xB240             SXTB     R0,R0
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD403             BMI.N    ??ASCII_IsCtrl_0
   \        0xA   0x0008             MOVS     R0,R1
   \        0xC   0xB2C0             UXTB     R0,R0
   \        0xE   0x2820             CMP      R0,#+32
   \       0x10   0xDB03             BLT.N    ??ASCII_IsCtrl_1
   \                     ??ASCII_IsCtrl_0: (+1)
   \       0x12   0x0008             MOVS     R0,R1
   \       0x14   0xB2C0             UXTB     R0,R0
   \       0x16   0x287F             CMP      R0,#+127
   \       0x18   0xD101             BNE.N    ??ASCII_IsCtrl_2
   \                     ??ASCII_IsCtrl_1: (+1)
   \       0x1A   0x2001             MOVS     R0,#+1
   \       0x1C   0xE000             B.N      ??ASCII_IsCtrl_3
   \                     ??ASCII_IsCtrl_2: (+1)
   \       0x1E   0x2000             MOVS     R0,#+0
    331          
    332            return (ctrl);
   \                     ??ASCII_IsCtrl_3: (+1)
   \       0x20   0xB2C0             UXTB     R0,R0
   \       0x22   0x4770             BX       LR
    333          }
    334          
    335          /****************************************************************************************************//**
    336           *                                               ASCII_ToLower()
    337           *
    338           * @brief    Converts an uppercase alphabetic character to its corresponding lowercase alphabetic
    339           *           character.
    340           *
    341           * @param    c   Character to convert.
    342           *
    343           * @return   Lowercase equivalent of 'c', if the character 'c' is an uppercase character (see Note
    344           *           #2a).
    345           *           Character 'c', otherwise (see Note #2c).
    346           *
    347           * @note     (1) ISO/IEC 9899:TC2, Section 7.4.2.1.(2) states that "tolower() ... converts an
    348           *               uppercase letter to a corresponding lowercase letter".
    349           *
    350           * @note     (2) ISO/IEC 9899:TC2, Section 7.4.2.1.(3) states that :
    351           *           - (a) "if the argument is a character for which isupper() is true and there are
    352           *                   one or more corresponding characters ... for which islower() is true," ...
    353           *           - (b) "tolower() ... returns one of the corresponding characters;" ...
    354           *           - (c) "otherwise, the argument is returned unchanged."
    355           *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    356          CPU_CHAR ASCII_ToLower(CPU_CHAR c)
    357          {
   \                     ASCII_ToLower: (+1)
   \        0x0   0x0001             MOVS     R1,R0
    358            CPU_CHAR lower;
    359          
    360            lower = ASCII_TO_LOWER(c);
   \        0x2   0x0008             MOVS     R0,R1
   \        0x4   0xB2C0             UXTB     R0,R0
   \        0x6   0x2841             CMP      R0,#+65
   \        0x8   0xDB05             BLT.N    ??ASCII_ToLower_0
   \        0xA   0x0008             MOVS     R0,R1
   \        0xC   0xB2C0             UXTB     R0,R0
   \        0xE   0x285B             CMP      R0,#+91
   \       0x10   0xDA01             BGE.N    ??ASCII_ToLower_0
   \       0x12   0x2001             MOVS     R0,#+1
   \       0x14   0xE000             B.N      ??ASCII_ToLower_1
   \                     ??ASCII_ToLower_0: (+1)
   \       0x16   0x2000             MOVS     R0,#+0
   \                     ??ASCII_ToLower_1: (+1)
   \       0x18   0x2801             CMP      R0,#+1
   \       0x1A   0xD102             BNE.N    ??ASCII_ToLower_2
   \       0x1C   0xF111 0x0020      ADDS     R0,R1,#+32
   \       0x20   0xE000             B.N      ??ASCII_ToLower_3
   \                     ??ASCII_ToLower_2: (+1)
   \       0x22   0x0008             MOVS     R0,R1
    361          
    362            return (lower);
   \                     ??ASCII_ToLower_3: (+1)
   \       0x24   0xB2C0             UXTB     R0,R0
   \       0x26   0x4770             BX       LR
    363          }
    364          
    365          /****************************************************************************************************//**
    366           *                                               ASCII_ToUpper()
    367           *
    368           * @brief    Converts a lowercase alphabetic character to its corresponding uppercase alphabetic
    369           *           character.
    370           *
    371           * @param    c   Character to convert.
    372           *
    373           * @return   Uppercase equivalent of 'c', if the character 'c' is a lowercase character (see Note
    374           *           #2a).
    375           *           Character 'c', otherwise (see Note #2c).
    376           *
    377           * @note     (1) ISO/IEC 9899:TC2, Section 7.4.2.2.(2) states that "toupper() ... converts a
    378           *               lowercase letter to a corresponding uppercase letter".
    379           *
    380           * @note     (2) ISO/IEC 9899:TC2, Section 7.4.2.2.(3) states that :
    381           *           - (a) "if the argument is a character for which islower() is true and there are
    382           *                   one or more corresponding characters ... for which isupper() is true," ...
    383           *           - (b) "toupper() ... returns one of the corresponding characters;" ...
    384           *           - (c) "otherwise, the argument is returned unchanged."
    385           *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    386          CPU_CHAR ASCII_ToUpper(CPU_CHAR c)
    387          {
   \                     ASCII_ToUpper: (+1)
   \        0x0   0x0001             MOVS     R1,R0
    388            CPU_CHAR upper;
    389          
    390            upper = ASCII_TO_UPPER(c);
   \        0x2   0x0008             MOVS     R0,R1
   \        0x4   0xB2C0             UXTB     R0,R0
   \        0x6   0x2861             CMP      R0,#+97
   \        0x8   0xDB05             BLT.N    ??ASCII_ToUpper_0
   \        0xA   0x0008             MOVS     R0,R1
   \        0xC   0xB2C0             UXTB     R0,R0
   \        0xE   0x287B             CMP      R0,#+123
   \       0x10   0xDA01             BGE.N    ??ASCII_ToUpper_0
   \       0x12   0x2001             MOVS     R0,#+1
   \       0x14   0xE000             B.N      ??ASCII_ToUpper_1
   \                     ??ASCII_ToUpper_0: (+1)
   \       0x16   0x2000             MOVS     R0,#+0
   \                     ??ASCII_ToUpper_1: (+1)
   \       0x18   0x2801             CMP      R0,#+1
   \       0x1A   0xD102             BNE.N    ??ASCII_ToUpper_2
   \       0x1C   0xF1B1 0x0020      SUBS     R0,R1,#+32
   \       0x20   0xE000             B.N      ??ASCII_ToUpper_3
   \                     ??ASCII_ToUpper_2: (+1)
   \       0x22   0x0008             MOVS     R0,R1
    391          
    392            return (upper);
   \                     ??ASCII_ToUpper_3: (+1)
   \       0x24   0xB2C0             UXTB     R0,R0
   \       0x26   0x4770             BX       LR
    393          }
    394          
    395          /****************************************************************************************************//**
    396           *                                               ASCII_Cmp()
    397           *
    398           * @brief    Determines if two characters are identical (case-insensitive).
    399           *
    400           * @param    c1  First character.
    401           *
    402           * @param    c2  Second character.
    403           *
    404           * @return   DEF_YES, the characters are identical.
    405           *           DEF_NO, the characters are different.
    406           *******************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    407          CPU_BOOLEAN ASCII_Cmp(CPU_CHAR c1,
    408                                CPU_CHAR c2)
    409          {
   \                     ASCII_Cmp: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
    410            CPU_CHAR    c1_upper;
    411            CPU_CHAR    c2_upper;
    412            CPU_BOOLEAN cmp;
    413          
    414            c1_upper = ASCII_ToUpper(c1);
   \        0x6   0x0020             MOVS     R0,R4
   \        0x8   0xB2C0             UXTB     R0,R0
   \        0xA   0x.... 0x....      BL       ASCII_ToUpper
   \        0xE   0x0006             MOVS     R6,R0
    415            c2_upper = ASCII_ToUpper(c2);
   \       0x10   0x0028             MOVS     R0,R5
   \       0x12   0xB2C0             UXTB     R0,R0
   \       0x14   0x.... 0x....      BL       ASCII_ToUpper
   \       0x18   0x0001             MOVS     R1,R0
    416            cmp = (c1_upper == c2_upper) ? (DEF_YES) : (DEF_NO);
   \       0x1A   0x0032             MOVS     R2,R6
   \       0x1C   0x0008             MOVS     R0,R1
   \       0x1E   0xB2D2             UXTB     R2,R2
   \       0x20   0xB2C0             UXTB     R0,R0
   \       0x22   0x4282             CMP      R2,R0
   \       0x24   0xD101             BNE.N    ??ASCII_Cmp_0
   \       0x26   0x2001             MOVS     R0,#+1
   \       0x28   0xE000             B.N      ??ASCII_Cmp_1
   \                     ??ASCII_Cmp_0: (+1)
   \       0x2A   0x2000             MOVS     R0,#+0
    417          
    418            return (cmp);
   \                     ??ASCII_Cmp_1: (+1)
   \       0x2C   0xB2C0             UXTB     R0,R0
   \       0x2E   0xBD70             POP      {R4-R6,PC}
    419          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   ASCII_Cmp
        16   -> ASCII_ToUpper
       0   ASCII_IsAlpha
       0   ASCII_IsAlphaNum
       0   ASCII_IsBlank
       0   ASCII_IsCtrl
       0   ASCII_IsDig
       0   ASCII_IsDigHex
       0   ASCII_IsDigOct
       0   ASCII_IsGraph
       0   ASCII_IsLower
       0   ASCII_IsPrint
       0   ASCII_IsPunct
       0   ASCII_IsSpace
       0   ASCII_IsUpper
       0   ASCII_ToLower
       0   ASCII_ToUpper


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      48  ASCII_Cmp
      64  ASCII_IsAlpha
     100  ASCII_IsAlphaNum
      28  ASCII_IsBlank
      36  ASCII_IsCtrl
      28  ASCII_IsDig
      60  ASCII_IsDigHex
      28  ASCII_IsDigOct
      28  ASCII_IsGraph
      28  ASCII_IsLower
      28  ASCII_IsPrint
      76  ASCII_IsPunct
      60  ASCII_IsSpace
      28  ASCII_IsUpper
      40  ASCII_ToLower
      40  ASCII_ToUpper

 
 720 bytes in section .text
 
 720 bytes of CODE memory

Errors: none
Warnings: none
