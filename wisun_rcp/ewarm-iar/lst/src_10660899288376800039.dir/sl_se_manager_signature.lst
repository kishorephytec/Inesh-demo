###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         27/Nov/2024  12:16:58
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\src\sl_se_manager_signature.c
#    Command line      =
#        -f
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\src_10660899288376800039.dir\sl_se_manager_signature.o.rsp
#        (C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\src\sl_se_manager_signature.c
#        -D EFR32FG28B322F1024IM48=1 -D
#        configNUM_SDK_THREAD_LOCAL_STORAGE_POINTERS=2 -D
#        SL_COMPONENT_CATALOG_PRESENT=1 -D
#        MBEDTLS_CONFIG_FILE=<sl_mbedtls_config.h> -D
#        MBEDTLS_PSA_CRYPTO_CONFIG_FILE=<psa_crypto_config.h> -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -D
#        RTT_USE_ASM=0 -D MBED_CONF_MBED_TRACE_ENABLE=1 -D
#        MBED_CONF_NANOSTACK_CONFIGURATION=ws_router -D
#        MBED_TRACE_MAX_LEVEL=TRACE_ACTIVE_LEVEL_ALL -D DEBUG_EFM_USER=1 -D
#        HAVE_LFN=1 -D HAVE_LFN_PARENT=1 -lC
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\lst\src_10660899288376800039.dir
#        --diag_suppress Pa050 -o
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\src_10660899288376800039.dir
#        --debug --endian=little --cpu=Cortex-M33 --cmse --cmse -e
#        --fpu=VFPv5_sp --dlib_config "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\src\
#        -I C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\autogen\ -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\config\ -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\config\rail\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\Device\SiliconLabs\EFR32FG28\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\common\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\CMSIS\Core\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\CMSIS\RTOS2\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\device_init\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\dmadrv\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\common\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emlib\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\cmsis\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\kernel\include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\kernel\portable\IAR\ARM_CM33_NTZ\non_secure\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\iostream\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\config\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\config\preset\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\nvm3\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\peripheral\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_psa_driver\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\common\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\wmbus\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\sidewalk\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\efr32xg28\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\rail_util_pti\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\src\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\segger\systemview\SEGGER\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\silicon_labs\silabs_core\memory_manager\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\common\toolchain\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\system\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\ns_list\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\nanostack\nanostack-libservice\mbed-client-libservice\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\sleeptimer\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\app\wisun_rcp\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\inc\socket\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\src\
#        -Ohz --use_c++_inline) --dependencies=n
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\src_10660899288376800039.dir\sl_se_manager_signature.o.iar_deps
#    Locale            =  C
#    List file         =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\lst\src_10660899288376800039.dir\sl_se_manager_signature.lst
#    Object file       =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\src_10660899288376800039.dir\sl_se_manager_signature.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\src\sl_se_manager_signature.c
      1          /***************************************************************************//**
      2           * @file
      3           * @brief Silicon Labs Secure Engine Manager API.
      4           *******************************************************************************
      5           * # License
      6           * <b>Copyright 2020 Silicon Laboratories Inc. www.silabs.com</b>
      7           *******************************************************************************
      8           *
      9           * SPDX-License-Identifier: Zlib
     10           *
     11           * The licensor of this software is Silicon Laboratories Inc.
     12           *
     13           * This software is provided 'as-is', without any express or implied
     14           * warranty. In no event will the authors be held liable for any damages
     15           * arising from the use of this software.
     16           *
     17           * Permission is granted to anyone to use this software for any purpose,
     18           * including commercial applications, and to alter it and redistribute it
     19           * freely, subject to the following restrictions:
     20           *
     21           * 1. The origin of this software must not be misrepresented; you must not
     22           *    claim that you wrote the original software. If you use this software
     23           *    in a product, an acknowledgment in the product documentation would be
     24           *    appreciated but is not required.
     25           * 2. Altered source versions must be plainly marked as such, and must not be
     26           *    misrepresented as being the original software.
     27           * 3. This notice may not be removed or altered from any source distribution.
     28           *
     29           ******************************************************************************/
     30          
     31          #include "sl_se_manager.h"
     32          
     33          #if defined(SLI_MAILBOX_COMMAND_SUPPORTED)
     34          
     35          #include "sl_se_manager.h"
     36          #include "sli_se_manager_internal.h"
     37          #include "em_se.h"
     38          #include <string.h>
     39          
     40          /// @addtogroup sl_se_manager
     41          /// @{
     42          
     43          // -----------------------------------------------------------------------------
     44          // Global Functions
     45          
     46          /***************************************************************************//**
     47           * ECC signature generation.
     48           ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
     49          sl_status_t sl_se_ecc_sign(sl_se_command_context_t *cmd_ctx,
     50                                     const sl_se_key_descriptor_t *key,
     51                                     sl_se_hash_type_t hash_alg,
     52                                     bool hashed_message,
     53                                     const unsigned char *message,
     54                                     size_t message_len,
     55                                     unsigned char *signature,
     56                                     size_t signature_len)
     57          {
   \                     sl_se_ecc_sign: (+1)
   \        0x0   0xE92D 0x41F8      PUSH     {R3-R8,LR}
   \        0x4   0xB08F             SUB      SP,SP,#+60
   \        0x6   0x0004             MOVS     R4,R0
   \        0x8   0x460E             MOV      R6,R1
     58            if (cmd_ctx == NULL || key == NULL || message == NULL || signature == NULL) {
   \        0xA   0xBF18             IT       NE
   \        0xC   0x2E00             CMPNE    R6,#+0
   \        0xE   0xD03D             BEQ.N    ??sl_se_ecc_sign_1
   \       0x10   0x9D16             LDR      R5,[SP, #+88]
   \       0x12   0x2D00             CMP      R5,#+0
   \       0x14   0xBF1C             ITT      NE
   \       0x16   0x9F18             LDRNE    R7,[SP, #+96]
   \       0x18   0x2F00             CMPNE    R7,#+0
   \       0x1A   0xD037             BEQ.N    ??sl_se_ecc_sign_1
     59              return SL_STATUS_INVALID_PARAMETER;
     60            }
     61          
     62            SE_Command_t *se_cmd = &cmd_ctx->command;
     63            sl_status_t status;
     64            uint32_t command_word = SLI_SE_COMMAND_SIGNATURE_SIGN;
     65          
     66            if ((key->type & SL_SE_KEY_TYPE_ALGORITHM_MASK)
     67                == SL_SE_KEY_TYPE_ECC_EDDSA) {
   \       0x1C   0x6830             LDR      R0,[R6, #+0]
   \       0x1E   0xF04F 0x61C0      MOV      R1,#+100663296
   \       0x22   0xF000 0x4070      AND      R0,R0,#0xF0000000
   \       0x26   0xF1B0 0x4F40      CMP      R0,#+3221225472
   \       0x2A   0xD11A             BNE.N    ??sl_se_ecc_sign_2
     68              command_word = SLI_SE_COMMAND_EDDSA_SIGN;
   \       0x2C   0x....             LDR.N    R1,??DataTable6
     69            } else {
     70              if (hashed_message == false) {
     71                switch (hash_alg) {
     72                  case SL_SE_HASH_SHA1:
     73                    command_word |= SLI_SE_COMMAND_OPTION_HASH_SHA1;
     74                    break;
     75          
     76                  case SL_SE_HASH_SHA224:
     77                    command_word |= SLI_SE_COMMAND_OPTION_HASH_SHA224;
     78                    break;
     79          
     80                  case SL_SE_HASH_SHA256:
     81                    command_word |= SLI_SE_COMMAND_OPTION_HASH_SHA256;
     82                    break;
     83          
     84          #if (_SILICON_LABS_SECURITY_FEATURE == _SILICON_LABS_SECURITY_FEATURE_VAULT)
     85                  case SL_SE_HASH_SHA384:
     86                    command_word |= SLI_SE_COMMAND_OPTION_HASH_SHA384;
     87                    break;
     88          
     89                  case SL_SE_HASH_SHA512:
     90                    command_word |= SLI_SE_COMMAND_OPTION_HASH_SHA512;
     91                    break;
     92          #endif
     93                  default:
     94                    return SL_STATUS_INVALID_PARAMETER;
     95                }
     96              }
     97            }
     98          
     99            // Setup SE command and parameters
    100            sli_se_command_init(cmd_ctx, command_word);
   \                     ??sl_se_ecc_sign_3: (+1)
   \       0x2E   0x.... 0x....      BL       ?Subroutine1
    101            // Add key parameters to command
    102            sli_add_key_parameters(cmd_ctx, key, status);
   \                     ??CrossCallReturnLabel_10: (+1)
   \       0x32   0x2800             CMP      R0,#+0
   \       0x34   0xD160             BNE.N    ??sl_se_ecc_sign_4
   \       0x36   0x9900             LDR      R1,[SP, #+0]
   \       0x38   0xF8DD 0x805C      LDR      R8,[SP, #+92]
   \       0x3C   0x.... 0x....      BL       ??Subroutine2_0
    103            // Message size (number of bytes)
    104            SE_addParameter(se_cmd, message_len);
   \                     ??CrossCallReturnLabel_12: (+1)
   \       0x40   0x.... 0x....      BL       ?Subroutine2
    105            // Add key metadata block to command
    106            sli_add_key_metadata(cmd_ctx, key, status);
   \                     ??CrossCallReturnLabel_14: (+1)
   \       0x44   0xA90C             ADD      R1,SP,#+48
   \       0x46   0x4630             MOV      R0,R6
   \       0x48   0x.... 0x....      BL       sli_se_get_auth_buffer
   \       0x4C   0x2800             CMP      R0,#+0
   \       0x4E   0xD153             BNE.N    ??sl_se_ecc_sign_4
   \       0x50   0xA90C             ADD      R1,SP,#+48
   \       0x52   0x.... 0x....      BL       ??Subroutine0_0
    107            // Add key input block to command
    108            sli_add_key_input(cmd_ctx, key, status);
   \                     ??CrossCallReturnLabel_6: (+1)
   \       0x56   0xA909             ADD      R1,SP,#+36
   \       0x58   0x4630             MOV      R0,R6
   \       0x5A   0x.... 0x....      BL       sli_se_get_key_input_output
   \       0x5E   0xB1B8             CBZ.N    R0,??sl_se_ecc_sign_5
   \       0x60   0xE04A             B.N      ??sl_se_ecc_sign_4
   \                     ??sl_se_ecc_sign_2: (+1)
   \       0x62   0x2B00             CMP      R3,#+0
   \       0x64   0xD1E3             BNE.N    ??sl_se_ecc_sign_3
   \       0x66   0x1E52             SUBS     R2,R2,#+1
   \       0x68   0x2A04             CMP      R2,#+4
   \       0x6A   0xD80F             BHI.N    ??sl_se_ecc_sign_1
   \       0x6C   0xE8DF 0xF002      TBB      [PC, R2]
   \                     ??sl_se_ecc_sign_0:
   \       0x70   0x03 0x05          DC8      0x3,0x5,0x7,0x9
   \              0x07 0x09
   \       0x74   0x0B 0x00          DC8      0xB,0x0
   \                     ??sl_se_ecc_sign_6: (+1)
   \       0x76   0x....             LDR.N    R1,??DataTable6_1
   \       0x78   0xE7D9             B.N      ??sl_se_ecc_sign_3
   \                     ??sl_se_ecc_sign_7: (+1)
   \       0x7A   0x....             LDR.N    R1,??DataTable6_2
   \       0x7C   0xE7D7             B.N      ??sl_se_ecc_sign_3
   \                     ??sl_se_ecc_sign_8: (+1)
   \       0x7E   0x....             LDR.N    R1,??DataTable6_3
   \       0x80   0xE7D5             B.N      ??sl_se_ecc_sign_3
   \                     ??sl_se_ecc_sign_9: (+1)
   \       0x82   0x....             LDR.N    R1,??DataTable6_4
   \       0x84   0xE7D3             B.N      ??sl_se_ecc_sign_3
   \                     ??sl_se_ecc_sign_10: (+1)
   \       0x86   0xF04F 0x2106      MOV      R1,#+100664832
   \       0x8A   0xE7D0             B.N      ??sl_se_ecc_sign_3
   \                     ??sl_se_ecc_sign_1: (+1)
   \       0x8C   0x2021             MOVS     R0,#+33
   \       0x8E   0xE033             B.N      ??sl_se_ecc_sign_4
   \                     ??sl_se_ecc_sign_5: (+1)
   \       0x90   0x.... 0x....      BL       ?Subroutine0
    109          
    110            SE_DataTransfer_t message_buffer = SE_DATATRANSFER_DEFAULT(message, message_len);
   \                     ??CrossCallReturnLabel_8: (+1)
   \       0x94   0x....             ADR.N    R1,?_0
   \       0x96   0xE891 0x400C      LDM      R1,{R2,R3,LR}
   \       0x9A   0xF10D 0x0C18      ADD      R12,SP,#+24
   \       0x9E   0xF048 0x5800      ORR      R8,R8,#0x20000000
   \       0xA2   0xE88C 0x400C      STM      R12,{R2,R3,LR}
   \       0xA6   0x9506             STR      R5,[SP, #+24]
   \       0xA8   0xF8CD 0x8020      STR      R8,[SP, #+32]
    111            SE_addDataInput(se_cmd, &message_buffer);
   \       0xAC   0xA906             ADD      R1,SP,#+24
   \       0xAE   0x.... 0x....      BL       ??Subroutine0_0
    112          
    113            // EdDSA requires the message twice
    114            SE_DataTransfer_t repeated_message_buffer = SE_DATATRANSFER_DEFAULT(message, message_len);
   \                     ??CrossCallReturnLabel_5: (+1)
   \       0xB2   0x.... 0x....      ADR.W    LR,?_1
   \       0xB6   0xE89E 0x000E      LDM      LR,{R1-R3}
   \       0xBA   0xA803             ADD      R0,SP,#+12
   \       0xBC   0xE880 0x000E      STM      R0,{R1-R3}
   \       0xC0   0x9503             STR      R5,[SP, #+12]
   \       0xC2   0xF8CD 0x8014      STR      R8,[SP, #+20]
    115            if ((key->type & SL_SE_KEY_TYPE_ALGORITHM_MASK) == SL_SE_KEY_TYPE_ECC_EDDSA) {
   \       0xC6   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_15: (+1)
   \       0xCA   0xD102             BNE.N    ??CrossCallReturnLabel_4
    116              SE_addDataInput(se_cmd, &repeated_message_buffer);
   \       0xCC   0xA903             ADD      R1,SP,#+12
   \       0xCE   0x.... 0x....      BL       ??Subroutine0_0
    117            }
    118          
    119            SE_DataTransfer_t signature_buffer = SE_DATATRANSFER_DEFAULT(signature, signature_len);
   \                     ??CrossCallReturnLabel_4: (+1)
   \       0xD2   0xBF00             Nop
   \       0xD4   0x....             ADR.N    R0,?_2
   \       0xD6   0xE890 0x002C      LDM      R0,{R2,R3,R5}
   \       0xDA   0x466E             MOV      R6,SP
   \       0xDC   0x9919             LDR      R1,[SP, #+100]
   \       0xDE   0xE886 0x002C      STM      R6,{R2,R3,R5}
   \       0xE2   0x9700             STR      R7,[SP, #+0]
   \       0xE4   0xF041 0x5100      ORR      R1,R1,#0x20000000
   \       0xE8   0x9102             STR      R1,[SP, #+8]
    120            SE_addDataOutput(se_cmd, &signature_buffer);
   \       0xEA   0x4669             MOV      R1,SP
   \       0xEC   0x4620             MOV      R0,R4
   \       0xEE   0x.... 0x....      BL       SE_addDataOutput
    121          
    122            return sli_se_execute_and_wait(cmd_ctx);
   \       0xF2   0x4620             MOV      R0,R4
   \       0xF4   0x.... 0x....      BL       sli_se_execute_and_wait
   \                     ??sl_se_ecc_sign_4: (+1)
   \       0xF8   0xB010             ADD      SP,SP,#+64
   \       0xFA   0xE8BD 0x81F0      POP      {R4-R8,PC}
    123          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \        0x0   0x6831             LDR      R1,[R6, #+0]
   \        0x2   0xF001 0x4170      AND      R1,R1,#0xF0000000
   \        0x6   0xF1B1 0x4F40      CMP      R1,#+3221225472
   \        0xA   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \        0x0   0x4641             MOV      R1,R8
   \                     ??Subroutine2_0: (+1)
   \        0x2   0x4620             MOV      R0,R4
   \        0x4   0x.... 0x....      B.W      SE_addParameter

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \        0x0   0x6021             STR      R1,[R4, #+0]
   \        0x2   0x2100             MOVS     R1,#+0
   \        0x4   0x6061             STR      R1,[R4, #+4]
   \        0x6   0x60A1             STR      R1,[R4, #+8]
   \        0x8   0x61E1             STR      R1,[R4, #+28]
   \        0xA   0x4669             MOV      R1,SP
   \        0xC   0x4630             MOV      R0,R6
   \        0xE   0x.... 0x....      B.W      sli_se_key_to_keyspec

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0xA909             ADD      R1,SP,#+36
   \                     ??Subroutine0_0: (+1)
   \        0x2   0x4620             MOV      R0,R4
   \        0x4   0x.... 0x....      B.W      SE_addDataInput

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \        0x0   0x0000'0000        DC32 0x0, 0x1, 0
   \              0x0000'0001  
   \              0x0000'0000

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \        0x0   0x0000'0000        DC32 0x0, 0x1, 0
   \              0x0000'0001  
   \              0x0000'0000

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \        0x0   0x0000'0000        DC32 0x0, 0x1, 0
   \              0x0000'0001  
   \              0x0000'0000
    124          
    125          /***************************************************************************//**
    126           * ECC signature verification.
    127           ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    128          sl_status_t sl_se_ecc_verify(sl_se_command_context_t *cmd_ctx,
    129                                       const sl_se_key_descriptor_t *key,
    130                                       sl_se_hash_type_t hash_alg,
    131                                       bool hashed_message,
    132                                       const unsigned char *message,
    133                                       size_t message_len,
    134                                       const unsigned char *signature,
    135                                       size_t signature_len)
    136          {
   \                     sl_se_ecc_verify: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0xB08C             SUB      SP,SP,#+48
   \        0x6   0x0004             MOVS     R4,R0
   \        0x8   0x460E             MOV      R6,R1
    137            if (cmd_ctx == NULL || key == NULL || message == NULL || signature == NULL) {
   \        0xA   0xBF18             IT       NE
   \        0xC   0x2E00             CMPNE    R6,#+0
   \        0xE   0xD03D             BEQ.N    ??sl_se_ecc_verify_1
   \       0x10   0x9D14             LDR      R5,[SP, #+80]
   \       0x12   0x2D00             CMP      R5,#+0
   \       0x14   0xBF1C             ITT      NE
   \       0x16   0x9F16             LDRNE    R7,[SP, #+88]
   \       0x18   0x2F00             CMPNE    R7,#+0
   \       0x1A   0xD037             BEQ.N    ??sl_se_ecc_verify_1
    138              return SL_STATUS_INVALID_PARAMETER;
    139            }
    140            // Key needs to contain public key in order to verify signatures
    141            if (!(key->flags & SL_SE_KEY_FLAG_ASYMMETRIC_BUFFER_HAS_PUBLIC_KEY)) {
   \       0x1C   0x68B0             LDR      R0,[R6, #+8]
   \       0x1E   0x0481             LSLS     R1,R0,#+18
   \       0x20   0xD534             BPL.N    ??sl_se_ecc_verify_1
    142              return SL_STATUS_INVALID_PARAMETER;
    143            }
    144          
    145            SE_Command_t *se_cmd = &cmd_ctx->command;
    146            sl_status_t status;
    147            uint32_t command_word = SLI_SE_COMMAND_SIGNATURE_VERIFY;
    148          
    149            if ((key->type & SL_SE_KEY_TYPE_ALGORITHM_MASK)
    150                == SL_SE_KEY_TYPE_ECC_EDDSA) {
   \       0x22   0x6830             LDR      R0,[R6, #+0]
   \       0x24   0x....             LDR.N    R1,??DataTable6_5
   \       0x26   0xF000 0x4070      AND      R0,R0,#0xF0000000
   \       0x2A   0xF1B0 0x4F40      CMP      R0,#+3221225472
   \       0x2E   0xD119             BNE.N    ??sl_se_ecc_verify_2
    151              command_word = SLI_SE_COMMAND_EDDSA_VERIFY;
   \       0x30   0x....             LDR.N    R1,??DataTable6_6
    152            } else {
    153              if (hashed_message == false) {
    154                switch (hash_alg) {
    155                  case SL_SE_HASH_SHA1:
    156                    command_word |= SLI_SE_COMMAND_OPTION_HASH_SHA1;
    157                    break;
    158          
    159                  case SL_SE_HASH_SHA224:
    160                    command_word |= SLI_SE_COMMAND_OPTION_HASH_SHA224;
    161                    break;
    162          
    163                  case SL_SE_HASH_SHA256:
    164                    command_word |= SLI_SE_COMMAND_OPTION_HASH_SHA256;
    165                    break;
    166          
    167          #if (_SILICON_LABS_SECURITY_FEATURE == _SILICON_LABS_SECURITY_FEATURE_VAULT)
    168                  case SL_SE_HASH_SHA384:
    169                    command_word |= SLI_SE_COMMAND_OPTION_HASH_SHA384;
    170                    break;
    171          
    172                  case SL_SE_HASH_SHA512:
    173                    command_word |= SLI_SE_COMMAND_OPTION_HASH_SHA512;
    174                    break;
    175          
    176          #endif
    177                  default:
    178                    return SL_STATUS_INVALID_PARAMETER;
    179                }
    180              }
    181            }
    182          
    183            // Setup SE command and parameters
    184            sli_se_command_init(cmd_ctx, command_word);
   \                     ??sl_se_ecc_verify_3: (+1)
   \       0x32   0x.... 0x....      BL       ?Subroutine1
    185            // Add key parameters to command
    186            sli_add_key_parameters(cmd_ctx, key, status);
   \                     ??CrossCallReturnLabel_9: (+1)
   \       0x36   0x2800             CMP      R0,#+0
   \       0x38   0xD158             BNE.N    ??sl_se_ecc_verify_4
   \       0x3A   0x9900             LDR      R1,[SP, #+0]
   \       0x3C   0xF8DD 0x8054      LDR      R8,[SP, #+84]
   \       0x40   0x.... 0x....      BL       ??Subroutine2_0
    187            // Message size (number of bytes)
    188            SE_addParameter(se_cmd, message_len);
   \                     ??CrossCallReturnLabel_11: (+1)
   \       0x44   0x.... 0x....      BL       ?Subroutine2
    189            // Add key metadata block to command
    190            sli_add_key_metadata(cmd_ctx, key, status);
   \                     ??CrossCallReturnLabel_13: (+1)
   \       0x48   0xA909             ADD      R1,SP,#+36
   \       0x4A   0x4630             MOV      R0,R6
   \       0x4C   0x.... 0x....      BL       sli_se_get_auth_buffer
   \       0x50   0x2800             CMP      R0,#+0
   \       0x52   0xD14B             BNE.N    ??sl_se_ecc_verify_4
   \       0x54   0x.... 0x....      BL       ?Subroutine0
    191            // Add key input block to command
    192            sli_add_key_input(cmd_ctx, key, status);
   \                     ??CrossCallReturnLabel_7: (+1)
   \       0x58   0xA906             ADD      R1,SP,#+24
   \       0x5A   0x4630             MOV      R0,R6
   \       0x5C   0x.... 0x....      BL       sli_se_get_key_input_output
   \       0x60   0xB1B0             CBZ.N    R0,??sl_se_ecc_verify_5
   \       0x62   0xE043             B.N      ??sl_se_ecc_verify_4
   \                     ??sl_se_ecc_verify_2: (+1)
   \       0x64   0x2B00             CMP      R3,#+0
   \       0x66   0xD1E4             BNE.N    ??sl_se_ecc_verify_3
   \       0x68   0x1E52             SUBS     R2,R2,#+1
   \       0x6A   0x2A04             CMP      R2,#+4
   \       0x6C   0xD80E             BHI.N    ??sl_se_ecc_verify_1
   \       0x6E   0xE8DF 0xF002      TBB      [PC, R2]
   \                     ??sl_se_ecc_verify_0:
   \       0x72   0x03 0x05          DC8      0x3,0x5,0x7,0x9
   \              0x07 0x09
   \       0x76   0x0B 0x00          DC8      0xB,0x0
   \                     ??sl_se_ecc_verify_6: (+1)
   \       0x78   0x....             LDR.N    R1,??DataTable6_7
   \       0x7A   0xE7DA             B.N      ??sl_se_ecc_verify_3
   \                     ??sl_se_ecc_verify_7: (+1)
   \       0x7C   0x....             LDR.N    R1,??DataTable6_8
   \       0x7E   0xE7D8             B.N      ??sl_se_ecc_verify_3
   \                     ??sl_se_ecc_verify_8: (+1)
   \       0x80   0x....             LDR.N    R1,??DataTable6_9
   \       0x82   0xE7D6             B.N      ??sl_se_ecc_verify_3
   \                     ??sl_se_ecc_verify_9: (+1)
   \       0x84   0x....             LDR.N    R1,??DataTable6_10
   \       0x86   0xE7D4             B.N      ??sl_se_ecc_verify_3
   \                     ??sl_se_ecc_verify_10: (+1)
   \       0x88   0x....             LDR.N    R1,??DataTable6_11
   \       0x8A   0xE7D2             B.N      ??sl_se_ecc_verify_3
   \                     ??sl_se_ecc_verify_1: (+1)
   \       0x8C   0x2021             MOVS     R0,#+33
   \       0x8E   0xE02D             B.N      ??sl_se_ecc_verify_4
   \                     ??sl_se_ecc_verify_5: (+1)
   \       0x90   0xF8DD 0x905C      LDR      R9,[SP, #+92]
   \       0x94   0xA906             ADD      R1,SP,#+24
   \       0x96   0x.... 0x....      BL       ??Subroutine0_0
    193          
    194            SE_DataTransfer_t message_buffer = SE_DATATRANSFER_DEFAULT(message,
    195                                                                       message_len);
   \                     ??CrossCallReturnLabel_3: (+1)
   \       0x9A   0xBF00             Nop
   \       0x9C   0x....             ADR.N    R0,?_3
   \       0x9E   0xE890 0x000E      LDM      R0,{R1-R3}
   \       0xA2   0xF10D 0x0E0C      ADD      LR,SP,#+12
   \       0xA6   0xF048 0x5800      ORR      R8,R8,#0x20000000
   \       0xAA   0xE88E 0x000E      STM      LR,{R1-R3}
   \       0xAE   0x9503             STR      R5,[SP, #+12]
   \       0xB0   0xF8CD 0x8014      STR      R8,[SP, #+20]
    196            SE_DataTransfer_t signature_buffer = SE_DATATRANSFER_DEFAULT(signature,
    197                                                                         signature_len);
   \       0xB4   0x....             ADR.N    R1,?_4
   \       0xB6   0xE891 0x002C      LDM      R1,{R2,R3,R5}
   \       0xBA   0x46EE             MOV      LR,SP
   \       0xBC   0xF049 0x5900      ORR      R9,R9,#0x20000000
   \       0xC0   0xE88E 0x002C      STM      LR,{R2,R3,R5}
   \       0xC4   0x9700             STR      R7,[SP, #+0]
   \       0xC6   0xF8CD 0x9008      STR      R9,[SP, #+8]
    198          
    199            if ((key->type & SL_SE_KEY_TYPE_ALGORITHM_MASK) == SL_SE_KEY_TYPE_ECC_EDDSA) {
   \       0xCA   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_16: (+1)
   \       0xCE   0xD104             BNE.N    ??sl_se_ecc_verify_11
    200              SE_addDataInput(se_cmd, &signature_buffer);
   \       0xD0   0x4669             MOV      R1,SP
   \       0xD2   0x.... 0x....      BL       ??Subroutine0_0
    201              SE_addDataInput(se_cmd, &message_buffer);
   \                     ??CrossCallReturnLabel_2: (+1)
   \       0xD6   0xA903             ADD      R1,SP,#+12
   \       0xD8   0xE003             B.N      ??sl_se_ecc_verify_12
    202            } else {
    203              SE_addDataInput(se_cmd, &message_buffer);
   \                     ??sl_se_ecc_verify_11: (+1)
   \       0xDA   0xA903             ADD      R1,SP,#+12
   \       0xDC   0x.... 0x....      BL       ??Subroutine0_0
    204              SE_addDataInput(se_cmd, &signature_buffer);
   \                     ??CrossCallReturnLabel_1: (+1)
   \       0xE0   0x4669             MOV      R1,SP
    205            }
   \                     ??sl_se_ecc_verify_12: (+1)
   \       0xE2   0x.... 0x....      BL       ??Subroutine0_0
    206          
    207            return sli_se_execute_and_wait(cmd_ctx);
   \                     ??CrossCallReturnLabel_0: (+1)
   \       0xE6   0x4620             MOV      R0,R4
   \       0xE8   0x.... 0x....      BL       sli_se_execute_and_wait
   \                     ??sl_se_ecc_verify_4: (+1)
   \       0xEC   0xB00D             ADD      SP,SP,#+52
   \       0xEE   0xE8BD 0x83F0      POP      {R4-R9,PC}
    208          }

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \        0x0   0x0000'0000        DC32 0x0, 0x1, 0
   \              0x0000'0001  
   \              0x0000'0000

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \        0x0   0x0000'0000        DC32 0x0, 0x1, 0
   \              0x0000'0001  
   \              0x0000'0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \        0x0   0x0602'0000        DC32     0x6020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \        0x0   0x0600'0200        DC32     0x6000200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \        0x0   0x0600'0300        DC32     0x6000300

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \        0x0   0x0600'0400        DC32     0x6000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \        0x0   0x0600'0500        DC32     0x6000500

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \        0x0   0x0601'0000        DC32     0x6010000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \        0x0   0x0603'0000        DC32     0x6030000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \        0x0   0x0601'0200        DC32     0x6010200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \        0x0   0x0601'0300        DC32     0x6010300

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \        0x0   0x0601'0400        DC32     0x6010400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_10:
   \        0x0   0x0601'0500        DC32     0x6010500

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_11:
   \        0x0   0x0601'0600        DC32     0x6010600
    209          
    210          /** @} (end addtogroup sl_se) */
    211          
    212          #endif // defined(SLI_MAILBOX_COMMAND_SUPPORTED)

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      88   sl_se_ecc_sign
        88   -> SE_addDataInput
        88   -> SE_addDataOutput
        88   -> SE_addParameter
        88   -> sli_se_execute_and_wait
        88   -> sli_se_get_auth_buffer
        88   -> sli_se_get_key_input_output
        88   -> sli_se_key_to_keyspec
      80   sl_se_ecc_verify
        80   -> SE_addDataInput
        80   -> SE_addParameter
        80   -> sli_se_execute_and_wait
        80   -> sli_se_get_auth_buffer
        80   -> sli_se_get_key_input_output
        80   -> sli_se_key_to_keyspec


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_10
       4  ??DataTable6_11
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       4  ??DataTable6_9
       8  ?Subroutine0
      18  ?Subroutine1
       8  ?Subroutine2
      12  ?Subroutine3
      12  ?_0
      12  ?_1
      12  ?_2
      12  ?_3
      12  ?_4
     254  sl_se_ecc_sign
     242  sl_se_ecc_verify

 
 650 bytes in section .text
 
 650 bytes of CODE memory

Errors: none
Warnings: none
