###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         27/Nov/2024  12:17:59
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\pa_curves_efr32.c
#    Command line      =
#        -f
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\pa-conversions_3073922530588947952.dir\pa_curves_efr32.o.rsp
#        (C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\pa_curves_efr32.c
#        -D EFR32FG28B322F1024IM48=1 -D
#        configNUM_SDK_THREAD_LOCAL_STORAGE_POINTERS=2 -D
#        SL_COMPONENT_CATALOG_PRESENT=1 -D
#        MBEDTLS_CONFIG_FILE=<sl_mbedtls_config.h> -D
#        MBEDTLS_PSA_CRYPTO_CONFIG_FILE=<psa_crypto_config.h> -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -D
#        RTT_USE_ASM=0 -D MBED_CONF_MBED_TRACE_ENABLE=1 -D
#        MBED_CONF_NANOSTACK_CONFIGURATION=ws_router -D
#        MBED_TRACE_MAX_LEVEL=TRACE_ACTIVE_LEVEL_ALL -D DEBUG_EFM_USER=1 -D
#        HAVE_LFN=1 -D HAVE_LFN_PARENT=1 -lC
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\lst\pa-conversions_3073922530588947952.dir
#        --diag_suppress Pa050 -o
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\pa-conversions_3073922530588947952.dir
#        --debug --endian=little --cpu=Cortex-M33 --cmse --cmse -e
#        --fpu=VFPv5_sp --dlib_config "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\
#        -I C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\autogen\ -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\config\ -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\config\rail\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\Device\SiliconLabs\EFR32FG28\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\common\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\CMSIS\Core\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\CMSIS\RTOS2\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\device_init\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\dmadrv\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\common\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emlib\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\cmsis\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\kernel\include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\kernel\portable\IAR\ARM_CM33_NTZ\non_secure\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\iostream\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\config\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\config\preset\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\nvm3\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\peripheral\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_psa_driver\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\common\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\wmbus\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\sidewalk\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\efr32xg28\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\rail_util_pti\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\src\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\segger\systemview\SEGGER\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\silicon_labs\silabs_core\memory_manager\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\common\toolchain\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\system\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\ns_list\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\nanostack\nanostack-libservice\mbed-client-libservice\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\sleeptimer\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\app\wisun_rcp\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\inc\socket\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\src\
#        -Ohz --use_c++_inline) --dependencies=n
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\pa-conversions_3073922530588947952.dir\pa_curves_efr32.o.iar_deps
#    Locale            =  C
#    List file         =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\lst\pa-conversions_3073922530588947952.dir\pa_curves_efr32.lst
#    Object file       =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\pa-conversions_3073922530588947952.dir\pa_curves_efr32.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\pa_curves_efr32.c
      1          /***************************************************************************//**
      2           * @file
      3           * @brief Default PA power conversion structures with curves calibrated by the
      4           *   RAIL team.
      5           * @details This file contains the curves that convert PA power levels to dBm
      6           *   powers.
      7           *******************************************************************************
      8           * # License
      9           * <b>Copyright 2020 Silicon Laboratories Inc. www.silabs.com</b>
     10           *******************************************************************************
     11           *
     12           * SPDX-License-Identifier: Zlib
     13           *
     14           * The licensor of this software is Silicon Laboratories Inc.
     15           *
     16           * This software is provided 'as-is', without any express or implied
     17           * warranty. In no event will the authors be held liable for any damages
     18           * arising from the use of this software.
     19           *
     20           * Permission is granted to anyone to use this software for any purpose,
     21           * including commercial applications, and to alter it and redistribute it
     22           * freely, subject to the following restrictions:
     23           *
     24           * 1. The origin of this software must not be misrepresented; you must not
     25           *    claim that you wrote the original software. If you use this software
     26           *    in a product, an acknowledgment in the product documentation would be
     27           *    appreciated but is not required.
     28           * 2. Altered source versions must be plainly marked as such, and must not be
     29           *    misrepresented as being the original software.
     30           * 3. This notice may not be removed or altered from any source distribution.
     31           *
     32           ******************************************************************************/
     33          
     34          // This entire file should never be used on FCC pre-certified modules
     35          #ifndef _SILICON_LABS_MODULE
     36          
     37          #include "em_device.h"
     38          #include "pa_conversions_efr32.h"
     39          
     40          #if defined(_SILICON_LABS_32B_SERIES_1)
     41          
     42          static const RAIL_TxPowerCurveAlt_t RAIL_piecewiseDataHpVbat = {
     43            RAIL_PA_CURVES_2P4_HP_VBAT_MAX_POWER,
     44            RAIL_PA_CURVES_2P4_HP_VBAT_MIN_POWER,
     45            RAIL_PA_CURVES_2P4_HP_VBAT_CURVES
     46          };
     47          static const RAIL_TxPowerCurveAlt_t RAIL_piecewiseDataSgVbat = {
     48            RAIL_PA_CURVES_SG_VBAT_MAX_POWER,
     49            RAIL_PA_CURVES_SG_VBAT_MIN_POWER,
     50            RAIL_PA_CURVES_SG_VBAT_CURVES
     51          };
     52          static const int16_t RAIL_curves24LpVbat[RAIL_PA_CURVES_LP_VALUES] =
     53            RAIL_PA_CURVES_2P4_LP;
     54          
     55          // This macro is defined when Silicon Labs builds this into the library as WEAK
     56          // to ensure it can be overriden by customer versions of these functions. It
     57          // should *not* be defined in a customer build.
     58          #ifdef RAIL_PA_CONVERSIONS_WEAK
     59          __WEAK
     60          #endif
     61          const RAIL_TxPowerCurvesConfigAlt_t RAIL_TxPowerCurvesVbat = {
     62            .curves = {
     63              {
     64                .algorithm = RAIL_PA_ALGORITHM_PIECEWISE_LINEAR,
     65                .segments = RAIL_PA_CURVES_2P4_HP_SG_PIECEWISE_SEGMENTS,
     66                .min = RAIL_TX_POWER_LEVEL_2P4_HP_MIN,
     67                .max = RAIL_TX_POWER_LEVEL_2P4_HP_MAX,
     68                .conversion = { .powerCurve = &RAIL_piecewiseDataHpVbat },
     69              },
     70              {
     71                .algorithm = RAIL_PA_ALGORITHM_MAPPING_TABLE,
     72                .segments = 0U,
     73                .min = RAIL_TX_POWER_LEVEL_2P4_LP_MIN,
     74                .max = RAIL_TX_POWER_LEVEL_2P4_LP_MAX,
     75                .conversion = { .mappingTable = &RAIL_curves24LpVbat[0] },
     76              },
     77              {
     78                .algorithm = RAIL_PA_ALGORITHM_PIECEWISE_LINEAR,
     79                .segments = RAIL_PA_CURVES_2P4_HP_SG_PIECEWISE_SEGMENTS,
     80                .min = RAIL_TX_POWER_LEVEL_SUBGIG_MIN,
     81                .max = RAIL_TX_POWER_LEVEL_SUBGIG_HP_MAX,
     82                .conversion = { .powerCurve = &RAIL_piecewiseDataSgVbat },
     83              },
     84            },
     85          };
     86          
     87          static const RAIL_TxPowerCurveAlt_t RAIL_piecewiseDataHpDcdc = {
     88            RAIL_PA_CURVES_2P4_HP_DCDC_MAX_POWER,
     89            RAIL_PA_CURVES_2P4_HP_DCDC_MIN_POWER,
     90            RAIL_PA_CURVES_2P4_HP_DCDC_CURVES
     91          };
     92          static const RAIL_TxPowerCurveAlt_t RAIL_piecewiseDataSgDcdc = {
     93            RAIL_PA_CURVES_SG_DCDC_MAX_POWER,
     94            RAIL_PA_CURVES_SG_DCDC_MIN_POWER,
     95            RAIL_PA_CURVES_SG_DCDC_CURVES
     96          };
     97          static const int16_t RAIL_curves24LpDcdc[RAIL_PA_CURVES_LP_VALUES] =
     98            RAIL_PA_CURVES_2P4_LP;
     99          
    100          #ifdef RAIL_PA_CONVERSIONS_WEAK
    101          __WEAK
    102          #endif
    103          const RAIL_TxPowerCurvesConfigAlt_t RAIL_TxPowerCurvesDcdc = {
    104            .curves = {
    105              {
    106                .algorithm = RAIL_PA_ALGORITHM_PIECEWISE_LINEAR,
    107                .segments = RAIL_PA_CURVES_2P4_HP_SG_PIECEWISE_SEGMENTS,
    108                .min = RAIL_TX_POWER_LEVEL_2P4_HP_MIN,
    109                .max = RAIL_TX_POWER_LEVEL_2P4_HP_MAX,
    110                .conversion = { .powerCurve = &RAIL_piecewiseDataHpDcdc },
    111              },
    112              {
    113                .algorithm = RAIL_PA_ALGORITHM_MAPPING_TABLE,
    114                .segments = 0U,
    115                .min = RAIL_TX_POWER_LEVEL_2P4_LP_MIN,
    116                .max = RAIL_TX_POWER_LEVEL_2P4_LP_MAX,
    117                .conversion = { .mappingTable = &RAIL_curves24LpDcdc[0] },
    118              },
    119              {
    120                .algorithm = RAIL_PA_ALGORITHM_PIECEWISE_LINEAR,
    121                .segments = RAIL_PA_CURVES_2P4_HP_SG_PIECEWISE_SEGMENTS,
    122                .min = RAIL_TX_POWER_LEVEL_SUBGIG_MIN,
    123                .max = RAIL_TX_POWER_LEVEL_SUBGIG_HP_MAX,
    124                .conversion = { .powerCurve = &RAIL_piecewiseDataSgDcdc },
    125              },
    126            },
    127          };
    128          
    129          #elif ((_SILICON_LABS_32B_SERIES_2_CONFIG == 2) || (_SILICON_LABS_32B_SERIES_2_CONFIG == 7))
    130          
    131          static const RAIL_TxPowerCurveAlt_t RAIL_piecewiseDataHpVbat = {
    132            RAIL_PA_CURVES_2P4_HP_VBAT_MAX_POWER,
    133            RAIL_PA_CURVES_2P4_HP_VBAT_MIN_POWER,
    134            RAIL_PA_CURVES_2P4_HP_VBAT_CURVES,
    135          };
    136          static const int16_t RAIL_curves24Lp[RAIL_PA_CURVES_LP_VALUES] =
    137            RAIL_PA_CURVES_2P4_LP_VBAT_CURVES;
    138          
    139          #ifdef RAIL_PA_CONVERSIONS_WEAK
    140          __WEAK
    141          #endif
    142          const RAIL_TxPowerCurvesConfigAlt_t RAIL_TxPowerCurvesVbat = {
    143            .curves = {
    144              {
    145                .algorithm = RAIL_PA_ALGORITHM_PIECEWISE_LINEAR,
    146                .segments = RAIL_PA_CURVES_PIECEWISE_SEGMENTS,
    147                .min = RAIL_TX_POWER_LEVEL_2P4_HP_MIN,
    148                .max = RAIL_TX_POWER_LEVEL_2P4_HP_MAX,
    149                .conversion = { .powerCurve = &RAIL_piecewiseDataHpVbat },
    150              },
    151              {
    152                .algorithm = RAIL_PA_ALGORITHM_MAPPING_TABLE,
    153                .segments = 0U,
    154                .min = RAIL_TX_POWER_LEVEL_2P4_LP_MIN,
    155                .max = RAIL_TX_POWER_LEVEL_2P4_LP_MAX,
    156                .conversion = { .mappingTable = &RAIL_curves24Lp[0] },
    157              },
    158            }
    159          };
    160          
    161          #ifdef RAIL_PA_CONVERSIONS_WEAK
    162          __WEAK
    163          #endif
    164          const RAIL_TxPowerCurvesConfigAlt_t RAIL_TxPowerCurvesDcdc = {
    165            .curves = {
    166              {
    167                .algorithm = RAIL_PA_ALGORITHM_PIECEWISE_LINEAR,
    168                .segments = RAIL_PA_CURVES_PIECEWISE_SEGMENTS,
    169                .min = RAIL_TX_POWER_LEVEL_2P4_HP_MIN,
    170                .max = RAIL_TX_POWER_LEVEL_2P4_HP_MAX,
    171                .conversion = { .powerCurve = &RAIL_piecewiseDataHpVbat },
    172              },
    173              {
    174                .algorithm = RAIL_PA_ALGORITHM_MAPPING_TABLE,
    175                .segments = 0U,
    176                .min = RAIL_TX_POWER_LEVEL_2P4_LP_MIN,
    177                .max = RAIL_TX_POWER_LEVEL_2P4_LP_MAX,
    178                .conversion = { .mappingTable = &RAIL_curves24Lp[0] },
    179              },
    180            }
    181          };
    182          
    183          #elif ((_SILICON_LABS_32B_SERIES_2_CONFIG == 3) || (_SILICON_LABS_32B_SERIES_2_CONFIG == 8))
    184          

   \                                 In section .rodata, align 4
    185          RAIL_DECLARE_TX_POWER_VBAT_CURVES_ALT;
   \                     RAIL_piecewiseData2p4gHp:
   \        0x0   0x0078 0xFF38      DC16 120, -200, 255, 120
   \               0x00FF 0x007
   \              8
   \        0x8   0x0000'0012        DC32 18
   \        0xC   0x00F0 0x1635      DC16 240, 5'685
   \       0x10   0xFFF9'62D9        DC32 -433'447
   \       0x14   0x007D 0x09AD      DC16 125, 2'477
   \       0x18   0xFFFE'3429        DC32 -117'719
   \       0x1C   0x0051 0x04F6      DC16 81, 1'270
   \       0x20   0xFFFF'B0F5        DC32 -20'235
   \       0x24   0x003B 0x0313      DC16 59, 787
   \       0x28   0x0000'2734        DC32 10'036
   \       0x2C   0x002D 0x02A0      DC16 45, 672
   \       0x30   0x0000'3B64        DC32 15'204
   \       0x34   0x0022 0x015C      DC16 34, 348
   \       0x38   0x0000'5E3A        DC32 24'122
   \       0x3C   0x0022 0x015F      DC16 34, 351
   \       0x40   0x0000'5D74        DC32 23'924
   \       0x44   0x0010 0x0068      DC16 16, 104
   \       0x48   0x0000'4705        DC32 18'181

   \                                 In section .rodata, align 4
   \   static __absolute RAIL_TxPowerCurveAlt_t const RAIL_piecewiseDataHp
   \                     RAIL_piecewiseDataHp:
   \        0x0   0x00D2 0xFF6D      DC16 210, -147, 255, 210
   \               0x00FF 0x00D
   \              2
   \        0x8   0x0000'0028        DC32 40
   \        0xC   0x00F0 0x0DD3      DC16 240, 3'539
   \       0x10   0xFFF8'5ECF        DC32 -500'017
   \       0x14   0x0067 0x0474      DC16 103, 1'140
   \       0x18   0xFFFE'9B5E        DC32 -91'298
   \       0x1C   0x0037 0x0224      DC16 55, 548
   \       0x20   0xFFFF'C3CD        DC32 -15'411
   \       0x24   0x0021 0x014A      DC16 33, 330
   \       0x28   0x0000'0F6D        DC32 3'949
   \       0x2C   0x0013 0x00CA      DC16 19, 202
   \       0x30   0x0000'26A0        DC32 9'888
   \       0x34   0x000C 0x007D      DC16 12, 125
   \       0x38   0x0000'2943        DC32 10'563
   \       0x3C   0x0007 0x0046      DC16 7, 70
   \       0x40   0x0000'227E        DC32 8'830
   \       0x44   0x0004 0x002A      DC16 4, 42
   \       0x48   0x0000'1A6B        DC32 6'763

   \                                 In section .rodata, align 4
   \   static __absolute RAIL_TxPowerCurveAlt_t const RAIL_piecewiseDataMp
   \                     RAIL_piecewiseDataMp:
   \        0x0   0x0082 0xFECA      DC16 130, -310, 255, 130
   \               0x00FF 0x008
   \              2
   \        0x8   0x0000'001C        DC32 28
   \        0xC   0x00F0 0x08E0      DC16 240, 2'272
   \       0x10   0xFFFF'3C2D        DC32 -50'131
   \       0x14   0x00A6 0x06E8      DC16 166, 1'768
   \       0x18   0xFFFF'F75A        DC32 -2'214
   \       0x1C   0x0078 0x04BA      DC16 120, 1'210
   \       0x20   0x0000'8F88        DC32 36'744
   \       0x24   0x0058 0x037A      DC16 88, 890
   \       0x28   0x0000'C4BB        DC32 50'363
   \       0x2C   0x003E 0x0266      DC16 62, 614
   \       0x30   0x0000'D34D        DC32 54'093
   \       0x34   0x002E 0x01D0      DC16 46, 464
   \       0x38   0x0000'CB86        DC32 52'102
   \       0x3C   0x0020 0x014C      DC16 32, 332
   \       0x40   0x0000'B52E        DC32 46'382
   \       0x44   0x0012 0x005D      DC16 18, 93
   \       0x48   0x0000'6418        DC32 25'624

   \                                 In section .rodata, align 4
   \   static __absolute RAIL_TxPowerCurveAlt_t const RAIL_piecewiseDataLp
   \                     RAIL_piecewiseDataLp:
   \        0x0   0x0014 0xFE5C      DC16 20, -420, 255, 20
   \               0x00FF 0x001
   \              4
   \        0x8   0x0000'001C        DC32 28
   \        0xC   0x00F0 0x07D2      DC16 240, 2'002
   \       0x10   0x0003'1243        DC32 201'283
   \       0x14   0x00A3 0x06B3      DC16 163, 1'715
   \       0x18   0x0002'FD82        DC32 195'970
   \       0x1C   0x007F 0x04E2      DC16 127, 1'250
   \       0x20   0x0002'B51F        DC32 177'439
   \       0x24   0x005D 0x037B      DC16 93, 891
   \       0x28   0x0002'56C0        DC32 153'280
   \       0x2C   0x0042 0x02BC      DC16 66, 700
   \       0x30   0x0002'0DD8        DC32 134'616
   \       0x34   0x0031 0x01DE      DC16 49, 478
   \       0x38   0x0001'A369        DC32 107'369
   \       0x3C   0x0022 0x017A      DC16 34, 378
   \       0x40   0x0001'6790        DC32 92'048
   \       0x44   0x0014 0x0065      DC16 20, 101
   \       0x48   0x0000'97EF        DC32 38'895

   \                                 In section .rodata, align 4
   \   static __absolute RAIL_TxPowerCurveAlt_t const RAIL_piecewiseDataLlp
   \                     RAIL_piecewiseDataLlp:
   \        0x0   0xFFBA 0xFE3E      DC16 -70, -450, 255, -70
   \               0x00FF 0xFFB
   \              A
   \        0x8   0x0000'001E        DC32 30
   \        0xC   0x00F0 0x081F      DC16 240, 2'079
   \       0x10   0x0005'F854        DC32 391'252
   \       0x14   0x00A3 0x0697      DC16 163, 1'687
   \       0x18   0x0005'50D1        DC32 348'369
   \       0x1C   0x007A 0x04A4      DC16 122, 1'188
   \       0x20   0x0004'4C50        DC32 281'680
   \       0x24   0x0057 0x034B      DC16 87, 843
   \       0x28   0x0003'6F6D        DC32 225'133
   \       0x2C   0x003D 0x0259      DC16 61, 601
   \       0x30   0x0002'B79C        DC32 178'076
   \       0x34   0x002A 0x01B8      DC16 42, 440
   \       0x38   0x0002'290A        DC32 141'578
   \       0x3C   0x001E 0x0131      DC16 30, 305
   \       0x40   0x0001'A400        DC32 107'520
   \       0x44   0x0012 0x007E      DC16 18, 126
   \       0x48   0x0000'D625        DC32 54'821
    186          
    187          // This chip has the same curve for Vbat and DCDC
    188          #ifdef RAIL_PA_CONVERSIONS_WEAK
    189          __WEAK
    190          #endif

   \                                 In section .rodata, align 4
    191          const RAIL_TxPowerCurvesConfigAlt_t RAIL_TxPowerCurvesVbat = RAIL_DECLARE_TX_POWER_CURVES_CONFIG_ALT;
   \                     RAIL_TxPowerCurvesVbat:
   \        0x0   0x00 0x09          DC8 0, 9, 1, 240
   \              0x01 0xF0
   \        0x4   0x....'....        DC32 RAIL_piecewiseData2p4gHp
   \        0x8   0x00 0x09          DC8 0, 9, 1, 240
   \              0x01 0xF0
   \        0xC   0x....'....        DC32 RAIL_piecewiseDataHp
   \       0x10   0x00 0x09          DC8 0, 9, 1, 240
   \              0x01 0xF0
   \       0x14   0x....'....        DC32 RAIL_piecewiseDataMp
   \       0x18   0x00 0x09          DC8 0, 9, 1, 240
   \              0x01 0xF0
   \       0x1C   0x....'....        DC32 RAIL_piecewiseDataLp
   \       0x20   0x00 0x09          DC8 0, 9, 1, 240
   \              0x01 0xF0
   \       0x24   0x....'....        DC32 RAIL_piecewiseDataLlp
   \       0x28                      DS8 8
    192          
    193          #ifdef RAIL_PA_CONVERSIONS_WEAK
    194          __WEAK
    195          #endif

   \                                 In section .rodata, align 4
    196          const RAIL_TxPowerCurvesConfigAlt_t RAIL_TxPowerCurvesDcdc = RAIL_DECLARE_TX_POWER_CURVES_CONFIG_ALT;
   \                     RAIL_TxPowerCurvesDcdc:
   \        0x0   0x00 0x09          DC8 0, 9, 1, 240
   \              0x01 0xF0
   \        0x4   0x....'....        DC32 RAIL_piecewiseData2p4gHp
   \        0x8   0x00 0x09          DC8 0, 9, 1, 240
   \              0x01 0xF0
   \        0xC   0x....'....        DC32 RAIL_piecewiseDataHp
   \       0x10   0x00 0x09          DC8 0, 9, 1, 240
   \              0x01 0xF0
   \       0x14   0x....'....        DC32 RAIL_piecewiseDataMp
   \       0x18   0x00 0x09          DC8 0, 9, 1, 240
   \              0x01 0xF0
   \       0x1C   0x....'....        DC32 RAIL_piecewiseDataLp
   \       0x20   0x00 0x09          DC8 0, 9, 1, 240
   \              0x01 0xF0
   \       0x24   0x....'....        DC32 RAIL_piecewiseDataLlp
   \       0x28                      DS8 8
    197          
    198          #elif defined(_SILICON_LABS_32B_SERIES_2_CONFIG_5)
    199          
    200          static const int32_t RAIL_curvesOFDM[RAIL_PA_CURVES_OFDM_CURVES_NUM_VALUES] =
    201            RAIL_PA_CURVES_OFDM_CURVES;
    202          
    203          static const int32_t RAIL_curvesEffOFDM[RAIL_PA_CURVES_EFF_OFDM_CURVES_NUM_VALUES] =
    204            RAIL_PA_CURVES_EFF_OFDM_CURVES;
    205          
    206          static const int32_t RAIL_curvesSubgig[RAIL_PA_CURVES_SUBGIG_CURVES_NUM_VALUES] =
    207            RAIL_PA_CURVES_SUBGIG_CURVES;
    208          
    209          static const int32_t RAIL_curvesEffSubgig[RAIL_PA_CURVES_EFF_SUBGIG_CURVES_NUM_VALUES] =
    210            RAIL_PA_CURVES_EFF_SUBGIG_CURVES;
    211          
    212          // This chip has the same curve for Vbat and DCDC
    213          #ifdef RAIL_PA_CONVERSIONS_WEAK
    214          __WEAK
    215          #endif
    216          const RAIL_TxPowerCurvesConfigAlt_t RAIL_TxPowerCurvesVbat = RAIL_DECLARE_TX_POWER_CURVES_CONFIG_ALT;
    217          
    218          #ifdef RAIL_PA_CONVERSIONS_WEAK
    219          __WEAK
    220          #endif
    221          const RAIL_TxPowerCurvesConfigAlt_t RAIL_TxPowerCurvesDcdc = RAIL_DECLARE_TX_POWER_CURVES_CONFIG_ALT;
    222          
    223          #elif defined(_SILICON_LABS_32B_SERIES_2_CONFIG_1)
    224          
    225          static const RAIL_TxPowerCurveAlt_t RAIL_piecewiseDataHpVbat = {
    226            RAIL_PA_CURVES_2P4_HP_VBAT_MAX_POWER,
    227            RAIL_PA_CURVES_2P4_HP_VBAT_MIN_POWER,
    228            RAIL_PA_CURVES_2P4_HP_VBAT_CURVES,
    229          };
    230          static const RAIL_TxPowerCurveAlt_t RAIL_piecewiseDataMpVbat = {
    231            RAIL_PA_CURVES_2P4_MP_VBAT_MAX_POWER,
    232            RAIL_PA_CURVES_2P4_MP_VBAT_MIN_POWER,
    233            RAIL_PA_CURVES_2P4_MP_VBAT_CURVES,
    234          };
    235          static const RAIL_TxPowerCurveAlt_t RAIL_piecewiseDataLpVbat = {
    236            RAIL_PA_CURVES_2P4_LP_VBAT_MAX_POWER,
    237            RAIL_PA_CURVES_2P4_LP_VBAT_MIN_POWER,
    238            RAIL_PA_CURVES_2P4_LP,
    239          };
    240          
    241          #ifdef RAIL_PA_CONVERSIONS_WEAK
    242          __WEAK
    243          #endif
    244          const RAIL_TxPowerCurvesConfigAlt_t RAIL_TxPowerCurvesVbat = {
    245            .curves = {
    246              {
    247                .algorithm = RAIL_PA_ALGORITHM_PIECEWISE_LINEAR,
    248                .segments = RAIL_PA_CURVES_PIECEWISE_SEGMENTS,
    249                .min = RAIL_TX_POWER_LEVEL_2P4_HP_MIN,
    250                .max = RAIL_TX_POWER_LEVEL_2P4_HP_MAX,
    251                .conversion = { .powerCurve = &RAIL_piecewiseDataHpVbat },
    252              },
    253              {
    254                .algorithm = RAIL_PA_ALGORITHM_PIECEWISE_LINEAR,
    255                .segments = RAIL_PA_CURVES_PIECEWISE_SEGMENTS,
    256                .min = RAIL_TX_POWER_LEVEL_2P4_MP_MIN,
    257                .max = RAIL_TX_POWER_LEVEL_2P4_MP_MAX,
    258                .conversion = { .powerCurve = &RAIL_piecewiseDataMpVbat },
    259              },
    260              {
    261                .algorithm = RAIL_PA_ALGORITHM_PIECEWISE_LINEAR,
    262                .segments = RAIL_PA_CURVES_PIECEWISE_SEGMENTS,
    263                .min = RAIL_TX_POWER_LEVEL_2P4_LP_MIN,
    264                .max = RAIL_TX_POWER_LEVEL_2P4_LP_MAX,
    265                .conversion = { .powerCurve = &RAIL_piecewiseDataLpVbat },
    266              },
    267            }
    268          };
    269          
    270          #ifdef RAIL_PA_CONVERSIONS_WEAK
    271          __WEAK
    272          #endif
    273          const RAIL_TxPowerCurvesConfigAlt_t RAIL_TxPowerCurvesDcdc = {
    274            .curves = {
    275              {
    276                .algorithm = RAIL_PA_ALGORITHM_PIECEWISE_LINEAR,
    277                .segments = RAIL_PA_CURVES_PIECEWISE_SEGMENTS,
    278                .min = RAIL_TX_POWER_LEVEL_HP_MIN,
    279                .max = RAIL_TX_POWER_LEVEL_HP_MAX,
    280                .conversion = { .powerCurve = &RAIL_piecewiseDataHpVbat },
    281              },
    282              {
    283                .algorithm = RAIL_PA_ALGORITHM_PIECEWISE_LINEAR,
    284                .segments = RAIL_PA_CURVES_PIECEWISE_SEGMENTS,
    285                .min = RAIL_TX_POWER_LEVEL_MP_MIN,
    286                .max = RAIL_TX_POWER_LEVEL_MP_MAX,
    287                .conversion = { .powerCurve = &RAIL_piecewiseDataMpVbat },
    288              },
    289              {
    290                .algorithm = RAIL_PA_ALGORITHM_PIECEWISE_LINEAR,
    291                .segments = RAIL_PA_CURVES_PIECEWISE_SEGMENTS,
    292                .min = RAIL_TX_POWER_LEVEL_LP_MIN,
    293                .max = RAIL_TX_POWER_LEVEL_LP_MAX,
    294                .conversion = { .powerCurve = &RAIL_piecewiseDataLpVbat },
    295              },
    296            }
    297          };
    298          #elif defined(_SILICON_LABS_32B_SERIES_2_CONFIG_4) || defined(_SILICON_LABS_32B_SERIES_2_CONFIG_6)
    299          static const RAIL_TxPowerCurveAlt_t RAIL_piecewiseDataHpVbat = {
    300            RAIL_PA_CURVES_2P4_HP_VBAT_MAX_POWER,
    301            RAIL_PA_CURVES_2P4_HP_VBAT_MIN_POWER,
    302            RAIL_PA_CURVES_2P4_HP_VBAT_CURVES,
    303          };
    304          
    305          #if defined(RAIL_DECLARE_TX_POWER_DCDC_CURVES_ALT)
    306          static const RAIL_TxPowerCurveAlt_t RAIL_piecewiseDataHpDcdc = {
    307            RAIL_PA_CURVES_2P4_HP_DCDC_MAX_POWER,
    308            RAIL_PA_CURVES_2P4_HP_DCDC_MIN_POWER,
    309            RAIL_PA_CURVES_2P4_HP_DCDC_CURVES,
    310          };
    311          #endif
    312          
    313          static const int16_t RAIL_curves24Lp[RAIL_PA_CURVES_LP_VALUES] =
    314            RAIL_PA_CURVES_2P4_LP_VBAT_CURVES;
    315          
    316          #ifdef RAIL_PA_CONVERSIONS_WEAK
    317          __WEAK
    318          #endif
    319          const RAIL_TxPowerCurvesConfigAlt_t RAIL_TxPowerCurvesVbat = {
    320            .curves = {
    321              {
    322                .algorithm = RAIL_PA_ALGORITHM_PIECEWISE_LINEAR,
    323                .segments = RAIL_PA_CURVES_PIECEWISE_SEGMENTS,
    324                .min = RAIL_TX_POWER_LEVEL_2P4_HP_MIN,
    325                .max = RAIL_TX_POWER_LEVEL_2P4_HP_MAX,
    326                .conversion = { .powerCurve = &RAIL_piecewiseDataHpVbat },
    327              },
    328              {
    329                .algorithm = RAIL_PA_ALGORITHM_MAPPING_TABLE,
    330                .segments = 0U,
    331                .min = RAIL_TX_POWER_LEVEL_2P4_LP_MIN,
    332                .max = RAIL_TX_POWER_LEVEL_2P4_LP_MAX,
    333                .conversion = { .mappingTable = &RAIL_curves24Lp[0] },
    334              },
    335            }
    336          };
    337          
    338          #ifdef RAIL_PA_CONVERSIONS_WEAK
    339          __WEAK
    340          #endif
    341          const RAIL_TxPowerCurvesConfigAlt_t RAIL_TxPowerCurvesDcdc = {
    342            .curves = {
    343              {
    344                .algorithm = RAIL_PA_ALGORITHM_PIECEWISE_LINEAR,
    345                .segments = RAIL_PA_CURVES_PIECEWISE_SEGMENTS,
    346                .min = RAIL_TX_POWER_LEVEL_2P4_HP_MIN,
    347                .max = RAIL_TX_POWER_LEVEL_2P4_HP_MAX,
    348          #if defined(RAIL_DECLARE_TX_POWER_DCDC_CURVES_ALT)
    349                .conversion = { .powerCurve = &RAIL_piecewiseDataHpDcdc },
    350          #else
    351                .conversion = { .powerCurve = &RAIL_piecewiseDataHpVbat },
    352          #endif
    353              },
    354              {
    355                .algorithm = RAIL_PA_ALGORITHM_MAPPING_TABLE,
    356                .segments = 0U,
    357                .min = RAIL_TX_POWER_LEVEL_2P4_LP_MIN,
    358                .max = RAIL_TX_POWER_LEVEL_2P4_LP_MAX,
    359                .conversion = { .mappingTable = &RAIL_curves24Lp[0] },
    360              },
    361            }
    362          };
    363          
    364          #else
    365          #ifdef RAIL_INTERNAL_BUILD
    366          static const RAIL_TxPowerCurveAlt_t RAIL_piecewiseDataHpVbat = {
    367            RAIL_PA_CURVES_2P4_HP_VBAT_MAX_POWER,
    368            RAIL_PA_CURVES_2P4_HP_VBAT_MIN_POWER,
    369            RAIL_PA_CURVES_2P4_HP_VBAT_CURVES,
    370          };
    371          
    372          #if defined(RAIL_DECLARE_TX_POWER_DCDC_CURVES_ALT)
    373          static const RAIL_TxPowerCurveAlt_t RAIL_piecewiseDataHpDcdc = {
    374            RAIL_PA_CURVES_2P4_HP_DCDC_MAX_POWER,
    375            RAIL_PA_CURVES_2P4_HP_DCDC_MIN_POWER,
    376            RAIL_PA_CURVES_2P4_HP_DCDC_CURVES,
    377          };
    378          #endif
    379          
    380          static const int16_t RAIL_curves24Lp[RAIL_PA_CURVES_LP_VALUES] =
    381            RAIL_PA_CURVES_2P4_LP_VBAT_CURVES;
    382          
    383          #ifdef RAIL_PA_CONVERSIONS_WEAK
    384          __WEAK
    385          #endif
    386          const RAIL_TxPowerCurvesConfigAlt_t RAIL_TxPowerCurvesVbat = {
    387            .curves = {
    388              {
    389                .algorithm = RAIL_PA_ALGORITHM_PIECEWISE_LINEAR,
    390                .segments = RAIL_PA_CURVES_PIECEWISE_SEGMENTS,
    391                .min = RAIL_TX_POWER_LEVEL_2P4_HP_MIN,
    392                .max = RAIL_TX_POWER_LEVEL_2P4_HP_MAX,
    393                .conversion = { .powerCurve = &RAIL_piecewiseDataHpVbat },
    394              },
    395              {
    396                .algorithm = RAIL_PA_ALGORITHM_MAPPING_TABLE,
    397                .segments = 0U,
    398                .min = RAIL_TX_POWER_LEVEL_2P4_LP_MIN,
    399                .max = RAIL_TX_POWER_LEVEL_2P4_LP_MAX,
    400                .conversion = { .mappingTable = &RAIL_curves24Lp[0] },
    401              },
    402            }
    403          };
    404          
    405          #ifdef RAIL_PA_CONVERSIONS_WEAK
    406          __WEAK
    407          #endif
    408          const RAIL_TxPowerCurvesConfigAlt_t RAIL_TxPowerCurvesDcdc = {
    409            .curves = {
    410              {
    411                .algorithm = RAIL_PA_ALGORITHM_PIECEWISE_LINEAR,
    412                .segments = RAIL_PA_CURVES_PIECEWISE_SEGMENTS,
    413                .min = RAIL_TX_POWER_LEVEL_2P4_HP_MIN,
    414                .max = RAIL_TX_POWER_LEVEL_2P4_HP_MAX,
    415          #if defined(RAIL_DECLARE_TX_POWER_DCDC_CURVES_ALT)
    416                .conversion = { .powerCurve = &RAIL_piecewiseDataHpDcdc },
    417          #else
    418                .conversion = { .powerCurve = &RAIL_piecewiseDataHpVbat },
    419          #endif
    420              },
    421              {
    422                .algorithm = RAIL_PA_ALGORITHM_MAPPING_TABLE,
    423                .segments = 0U,
    424                .min = RAIL_TX_POWER_LEVEL_2P4_LP_MIN,
    425                .max = RAIL_TX_POWER_LEVEL_2P4_LP_MAX,
    426                .conversion = { .mappingTable = &RAIL_curves24Lp[0] },
    427              },
    428            }
    429          };
    430          #else
    431          #error "Unsupported platform!"
    432          #endif
    433          #endif
    434          
    435          #endif //_SILICON_LABS_MODULE


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      48  RAIL_TxPowerCurvesDcdc
      48  RAIL_TxPowerCurvesVbat
      76  RAIL_piecewiseData2p4gHp
      76  RAIL_piecewiseDataHp
      76  RAIL_piecewiseDataLlp
      76  RAIL_piecewiseDataLp
      76  RAIL_piecewiseDataMp

 
 476 bytes in section .rodata
 
 476 bytes of CONST memory

Errors: none
Warnings: none
