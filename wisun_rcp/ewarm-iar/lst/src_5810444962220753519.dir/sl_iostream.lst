###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         27/Nov/2024  12:17:11
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode                 =  thumb
#    Endian                   =  little
#    Source file              =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\iostream\src\sl_iostream.c
#    Command line             =
#        -f
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\src_5810444962220753519.dir\sl_iostream.o.rsp
#        (C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\iostream\src\sl_iostream.c
#        -D EFR32FG28B322F1024IM48=1 -D
#        configNUM_SDK_THREAD_LOCAL_STORAGE_POINTERS=2 -D
#        SL_COMPONENT_CATALOG_PRESENT=1 -D
#        MBEDTLS_CONFIG_FILE=<sl_mbedtls_config.h> -D
#        MBEDTLS_PSA_CRYPTO_CONFIG_FILE=<psa_crypto_config.h> -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -D
#        RTT_USE_ASM=0 -D MBED_CONF_MBED_TRACE_ENABLE=1 -D
#        MBED_CONF_NANOSTACK_CONFIGURATION=ws_router -D
#        MBED_TRACE_MAX_LEVEL=TRACE_ACTIVE_LEVEL_ALL -D DEBUG_EFM_USER=1 -D
#        HAVE_LFN=1 -D HAVE_LFN_PARENT=1 -lC
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\lst\src_5810444962220753519.dir
#        --diag_suppress Pa050 -o
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\src_5810444962220753519.dir
#        --debug --endian=little --cpu=Cortex-M33 --cmse --cmse -e
#        --fpu=VFPv5_sp --dlib_config "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\iostream\src\
#        -I C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\autogen\ -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\config\ -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\config\rail\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\Device\SiliconLabs\EFR32FG28\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\common\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\CMSIS\Core\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\CMSIS\RTOS2\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\device_init\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\dmadrv\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\common\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emlib\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\cmsis\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\kernel\include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\kernel\portable\IAR\ARM_CM33_NTZ\non_secure\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\iostream\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\config\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\config\preset\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\nvm3\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\peripheral\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_psa_driver\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\common\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\wmbus\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\sidewalk\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\efr32xg28\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\rail_util_pti\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\src\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\segger\systemview\SEGGER\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\silicon_labs\silabs_core\memory_manager\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\common\toolchain\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\system\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\ns_list\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\nanostack\nanostack-libservice\mbed-client-libservice\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\sleeptimer\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\app\wisun_rcp\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\inc\socket\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\src\
#        -Ohz --use_c++_inline) --dependencies=n
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\src_5810444962220753519.dir\sl_iostream.o.iar_deps
#    Locale                   =  C
#    List file                =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\lst\src_5810444962220753519.dir\sl_iostream.lst
#    Object file              =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\src_5810444962220753519.dir\sl_iostream.o
#    Runtime model:              
#      __CPP_Runtime          =  1
#      __SystemLibrary        =  DLib
#      __dlib_file_descriptor =  0
#      __dlib_version         =  6
#      __iar_require _Printf  =  unknown
#
###############################################################################

C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\iostream\src\sl_iostream.c
      1          /***************************************************************************//**
      2           * @file
      3           * @brief IO Stream.
      4           *******************************************************************************
      5           * # License
      6           * <b>Copyright 2019 Silicon Laboratories Inc. www.silabs.com</b>
      7           *******************************************************************************
      8           *
      9           * SPDX-License-Identifier: Zlib
     10           *
     11           * The licensor of this software is Silicon Laboratories Inc.
     12           *
     13           * This software is provided 'as-is', without any express or implied
     14           * warranty. In no event will the authors be held liable for any damages
     15           * arising from the use of this software.
     16           *
     17           * Permission is granted to anyone to use this software for any purpose,
     18           * including commercial applications, and to alter it and redistribute it
     19           * freely, subject to the following restrictions:
     20           *
     21           * 1. The origin of this software must not be misrepresented; you must not
     22           *    claim that you wrote the original software. If you use this software
     23           *    in a product, an acknowledgment in the product documentation would be
     24           *    appreciated but is not required.
     25           * 2. Altered source versions must be plainly marked as such, and must not be
     26           *    misrepresented as being the original software.
     27           * 3. This notice may not be removed or altered from any source distribution.
     28           *
     29           ******************************************************************************/
     30          
     31          #include "sl_iostream.h"
     32          #include "sl_status.h"
     33          #include "em_core.h"
     34          
     35          #if defined(SL_CATALOG_KERNEL_PRESENT)
     36          #include "cmsis_os2.h"
     37          #include "sli_cmsis_os2_ext_task_register.h"
     38          #endif
     39          
     40          #if defined(SL_CATALOG_PRINTF_PRESENT)
     41          #include "printf.h"
     42          #else
     43          #include <stdio.h>
     44          #endif
     45          
     46          /*******************************************************************************
     47           *******************************   DEFINES   ***********************************
     48           ******************************************************************************/
     49          
     50          #if defined(SL_CATALOG_KERNEL_PRESENT)
     51          #define TASK_REGISTER_ID_INVALID   0xFF
     52          #endif
     53          
     54          /*******************************************************************************
     55           ***************************  LOCAL VARIABLES   ********************************
     56           ******************************************************************************/
     57          
     58          #if defined(SL_CATALOG_KERNEL_PRESENT)

   \                                 In section .data, align 4
     59          static sli_task_register_id_t sli_task_register_id = TASK_REGISTER_ID_INVALID;
   \                     sli_task_register_id:
   \        0x0   0xFF               DC8 255
   \        0x1   0x00 0x00          DC8 0, 0, 0
   \              0x00
   \        0x4   0x0000'0000        DC32 0x0
   \        0x8   0x0000'0000        DC32 0x0
     60          static sl_iostream_t  *sli_iostream_system_default = NULL;
     61          #endif
     62          static sl_iostream_t  *sli_iostream_default = NULL;
     63          

   \                                 In section .bss, align 4
     64          sl_iostream_t sl_iostream_null = {
   \                     sl_iostream_null:
   \        0x0                      DS8 12
     65            .write   = NULL,
     66            .read    = NULL,
     67            .context = NULL
     68          };
     69          
     70          /*******************************************************************************
     71           *********************   LOCAL FUNCTION PROTOTYPES   ***************************
     72           ******************************************************************************/
     73          
     74          #if defined(SL_CATALOG_PRINTF_PRESENT)
     75          static void stream_putchar(char character,
     76                                     void *arg);
     77          #endif
     78          
     79          /*******************************************************************************
     80           **************************   GLOBAL FUNCTIONS   *******************************
     81           ******************************************************************************/
     82          
     83          /***************************************************************************//**
     84           * Registers default IO stream to be used
     85           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     86          sl_status_t sl_iostream_set_default(sl_iostream_t  *stream)
     87          {
   \                     sl_iostream_set_default: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
     88          #if defined(SL_CATALOG_KERNEL_PRESENT)
     89            sli_task_register_id_t reg_id;
     90            sl_status_t status;
     91          #endif
     92            CORE_DECLARE_IRQ_STATE;
     93          
     94            CORE_ENTER_CRITICAL();
   \        0x4   0x.... 0x....      BL       CORE_EnterCritical
   \        0x8   0x4605             MOV      R5,R0
     95          #if defined(SL_CATALOG_KERNEL_PRESENT)
     96            if (osThreadGetId() != NULL) {
   \        0xA   0x....             LDR.N    R6,??DataTable2
   \        0xC   0x....             LDR.N    R7,??DataTable2_1
   \        0xE   0x.... 0x....      BL       osThreadGetId
   \       0x12   0xB178             CBZ.N    R0,??sl_iostream_set_default_0
     97              reg_id = sli_task_register_id;
   \       0x14   0x7838             LDRB     R0,[R7, #+0]
   \       0x16   0xF88D 0x0000      STRB     R0,[SP, #+0]
     98              if (reg_id == TASK_REGISTER_ID_INVALID) {
   \       0x1A   0x28FF             CMP      R0,#+255
   \       0x1C   0xD10A             BNE.N    ??sl_iostream_set_default_0
     99                status = sli_osTaskRegisterNew(&reg_id);
    100                EFM_ASSERT(status == SL_STATUS_OK);
   \       0x1E   0x4668             MOV      R0,SP
   \       0x20   0x.... 0x....      BL       sli_osTaskRegisterNew
   \       0x24   0xB118             CBZ.N    R0,??sl_iostream_set_default_1
   \       0x26   0x2164             MOVS     R1,#+100
   \       0x28   0x4630             MOV      R0,R6
   \       0x2A   0x.... 0x....      BL       assertEFM
    101                sli_task_register_id = reg_id;
   \                     ??sl_iostream_set_default_1: (+1)
   \       0x2E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x32   0x7038             STRB     R0,[R7, #+0]
    102              }
    103            }
    104          #endif
    105            sli_iostream_default = stream;
   \                     ??sl_iostream_set_default_0: (+1)
   \       0x34   0x60BC             STR      R4,[R7, #+8]
    106            CORE_EXIT_CRITICAL();
   \       0x36   0x4628             MOV      R0,R5
   \       0x38   0x.... 0x....      BL       CORE_ExitCritical
    107          
    108          #if defined(SL_CATALOG_KERNEL_PRESENT)
    109            if (osThreadGetId() != NULL) {
   \       0x3C   0x.... 0x....      BL       osThreadGetId
   \       0x40   0xB150             CBZ.N    R0,??sl_iostream_set_default_2
    110              status = sli_osTaskRegisterSetValue(NULL, reg_id, (uint32_t)stream);
    111              EFM_ASSERT(status == SL_STATUS_OK);
   \       0x42   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \       0x46   0x4622             MOV      R2,R4
   \       0x48   0x2000             MOVS     R0,#+0
   \       0x4A   0x.... 0x....      BL       sli_osTaskRegisterSetValue
   \       0x4E   0xB118             CBZ.N    R0,??sl_iostream_set_default_2
   \       0x50   0x216F             MOVS     R1,#+111
   \       0x52   0x4630             MOV      R0,R6
   \       0x54   0x.... 0x....      BL       assertEFM
    112            }
    113          #endif
    114          
    115            return SL_STATUS_OK;
   \                     ??sl_iostream_set_default_2: (+1)
   \       0x58   0x2000             MOVS     R0,#+0
   \       0x5A   0xBDF2             POP      {R1,R4-R7,PC}
    116          }
    117          
    118          /***************************************************************************//**
    119           * Get default IO stream configured
    120           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    121          sl_iostream_t *sl_iostream_get_default(void)
    122          {
   \                     sl_iostream_get_default: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
    123          #if defined(SL_CATALOG_KERNEL_PRESENT)
    124            sl_status_t status;
    125            sli_task_register_id_t reg_id;
    126          #endif
    127            sl_iostream_t *stream = NULL;
    128            CORE_DECLARE_IRQ_STATE;
    129          
    130            CORE_ENTER_CRITICAL();
   \        0x2   0x.... 0x....      BL       CORE_EnterCritical
    131          #if defined(SL_CATALOG_KERNEL_PRESENT)
    132            reg_id = sli_task_register_id;
   \        0x6   0x....             LDR.N    R5,??DataTable2_1
   \        0x8   0x782E             LDRB     R6,[R5, #+0]
    133          #endif
    134            stream = sli_iostream_default;
   \        0xA   0x68AC             LDR      R4,[R5, #+8]
    135            CORE_EXIT_CRITICAL();
   \        0xC   0x.... 0x....      BL       CORE_ExitCritical
    136          
    137          #if defined(SL_CATALOG_KERNEL_PRESENT)
    138            if (osThreadGetId() != NULL) {
   \       0x10   0x.... 0x....      BL       osThreadGetId
   \       0x14   0x2800             CMP      R0,#+0
   \       0x16   0xBF18             IT       NE
   \       0x18   0x2EFF             CMPNE    R6,#+255
    139              if (reg_id != TASK_REGISTER_ID_INVALID) {
   \       0x1A   0xD00A             BEQ.N    ??sl_iostream_get_default_0
    140                uint32_t reg;
    141          
    142                status = sli_osTaskRegisterGetValue(NULL, sli_task_register_id, &reg);
    143                EFM_ASSERT(status == SL_STATUS_OK);
   \       0x1C   0x7829             LDRB     R1,[R5, #+0]
   \       0x1E   0x466A             MOV      R2,SP
   \       0x20   0x2000             MOVS     R0,#+0
   \       0x22   0x.... 0x....      BL       sli_osTaskRegisterGetValue
   \       0x26   0xB118             CBZ.N    R0,??sl_iostream_get_default_1
   \       0x28   0x218F             MOVS     R1,#+143
   \       0x2A   0x....             LDR.N    R0,??DataTable2
   \       0x2C   0x.... 0x....      BL       assertEFM
    144          
    145                stream = (sl_iostream_t *)reg;
   \                     ??sl_iostream_get_default_1: (+1)
   \       0x30   0x9C00             LDR      R4,[SP, #+0]
    146              }
    147            }
    148            if (stream == NULL) {
   \                     ??sl_iostream_get_default_0: (+1)
   \       0x32   0xB924             CBNZ.N   R4,??sl_iostream_get_default_2
    149              CORE_ENTER_CRITICAL();
   \       0x34   0x.... 0x....      BL       CORE_EnterCritical
    150              stream = sli_iostream_system_default;
   \       0x38   0x686C             LDR      R4,[R5, #+4]
    151              CORE_EXIT_CRITICAL();
   \       0x3A   0x.... 0x....      BL       CORE_ExitCritical
    152            }
    153          #endif
    154          
    155            return stream;
   \                     ??sl_iostream_get_default_2: (+1)
   \       0x3E   0x4620             MOV      R0,R4
   \       0x40   0xBD76             POP      {R1,R2,R4-R6,PC}
    156          }
    157          
    158          /***************************************************************************//**
    159           * Set systemwide default IO stream
    160           ******************************************************************************/
    161          #if defined(SL_CATALOG_KERNEL_PRESENT)

   \                                 In section .text, align 2, keep-with-next
    162          sl_status_t sl_iostream_set_system_default(sl_iostream_t *stream)
    163          {
   \                     sl_iostream_set_system_default: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
    164            sl_status_t status = SL_STATUS_OK;
    165            CORE_DECLARE_IRQ_STATE;
    166          
    167            CORE_ENTER_CRITICAL();
   \        0x4   0x.... 0x....      BL       CORE_EnterCritical
    168            sli_iostream_system_default = stream;
   \        0x8   0x....             LDR.N    R1,??DataTable2_1
   \        0xA   0x604C             STR      R4,[R1, #+4]
    169            CORE_EXIT_CRITICAL();
   \        0xC   0x.... 0x....      BL       CORE_ExitCritical
    170            return status;
   \       0x10   0x2000             MOVS     R0,#+0
   \       0x12   0xBD10             POP      {R4,PC}
    171          }
    172          #endif
    173          
    174          /***************************************************************************//**
    175           * Stream write implementation
    176           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    177          sl_status_t  sl_iostream_write(sl_iostream_t *stream,
    178                                         const void *buffer,
    179                                         size_t buffer_length)
    180          {
   \                     sl_iostream_write: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x460D             MOV      R5,R1
   \        0x4   0x4614             MOV      R4,R2
    181            if (stream == SL_IOSTREAM_STDOUT) {
   \        0x6   0xB908             CBNZ.N   R0,??sl_iostream_write_0
    182              stream = sl_iostream_get_default();
   \        0x8   0x.... 0x....      BL       sl_iostream_get_default
    183            }
    184          
    185            if ((stream != NULL) && (stream->write != NULL)) {
   \                     ??sl_iostream_write_0: (+1)
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xBF1C             ITT      NE
   \       0x10   0x6843             LDRNE    R3,[R0, #+4]
   \       0x12   0x2B00             CMPNE    R3,#+0
   \       0x14   0xD006             BEQ.N    ??sl_iostream_write_1
    186              return stream->write(stream->context, buffer, buffer_length);
   \       0x16   0x6800             LDR      R0,[R0, #+0]
   \       0x18   0x4622             MOV      R2,R4
   \       0x1A   0x4629             MOV      R1,R5
   \       0x1C   0xB001             ADD      SP,SP,#+4
   \       0x1E   0xE8BD 0x4030      POP      {R4,R5,LR}
   \       0x22   0x4718             BX       R3
    187            } else {
    188              return SL_STATUS_INVALID_CONFIGURATION;
   \                     ??sl_iostream_write_1: (+1)
   \       0x24   0x2023             MOVS     R0,#+35
   \       0x26   0xBD32             POP      {R1,R4,R5,PC}
    189            }
    190          }
    191          
    192          /***************************************************************************//**
    193           * Stream read implementation
    194           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    195          sl_status_t sl_iostream_read(sl_iostream_t *stream,
    196                                       void *buffer,
    197                                       size_t buffer_length,
    198                                       size_t *bytes_read)
    199          {
   \                     sl_iostream_read: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x460F             MOV      R7,R1
   \        0x4   0x4615             MOV      R5,R2
   \        0x6   0x461C             MOV      R4,R3
    200            size_t   size;
    201            size_t  *read_size = &size;
   \        0x8   0x466E             MOV      R6,SP
    202          
    203            if (stream == SL_IOSTREAM_STDIN) {
   \        0xA   0xB908             CBNZ.N   R0,??sl_iostream_read_0
    204              stream = sl_iostream_get_default();
   \        0xC   0x.... 0x....      BL       sl_iostream_get_default
    205            }
    206          
    207            if (bytes_read != NULL) {
   \                     ??sl_iostream_read_0: (+1)
   \       0x10   0xB104             CBZ.N    R4,??sl_iostream_read_1
    208              read_size = bytes_read;
   \       0x12   0x4626             MOV      R6,R4
    209            }
    210          
    211            if ((stream != NULL) && (stream->read != NULL)) {
   \                     ??sl_iostream_read_1: (+1)
   \       0x14   0x2800             CMP      R0,#+0
   \       0x16   0xBF1C             ITT      NE
   \       0x18   0x6884             LDRNE    R4,[R0, #+8]
   \       0x1A   0x2C00             CMPNE    R4,#+0
   \       0x1C   0xD005             BEQ.N    ??sl_iostream_read_2
    212              return stream->read(stream->context, buffer, buffer_length, read_size);
   \       0x1E   0x6800             LDR      R0,[R0, #+0]
   \       0x20   0x4633             MOV      R3,R6
   \       0x22   0x462A             MOV      R2,R5
   \       0x24   0x4639             MOV      R1,R7
   \       0x26   0x47A0             BLX      R4
   \       0x28   0xBDF2             POP      {R1,R4-R7,PC}
    213            } else {
    214              return SL_STATUS_INVALID_CONFIGURATION;
   \                     ??sl_iostream_read_2: (+1)
   \       0x2A   0x2023             MOVS     R0,#+35
   \       0x2C   0xBDF2             POP      {R1,R4-R7,PC}
    215            }
    216          }
    217          
    218          /***************************************************************************//**
    219           * Stream putchar implementation
    220           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    221          sl_status_t sl_iostream_putchar(sl_iostream_t *stream,
    222                                          char c)
    223          {
   \                     sl_iostream_putchar: (+1)
   \        0x0   0xB502             PUSH     {R1,LR}
    224            return sl_iostream_write(stream, &c, 1);
   \        0x2   0x2201             MOVS     R2,#+1
   \        0x4   0x4669             MOV      R1,SP
   \        0x6   0x.... 0x....      BL       sl_iostream_write
   \        0xA   0xBD02             POP      {R1,PC}
    225          }
    226          
    227          /***************************************************************************//**
    228           * Stream getchar implementation
    229           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    230          sl_status_t sl_iostream_getchar(sl_iostream_t *stream,
    231                                          char *c)
    232          {
    233            return sl_iostream_read(stream, c, 1, NULL);
   \                     sl_iostream_getchar: (+1)
   \        0x0   0x2300             MOVS     R3,#+0
   \        0x2   0x2201             MOVS     R2,#+1
   \        0x4   0x....             B.N      sl_iostream_read
    234          }
    235          
    236          /***************************************************************************//**
    237           * Stream vprintf implementation
    238           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    239          sl_status_t sl_iostream_vprintf(sl_iostream_t *stream,
    240                                          const char *format,
    241                                          va_list argp)
    242          {
   \                     sl_iostream_vprintf: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0x4604             MOV      R4,R0
   \        0x6   0x4688             MOV      R8,R1
   \        0x8   0x4615             MOV      R5,R2
    243          #if !defined(SL_CATALOG_PRINTF_PRESENT)
    244            sl_iostream_t *default_stream;
    245          #endif
    246            sl_iostream_t *output_stream = stream;
    247            sl_status_t status = SL_STATUS_OK;
   \        0xA   0x2600             MOVS     R6,#+0
    248            int ret;
    249          
    250          #if defined(SL_CATALOG_PRINTF_PRESENT)
    251            if (output_stream == SL_IOSTREAM_STDOUT) {
    252              output_stream = sl_iostream_get_default();
    253            }
    254            ret = vfctprintf(stream_putchar, output_stream, format, argp);
    255          #else
    256            if (output_stream == SL_IOSTREAM_STDOUT) {
   \        0xC   0xB924             CBNZ.N   R4,??sl_iostream_vprintf_0
    257              default_stream = sl_iostream_get_default();
   \        0xE   0x.... 0x....      BL       sl_iostream_get_default
   \       0x12   0x4607             MOV      R7,R0
    258              output_stream = default_stream;
   \       0x14   0x463C             MOV      R4,R7
   \       0x16   0xE007             B.N      ??sl_iostream_vprintf_1
    259            } else {
    260              default_stream = sl_iostream_get_default();
   \                     ??sl_iostream_vprintf_0: (+1)
   \       0x18   0x.... 0x....      BL       sl_iostream_get_default
   \       0x1C   0x4607             MOV      R7,R0
    261              if (default_stream != output_stream) {
   \       0x1E   0x42A7             CMP      R7,R4
   \       0x20   0xBF1C             ITT      NE
    262                sl_iostream_set_default(output_stream);
   \       0x22   0x4620             MOVNE    R0,R4
   \       0x24   0x.... 0x....      BLNE     sl_iostream_set_default
    263              }
    264            }
    265          
    266            ret = vprintf(format, argp);
   \                     ??sl_iostream_vprintf_1: (+1)
   \       0x28   0x4629             MOV      R1,R5
   \       0x2A   0x4640             MOV      R0,R8
   \       0x2C   0x.... 0x....      BL       vprintf
   \       0x30   0x4605             MOV      R5,R0
    267            if (default_stream != output_stream) {
   \       0x32   0x42A7             CMP      R7,R4
   \       0x34   0xBF1C             ITT      NE
    268              sl_iostream_set_default(default_stream);
   \       0x36   0x4638             MOVNE    R0,R7
   \       0x38   0x.... 0x....      BLNE     sl_iostream_set_default
    269            }
    270          #endif
    271            if (ret <= 0) {
   \       0x3C   0x2D01             CMP      R5,#+1
   \       0x3E   0xBFB8             IT       LT
   \       0x40   0x2637             MOVLT    R6,#+55
    272              status = SL_STATUS_OBJECT_WRITE;
    273            }
    274          
    275            return status;
   \       0x42   0x4630             MOV      R0,R6
   \       0x44   0xE8BD 0x81F0      POP      {R4-R8,PC}
    276          }
    277          
    278          /***************************************************************************//**
    279           * Stream printf implementation
    280           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    281          sl_status_t sl_iostream_printf(sl_iostream_t *stream,
    282                                         const char *format,
    283                                         ...)
    284          {
   \                     sl_iostream_printf: (+1)
   \        0x0   0xB40C             PUSH     {R2,R3}
   \        0x2   0xB580             PUSH     {R7,LR}
    285            sl_status_t status;
    286            va_list argp;
    287            va_start(argp, format);
   \        0x4   0xAA02             ADD      R2,SP,#+8
    288            status = sl_iostream_vprintf(stream, format, argp);
    289            va_end(argp);
    290            return status;
   \        0x6   0x.... 0x....      BL       sl_iostream_vprintf
   \        0xA   0xBC02             POP      {R1}
   \        0xC   0xF85D 0xFB0C      LDR      PC,[SP], #+12
    291          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \        0x0   0x....'....        DC32     sli_task_register_id

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x43 0x3A          DC8 0x43, 0x3A, 0x5C, 0x55, 0x73, 0x65, 0x72, 0x73
   \              0x5C 0x55    
   \              0x73 0x65    
   \              0x72 0x73
   \        0x8   0x5C 0x44          DC8 0x5C, 0x44, 0x45, 0x4C, 0x4C, 0x5C, 0x53, 0x69
   \              0x45 0x4C    
   \              0x4C 0x5C    
   \              0x53 0x69
   \       0x10   0x6D 0x70          DC8 0x6D, 0x70, 0x6C, 0x69, 0x63, 0x69, 0x74, 0x79
   \              0x6C 0x69    
   \              0x63 0x69    
   \              0x74 0x79
   \       0x18   0x53 0x74          DC8 0x53, 0x74, 0x75, 0x64, 0x69, 0x6F, 0x5C, 0x76
   \              0x75 0x64    
   \              0x69 0x6F    
   \              0x5C 0x76
   \       0x20   0x35 0x5F          DC8 0x35, 0x5F, 0x77, 0x6F, 0x72, 0x6B, 0x73, 0x70
   \              0x77 0x6F    
   \              0x72 0x6B    
   \              0x73 0x70
   \       0x28   0x61 0x63          DC8 0x61, 0x63, 0x65, 0x5C, 0x77, 0x69, 0x73, 0x75
   \              0x65 0x5C    
   \              0x77 0x69    
   \              0x73 0x75
   \       0x30   0x6E 0x5F          DC8 0x6E, 0x5F, 0x72, 0x63, 0x70, 0x5F, 0x37, 0x5C
   \              0x72 0x63    
   \              0x70 0x5F    
   \              0x37 0x5C
   \       0x38   0x67 0x65          DC8 0x67, 0x65, 0x63, 0x6B, 0x6F, 0x5F, 0x73, 0x64
   \              0x63 0x6B    
   \              0x6F 0x5F    
   \              0x73 0x64
   \       0x40   0x6B 0x5F          DC8 0x6B, 0x5F, 0x34, 0x2E, 0x34, 0x2E, 0x33, 0x5C
   \              0x34 0x2E    
   \              0x34 0x2E    
   \              0x33 0x5C
   \       0x48   0x70 0x6C          DC8 0x70, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72, 0x6D
   \              0x61 0x74    
   \              0x66 0x6F    
   \              0x72 0x6D
   \       0x50   0x5C 0x73          DC8 0x5C, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65
   \              0x65 0x72    
   \              0x76 0x69    
   \              0x63 0x65
   \       0x58   0x5C 0x69          DC8 0x5C, 0x69, 0x6F, 0x73, 0x74, 0x72, 0x65, 0x61
   \              0x6F 0x73    
   \              0x74 0x72    
   \              0x65 0x61
   \       0x60   0x6D 0x5C          DC8 0x6D, 0x5C, 0x73, 0x72, 0x63, 0x5C, 0x73, 0x6C
   \              0x73 0x72    
   \              0x63 0x5C    
   \              0x73 0x6C
   \       0x68   0x5F 0x69          DC8 0x5F, 0x69, 0x6F, 0x73, 0x74, 0x72, 0x65, 0x61
   \              0x6F 0x73    
   \              0x74 0x72    
   \              0x65 0x61
   \       0x70   0x6D 0x2E          DC8 0x6D, 0x2E, 0x63, 0
   \              0x63 0x00
    292          
    293          /***************************************************************************//**
    294           * putchar implementation for sl_iostream_printf; called by fnctprintf()
    295           ******************************************************************************/
    296          #if defined(SL_CATALOG_PRINTF_PRESENT)
    297          static void stream_putchar(char character,
    298                                     void *arg)
    299          {
    300            sl_iostream_putchar((sl_iostream_t *)arg, character);
    301          }
    302          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   sl_iostream_get_default
        24   -> CORE_EnterCritical
        24   -> CORE_ExitCritical
        24   -> assertEFM
        24   -> osThreadGetId
        24   -> sli_osTaskRegisterGetValue
       0   sl_iostream_getchar
         0   -> sl_iostream_read
      16   sl_iostream_printf
        16   -> sl_iostream_vprintf
       8   sl_iostream_putchar
         8   -> sl_iostream_write
      24   sl_iostream_read
        24   -- Indirect call
        24   -> sl_iostream_get_default
      24   sl_iostream_set_default
        24   -> CORE_EnterCritical
        24   -> CORE_ExitCritical
        24   -> assertEFM
        24   -> osThreadGetId
        24   -> sli_osTaskRegisterNew
        24   -> sli_osTaskRegisterSetValue
       8   sl_iostream_set_system_default
         8   -> CORE_EnterCritical
         8   -> CORE_ExitCritical
      24   sl_iostream_vprintf
        24   -> sl_iostream_get_default
        24   -> sl_iostream_set_default
        24   -> vprintf
      16   sl_iostream_write
         0   -- Indirect call
        16   -> sl_iostream_get_default


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
     116  ?_0
      66  sl_iostream_get_default
       6  sl_iostream_getchar
      12  sl_iostream_null
      16  sl_iostream_printf
      12  sl_iostream_putchar
      46  sl_iostream_read
      92  sl_iostream_set_default
      20  sl_iostream_set_system_default
      72  sl_iostream_vprintf
      40  sl_iostream_write
      12  sli_task_register_id
          sli_iostream_system_default
          sli_iostream_default

 
  12 bytes in section .bss
  12 bytes in section .data
 116 bytes in section .rodata
 378 bytes in section .text
 
 378 bytes of CODE  memory
 116 bytes of CONST memory
  24 bytes of DATA  memory

Errors: none
Warnings: none
