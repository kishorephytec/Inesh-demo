###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         27/Nov/2024  12:17:14
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\app\wisun_rcp\sl_wsrcp_uart.c
#    Command line                 =
#        -f
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\wisun_rcp_12033107185724647658.dir\sl_wsrcp_uart.o.rsp
#        (C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\app\wisun_rcp\sl_wsrcp_uart.c
#        -D EFR32FG28B322F1024IM48=1 -D
#        configNUM_SDK_THREAD_LOCAL_STORAGE_POINTERS=2 -D
#        SL_COMPONENT_CATALOG_PRESENT=1 -D
#        MBEDTLS_CONFIG_FILE=<sl_mbedtls_config.h> -D
#        MBEDTLS_PSA_CRYPTO_CONFIG_FILE=<psa_crypto_config.h> -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -D
#        RTT_USE_ASM=0 -D MBED_CONF_MBED_TRACE_ENABLE=1 -D
#        MBED_CONF_NANOSTACK_CONFIGURATION=ws_router -D
#        MBED_TRACE_MAX_LEVEL=TRACE_ACTIVE_LEVEL_ALL -D DEBUG_EFM_USER=1 -D
#        HAVE_LFN=1 -D HAVE_LFN_PARENT=1 -lC
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\lst\wisun_rcp_12033107185724647658.dir
#        --diag_suppress Pa050 -o
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\wisun_rcp_12033107185724647658.dir
#        --debug --endian=little --cpu=Cortex-M33 --cmse --cmse -e
#        --fpu=VFPv5_sp --dlib_config "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\app\wisun_rcp\
#        -I C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\autogen\ -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\config\ -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\config\rail\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\Device\SiliconLabs\EFR32FG28\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\common\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\CMSIS\Core\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\CMSIS\RTOS2\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\device_init\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\dmadrv\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\common\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emlib\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\cmsis\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\kernel\include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\kernel\portable\IAR\ARM_CM33_NTZ\non_secure\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\iostream\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\config\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\config\preset\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\nvm3\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\peripheral\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_psa_driver\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\common\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\wmbus\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\sidewalk\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\efr32xg28\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\rail_util_pti\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\src\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\segger\systemview\SEGGER\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\silicon_labs\silabs_core\memory_manager\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\common\toolchain\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\system\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\ns_list\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\nanostack\nanostack-libservice\mbed-client-libservice\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\sleeptimer\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\app\wisun_rcp\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\inc\socket\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\src\
#        -Ohz --use_c++_inline) --dependencies=n
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\wisun_rcp_12033107185724647658.dir\sl_wsrcp_uart.o.iar_deps
#    Locale                       =  C
#    List file                    =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\lst\wisun_rcp_12033107185724647658.dir\sl_wsrcp_uart.lst
#    Object file                  =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\wisun_rcp_12033107185724647658.dir\sl_wsrcp_uart.o
#    Runtime model:                  
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_file_descriptor     =  0
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#      __iar_require _Printf         
#
###############################################################################

C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\app\wisun_rcp\sl_wsrcp_uart.c
      1          /***************************************************************************//**
      2           * Copyright 2021 Silicon Laboratories Inc. www.silabs.com
      3           *******************************************************************************
      4           *
      5           * The licensor of this software is Silicon Laboratories Inc. Your use of this
      6           * software is governed by the terms of Silicon Labs Master Software License
      7           * Agreement (MSLA) available here[1]. This software is distributed to you in
      8           * Source Code format and is governed by the sections of the MSLA applicable to
      9           * Source Code.
     10           *
     11           * [1] www.silabs.com/about-us/legal/master-software-license-agreement
     12           *
     13           ******************************************************************************/
     14          
     15          #include <string.h>
     16          #include <em_cmu.h>
     17          #include <em_gpio.h>
     18          #include <common/bits.h>

   \                                 In section .text, align 2, keep-with-next
   \   static __vfp int __ctz(unsigned int)
   \                     __ctz: (+1)
   \        0x0   0x4601             MOV      R1,R0
   \        0x2   0x2210             MOVS     R2,#+16
   \        0x4   0x2000             MOVS     R0,#+0
   \        0x6   0xB909             CBNZ.N   R1,??__ctz_0
   \        0x8   0x2020             MOVS     R0,#+32
   \        0xA   0x4770             BX       LR
   \                     ??__ctz_0: (+1)
   \        0xC   0x2301             MOVS     R3,#+1
   \        0xE   0x4093             LSLS     R3,R3,R2
   \       0x10   0x1E5B             SUBS     R3,R3,#+1
   \       0x12   0x4219             TST      R1,R3
   \       0x14   0xBF04             ITT      EQ
   \       0x16   0x1810             ADDEQ    R0,R2,R0
   \       0x18   0x40D1             LSREQ    R1,R1,R2
   \       0x1A   0x0852             LSRS     R2,R2,#+1
   \       0x1C   0xD1F6             BNE.N    ??__ctz_0
   \       0x1E   0x4770             BX       LR
     19          #include <common/endian.h>
     20          
     21          #include "sl_wsrcp.h"
     22          #include "sl_wsrcp_crc.h"
     23          #include "sl_wsrcp_log.h"
     24          #include "sl_wsrcp_utils.h"
     25          #include "sl_wsrcp_uart.h"
     26          #include "sl_wsrcp_uart_config.h"
     27          #include "sl_wsrcp_mac.h"
     28          
     29          #define MASK_PAYLOAD_LEN 0x07ff
     30          

   \                                 In section .text, align 2
     31          __WEAK void uart_rx_ready(struct sl_wsrcp_uart *uart_ctxt)
     32          {
     33              (void)uart_ctxt;
     34          }
   \                     uart_rx_ready: (+1)
   \        0x0   0x4770             BX       LR
     35          

   \                                 In section .text, align 2
     36          __WEAK void uart_crc_error(struct sl_wsrcp_uart *uart_ctxt, uint8_t irq_overflow_cnt)
     37          {
     38              (void)uart_ctxt;
     39              (void)irq_overflow_cnt;
     40          }
   \                     uart_crc_error: (+1)
   \        0x0   0x4770             BX       LR
     41          

   \                                 In section .text, align 4, keep-with-next
     42          static bool uart_handle_rx_dma_complete(unsigned int chan, unsigned int seq_num, void *user_param)
     43          {
   \                     uart_handle_rx_dma_complete: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4614             MOV      R4,R2
     44              CORE_DECLARE_IRQ_STATE;
     45              struct sl_wsrcp_uart *uart_ctxt = user_param;
     46              int ret;
     47              unsigned int i;
     48          
     49              (void)chan;
     50              (void)seq_num;
     51          
     52              // Protect descr_cnt_rx and rx_ring against uart_handle_rx_dma_timeout()
     53              CORE_ENTER_ATOMIC();
   \        0x4   0x.... 0x....      BL       CORE_EnterAtomic
   \        0x8   0x4605             MOV      R5,R0
     54              for (i = 0; i < sizeof(uart_ctxt->buf_rx[0]); i++) {
   \        0xA   0x2600             MOVS     R6,#+0
     55                  ret = ring_push(&uart_ctxt->rx_ring, uart_ctxt->buf_rx[uart_ctxt->descr_cnt_rx][i]);
     56                  BUG_ON(ret, "buffer overflow");
   \                     ??uart_handle_rx_dma_complete_0: (+1)
   \        0xC   0xF8D4 0x1830      LDR      R1,[R4, #+2096]
   \       0x10   0xEB04 0x10C1      ADD      R0,R4,R1, LSL #+7
   \       0x14   0x4430             ADD      R0,R0,R6
   \       0x16   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_1: (+1)
   \       0x1A   0xB918             CBNZ.N   R0,??uart_handle_rx_dma_complete_1
   \       0x1C   0x1C76             ADDS     R6,R6,#+1
   \       0x1E   0x2E80             CMP      R6,#+128
   \       0x20   0xD3F4             BCC.N    ??uart_handle_rx_dma_complete_0
   \       0x22   0xE01C             B.N      ??uart_handle_rx_dma_complete_2
   \                     ??uart_handle_rx_dma_complete_1: (+1)
   \       0x24   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_6: (+1)
   \       0x28   0x.... 0x....      ADR.W    R5,`uart_handle_rx_dma_complete::__func__`
   \       0x2C   0xB120             CBZ.N    R0,??uart_handle_rx_dma_complete_3
   \       0x2E   0x2238             MOVS     R2,#+56
   \       0x30   0x4629             MOV      R1,R5
   \       0x32   0x.... 0x....      LDR.W    R0,??DataTable28
   \       0x36   0xE003             B.N      ??uart_handle_rx_dma_complete_4
   \                     ??uart_handle_rx_dma_complete_3: (+1)
   \       0x38   0x2238             MOVS     R2,#+56
   \       0x3A   0x4629             MOV      R1,R5
   \       0x3C   0x.... 0x....      ADR.W    R0,?_5
   \                     ??uart_handle_rx_dma_complete_4: (+1)
   \       0x40   0x.... 0x....      BL       printf
   \       0x44   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_10: (+1)
   \       0x48   0xB938             CBNZ.N   R0,??CrossCallReturnLabel_3
   \       0x4A   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_14: (+1)
   \       0x4E   0xB124             CBZ.N    R4,??CrossCallReturnLabel_3
   \       0x50   0x2001             MOVS     R0,#+1
   \       0x52   0x7008             STRB     R0,[R1, #+0]
   \       0x54   0x2338             MOVS     R3,#+56
   \       0x56   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_3: (+1)
   \       0x5A   0xBE00             BKPT     #0x0
   \                     ??uart_handle_rx_dma_complete_5: (+1)
   \       0x5C   0xE7FE             B.N      ??uart_handle_rx_dma_complete_5
     57              }
     58              uart_ctxt->descr_cnt_rx += 1;
   \                     ??uart_handle_rx_dma_complete_2: (+1)
   \       0x5E   0xF8D4 0x0830      LDR      R0,[R4, #+2096]
   \       0x62   0x1C40             ADDS     R0,R0,#+1
   \       0x64   0xF8C4 0x0830      STR      R0,[R4, #+2096]
     59              uart_ctxt->descr_cnt_rx %= ARRAY_SIZE(uart_ctxt->buf_rx);
   \       0x68   0xF000 0x000F      AND      R0,R0,#0xF
   \       0x6C   0xF8C4 0x0830      STR      R0,[R4, #+2096]
     60              uart_rx_ready(uart_ctxt);
   \       0x70   0x4620             MOV      R0,R4
   \       0x72   0x.... 0x....      BL       uart_rx_ready
     61              CORE_EXIT_ATOMIC();
   \       0x76   0x4628             MOV      R0,R5
   \       0x78   0x.... 0x....      BL       CORE_ExitAtomic
     62              return true;
   \       0x7C   0x2001             MOVS     R0,#+1
   \       0x7E   0xBD70             POP      {R4-R6,PC}
     63          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \        0x0   0x462A             MOV      R2,R5
   \        0x2   0x.... 0x....      ADR.W    R1,?_6
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0x4720             BX       R4

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0xF890 0x1934      LDRB     R1,[R0, #+2356]
   \        0x4   0xF504 0x508A      ADD      R0,R4,#+4416
   \        0x8   0x.... 0x....      B.W      ring_push

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \        0x0   0x.... 0x....      LDR.W    R1,??DataTable28_2
   \        0x4   0x7808             LDRB     R0,[R1, #+0]
   \        0x6   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5: (+1)
   \        0x0   0x....             LDR.N    R2,??DataTable28_5
   \        0x2   0x6814             LDR      R4,[R2, #+0]
   \        0x4   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable28_6
   \        0x2   0x7808             LDRB     R0,[R1, #+0]
   \        0x4   0x4770             BX       LR
     64          

   \                                 In section .text, align 2, keep-with-next
     65          static bool uart_handle_tx_dma_complete(unsigned int chan, unsigned int seq_num, void *user_param)
     66          {
   \                     uart_handle_tx_dma_complete: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     67              struct sl_wsrcp_uart *uart_ctxt = user_param;
     68          
     69              (void)chan;
     70              (void)seq_num;
     71          
     72              osSemaphoreRelease(uart_ctxt->tx_dma_lock);
   \        0x2   0xF241 0x1138      MOVW     R1,#+4408
   \        0x6   0x5850             LDR      R0,[R2, R1]
   \        0x8   0x.... 0x....      BL       osSemaphoreRelease
     73              return true;
   \        0xC   0x2001             MOVS     R0,#+1
   \        0xE   0xBD02             POP      {R1,PC}
     74          }
     75          

   \                                 In section .text, align 4, keep-with-next
     76          void uart_handle_rx_dma_timeout(struct sl_wsrcp_uart *uart_ctxt)
     77          {
   \                     uart_handle_rx_dma_timeout: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0xB086             SUB      SP,SP,#+24
   \        0x4   0x4604             MOV      R4,R0
     78              CORE_DECLARE_IRQ_STATE;
     79              LDMA_TransferCfg_t ldma_cfg = LDMA_TRANSFER_CFG_PERIPHERAL(UART_LDMA_SIGNAL_RX);
   \        0x6   0xA802             ADD      R0,SP,#+8
   \        0x8   0x.... 0x....      ADR.W    R1,?_10
   \        0xC   0x2210             MOVS     R2,#+16
   \        0xE   0x.... 0x....      BL       __aeabi_memcpy4
     80              int remaining, descr_cnt_rx, ret;
     81              size_t i;
     82          
     83              // Protect descr_cnt_rx and rx_ring against uart_handle_rx_dma_complete()
     84              CORE_ENTER_ATOMIC();
   \       0x12   0x.... 0x....      BL       CORE_EnterAtomic
   \       0x16   0x4605             MOV      R5,R0
     85              // Begin of realtime constrained section
     86              // (with USART, we need to execute that in less than 5µs for a 2Mbps UART link)
     87              // (with EUSART, thanks to it 16bytes depth fifo , we need to execute the
     88              // code below in less than 40µs for a 4Mbps UART link)
     89              DMADRV_StopTransfer(uart_ctxt->dma_chan_rx);
   \       0x18   0xF604 0x072C      ADDW     R7,R4,#+2092
   \       0x1C   0x6838             LDR      R0,[R7, #+0]
   \       0x1E   0x.... 0x....      BL       DMADRV_StopTransfer
     90              DMADRV_TransferRemainingCount(uart_ctxt->dma_chan_rx, &remaining);
   \       0x22   0x6838             LDR      R0,[R7, #+0]
   \       0x24   0xA901             ADD      R1,SP,#+4
   \       0x26   0x.... 0x....      BL       DMADRV_TransferRemainingCount
     91              descr_cnt_rx = uart_ctxt->descr_cnt_rx;
   \       0x2A   0x687E             LDR      R6,[R7, #+4]
     92              uart_ctxt->descr_cnt_rx += 1;
     93              uart_ctxt->descr_cnt_rx %= ARRAY_SIZE(uart_ctxt->buf_rx);
     94              DMADRV_LdmaStartTransfer(uart_ctxt->dma_chan_rx, &ldma_cfg,
     95                                       &(uart_ctxt->descr_rx[uart_ctxt->descr_cnt_rx]),
     96                                       uart_handle_rx_dma_complete, uart_ctxt);
   \       0x2C   0x.... 0x....      LDR.W    R3,??DataTable28_1
   \       0x30   0xA902             ADD      R1,SP,#+8
   \       0x32   0x1C70             ADDS     R0,R6,#+1
   \       0x34   0x6078             STR      R0,[R7, #+4]
   \       0x36   0xF000 0x000F      AND      R0,R0,#0xF
   \       0x3A   0x6078             STR      R0,[R7, #+4]
   \       0x3C   0xEB04 0x1000      ADD      R0,R4,R0, LSL #+4
   \       0x40   0x9400             STR      R4,[SP, #+0]
   \       0x42   0xF600 0x0234      ADDW     R2,R0,#+2100
   \       0x46   0x6838             LDR      R0,[R7, #+0]
   \       0x48   0x2700             MOVS     R7,#+0
   \       0x4A   0x.... 0x....      BL       DMADRV_LdmaStartTransfer
     97              // End of realtime constrained section
     98          
     99              for (i = 0; i < sizeof(uart_ctxt->buf_rx[0]) - remaining; i++) {
   \       0x4E   0xE000             B.N      ??uart_handle_rx_dma_timeout_0
    100                  ret = ring_push(&uart_ctxt->rx_ring, uart_ctxt->buf_rx[descr_cnt_rx][i]);
    101                  BUG_ON(ret, "buffer overflow");
   \                     ??uart_handle_rx_dma_timeout_1: (+1)
   \       0x50   0x1C7F             ADDS     R7,R7,#+1
   \                     ??uart_handle_rx_dma_timeout_0: (+1)
   \       0x52   0x9901             LDR      R1,[SP, #+4]
   \       0x54   0xF1C1 0x0180      RSB      R1,R1,#+128
   \       0x58   0x428F             CMP      R7,R1
   \       0x5A   0xD223             BCS.N    ??uart_handle_rx_dma_timeout_2
   \       0x5C   0xEB04 0x10C6      ADD      R0,R4,R6, LSL #+7
   \       0x60   0x4438             ADD      R0,R0,R7
   \       0x62   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_0: (+1)
   \       0x66   0x2800             CMP      R0,#+0
   \       0x68   0xD0F2             BEQ.N    ??uart_handle_rx_dma_timeout_1
   \       0x6A   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_7: (+1)
   \       0x6E   0x.... 0x....      ADR.W    R5,`uart_handle_rx_dma_timeout::__func__`
   \       0x72   0xB120             CBZ.N    R0,??uart_handle_rx_dma_timeout_3
   \       0x74   0x2265             MOVS     R2,#+101
   \       0x76   0x4629             MOV      R1,R5
   \       0x78   0x.... 0x....      LDR.W    R0,??DataTable28
   \       0x7C   0xE003             B.N      ??uart_handle_rx_dma_timeout_4
   \                     ??uart_handle_rx_dma_timeout_3: (+1)
   \       0x7E   0x2265             MOVS     R2,#+101
   \       0x80   0x4629             MOV      R1,R5
   \       0x82   0x.... 0x....      ADR.W    R0,?_5
   \                     ??uart_handle_rx_dma_timeout_4: (+1)
   \       0x86   0x.... 0x....      BL       printf
   \       0x8A   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_11: (+1)
   \       0x8E   0xB938             CBNZ.N   R0,??CrossCallReturnLabel_2
   \       0x90   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_15: (+1)
   \       0x94   0xB124             CBZ.N    R4,??CrossCallReturnLabel_2
   \       0x96   0x2001             MOVS     R0,#+1
   \       0x98   0x7008             STRB     R0,[R1, #+0]
   \       0x9A   0x2365             MOVS     R3,#+101
   \       0x9C   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_2: (+1)
   \       0xA0   0xBE00             BKPT     #0x0
   \                     ??uart_handle_rx_dma_timeout_5: (+1)
   \       0xA2   0xE7FE             B.N      ??uart_handle_rx_dma_timeout_5
    102              }
    103              uart_rx_ready(uart_ctxt);
   \                     ??uart_handle_rx_dma_timeout_2: (+1)
   \       0xA4   0x4620             MOV      R0,R4
   \       0xA6   0x.... 0x....      BL       uart_rx_ready
    104              CORE_EXIT_ATOMIC();
   \       0xAA   0x4628             MOV      R0,R5
   \       0xAC   0x.... 0x....      BL       CORE_ExitAtomic
    105          }
   \       0xB0   0xB007             ADD      SP,SP,#+28
   \       0xB2   0xBDF0             POP      {R4-R7,PC}
    106          

   \                                 In section .text, align 2, keep-with-next
    107          void uart_handle_rx_overflow(struct sl_wsrcp_uart *uart_ctxt)
    108          {
   \                     uart_handle_rx_overflow: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
    109              WARN("IRQ overflow");
   \        0x4   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_8: (+1)
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xBF14             ITE      NE
   \        0xC   0x.... 0x....      ADRNE.W  R0,?_11
   \       0x10   0x.... 0x....      ADREQ.W  R0,?_12
   \       0x14   0x.... 0x....      BL       printf
    110              uart_ctxt->irq_overflow_cnt++;
   \       0x18   0xF241 0x113C      MOVW     R1,#+4412
   \       0x1C   0x5860             LDR      R0,[R4, R1]
   \       0x1E   0x1C40             ADDS     R0,R0,#+1
   \       0x20   0x5060             STR      R0,[R4, R1]
    111          }
   \       0x22   0xBD10             POP      {R4,PC}
    112          

   \                                 In section .text, align 4, keep-with-next
    113          int uart_tx(struct sl_wsrcp_uart *uart_ctxt, const void *buf, int buf_len)
    114          {
   \                     uart_tx: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0xB086             SUB      SP,SP,#+24
   \        0x6   0x4606             MOV      R6,R0
   \        0x8   0x468A             MOV      R10,R1
   \        0xA   0x4693             MOV      R11,R2
    115              LDMA_TransferCfg_t ldma_cfg = LDMA_TRANSFER_CFG_PERIPHERAL(UART_LDMA_SIGNAL_TX);
   \        0xC   0xA802             ADD      R0,SP,#+8
   \        0xE   0x.... 0x....      ADR.W    R1,?_13
   \       0x12   0x2210             MOVS     R2,#+16
   \       0x14   0x.... 0x....      BL       __aeabi_memcpy4
    116              LDMA_Descriptor_t *dma_descr;
    117              const uint8_t *buf8 = buf;
    118              uint16_t buf_offset = 0;
    119              uint16_t buf_cpy_len;
    120              uint16_t buf_remaining;
    121              uint16_t dma_buf_offset;
    122              uint16_t dma_buf_remaining;
    123              uint8_t *dma_buf;
    124          
    125              BUG_ON(buf_len > FIELD_MAX(MASK_PAYLOAD_LEN));
   \       0x18   0xF240 0x77FF      MOVW     R7,#+2047
   \       0x1C   0x4638             MOV      R0,R7
   \       0x1E   0x.... 0x....      BL       __ctz
   \       0x22   0x2400             MOVS     R4,#+0
   \       0x24   0x40C7             LSRS     R7,R7,R0
   \       0x26   0x455F             CMP      R7,R11
   \       0x28   0xDA21             BGE.N    ??uart_tx_0
   \       0x2A   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_9: (+1)
   \       0x2E   0x.... 0x....      LDR.W    R6,??DataTable28_3
   \       0x32   0x.... 0x....      ADR.W    R5,`uart_tx::__func__`
   \       0x36   0x2800             CMP      R0,#+0
   \       0x38   0x4633             MOV      R3,R6
   \       0x3A   0xD004             BEQ.N    ??uart_tx_1
   \       0x3C   0x227D             MOVS     R2,#+125
   \       0x3E   0x4629             MOV      R1,R5
   \       0x40   0x.... 0x....      ADR.W    R0,?_7
   \       0x44   0xE003             B.N      ??uart_tx_2
   \                     ??uart_tx_1: (+1)
   \       0x46   0x227D             MOVS     R2,#+125
   \       0x48   0x4629             MOV      R1,R5
   \       0x4A   0x.... 0x....      ADR.W    R0,?_8
   \                     ??uart_tx_2: (+1)
   \       0x4E   0x.... 0x....      BL       printf
   \       0x52   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_12: (+1)
   \       0x56   0xB940             CBNZ.N   R0,??CrossCallReturnLabel_5
   \       0x58   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_16: (+1)
   \       0x5C   0xB12C             CBZ.N    R4,??CrossCallReturnLabel_5
   \       0x5E   0x2001             MOVS     R0,#+1
   \       0x60   0x7008             STRB     R0,[R1, #+0]
   \       0x62   0x9600             STR      R6,[SP, #+0]
   \       0x64   0x237D             MOVS     R3,#+125
   \       0x66   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_5: (+1)
   \       0x6A   0xBE00             BKPT     #0x0
   \                     ??uart_tx_3: (+1)
   \       0x6C   0xE7FE             B.N      ??uart_tx_3
    126              // Only double buffering is supported
    127              BUG_ON(ARRAY_SIZE(uart_ctxt->descr_tx) != 2);
    128              BUG_ON(sizeof(uart_ctxt->buf_tx[0]) > DMADRV_MAX_XFER_COUNT);
    129          
    130              osMutexAcquire(uart_ctxt->tx_lock, osWaitForever);
   \                     ??uart_tx_0: (+1)
   \       0x6E   0xF241 0x1034      MOVW     R0,#+4404
   \       0x72   0x1830             ADDS     R0,R6,R0
   \       0x74   0x9001             STR      R0,[SP, #+4]
   \       0x76   0x6800             LDR      R0,[R0, #+0]
   \       0x78   0xF04F 0x31FF      MOV      R1,#+4294967295
   \       0x7C   0x.... 0x....      BL       osMutexAcquire
   \       0x80   0xE069             B.N      ??uart_tx_4
    131              while (buf_offset < buf_len) {
    132                  dma_buf   = uart_ctxt->buf_tx[uart_ctxt->descr_cnt_tx];
    133                  dma_descr = &uart_ctxt->descr_tx[uart_ctxt->descr_cnt_tx];
    134                  dma_buf_offset = 0;
    135          
    136                  if (buf_offset == 0) {
    137                      write_le16(dma_buf,     FIELD_PREP(MASK_PAYLOAD_LEN, buf_len));
    138                      write_le16(dma_buf + 2, crc16(CRC_INIT_HCS, dma_buf, 2));
    139                      dma_buf_offset = 4;
    140                  }
    141                  dma_buf_remaining = sizeof(uart_ctxt->buf_tx[0]) - dma_buf_offset;
    142                  buf_remaining     = buf_len - buf_offset;
    143                  if (dma_buf_remaining < buf_remaining + 2) {
    144                      // If there is space to push the remaining data but not the FCS,
    145                      // keep one data byte for the next DMA buffer.
    146                      buf_cpy_len = min(buf_remaining - 1, dma_buf_remaining);
    147                      memcpy(dma_buf + dma_buf_offset, buf8 + buf_offset, buf_cpy_len);
    148                      dma_buf_offset += buf_cpy_len;
    149                      buf_offset     += buf_cpy_len;
    150                  } else {
    151                      memcpy(dma_buf + dma_buf_offset, buf8 + buf_offset, buf_remaining);
   \                     ??uart_tx_5: (+1)
   \       0x82   0x463A             MOV      R2,R7
   \       0x84   0xEB0A 0x0104      ADD      R1,R10,R4
   \       0x88   0xEB08 0x0005      ADD      R0,R8,R5
   \       0x8C   0x.... 0x....      BL       __aeabi_memcpy
    152                      dma_buf_offset += buf_remaining;
    153                      buf_offset     += buf_remaining;
    154                      write_le16(dma_buf + dma_buf_offset, crc16(CRC_INIT_FCS, buf8, buf_len));
   \       0x90   0x465A             MOV      R2,R11
   \       0x92   0x4651             MOV      R1,R10
   \       0x94   0xF24C 0x60C6      MOVW     R0,#+50886
   \       0x98   0x.... 0x....      BL       crc16
   \       0x9C   0x197D             ADDS     R5,R7,R5
   \       0x9E   0x4601             MOV      R1,R0
   \       0xA0   0xB2A8             UXTH     R0,R5
   \       0xA2   0x193C             ADDS     R4,R7,R4
   \       0xA4   0x4440             ADD      R0,R8,R0
   \       0xA6   0xB2A4             UXTH     R4,R4
   \       0xA8   0x.... 0x....      BL       write_le16
    155                      dma_buf_offset += 2;
   \       0xAC   0x1CAD             ADDS     R5,R5,#+2
   \       0xAE   0xE039             B.N      ??uart_tx_6
    156                  }
   \                     ??uart_tx_7: (+1)
   \       0xB0   0x68B0             LDR      R0,[R6, #+8]
   \       0xB2   0x2500             MOVS     R5,#+0
   \       0xB4   0xEB06 0x2180      ADD      R1,R6,R0, LSL #+10
   \       0xB8   0xEB06 0x1000      ADD      R0,R6,R0, LSL #+4
   \       0xBC   0xF101 0x082C      ADD      R8,R1,#+44
   \       0xC0   0xF100 0x090C      ADD      R9,R0,#+12
   \       0xC4   0xB9B4             CBNZ.N   R4,??uart_tx_8
   \       0xC6   0xF240 0x70FF      MOVW     R0,#+2047
   \       0xCA   0x.... 0x....      BL       __ctz
   \       0xCE   0xFA0B 0xF000      LSL      R0,R11,R0
   \       0xD2   0xF3C0 0x010A      UBFX     R1,R0,#+0,#+11
   \       0xD6   0x4640             MOV      R0,R8
   \       0xD8   0x.... 0x....      BL       write_le16
   \       0xDC   0x2202             MOVS     R2,#+2
   \       0xDE   0x4641             MOV      R1,R8
   \       0xE0   0xF64F 0x70FF      MOVW     R0,#+65535
   \       0xE4   0x.... 0x....      BL       crc16
   \       0xE8   0x4601             MOV      R1,R0
   \       0xEA   0xF108 0x0002      ADD      R0,R8,#+2
   \       0xEE   0x.... 0x....      BL       write_le16
   \       0xF2   0x2504             MOVS     R5,#+4
   \                     ??uart_tx_8: (+1)
   \       0xF4   0xEBAB 0x0704      SUB      R7,R11,R4
   \       0xF8   0xF5C5 0x6280      RSB      R2,R5,#+1024
   \       0xFC   0xB2BF             UXTH     R7,R7
   \       0xFE   0xB290             UXTH     R0,R2
   \      0x100   0x1CB9             ADDS     R1,R7,#+2
   \      0x102   0x4288             CMP      R0,R1
   \      0x104   0xDABD             BGE.N    ??uart_tx_5
   \      0x106   0x1E7F             SUBS     R7,R7,#+1
   \      0x108   0xB292             UXTH     R2,R2
   \      0x10A   0x4297             CMP      R7,R2
   \      0x10C   0xBFC8             IT       GT
   \      0x10E   0x4617             MOVGT    R7,R2
   \      0x110   0xB2BA             UXTH     R2,R7
   \      0x112   0xEB0A 0x0104      ADD      R1,R10,R4
   \      0x116   0xEB08 0x0005      ADD      R0,R8,R5
   \      0x11A   0x193C             ADDS     R4,R7,R4
   \      0x11C   0x.... 0x....      BL       __aeabi_memcpy
   \      0x120   0x197D             ADDS     R5,R7,R5
   \      0x122   0xB2A4             UXTH     R4,R4
    157                  dma_descr->xfer.xferCnt = dma_buf_offset - 1;
   \                     ??uart_tx_6: (+1)
   \      0x124   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \      0x128   0x1E6D             SUBS     R5,R5,#+1
    158                  osSemaphoreAcquire(uart_ctxt->tx_dma_lock, osWaitForever);
   \      0x12A   0xF04F 0x31FF      MOV      R1,#+4294967295
   \      0x12E   0xF365 0x100E      BFI      R0,R5,#+4,#+11
   \      0x132   0xF8C9 0x0000      STR      R0,[R9, #+0]
   \      0x136   0x9801             LDR      R0,[SP, #+4]
   \      0x138   0x6840             LDR      R0,[R0, #+4]
   \      0x13A   0x.... 0x....      BL       osSemaphoreAcquire
    159                  DMADRV_LdmaStartTransfer(uart_ctxt->dma_chan_tx, &ldma_cfg,
    160                                           dma_descr, uart_handle_tx_dma_complete, uart_ctxt);
   \      0x13E   0x9600             STR      R6,[SP, #+0]
   \      0x140   0x6870             LDR      R0,[R6, #+4]
   \      0x142   0x....             LDR.N    R3,??DataTable28_4
   \      0x144   0x464A             MOV      R2,R9
   \      0x146   0xA902             ADD      R1,SP,#+8
   \      0x148   0x.... 0x....      BL       DMADRV_LdmaStartTransfer
    161                  uart_ctxt->descr_cnt_tx = (uart_ctxt->descr_cnt_tx + 1) % ARRAY_SIZE(uart_ctxt->descr_tx);
   \      0x14C   0x68B0             LDR      R0,[R6, #+8]
   \      0x14E   0x1C40             ADDS     R0,R0,#+1
   \      0x150   0xF000 0x0001      AND      R0,R0,#0x1
   \      0x154   0x60B0             STR      R0,[R6, #+8]
    162              }
   \                     ??uart_tx_4: (+1)
   \      0x156   0x455C             CMP      R4,R11
   \      0x158   0xDBAA             BLT.N    ??uart_tx_7
    163              osMutexRelease(uart_ctxt->tx_lock);
   \      0x15A   0x9801             LDR      R0,[SP, #+4]
   \      0x15C   0x6800             LDR      R0,[R0, #+0]
   \      0x15E   0x.... 0x....      BL       osMutexRelease
    164              return buf_len;
   \      0x162   0x4658             MOV      R0,R11
   \      0x164   0xB007             ADD      SP,SP,#+28
   \      0x166   0xE8BD 0x8FF0      POP      {R4-R11,PC}
    165          }

   \                                 In section .text, align 4, keep-with-next
   \                     ?Subroutine2: (+1)
   \        0x0   0xEA4F 0x0205      MOV.W    R2,R5
   \        0x4   0x....             ADR.N    R1,?_9
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0x4720             BX       R4
    166          

   \                                 In section .text, align 2, keep-with-next
    167          static void uart_timeout(struct sli_wisun_timer *timer)
    168          {
   \                     uart_timeout: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    169              struct sl_wsrcp_uart *uart_ctxt = container_of(timer, struct sl_wsrcp_uart, timer);
   \        0x2   0x....             LDR.N    R1,??DataTable28_7
   \        0x4   0x180C             ADDS     R4,R1,R0
    170          
    171              // If a frame header was received but the payload takes too long to be
    172              // received, assume that the frame was canceled, and search for a new
    173              // header in the remaining bytes.
    174              WARN("rx-bus: frame timeout");
   \        0x6   0x....             LDR.N    R2,??DataTable28_2
   \        0x8   0x7810             LDRB     R0,[R2, #+0]
   \        0xA   0x2800             CMP      R0,#+0
   \        0xC   0xBF14             ITE      NE
   \        0xE   0x....             LDRNE.N  R0,??DataTable28_8
   \       0x10   0x.... 0x....      ADREQ.W  R0,?_14
   \       0x14   0x.... 0x....      BL       printf
    175              ring_pop(&uart_ctxt->rx_ring);
   \       0x18   0xF504 0x508A      ADD      R0,R4,#+4416
   \       0x1C   0x.... 0x....      BL       ring_pop
    176              uart_rx_ready(uart_ctxt);
   \       0x20   0x4620             MOV      R0,R4
   \       0x22   0xE8BD 0x4010      POP      {R4,LR}
   \       0x26   0x.... 0x....      B.W      uart_rx_ready
    177          }
    178          

   \                                 In section .text, align 4, keep-with-next
    179          int uart_rx(struct sl_wsrcp_uart *uart_ctxt, void *buf, int buf_len)
    180          {
   \                     uart_rx: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
    181              uint8_t hdr[4], fcs[2];
    182              bool garbage = false;
    183              uint8_t *buf8 = buf;
   \        0x4   0xF242 0x1350      MOVW     R3,#+8528
   \        0x8   0xB084             SUB      SP,SP,#+16
   \        0xA   0x4403             ADD      R3,R0,R3
   \        0xC   0x2500             MOVS     R5,#+0
   \        0xE   0x9300             STR      R3,[SP, #+0]
   \       0x10   0xF500 0x5B8A      ADD      R11,R0,#+4416
   \       0x14   0x.... 0x....      LDR.W    R9,??DataTable28_9
   \       0x18   0x....             LDR.N    R6,??DataTable28_2
   \       0x1A   0x4604             MOV      R4,R0
   \       0x1C   0x4688             MOV      R8,R1
   \       0x1E   0x9203             STR      R2,[SP, #+12]
   \       0x20   0xE003             B.N      ??uart_rx_0
    184              uint16_t len;
    185          
    186              while (1) {
    187                  // Search for a valid header
    188                  while (ring_data_len(&uart_ctxt->rx_ring) >= 4) {
    189                      ring_get_buf(&uart_ctxt->rx_ring, 0, hdr, 4);
    190                      if (crc16(CRC_INIT_HCS, hdr, 2) == read_le16(hdr + 2))
    191                          break;
    192                      garbage = true;
   \                     ??uart_rx_1: (+1)
   \       0x22   0x2501             MOVS     R5,#+1
    193                      ring_pop(&uart_ctxt->rx_ring);
   \                     ??uart_rx_2: (+1)
   \       0x24   0x4658             MOV      R0,R11
   \       0x26   0x.... 0x....      BL       ring_pop
   \                     ??uart_rx_0: (+1)
   \       0x2A   0x4658             MOV      R0,R11
   \       0x2C   0x.... 0x....      BL       ring_data_len
   \       0x30   0x2804             CMP      R0,#+4
   \       0x32   0xD312             BCC.N    ??uart_rx_3
   \       0x34   0x2304             MOVS     R3,#+4
   \       0x36   0xAA02             ADD      R2,SP,#+8
   \       0x38   0x2100             MOVS     R1,#+0
   \       0x3A   0x4658             MOV      R0,R11
   \       0x3C   0x.... 0x....      BL       ring_get_buf
   \       0x40   0x2202             MOVS     R2,#+2
   \       0x42   0xA902             ADD      R1,SP,#+8
   \       0x44   0xF64F 0x70FF      MOVW     R0,#+65535
   \       0x48   0x.... 0x....      BL       crc16
   \       0x4C   0x4607             MOV      R7,R0
   \       0x4E   0xF10D 0x000A      ADD      R0,SP,#+10
   \       0x52   0x.... 0x....      BL       read_le16
   \       0x56   0x4287             CMP      R7,R0
   \       0x58   0xD1E3             BNE.N    ??uart_rx_1
    194                  }
    195                  WARN_ON(garbage, "rx-bus: garbage found");
   \                     ??uart_rx_3: (+1)
   \       0x5A   0xB13D             CBZ.N    R5,??uart_rx_4
   \       0x5C   0x7830             LDRB     R0,[R6, #+0]
   \       0x5E   0x2800             CMP      R0,#+0
   \       0x60   0xBF14             ITE      NE
   \       0x62   0x4648             MOVNE    R0,R9
   \       0x64   0x.... 0x....      ADREQ.W  R0,?_15
   \       0x68   0x.... 0x....      BL       printf
    196                  if (ring_data_len(&uart_ctxt->rx_ring) < 4)
   \                     ??uart_rx_4: (+1)
   \       0x6C   0x4658             MOV      R0,R11
   \       0x6E   0x.... 0x....      BL       ring_data_len
   \       0x72   0x2804             CMP      R0,#+4
   \       0x74   0xD344             BCC.N    ??uart_rx_5
    197                      return 0; // No valid header found
    198          
    199                  if (!sli_wisun_timer_is_running(&uart_ctxt->timer))
   \       0x76   0x9800             LDR      R0,[SP, #+0]
   \       0x78   0x.... 0x....      BL       sli_wisun_timer_is_running
   \       0x7C   0xB920             CBNZ.N   R0,??uart_rx_6
    200                      sli_wisun_timer_start_relative_s(&uart_ctxt->timer, 2);
   \       0x7E   0x9800             LDR      R0,[SP, #+0]
   \       0x80   0x2202             MOVS     R2,#+2
   \       0x82   0x2300             MOVS     R3,#+0
   \       0x84   0x.... 0x....      BL       sli_wisun_timer_start_relative_s
    201                  len = FIELD_GET(MASK_PAYLOAD_LEN, read_le16(hdr));
   \                     ??uart_rx_6: (+1)
   \       0x88   0xA802             ADD      R0,SP,#+8
   \       0x8A   0x.... 0x....      BL       read_le16
   \       0x8E   0xF3C0 0x070A      UBFX     R7,R0,#+0,#+11
   \       0x92   0xF240 0x70FF      MOVW     R0,#+2047
   \       0x96   0x.... 0x....      BL       __ctz
   \       0x9A   0x40C7             LSRS     R7,R7,R0
    202                  if (ring_data_len(&uart_ctxt->rx_ring) < 4u + len + 2)
   \       0x9C   0x4658             MOV      R0,R11
   \       0x9E   0x.... 0x....      BL       ring_data_len
   \       0xA2   0x1DB9             ADDS     R1,R7,#+6
   \       0xA4   0x4288             CMP      R0,R1
   \       0xA6   0xD32B             BCC.N    ??uart_rx_5
    203                      return 0; // Frame not fully received
    204          
    205                  BUG_ON(buf_len < len);
   \       0xA8   0x9803             LDR      R0,[SP, #+12]
   \       0xAA   0x42B8             CMP      R0,R7
   \       0xAC   0xDB2C             BLT.N    ??uart_rx_7
    206                  ring_get_buf(&uart_ctxt->rx_ring, 4, buf8, len);
   \       0xAE   0x463B             MOV      R3,R7
   \       0xB0   0x4642             MOV      R2,R8
   \       0xB2   0x2104             MOVS     R1,#+4
   \       0xB4   0x4658             MOV      R0,R11
   \       0xB6   0x.... 0x....      BL       ring_get_buf
    207                  ring_get_buf(&uart_ctxt->rx_ring, 4 + len, fcs, sizeof(fcs));
   \       0xBA   0x2302             MOVS     R3,#+2
   \       0xBC   0xAA01             ADD      R2,SP,#+4
   \       0xBE   0x1D39             ADDS     R1,R7,#+4
   \       0xC0   0x4658             MOV      R0,R11
   \       0xC2   0x.... 0x....      BL       ring_get_buf
    208          
    209                  if (crc16(CRC_INIT_FCS, buf8, len) == read_le16(fcs)) {
   \       0xC6   0x463A             MOV      R2,R7
   \       0xC8   0x4641             MOV      R1,R8
   \       0xCA   0xF24C 0x60C6      MOVW     R0,#+50886
   \       0xCE   0x.... 0x....      BL       crc16
   \       0xD2   0x4682             MOV      R10,R0
   \       0xD4   0xA801             ADD      R0,SP,#+4
   \       0xD6   0x.... 0x....      BL       read_le16
   \       0xDA   0x4582             CMP      R10,R0
   \       0xDC   0xD033             BEQ.N    ??uart_rx_8
    210                      ring_pop_buf(&uart_ctxt->rx_ring, NULL, 4 + len + 2);
    211                      sli_wisun_timer_stop(&uart_ctxt->timer);
    212                      return len;
    213                  }
    214          
    215                  WARN("rx-bus: invalid FCS");
   \       0xDE   0x7830             LDRB     R0,[R6, #+0]
   \       0xE0   0x2800             CMP      R0,#+0
   \       0xE2   0xBF0C             ITE      EQ
   \       0xE4   0x.... 0x....      ADREQ.W  R0,?_17
   \       0xE8   0xF109 0x002C      ADDNE    R0,R9,#+44
   \       0xEC   0x.... 0x....      BL       printf
    216                  uart_crc_error(uart_ctxt, uart_ctxt->irq_overflow_cnt);
   \       0xF0   0xF241 0x113C      MOVW     R1,#+4412
   \       0xF4   0x5860             LDR      R0,[R4, R1]
   \       0xF6   0xB2C1             UXTB     R1,R0
   \       0xF8   0x4620             MOV      R0,R4
   \       0xFA   0x.... 0x....      BL       uart_crc_error
    217                  ring_pop(&uart_ctxt->rx_ring);
   \       0xFE   0xE791             B.N      ??uart_rx_2
   \                     ??uart_rx_5: (+1)
   \      0x100   0x2000             MOVS     R0,#+0
   \                     ??uart_rx_9: (+1)
   \      0x102   0xB005             ADD      SP,SP,#+20
   \      0x104   0xE8BD 0x8FF0      POP      {R4-R11,PC}
   \                     ??uart_rx_7: (+1)
   \      0x108   0xF896 0x0000      LDRB.W   R0,[R6, #+0]
   \      0x10C   0x.... 0x....      ADR.W    R7,?_16
   \      0x110   0x....             ADR.N    R5,`uart_rx::__func__`
   \      0x112   0x2800             CMP      R0,#+0
   \      0x114   0x463B             MOV      R3,R7
   \      0x116   0xD003             BEQ.N    ??uart_rx_10
   \      0x118   0x22CD             MOVS     R2,#+205
   \      0x11A   0x4629             MOV      R1,R5
   \      0x11C   0x....             ADR.N    R0,?_7
   \      0x11E   0xE002             B.N      ??uart_rx_11
   \                     ??uart_rx_10: (+1)
   \      0x120   0x22CD             MOVS     R2,#+205
   \      0x122   0x4629             MOV      R1,R5
   \      0x124   0x....             ADR.N    R0,?_8
   \                     ??uart_rx_11: (+1)
   \      0x126   0x.... 0x....      BL       printf
   \      0x12A   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_13: (+1)
   \      0x12E   0xB940             CBNZ.N   R0,??CrossCallReturnLabel_4
   \      0x130   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_17: (+1)
   \      0x134   0xB12C             CBZ.N    R4,??CrossCallReturnLabel_4
   \      0x136   0x2001             MOVS     R0,#+1
   \      0x138   0x7008             STRB     R0,[R1, #+0]
   \      0x13A   0x9700             STR      R7,[SP, #+0]
   \      0x13C   0x23CD             MOVS     R3,#+205
   \      0x13E   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_4: (+1)
   \      0x142   0xBE00             BKPT     #0x0
   \                     ??uart_rx_12: (+1)
   \      0x144   0xE7FE             B.N      ??uart_rx_12
   \                     ??uart_rx_8: (+1)
   \      0x146   0x1DBA             ADDS     R2,R7,#+6
   \      0x148   0x2100             MOVS     R1,#+0
   \      0x14A   0x4658             MOV      R0,R11
   \      0x14C   0x.... 0x....      BL       ring_pop_buf
   \      0x150   0x9800             LDR      R0,[SP, #+0]
   \      0x152   0x.... 0x....      BL       sli_wisun_timer_stop
   \      0x156   0x4638             MOV      R0,R7
   \      0x158   0xE7D3             B.N      ??uart_rx_9
    218              }
    219          }
    220          

   \                                 In section .text, align 4, keep-with-next
    221          void uart_init(struct sl_wsrcp_uart *uart_ctxt, struct sli_wisun_timer_context *timer_ctxt)
    222          {
   \                     uart_init: (+1)
   \        0x0   0xB5F0             PUSH     {R4-R7,LR}
   \        0x2   0xB085             SUB      SP,SP,#+20
   \        0x4   0x4604             MOV      R4,R0
   \        0x6   0x460D             MOV      R5,R1
    223              LDMA_TransferCfg_t ldma_cfg = LDMA_TRANSFER_CFG_PERIPHERAL(UART_LDMA_SIGNAL_RX);
   \        0x8   0xF10D 0x0004      ADD.W    R0,SP,#+4
   \        0xC   0x....             ADR.N    R1,?_18
   \        0xE   0x2210             MOVS     R2,#+16
   \       0x10   0x.... 0x....      BL       __aeabi_memcpy4
    224              unsigned int i, next;
    225          
    226              ring_init(&uart_ctxt->rx_ring, uart_ctxt->rx_ring_data, sizeof(uart_ctxt->rx_ring_data));
   \       0x14   0xF241 0x1650      MOVW     R6,#+4432
   \       0x18   0xF44F 0x5280      MOV      R2,#+4096
   \       0x1C   0x19A1             ADDS     R1,R4,R6
   \       0x1E   0xF504 0x508A      ADD      R0,R4,#+4416
   \       0x22   0x.... 0x....      BL       ring_init
    227              uart_ctxt->tx_lock = osMutexNew(NULL);
   \       0x26   0xF241 0x1034      MOVW     R0,#+4404
   \       0x2A   0x1826             ADDS     R6,R4,R0
   \       0x2C   0x2000             MOVS     R0,#+0
   \       0x2E   0x.... 0x....      BL       osMutexNew
   \       0x32   0x6030             STR      R0,[R6, #+0]
    228              uart_ctxt->tx_dma_lock = osSemaphoreNew(1, 1, NULL);
   \       0x34   0x2200             MOVS     R2,#+0
   \       0x36   0x2101             MOVS     R1,#+1
   \       0x38   0x2001             MOVS     R0,#+1
   \       0x3A   0x.... 0x....      BL       osSemaphoreNew
   \       0x3E   0x6070             STR      R0,[R6, #+4]
    229              uart_ctxt->hw_regs = UART_PERIPHERAL;
   \       0x40   0x....             LDR.N    R1,??DataTable28_10
   \       0x42   0x6021             STR      R1,[R4, #+0]
    230              for (i = 0; i < ARRAY_SIZE(uart_ctxt->descr_rx); i++) {
   \       0x44   0x2200             MOVS     R2,#+0
    231                  uart_ctxt->descr_rx[i].xfer.structType  = ldmaCtrlStructTypeXfer;
   \                     ??uart_init_0: (+1)
   \       0x46   0xEB04 0x1002      ADD      R0,R4,R2, LSL #+4
   \       0x4A   0xF600 0x0134      ADDW     R1,R0,#+2100
   \       0x4E   0x680E             LDR      R6,[R1, #+0]
    232                  uart_ctxt->descr_rx[i].xfer.blockSize   = ldmaCtrlBlockSizeUnit1;
    233                  uart_ctxt->descr_rx[i].xfer.reqMode     = ldmaCtrlReqModeBlock;
    234                  uart_ctxt->descr_rx[i].xfer.doneIfs     = 1;
    235          
    236                  uart_ctxt->descr_rx[i].xfer.size        = ldmaCtrlSizeByte;
    237                  uart_ctxt->descr_rx[i].xfer.xferCnt     = sizeof(uart_ctxt->buf_rx[0]) - 1;
    238          
    239                  uart_ctxt->descr_rx[i].xfer.srcInc      = ldmaCtrlSrcIncNone;
    240                  uart_ctxt->descr_rx[i].xfer.srcAddrMode = ldmaCtrlSrcAddrModeAbs;
    241                  uart_ctxt->descr_rx[i].xfer.srcAddr     = (uintptr_t)&(uart_ctxt->hw_regs->RXDATA);
   \       0x50   0xF600 0x0038      ADDW     R0,R0,#+2104
   \       0x54   0x08B6             LSRS     R6,R6,#+2
   \       0x56   0x00B6             LSLS     R6,R6,#+2
   \       0x58   0x600E             STR      R6,[R1, #+0]
   \       0x5A   0xF426 0x2370      BIC      R3,R6,#0xF0000
   \       0x5E   0x600B             STR      R3,[R1, #+0]
   \       0x60   0xF423 0x1600      BIC      R6,R3,#0x200000
   \       0x64   0x600E             STR      R6,[R1, #+0]
   \       0x66   0xF446 0x1380      ORR      R3,R6,#0x100000
   \       0x6A   0x600B             STR      R3,[R1, #+0]
   \       0x6C   0xF023 0x6640      BIC      R6,R3,#0xC000000
   \       0x70   0x600E             STR      R6,[R1, #+0]
   \       0x72   0x680B             LDR      R3,[R1, #+0]
   \       0x74   0x267F             MOVS     R6,#+127
   \       0x76   0xF366 0x130E      BFI      R3,R6,#+4,#+11
   \       0x7A   0x600B             STR      R3,[R1, #+0]
   \       0x7C   0xF043 0x7740      ORR      R7,R3,#0x3000000
   \       0x80   0x600F             STR      R7,[R1, #+0]
   \       0x82   0xF027 0x4380      BIC      R3,R7,#0x40000000
   \       0x86   0x600B             STR      R3,[R1, #+0]
   \       0x88   0x6827             LDR      R7,[R4, #+0]
   \       0x8A   0xF107 0x063C      ADD      R6,R7,#+60
   \       0x8E   0x6006             STR      R6,[R0, #+0]
    242          
    243                  uart_ctxt->descr_rx[i].xfer.dstInc      = ldmaCtrlDstIncOne;
   \       0x90   0x680B             LDR      R3,[R1, #+0]
    244                  uart_ctxt->descr_rx[i].xfer.dstAddrMode = ldmaCtrlDstAddrModeAbs;
    245                  uart_ctxt->descr_rx[i].xfer.dstAddr     = (uintptr_t)&(uart_ctxt->buf_rx[i]);
   \       0x92   0xEB04 0x16C2      ADD      R6,R4,R2, LSL #+7
    246          
    247                  uart_ctxt->descr_rx[i].xfer.linkMode    = ldmaLinkModeAbs;
    248                  uart_ctxt->descr_rx[i].xfer.link        = 1;
    249          
    250                  next = i + 1;
    251                  next %= ARRAY_SIZE(uart_ctxt->descr_rx);
    252                  uart_ctxt->descr_rx[i].xfer.linkAddr = LDMA_DESCRIPTOR_LINKABS_ADDR_TO_LINKADDR(&uart_ctxt->descr_rx[next]);
   \       0x96   0x1C52             ADDS     R2,R2,#+1
   \       0x98   0xF023 0x5340      BIC      R3,R3,#0x30000000
   \       0x9C   0x600B             STR      R3,[R1, #+0]
   \       0x9E   0xF023 0x4700      BIC      R7,R3,#0x80000000
   \       0xA2   0x600F             STR      R7,[R1, #+0]
   \       0xA4   0xF606 0x1334      ADDW     R3,R6,#+2356
   \       0xA8   0x6043             STR      R3,[R0, #+4]
   \       0xAA   0x68C8             LDR      R0,[R1, #+12]
   \       0xAC   0xF604 0x0634      ADDW     R6,R4,#+2100
   \       0xB0   0x0840             LSRS     R0,R0,#+1
   \       0xB2   0x0040             LSLS     R0,R0,#+1
   \       0xB4   0x60C8             STR      R0,[R1, #+12]
   \       0xB6   0xF040 0x0002      ORR      R0,R0,#0x2
   \       0xBA   0x60C8             STR      R0,[R1, #+12]
   \       0xBC   0xF002 0x000F      AND      R0,R2,#0xF
   \       0xC0   0xEB06 0x1300      ADD      R3,R6,R0, LSL #+4
   \       0xC4   0x68C8             LDR      R0,[R1, #+12]
   \       0xC6   0x089B             LSRS     R3,R3,#+2
    253              }
   \       0xC8   0x2A0F             CMP      R2,#+15
   \       0xCA   0xF363 0x009F      BFI      R0,R3,#+2,#+30
   \       0xCE   0x60C8             STR      R0,[R1, #+12]
   \       0xD0   0xD9B9             BLS.N    ??uart_init_0
    254          
    255              for (i = 0; i < ARRAY_SIZE(uart_ctxt->descr_tx); i++) {
   \       0xD2   0x2000             MOVS     R0,#+0
    256                  uart_ctxt->descr_tx[i].xfer.structType  = ldmaCtrlStructTypeXfer;
   \                     ??uart_init_1: (+1)
   \       0xD4   0xEB04 0x1100      ADD      R1,R4,R0, LSL #+4
   \       0xD8   0xF101 0x030C      ADD      R3,R1,#+12
   \       0xDC   0x681A             LDR      R2,[R3, #+0]
   \       0xDE   0x0892             LSRS     R2,R2,#+2
   \       0xE0   0x0092             LSLS     R2,R2,#+2
   \       0xE2   0x.... 0x....      BL       ?Subroutine7
    257                  uart_ctxt->descr_tx[i].xfer.blockSize   = ldmaCtrlBlockSizeUnit1;
   \                     ??CrossCallReturnLabel_22: (+1)
   \       0xE6   0xF423 0x2370      BIC      R3,R3,#0xF0000
   \       0xEA   0x.... 0x....      BL       ?Subroutine6
    258                  uart_ctxt->descr_tx[i].xfer.reqMode     = ldmaCtrlReqModeBlock;
   \                     ??CrossCallReturnLabel_18: (+1)
   \       0xEE   0xF422 0x1200      BIC      R2,R2,#0x200000
   \       0xF2   0x.... 0x....      BL       ?Subroutine7
    259                  uart_ctxt->descr_tx[i].xfer.doneIfs     = 1;
   \                     ??CrossCallReturnLabel_23: (+1)
   \       0xF6   0xF443 0x1380      ORR      R3,R3,#0x100000
   \       0xFA   0x.... 0x....      BL       ?Subroutine6
    260          
    261                  uart_ctxt->descr_tx[i].xfer.size        = ldmaCtrlSizeByte;
   \                     ??CrossCallReturnLabel_19: (+1)
   \       0xFE   0xF022 0x6240      BIC      R2,R2,#0xC000000
   \      0x102   0x.... 0x....      BL       ?Subroutine7
    262          
    263                  uart_ctxt->descr_tx[i].xfer.srcInc      = ldmaCtrlDstIncOne;
   \                     ??CrossCallReturnLabel_24: (+1)
   \      0x106   0xF023 0x7340      BIC      R3,R3,#0x3000000
   \      0x10A   0x.... 0x....      BL       ?Subroutine6
    264                  uart_ctxt->descr_tx[i].xfer.srcAddrMode = ldmaCtrlDstAddrModeAbs;
   \                     ??CrossCallReturnLabel_20: (+1)
   \      0x10E   0xF022 0x4280      BIC      R2,R2,#0x40000000
   \      0x112   0x601A             STR      R2,[R3, #+0]
    265                  uart_ctxt->descr_tx[i].xfer.srcAddr     = (uintptr_t)&(uart_ctxt->buf_tx[i]);
   \      0x114   0xEB04 0x2380      ADD      R3,R4,R0, LSL #+10
    266          
    267                  uart_ctxt->descr_tx[i].xfer.dstInc      = ldmaCtrlSrcIncNone;
   \      0x118   0xF101 0x020C      ADD      R2,R1,#+12
    268                  uart_ctxt->descr_tx[i].xfer.dstAddrMode = ldmaCtrlSrcAddrModeAbs;
    269                  uart_ctxt->descr_tx[i].xfer.dstAddr     = (uintptr_t)&(uart_ctxt->hw_regs->TXDATA);
    270              }
   \      0x11C   0x1C40             ADDS     R0,R0,#+1
   \      0x11E   0xF103 0x072C      ADD      R7,R3,#+44
   \      0x122   0x610F             STR      R7,[R1, #+16]
   \      0x124   0x6813             LDR      R3,[R2, #+0]
   \      0x126   0x2801             CMP      R0,#+1
   \      0x128   0xF043 0x5340      ORR      R3,R3,#0x30000000
   \      0x12C   0x.... 0x....      BL       ?Subroutine6
   \                     ??CrossCallReturnLabel_21: (+1)
   \      0x130   0xF022 0x4200      BIC      R2,R2,#0x80000000
   \      0x134   0x601A             STR      R2,[R3, #+0]
   \      0x136   0x6827             LDR      R7,[R4, #+0]
   \      0x138   0xF107 0x0344      ADD      R3,R7,#+68
   \      0x13C   0x614B             STR      R3,[R1, #+20]
   \      0x13E   0xD9C9             BLS.N    ??uart_init_1
    271              uart_hw_init(uart_ctxt);
   \      0x140   0x4620             MOV      R0,R4
   \      0x142   0x.... 0x....      BL       uart_hw_init
    272              DMADRV_Init();
   \      0x146   0x.... 0x....      BL       DMADRV_Init
    273              DMADRV_AllocateChannel(&uart_ctxt->dma_chan_tx, NULL);
   \      0x14A   0x2100             MOVS     R1,#+0
   \      0x14C   0x1D20             ADDS     R0,R4,#+4
   \      0x14E   0x.... 0x....      BL       DMADRV_AllocateChannel
    274              DMADRV_AllocateChannel(&uart_ctxt->dma_chan_rx, NULL);
   \      0x152   0x2100             MOVS     R1,#+0
   \      0x154   0xF604 0x002C      ADDW     R0,R4,#+2092
   \      0x158   0x.... 0x....      BL       DMADRV_AllocateChannel
    275              DMADRV_LdmaStartTransfer(uart_ctxt->dma_chan_rx, &ldma_cfg,
    276                                       &(uart_ctxt->descr_rx[0]),
    277                                       uart_handle_rx_dma_complete, uart_ctxt);
   \      0x15C   0x9400             STR      R4,[SP, #+0]
   \      0x15E   0xF8D4 0x082C      LDR      R0,[R4, #+2092]
   \      0x162   0x....             LDR.N    R3,??DataTable28_1
   \      0x164   0x4632             MOV      R2,R6
   \      0x166   0xA901             ADD      R1,SP,#+4
   \      0x168   0x.... 0x....      BL       DMADRV_LdmaStartTransfer
    278              sli_wisun_timer_init(&uart_ctxt->timer, timer_ctxt, uart_timeout, "UART frame timeout");
   \      0x16C   0xF242 0x1050      MOVW     R0,#+8528
   \      0x170   0x....             ADR.N    R3,?_19
   \      0x172   0x....             LDR.N    R2,??DataTable28_11
   \      0x174   0x4629             MOV      R1,R5
   \      0x176   0x4420             ADD      R0,R4,R0
   \      0x178   0x.... 0x....      BL       sli_wisun_timer_init
    279          }
   \      0x17C   0xB005             ADD      SP,SP,#+20
   \      0x17E   0xBDF0             POP      {R4-R7,PC}

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine7: (+1)
   \        0x0   0x601A             STR      R2,[R3, #+0]
   \        0x2   0xF101 0x020C      ADD      R2,R1,#+12
   \        0x6   0x6813             LDR      R3,[R2, #+0]
   \        0x8   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine6: (+1)
   \        0x0   0x6013             STR      R3,[R2, #+0]
   \        0x2   0xF101 0x030C      ADD      R3,R1,#+12
   \        0x6   0x681A             LDR      R2,[R3, #+0]
   \        0x8   0x4770             BX       LR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_1:
   \        0x0   0x....'....        DC32     uart_handle_rx_dma_complete

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_2:
   \        0x0   0x....'....        DC32     g_enable_color_traces

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_3:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_4:
   \        0x0   0x....'....        DC32     uart_handle_tx_dma_complete

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_5:
   \        0x0   0x....'....        DC32     g_on_err

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_6:
   \        0x0   0x....'....        DC32     g_err_reentrancy

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_7:
   \        0x0   0xFFFF'DEB0        DC32     0xffffdeb0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_8:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_9:
   \        0x0   0x....'....        DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_10:
   \        0x0   0x5B01'0000        DC32     0x5b010000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_11:
   \        0x0   0x....'....        DC32     uart_timeout

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x1B 0x5B          DC8 "\033[91m%s():%d: bug: buffer overflow\033[0m\012"
   \              0x39 0x31    
   \              0x6D 0x25    
   \              0x73 0x28    
   \              0x29 0x3A    
   \              0x25 0x64    
   \              0x3A 0x20    
   \              0x62 0x75    
   \              0x67 0x3A    
   \              0x20 0x62    
   \              0x75 0x66    
   \              0x66 0x65    
   \              0x72 0x20    
   \              0x6F 0x76    
   \              0x65 0x72    
   \              0x66 0x6C    
   \              0x6F 0x77    
   \              0x1B 0x5B    
   \              0x30 0x6D    
   \              0x0A 0x00

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x62 0x75          DC8 "buf_len > ((0x07ff) >> __ctz(0x07ff))"
   \              0x66 0x5F    
   \              0x6C 0x65    
   \              0x6E 0x20    
   \              0x3E 0x20    
   \              0x28 0x28    
   \              0x30 0x78    
   \              0x30 0x37    
   \              0x66 0x66    
   \              0x29 0x20    
   \              0x3E 0x3E    
   \              0x20 0x5F    
   \              0x5F 0x63    
   \              0x74 0x7A    
   \              0x28 0x30    
   \              0x78 0x30    
   \              0x37 0x66    
   \              0x66 0x29    
   \              0x29 0x00
   \       0x26                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x1B 0x5B          DC8 "\033[93mwarning: rx-bus: frame timeout\033[0m\012"
   \              0x39 0x33    
   \              0x6D 0x77    
   \              0x61 0x72    
   \              0x6E 0x69    
   \              0x6E 0x67    
   \              0x3A 0x20    
   \              0x72 0x78    
   \              0x2D 0x62    
   \              0x75 0x73    
   \              0x3A 0x20    
   \              0x66 0x72    
   \              0x61 0x6D    
   \              0x65 0x20    
   \              0x74 0x69    
   \              0x6D 0x65    
   \              0x6F 0x75    
   \              0x74 0x1B    
   \              0x5B 0x30    
   \              0x6D 0x0A    
   \              0x00
   \       0x29                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x1B 0x5B          DC8 "\033[93mwarning: rx-bus: garbage found\033[0m\012"
   \              0x39 0x33    
   \              0x6D 0x77    
   \              0x61 0x72    
   \              0x6E 0x69    
   \              0x6E 0x67    
   \              0x3A 0x20    
   \              0x72 0x78    
   \              0x2D 0x62    
   \              0x75 0x73    
   \              0x3A 0x20    
   \              0x67 0x61    
   \              0x72 0x62    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x66 0x6F    
   \              0x75 0x6E    
   \              0x64 0x1B    
   \              0x5B 0x30    
   \              0x6D 0x0A    
   \              0x00
   \       0x29                      DS8 3
   \       0x2C   0x1B 0x5B          DC8 "\033[93mwarning: rx-bus: invalid FCS\033[0m\012"
   \              0x39 0x33    
   \              0x6D 0x77    
   \              0x61 0x72    
   \              0x6E 0x69    
   \              0x6E 0x67    
   \              0x3A 0x20    
   \              0x72 0x78    
   \              0x2D 0x62    
   \              0x75 0x73    
   \              0x3A 0x20    
   \              0x69 0x6E    
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x46 0x43    
   \              0x53 0x1B    
   \              0x5B 0x30    
   \              0x6D 0x0A    
   \              0x00
   \       0x53                      DS8 1

   \                                 In section .text, align 4, keep-with-next
   \                     ?_5:
   \        0x0   0x25 0x73          DC8 "%s():%d: bug: buffer overflow\012"
   \              0x28 0x29    
   \              0x3A 0x25    
   \              0x64 0x3A    
   \              0x20 0x62    
   \              0x75 0x67    
   \              0x3A 0x20    
   \              0x62 0x75    
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x20 0x6F    
   \              0x76 0x65    
   \              0x72 0x66    
   \              0x6C 0x6F    
   \              0x77 0x0A    
   \              0x00
   \       0x1F                      DS8 1

   \                                 In section .text, align 4, keep-with-next
   \                     ?_6:
   \        0x0   0x25 0x73          DC8 "%s():%d: bug: buffer overflow"
   \              0x28 0x29    
   \              0x3A 0x25    
   \              0x64 0x3A    
   \              0x20 0x62    
   \              0x75 0x67    
   \              0x3A 0x20    
   \              0x62 0x75    
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x20 0x6F    
   \              0x76 0x65    
   \              0x72 0x66    
   \              0x6C 0x6F    
   \              0x77 0x00
   \       0x1E                      DS8 2

   \                                 In section .text, align 4, keep-with-next
   \                     ?_7:
   \        0x0   0x1B 0x5B          DC8 "\033[91m%s():%d: bug: \"%s\"\033[0m\012"
   \              0x39 0x31    
   \              0x6D 0x25    
   \              0x73 0x28    
   \              0x29 0x3A    
   \              0x25 0x64    
   \              0x3A 0x20    
   \              0x62 0x75    
   \              0x67 0x3A    
   \              0x20 0x22    
   \              0x25 0x73    
   \              0x22 0x1B    
   \              0x5B 0x30    
   \              0x6D 0x0A    
   \              0x00
   \       0x1D                      DS8 3

   \                                 In section .text, align 4, keep-with-next
   \                     ?_8:
   \        0x0   0x25 0x73          DC8 "%s():%d: bug: \"%s\"\012"
   \              0x28 0x29    
   \              0x3A 0x25    
   \              0x64 0x3A    
   \              0x20 0x62    
   \              0x75 0x67    
   \              0x3A 0x20    
   \              0x22 0x25    
   \              0x73 0x22    
   \              0x0A 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ?_9:
   \        0x0   0x25 0x73          DC8 "%s():%d: bug: \"%s\""
   \              0x28 0x29    
   \              0x3A 0x25    
   \              0x64 0x3A    
   \              0x20 0x62    
   \              0x75 0x67    
   \              0x3A 0x20    
   \              0x22 0x25    
   \              0x73 0x22    
   \              0x00
   \       0x13                      DS8 1

   \                                 In section .text, align 4, keep-with-next
   \                     ?_10:
   \        0x0   0x0010'0000        DC32 1'048'576
   \        0x4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00
   \        0xE                      DS8 2

   \                                 In section .text, align 4, keep-with-next
   \                     ?_11:
   \        0x0   0x1B 0x5B          DC8 "\033[93mwarning: IRQ overflow\033[0m\012"
   \              0x39 0x33    
   \              0x6D 0x77    
   \              0x61 0x72    
   \              0x6E 0x69    
   \              0x6E 0x67    
   \              0x3A 0x20    
   \              0x49 0x52    
   \              0x51 0x20    
   \              0x6F 0x76    
   \              0x65 0x72    
   \              0x66 0x6C    
   \              0x6F 0x77    
   \              0x1B 0x5B    
   \              0x30 0x6D    
   \              0x0A 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ?_12:
   \        0x0   0x77 0x61          DC8 "warning: IRQ overflow\012"
   \              0x72 0x6E    
   \              0x69 0x6E    
   \              0x67 0x3A    
   \              0x20 0x49    
   \              0x52 0x51    
   \              0x20 0x6F    
   \              0x76 0x65    
   \              0x72 0x66    
   \              0x6C 0x6F    
   \              0x77 0x0A    
   \              0x00
   \       0x17                      DS8 1

   \                                 In section .text, align 4, keep-with-next
   \                     ?_13:
   \        0x0   0x0010'0001        DC32 1'048'577
   \        0x4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00
   \        0xE                      DS8 2

   \                                 In section .text, align 4, keep-with-next
   \                     ?_14:
   \        0x0   0x77 0x61          DC8 "warning: rx-bus: frame timeout\012"
   \              0x72 0x6E    
   \              0x69 0x6E    
   \              0x67 0x3A    
   \              0x20 0x72    
   \              0x78 0x2D    
   \              0x62 0x75    
   \              0x73 0x3A    
   \              0x20 0x66    
   \              0x72 0x61    
   \              0x6D 0x65    
   \              0x20 0x74    
   \              0x69 0x6D    
   \              0x65 0x6F    
   \              0x75 0x74    
   \              0x0A 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ?_15:
   \        0x0   0x77 0x61          DC8 "warning: rx-bus: garbage found\012"
   \              0x72 0x6E    
   \              0x69 0x6E    
   \              0x67 0x3A    
   \              0x20 0x72    
   \              0x78 0x2D    
   \              0x62 0x75    
   \              0x73 0x3A    
   \              0x20 0x67    
   \              0x61 0x72    
   \              0x62 0x61    
   \              0x67 0x65    
   \              0x20 0x66    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x0A 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ?_16:
   \        0x0   0x62 0x75          DC8 "buf_len < len"
   \              0x66 0x5F    
   \              0x6C 0x65    
   \              0x6E 0x20    
   \              0x3C 0x20    
   \              0x6C 0x65    
   \              0x6E 0x00
   \        0xE                      DS8 2

   \                                 In section .text, align 4, keep-with-next
   \                     ?_17:
   \        0x0   0x77 0x61          DC8 "warning: rx-bus: invalid FCS\012"
   \              0x72 0x6E    
   \              0x69 0x6E    
   \              0x67 0x3A    
   \              0x20 0x72    
   \              0x78 0x2D    
   \              0x62 0x75    
   \              0x73 0x3A    
   \              0x20 0x69    
   \              0x6E 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x20 0x46    
   \              0x43 0x53    
   \              0x0A 0x00
   \       0x1E                      DS8 2

   \                                 In section .text, align 4, keep-with-next
   \                     ?_18:
   \        0x0   0x0010'0000        DC32 1'048'576
   \        0x4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00
   \        0xE                      DS8 2

   \                                 In section .text, align 4, keep-with-next
   \                     ?_19:
   \        0x0   0x55 0x41          DC8 "UART frame timeout"
   \              0x52 0x54    
   \              0x20 0x66    
   \              0x72 0x61    
   \              0x6D 0x65    
   \              0x20 0x74    
   \              0x69 0x6D    
   \              0x65 0x6F    
   \              0x75 0x74    
   \              0x00
   \       0x13                      DS8 1

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   __ctz
       0   uart_crc_error
      16   uart_handle_rx_dma_complete
        16   -- Indirect call
        16   -> CORE_EnterAtomic
        16   -> CORE_ExitAtomic
        16   -> printf
        16   -> ring_push
        16   -> uart_rx_ready
      48   uart_handle_rx_dma_timeout
        48   -- Indirect call
        48   -> CORE_EnterAtomic
        48   -> CORE_ExitAtomic
        48   -> DMADRV_LdmaStartTransfer
        48   -> DMADRV_StopTransfer
        48   -> DMADRV_TransferRemainingCount
        48   -> __aeabi_memcpy4
        48   -> printf
        48   -> ring_push
        48   -> uart_rx_ready
       8   uart_handle_rx_overflow
         8   -> printf
       8   uart_handle_tx_dma_complete
         8   -> osSemaphoreRelease
      40   uart_init
        40   -> DMADRV_AllocateChannel
        40   -> DMADRV_Init
        40   -> DMADRV_LdmaStartTransfer
        40   -> __aeabi_memcpy4
        40   -> osMutexNew
        40   -> osSemaphoreNew
        40   -> ring_init
        40   -> sli_wisun_timer_init
        40   -> uart_hw_init
      56   uart_rx
        56   -- Indirect call
        56   -> __ctz
        56   -> crc16
        56   -> printf
        56   -> read_le16
        56   -> ring_data_len
        56   -> ring_get_buf
        56   -> ring_pop
        56   -> ring_pop_buf
        56   -> sli_wisun_timer_is_running
        56   -> sli_wisun_timer_start_relative_s
        56   -> sli_wisun_timer_stop
        56   -> uart_crc_error
       0   uart_rx_ready
       8   uart_timeout
         8   -> printf
         8   -> ring_pop
         0   -> uart_rx_ready
      64   uart_tx
        64   -- Indirect call
        64   -> DMADRV_LdmaStartTransfer
        64   -> __aeabi_memcpy
        64   -> __aeabi_memcpy4
        64   -> __ctz
        64   -> crc16
        64   -> osMutexAcquire
        64   -> osMutexRelease
        64   -> osSemaphoreAcquire
        64   -> printf
        64   -> write_le16


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable28
       4  ??DataTable28_1
       4  ??DataTable28_10
       4  ??DataTable28_11
       4  ??DataTable28_2
       4  ??DataTable28_3
       4  ??DataTable28_4
       4  ??DataTable28_5
       4  ??DataTable28_6
       4  ??DataTable28_7
       4  ??DataTable28_8
       4  ??DataTable28_9
      12  ?Subroutine0
      10  ?Subroutine1
      10  ?Subroutine2
       8  ?Subroutine3
       6  ?Subroutine4
       6  ?Subroutine5
      10  ?Subroutine6
      10  ?Subroutine7
      40  ?_0
      40  ?_1
      16  ?_10
      32  ?_11
      24  ?_12
      16  ?_13
      32  ?_14
      32  ?_15
      16  ?_16
      32  ?_17
      16  ?_18
      20  ?_19
      44  ?_2
      84  ?_3
      32  ?_5
      32  ?_6
      32  ?_7
      20  ?_8
      20  ?_9
      32  __ctz
       2  uart_crc_error
     128  uart_handle_rx_dma_complete
     180  uart_handle_rx_dma_timeout
      36  uart_handle_rx_overflow
      16  uart_handle_tx_dma_complete
     384  uart_init
     346  uart_rx
       2  uart_rx_ready
      42  uart_timeout
     362  uart_tx
      72  -- Other

 
   208 bytes in section .rodata
 2'094 bytes in section .text
 
 2'090 bytes of CODE  memory (+ 4 bytes shared)
   208 bytes of CONST memory

Errors: none
Warnings: none
