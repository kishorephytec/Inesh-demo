###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         27/Nov/2024  12:17:50
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\sl_wisun_trace_util.c
#    Command line                 =
#        -f
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\trace_util_17324021352468628419.dir\sl_wisun_trace_util.o.rsp
#        (C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\sl_wisun_trace_util.c
#        -D EFR32FG28B322F1024IM48=1 -D
#        configNUM_SDK_THREAD_LOCAL_STORAGE_POINTERS=2 -D
#        SL_COMPONENT_CATALOG_PRESENT=1 -D
#        MBEDTLS_CONFIG_FILE=<sl_mbedtls_config.h> -D
#        MBEDTLS_PSA_CRYPTO_CONFIG_FILE=<psa_crypto_config.h> -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -D
#        RTT_USE_ASM=0 -D MBED_CONF_MBED_TRACE_ENABLE=1 -D
#        MBED_CONF_NANOSTACK_CONFIGURATION=ws_router -D
#        MBED_TRACE_MAX_LEVEL=TRACE_ACTIVE_LEVEL_ALL -D DEBUG_EFM_USER=1 -D
#        HAVE_LFN=1 -D HAVE_LFN_PARENT=1 -lC
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\lst\trace_util_17324021352468628419.dir
#        --diag_suppress Pa050 -o
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\trace_util_17324021352468628419.dir
#        --debug --endian=little --cpu=Cortex-M33 --cmse --cmse -e
#        --fpu=VFPv5_sp --dlib_config "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\
#        -I C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\autogen\ -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\config\ -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\config\rail\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\Device\SiliconLabs\EFR32FG28\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\common\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\CMSIS\Core\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\CMSIS\RTOS2\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\device_init\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\dmadrv\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\common\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emlib\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\cmsis\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\kernel\include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\kernel\portable\IAR\ARM_CM33_NTZ\non_secure\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\iostream\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\config\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\config\preset\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\nvm3\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\peripheral\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_psa_driver\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\common\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\wmbus\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\sidewalk\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\efr32xg28\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\rail_util_pti\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\src\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\segger\systemview\SEGGER\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\silicon_labs\silabs_core\memory_manager\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\common\toolchain\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\system\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\ns_list\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\nanostack\nanostack-libservice\mbed-client-libservice\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\sleeptimer\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\app\wisun_rcp\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\inc\socket\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\src\
#        -Ohz --use_c++_inline) --dependencies=n
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\trace_util_17324021352468628419.dir\sl_wisun_trace_util.o.iar_deps
#    Locale                       =  C
#    List file                    =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\lst\trace_util_17324021352468628419.dir\sl_wisun_trace_util.lst
#    Object file                  =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\trace_util_17324021352468628419.dir\sl_wisun_trace_util.o
#    Runtime model:                  
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_file_descriptor     =  0
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#      __iar_require _Printf      =  flags,int_specials,widths
#
###############################################################################

C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\sl_wisun_trace_util.c
      1          /***************************************************************************//**
      2           * @file
      3           * @brief
      4           *******************************************************************************
      5           * # License
      6           * <b>Copyright 2021 Silicon Laboratories Inc. www.silabs.com</b>
      7           *******************************************************************************
      8           *
      9           * SPDX-License-Identifier: Zlib
     10           *
     11           * The licensor of this software is Silicon Laboratories Inc.
     12           *
     13           * This software is provided 'as-is', without any express or implied
     14           * warranty. In no event will the authors be held liable for any damages
     15           * arising from the use of this software.
     16           *
     17           * Permission is granted to anyone to use this software for any purpose,
     18           * including commercial applications, and to alter it and redistribute it
     19           * freely, subject to the following restrictions:
     20           *
     21           * 1. The origin of this software must not be misrepresented; you must not
     22           *    claim that you wrote the original software. If you use this software
     23           *    in a product, an acknowledgment in the product documentation would be
     24           *    appreciated but is not required.
     25           * 2. Altered source versions must be plainly marked as such, and must not be
     26           *    misrepresented as being the original software.
     27           * 3. This notice may not be removed or altered from any source distribution.
     28           *
     29           ******************************************************************************/
     30          
     31          // -----------------------------------------------------------------------------
     32          //                                   Includes
     33          // -----------------------------------------------------------------------------
     34          #include <assert.h>
     35          #include <string.h>
     36          #include <stdlib.h>
     37          #include "sl_sleeptimer.h"
     38          #include "sl_wisun_trace_util.h"
     39          #include "sl_wisun_types.h"
     40          #include "rail_config.h"
     41          #include "cmsis_os2.h"
     42          
     43          #if defined(SL_CATALOG_FREERTOS_KERNEL_PRESENT)
     44          // FreeRTOS
     45            #include "FreeRTOS.h"
     46          #else
     47          // MicriumOS
     48            #include "sl_malloc.h"
     49          #endif
     50          
     51          // -----------------------------------------------------------------------------
     52          //                              Macros and Typedefs
     53          // -----------------------------------------------------------------------------
     54          
     55          ///  Size of the IPv6 string
     56          #define IPV6_STRING_SIZE                (40U)
     57          
     58          /// Empty IPv6 string
     59          #define IPV6_EMPTY_STRING               "::"
     60          
     61          /// Max length of the string of the phy
     62          #define PHY_STR_MAX_LENGTH              (24U)
     63          
     64          /// String of the FAN1.0
     65          #define FAN_1_0_STR                     "FAN1.0"
     66          
     67          /// String of the FAN1.1
     68          #define FAN_1_1_STR                     "FAN1.1"
     69          
     70          /// Print format string for FAN 1.0
     71          #define FAN10_FORMAT_STR                "%s-%u-%x (%s)"
     72          
     73          /// Print format string for FAN 1.0
     74          #define FAN11_FORMAT_STR                "%s-%u-%u (%s)"
     75          
     76          /// FAN 1.0 version
     77          #define VERSION_WISUN_FAN1_0             0U
     78          
     79          /// FAN 1.1 version
     80          #define VERSION_WISUN_FAN1_1             1U
     81          
     82          /// FSK PHY mode to operating mode table size
     83          #define FSK_PHY_MODE_TO_OPM_TABLE_SIZE   9U
     84          
     85          /// PHY mode minimum value
     86          #define PHY_MODE_MIN_VAL                 1U
     87          
     88          /// PHY mode minimum value
     89          #define PHY_MODE_MAX_VAL                 8U
     90          
     91          /// MAC address srting length
     92          #define MAC_ADDR_STR_LEN \
     93            ((SL_WISUN_MAC_ADDRESS_SIZE * 2) + SL_WISUN_MAC_ADDRESS_SIZE - 1)
     94          
     95          /// Allocate phy list element and return on error macro function
     96          #define __alloc_phy_list_element_and_check(__dst_ptr, __phy_cfg_ptr) \
     97            do {                                                               \
     98              (__dst_ptr) = _alloc_phy_list_element(__phy_cfg_ptr);            \
     99              if (__dst_ptr == NULL) {                                         \
    100                return NULL;                                                   \
    101              }                                                                \
    102            } while (0)
    103          
    104          /// Length of the timestamp buffer
    105          #define TIMESTAMP_BUF_LEN     32U
    106          
    107          /// Time stamp format string
    108          #define TIMESTAMP_FORMAT  "%03d-%02d:%02d:%02d"
    109          
    110          /// Milisecs in Secs
    111          #define MS_IN_SEC         1000U
    112          
    113          /// Secs in Day
    114          #define SEC_IN_DAY        86400U
    115          
    116          /// Secs in Hour
    117          #define SEC_IN_HOUR       3600U
    118          
    119          /// Secs in Minute
    120          #define SEC_IN_MINUTE     60U
    121          
    122          /// Trace util event notify max channel count
    123          #define APP_WISUN_TRACE_UTIL_EVT_NOTIFY_MAX_CHS         31U
    124          
    125          /// Trace util event notify error mask
    126          #define APP_WISUN_TRACE_UTIL_EVT_NOTIFY_ERROR_MSK       (1UL << 31U)
    127          
    128          /// Trace util event notify all flags mask
    129          #define APP_WISUN_TRACE_UTIL_EVT_NOTIFY_ALL_FLAGS_MSK   0x7FFFFFFFUL
    130          
    131          /// PHY type enumeration
    132          typedef enum phy_type {
    133            /// PHY type FSK
    134            PHY_TYPE_FSK = 0,
    135            /// PHY type FSK FEC
    136            PHY_TYPE_FSK_FEC,
    137            /// PHY type OFDM1
    138            PHY_TYPE_OFDM1,
    139            /// PHY type OFDM2
    140            PHY_TYPE_OFDM2,
    141            /// PHY type OFDM3
    142            PHY_TYPE_OFDM3,
    143            /// PHY type OFDM4
    144            PHY_TYPE_OFDM4,
    145          } phy_type_t;
    146          
    147          /// RAIL to Wi-SUN OFDM PHY mode ID map element
    148          typedef struct rail_ofdm_phy_mode_id {
    149            /// RAIL PHY mode ID
    150            uint8_t rail_phy_mode_id;
    151            /// Wi-SUN PHY mode ID min
    152            uint8_t wisun_phy_mode_id_min;
    153            /// Wi-SUN PHY mode ID max
    154            uint8_t wisun_phy_mode_id_max;
    155          } rail_ofdm_phy_mode_id_t;
    156          
    157          // -----------------------------------------------------------------------------
    158          //                          Static Function Declarations
    159          // -----------------------------------------------------------------------------
    160          
    161          /**************************************************************************//**
    162           * @brief Get string key by value from app_enum_t
    163           * @details Helper function
    164           * @param[in] app_enum Application enum storage
    165           * @param[in] val Reference value
    166           * @return const char* String value
    167           *****************************************************************************/
    168          static const char *_get_str_key_by_val_from_enum(const app_enum_t * const app_enum,
    169                                                           const uint32_t val);
    170          
    171          /**************************************************************************//**
    172           * @brief Allocate PHY list element
    173           * @details Helper function
    174           * @param[in] phy_cfg PHY config to copy
    175           * @return app_wisun_phy_list_t* Allocated element ptr or NULL on error
    176           *****************************************************************************/
    177          static app_wisun_phy_list_t *_alloc_phy_list_element(sl_wisun_phy_config_t *phy_cfg);
    178          
    179          /**************************************************************************//**
    180           * @brief Getting PHY config by channel config entry
    181           * @details Getting available PHY's configuration by channel config entry
    182           * @param[in] ch_config_entry channel config
    183           * @param[out] phy_config pointer of destination of getting
    184           * @return sl_status_t SL_STATUS_OK if it is successful, otherwise SL_STATUS_FAIL
    185           *****************************************************************************/
    186          static sl_status_t _get_phy_cfg_from_ch_cfg_entry(const RAIL_ChannelConfigEntry_t * const ch_config_entry,
    187                                                            sl_wisun_phy_config_t * const phy_config);
    188          
    189          /**************************************************************************//**
    190           * @brief Get PHY type
    191           * @details Helper function
    192           * @param[in] phy_mode_id PHY mode ID
    193           * @return uint8_t PHY type
    194           *****************************************************************************/
    195          __STATIC_INLINE uint8_t _get_phy_type(const uint8_t phy_mode_id);
    196          
    197          /**************************************************************************//**
    198           * @brief Get PHY mode
    199           * @details Helper function
    200           * @param[in] phy_mode_id PHY mode ID
    201           * @return uint8_t PHY mode
    202           *****************************************************************************/
    203          __STATIC_INLINE uint8_t _get_phy_mode(const uint8_t phy_mode_id);
    204          
    205          /**************************************************************************//**
    206           * @brief Is FSK PHY
    207           * @details Helper function
    208           * @param[in] phy_mode_id PHY mode ID
    209           * @return bool true ift it's FSK PHY, otherwise false
    210           *****************************************************************************/
    211          __STATIC_INLINE bool _is_fsk(const uint8_t phy_mode_id);
    212          
    213          /**************************************************************************//**
    214           * @brief Is OFDM PHY
    215           * @details Helper function
    216           * @param[in] phy_mode_id PHY mode ID
    217           * @return bool true ift it's OFDM PHY, otherwise false
    218           *****************************************************************************/
    219          __STATIC_INLINE bool _is_ofdm(const uint8_t phy_mode_id);
    220          
    221          /**************************************************************************//**
    222           * @brief Check PHY mode ID
    223           * @details Helper function
    224           * @param[in] phy_mode_id PHY mode ID
    225           * @return bool true ift it's valid value, otherwise false
    226           *****************************************************************************/
    227          __STATIC_INLINE bool _check_phy_mode(const uint8_t phy_mode);
    228          
    229          /**************************************************************************//**
    230           * @brief Get PHY options (Only for FAN1.1 OFDM)
    231           * @details Helper function. FAN1.1 PHY mode value will be replaced with
    232           *          Wi-SUN specific value for first option
    233           * @param[in,out] phy_cfg PHY mode ID
    234           * @return count onf options for FAN 1.1 OFDM PHYs, otherwise 1
    235           *****************************************************************************/
    236          static uint8_t _get_phy_options(sl_wisun_phy_config_t * const phy_cfg);
    237          
    238          // -----------------------------------------------------------------------------
    239          //                                Global Variables
    240          // -----------------------------------------------------------------------------
    241          
    242          /// Application enum for PHY config type

   \                                 In section .text, align 4, keep-with-next
    243          const app_enum_t app_wisun_phy_config_type_enum[] =
   \                     app_wisun_phy_config_type_enum:
   \        0x0   0x....'....        DC32 ?_0, 0, ?_1, 1, ?_2, 2, 0x0, 0
   \              0x0000'0000  
   \              0x....'....  
   \              0x0000'0001  
   \              0x....'....  
   \              0x0000'0002  
   \              0x0000'0000  
   \              0x0000'0000
    244          {
    245            { "FAN 1.0", SL_WISUN_PHY_CONFIG_FAN10 },
    246            { "FAN 1.1", SL_WISUN_PHY_CONFIG_FAN11 },
    247            { "explicit", SL_WISUN_PHY_CONFIG_EXPLICIT },
    248            { NULL, 0 }
    249          };
    250          
    251          /// Application enum for connection status

   \                                 In section .rodata, align 4
    252          const app_enum_t app_wisun_conn_status_enum[] = {
   \                     app_wisun_conn_status_enum:
   \        0x0   0x....'....        DC32 ?_3, 0, ?_4, 1, ?_5, 2, ?_6, 3, ?_7, 4, ?_8, 5, 0x0, 0
   \              0x0000'0000  
   \              0x....'....  
   \              0x0000'0001  
   \              0x....'....  
   \              0x0000'0002  
   \              0x....'....  
   \              0x0000'0003  
   \              0x....'....  
   \              0x0000'0004  
   \              0x....'....  
   \              0x0000'0005  
   \              0x0000'0000  
   \              0x0000'0000
    253            { "Disconnected", SL_WISUN_JOIN_STATE_DISCONNECTED },
    254            { "Select PAN", SL_WISUN_JOIN_STATE_SELECT_PAN },
    255            { "Authenticate", SL_WISUN_JOIN_STATE_AUTHENTICATE },
    256            { "Acquire PAN Config", SL_WISUN_JOIN_STATE_ACQUIRE_PAN_CONFIG },
    257            { "Configure Routing", SL_WISUN_JOIN_STATE_CONFIGURE_ROUTING },
    258            { "Operational", SL_WISUN_JOIN_STATE_OPERATIONAL },
    259            { NULL, 0 }
    260          };
    261          
    262          /// Application enum for regulatory domains of first phy parameter

   \                                 In section .rodata, align 4
    263          const app_enum_t app_wisun_phy_reg_domain_enum[] = {
   \                     app_wisun_phy_reg_domain_enum:
   \        0x0   0x....'....        DC32 ?_9, 0, ?_10, 1, ?_11, 2, ?_12, 3, ?_13, 4, ?_14, 5, ?_15, 6, ?_16
   \              0x0000'0000  
   \              0x....'....  
   \              0x0000'0001  
   \              0x....'....  
   \              0x0000'0002  
   \              0x....'....  
   \              0x0000'0003  
   \              0x....'....  
   \              0x0000'0004  
   \              0x....'....  
   \              0x0000'0005  
   \              0x....'....  
   \              0x0000'0006  
   \              0x....'....
   \       0x3C   0x0000'0007        DC32 7, ?_17, 8, ?_18, 9, ?_19, 10, ?_20, 11, ?_21, 12, ?_22, 13, ?_23
   \              0x....'....  
   \              0x0000'0008  
   \              0x....'....  
   \              0x0000'0009  
   \              0x....'....  
   \              0x0000'000A  
   \              0x....'....  
   \              0x0000'000B  
   \              0x....'....  
   \              0x0000'000C  
   \              0x....'....  
   \              0x0000'000D  
   \              0x....'....
   \       0x74   0x0000'000E        DC32 14, ?_24, 15, ?_25, 255, 0x0, 0
   \              0x....'....  
   \              0x0000'000F  
   \              0x....'....  
   \              0x0000'00FF  
   \              0x0000'0000  
   \              0x0000'0000
    264            { "WW", SL_WISUN_REGULATORY_DOMAIN_WW },
    265            { "NA", SL_WISUN_REGULATORY_DOMAIN_NA },
    266            { "JP", SL_WISUN_REGULATORY_DOMAIN_JP },
    267            { "EU", SL_WISUN_REGULATORY_DOMAIN_EU },
    268            { "CN", SL_WISUN_REGULATORY_DOMAIN_CN },
    269            { "IN", SL_WISUN_REGULATORY_DOMAIN_IN },
    270            { "MX", SL_WISUN_REGULATORY_DOMAIN_MX },
    271            { "BZ", SL_WISUN_REGULATORY_DOMAIN_BZ },
    272            { "AZ/NZ", SL_WISUN_REGULATORY_DOMAIN_AZ },        // NZ also
    273            { "KR", SL_WISUN_REGULATORY_DOMAIN_KR },
    274            { "PH", SL_WISUN_REGULATORY_DOMAIN_PH },
    275            { "MY", SL_WISUN_REGULATORY_DOMAIN_MY },
    276            { "HK", SL_WISUN_REGULATORY_DOMAIN_HK },
    277            { "SG", SL_WISUN_REGULATORY_DOMAIN_SG },
    278            { "TH", SL_WISUN_REGULATORY_DOMAIN_TH },
    279            { "VN", SL_WISUN_REGULATORY_DOMAIN_VN },
    280            { "APPLICATION", SL_WISUN_REGULATORY_DOMAIN_APP },  // application specific domain
    281            { NULL, 0 }
    282          };
    283          
    284          /// Application enum for network size

   \                                 In section .rodata, align 4
    285          const app_enum_t app_wisun_nw_size_enum[] = {
   \                     app_wisun_nw_size_enum:
   \        0x0   0x....'....        DC32 ?_26, 0, ?_27, 1, ?_28, 2, ?_29, 3, ?_30, 4, ?_31, 5, 0x0, 0
   \              0x0000'0000  
   \              0x....'....  
   \              0x0000'0001  
   \              0x....'....  
   \              0x0000'0002  
   \              0x....'....  
   \              0x0000'0003  
   \              0x....'....  
   \              0x0000'0004  
   \              0x....'....  
   \              0x0000'0005  
   \              0x0000'0000  
   \              0x0000'0000
    286            { "automatic", SL_WISUN_NETWORK_SIZE_AUTOMATIC },
    287            { "small", SL_WISUN_NETWORK_SIZE_SMALL },
    288            { "medium", SL_WISUN_NETWORK_SIZE_MEDIUM },
    289            { "large", SL_WISUN_NETWORK_SIZE_LARGE },
    290            { "test", SL_WISUN_NETWORK_SIZE_TEST },
    291            { "certification", SL_WISUN_NETWORK_SIZE_CERTIFICATION },
    292            { NULL, 0 }
    293          };
    294          
    295          /// Application enum for regulation

   \                                 In section .rodata, align 4
    296          const app_enum_t app_regulation_enum[] = {
   \                     app_regulation_enum:
   \        0x0   0x....'....        DC32 ?_32, 0, ?_33, 1, 0x0, 0
   \              0x0000'0000  
   \              0x....'....  
   \              0x0000'0001  
   \              0x0000'0000  
   \              0x0000'0000
    297            { "none", SL_WISUN_REGULATION_NONE },
    298            { "arib", SL_WISUN_REGULATION_ARIB },
    299            { NULL, 0 }
    300          };
    301          

   \                                 In section .rodata, align 4
    302          const app_enum_t app_wisun_phy_channel_spacing_enum[] = {
   \                     app_wisun_phy_channel_spacing_enum:
   \        0x0   0x....'....        DC32 ?_34, 0, ?_35, 1, ?_36, 2, ?_37, 3, 0x0, 0
   \              0x0000'0000  
   \              0x....'....  
   \              0x0000'0001  
   \              0x....'....  
   \              0x0000'0002  
   \              0x....'....  
   \              0x0000'0003  
   \              0x0000'0000  
   \              0x0000'0000
    303            { "100kHz", SL_WISUN_CHANNEL_SPACING_100HZ },
    304            { "200kHz", SL_WISUN_CHANNEL_SPACING_200HZ },
    305            { "400kHz", SL_WISUN_CHANNEL_SPACING_400HZ },
    306            { "600kHz", SL_WISUN_CHANNEL_SPACING_600HZ },
    307            { NULL, 0 }
    308          };
    309          

   \                                 In section .text, align 4, keep-with-next
    310          const app_enum_t app_wisun_device_type_enum[] =
   \                     app_wisun_device_type_enum:
   \        0x0   0x....'....        DC32 ?_38, 0, ?_39, 1, 0x0, 0
   \              0x0000'0000  
   \              0x....'....  
   \              0x0000'0001  
   \              0x0000'0000  
   \              0x0000'0000
    311          {
    312            { "FFN", SL_WISUN_ROUTER },
    313            { "LFN", SL_WISUN_LFN },
    314            { NULL, 0 }
    315          };
    316          

   \                                 In section .text, align 4, keep-with-next
    317          const app_enum_t app_wisun_lfn_profile_enum[] =
   \                     app_wisun_lfn_profile_enum:
   \        0x0   0x....'....        DC32 ?_30, 0, ?_40, 1, ?_41, 2, 0x0, 0
   \              0x0000'0000  
   \              0x....'....  
   \              0x0000'0001  
   \              0x....'....  
   \              0x0000'0002  
   \              0x0000'0000  
   \              0x0000'0000
    318          {
    319            { "test", SL_WISUN_LFN_PROFILE_TEST },
    320            { "balanced", SL_WISUN_LFN_PROFILE_BALANCED },
    321            { "eco", SL_WISUN_LFN_PROFILE_ECO },
    322            { NULL, 0 }
    323          };
    324          
    325          // -----------------------------------------------------------------------------
    326          //                                Static Variables
    327          // -----------------------------------------------------------------------------
    328          
    329          /// FSK phy mode ID to operation mode table

   \                                 In section .text, align 4, keep-with-next
    330          static const uint8_t _fsk_phy_mode_to_op_mode[FSK_PHY_MODE_TO_OPM_TABLE_SIZE] = {
   \                     _fsk_phy_mode_to_op_mode:
   \        0x0   0xFF 0x1A          DC8 255, 26, 27, 42, 43, 3, 74, 75, 5
   \              0x1B 0x2A    
   \              0x2B 0x03    
   \              0x4A 0x4B    
   \              0x05
   \        0x9                      DS8 3
    331            0xFF, 0x1a, 0x1b, 0x2a, 0x2b, 0x3, 0x4a, 0x4b, 0x5
    332          };
    333          
    334          /// Wi-SUN OFDM PHY mode ID map

   \                                 In section .text, align 4, keep-with-next
    335          static const rail_ofdm_phy_mode_id_t _ofdm_phy_map[] = {
   \                     _ofdm_phy_map:
   \        0x0   0x20 0x22          DC8 32, 34, 39, 48, 51, 55, 64, 68, 71, 80, 84, 87
   \              0x27 0x30    
   \              0x33 0x37    
   \              0x40 0x44    
   \              0x47 0x50    
   \              0x54 0x57
    336            {
    337              .rail_phy_mode_id = 32,
    338              .wisun_phy_mode_id_min = 34,
    339              .wisun_phy_mode_id_max = 39
    340            },
    341            {
    342              .rail_phy_mode_id = 48,
    343              .wisun_phy_mode_id_min = 51,
    344              .wisun_phy_mode_id_max = 55
    345            },
    346            {
    347              .rail_phy_mode_id = 64,
    348              .wisun_phy_mode_id_min = 68,
    349              .wisun_phy_mode_id_max = 71
    350            },
    351            {
    352              .rail_phy_mode_id = 80,
    353              .wisun_phy_mode_id_min = 84,
    354              .wisun_phy_mode_id_max = 87
    355            }
    356          };
    357          
    358          // -----------------------------------------------------------------------------
    359          //                          Public Function Definitions
    360          // -----------------------------------------------------------------------------
    361          

   \                                 In section .text, align 2, keep-with-next
    362          void *app_wisun_malloc(size_t size)
    363          {
    364            void *ptr = NULL;
    365          #if defined(SL_CATALOG_FREERTOS_KERNEL_PRESENT)
    366            // FreeRTOS
    367            ptr =  pvPortMalloc(size);
    368          #else
    369            // MicriumOS
    370            ptr = sl_malloc(size);
    371          #endif
    372            return ptr;
   \                     app_wisun_malloc: (+1)
   \        0x0   0x.... 0x....      B.W      pvPortMalloc
    373          }
    374          

   \                                 In section .text, align 2, keep-with-next
    375          void app_wisun_free(void *addr)
    376          {
    377          #if defined(SL_CATALOG_FREERTOS_KERNEL_PRESENT)
    378            // FreeRTOS
    379            vPortFree(addr);
   \                     app_wisun_free: (+1)
   \        0x0   0x.... 0x....      B.W      vPortFree
    380          #else
    381            // MicriumOS
    382            sl_free(addr);
    383          #endif
    384          }
    385          

   \                                 In section .text, align 2, keep-with-next
    386          const char* app_wisun_trace_util_get_ip_str(const void *const addr)
    387          {
   \                     app_wisun_trace_util_get_ip_str: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
    388            char *dst = NULL;
    389            bool ipv6_res = false;
    390          
    391            if (addr == NULL) {
   \        0x4   0x....             ADR.N    R6,??DataTable19
   \        0x6   0xD00A             BEQ.N    ??app_wisun_trace_util_get_ip_str_0
    392              return IPV6_EMPTY_STRING;
    393            }
    394          
    395            // allocate string buffer
    396            dst = app_wisun_malloc(IPV6_STRING_SIZE);
   \        0x8   0x2028             MOVS     R0,#+40
   \        0xA   0x.... 0x....      BL       app_wisun_malloc
   \        0xE   0x0005             MOVS     R5,R0
    397            if (dst == NULL) {
   \       0x10   0xD005             BEQ.N    ??app_wisun_trace_util_get_ip_str_0
    398              return IPV6_EMPTY_STRING;
    399            }
    400          
    401            ipv6_res = ip6tos(addr, dst);  // convert address binary to text for wisun and ipv6
   \       0x12   0x4629             MOV      R1,R5
   \       0x14   0x4620             MOV      R0,R4
   \       0x16   0x.... 0x....      BL       ip6tos
   \       0x1A   0xB100             CBZ.N    R0,??app_wisun_trace_util_get_ip_str_0
   \       0x1C   0x462E             MOV      R6,R5
   \                     ??app_wisun_trace_util_get_ip_str_0: (+1)
   \       0x1E   0x4630             MOV      R0,R6
   \       0x20   0xBD70             POP      {R4-R6,PC}
    402            return ipv6_res ? dst : IPV6_EMPTY_STRING; // dst -> success, empty string -> error;
    403          }
    404          

   \                                 In section .text, align 2, keep-with-next
    405          const char * app_wisun_trace_util_conn_state_to_str(const uint32_t val)
    406          {
   \                     app_wisun_trace_util_conn_state_to_str: (+1)
   \        0x0   0x4601             MOV      R1,R0
    407            return _get_str_key_by_val_from_enum(app_wisun_conn_status_enum, val);
   \        0x2   0x....             LDR.N    R0,??DataTable20
   \        0x4   0x....             B.N      _get_str_key_by_val_from_enum
    408          }
    409          

   \                                 In section .text, align 2, keep-with-next
    410          const char * app_wisun_trace_util_reg_domain_to_str(const uint32_t val)
    411          {
   \                     app_wisun_trace_util_reg_domain_to_str: (+1)
   \        0x0   0x4601             MOV      R1,R0
    412            return _get_str_key_by_val_from_enum(app_wisun_phy_reg_domain_enum, val);
   \        0x2   0x....             LDR.N    R0,??DataTable20_1
   \        0x4   0x....             B.N      _get_str_key_by_val_from_enum
    413          }
    414          

   \                                 In section .text, align 2, keep-with-next
    415          const char * app_wisun_trace_util_nw_size_to_str(const uint32_t val)
    416          {
   \                     app_wisun_trace_util_nw_size_to_str: (+1)
   \        0x0   0x4601             MOV      R1,R0
    417            return _get_str_key_by_val_from_enum(app_wisun_nw_size_enum, val);
   \        0x2   0x....             LDR.N    R0,??DataTable20_2
   \        0x4   0x....             B.N      _get_str_key_by_val_from_enum
    418          }
    419          

   \                                 In section .text, align 2, keep-with-next
    420          const char * app_wisun_trace_util_phy_cfg_type_to_str(const uint32_t val)
    421          {
   \                     app_wisun_trace_util_phy_cfg_type_to_str: (+1)
   \        0x0   0x....             B.N      ?Subroutine0

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0x4601             MOV      R1,R0
    422            return _get_str_key_by_val_from_enum(app_wisun_phy_config_type_enum, val);
   \        0x2   0x.... 0x....      ADR.W    R0,app_wisun_phy_config_type_enum
   \        0x6   0x....             B.N      _get_str_key_by_val_from_enum
    423          }
    424          

   \                                 In section .text, align 2, keep-with-next
    425          const char * app_wisun_trace_util_ch_spacing_to_str(const uint32_t val)
    426          {
   \                     app_wisun_trace_util_ch_spacing_to_str: (+1)
   \        0x0   0x4601             MOV      R1,R0
    427            return _get_str_key_by_val_from_enum(app_wisun_phy_channel_spacing_enum, val);
   \        0x2   0x....             LDR.N    R0,??DataTable20_3
   \        0x4   0x....             B.N      _get_str_key_by_val_from_enum
    428          }
    429          

   \                                 In section .text, align 4, keep-with-next
    430          const char * app_wisun_trace_util_profile_to_str(const uint32_t val)
    431          {
   \                     app_wisun_trace_util_profile_to_str: (+1)
   \        0x0   0xBF00             Nop
   \        0x2                      REQUIRE ?Subroutine0
   \        0x2                      ;; // Fall through to label ?Subroutine0
    432            return _get_str_key_by_val_from_enum(app_wisun_phy_config_type_enum, val);
    433          }
    434          

   \                                 In section .text, align 2, keep-with-next
    435          const char * app_wisun_trace_util_device_type_to_str(const uint32_t val)
    436          {
   \                     app_wisun_trace_util_device_type_to_str: (+1)
   \        0x0   0x4601             MOV      R1,R0
    437            return _get_str_key_by_val_from_enum(app_wisun_device_type_enum, val);
   \        0x2   0x.... 0x....      ADR.W    R0,app_wisun_device_type_enum
   \        0x6   0x....             B.N      _get_str_key_by_val_from_enum
    438          }
    439          

   \                                 In section .text, align 2, keep-with-next
    440          const char * app_wisun_trace_util_lfn_profile_to_str(const uint32_t val)
    441          {
   \                     app_wisun_trace_util_lfn_profile_to_str: (+1)
   \        0x0   0x4601             MOV      R1,R0
    442            return _get_str_key_by_val_from_enum(app_wisun_lfn_profile_enum, val);
   \        0x2   0x.... 0x....      ADR.W    R0,app_wisun_lfn_profile_enum
   \        0x6   0x....             B.N      _get_str_key_by_val_from_enum
    443          }
    444          

   \                                 In section .text, align 2, keep-with-next
    445          app_wisun_phy_list_t *app_wisun_get_phy_list(app_wisun_phy_filter_t filter)
    446          {
   \                     app_wisun_get_phy_list: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
    447            static sl_wisun_phy_config_t phy_cfg = { 0U };
    448            app_wisun_phy_list_t *head    = NULL;
   \        0x4   0xF04F 0x0800      MOV      R8,#+0
   \        0x8   0x4682             MOV      R10,R0
    449            app_wisun_phy_list_t *tail    = NULL;
    450            app_wisun_phy_list_t *p       = NULL;
    451            sl_status_t status            = SL_STATUS_OK;
    452            bool filter_res               = false;
    453            uint8_t phy_option_cnt        = 0U;
    454          
    455            // Iterate channel configs
    456            for (uint16_t idx = 0U; channelConfigs[idx] != NULL; ++idx) {
   \        0xA   0x46C1             MOV      R9,R8
   \        0xC   0x....             LDR.N    R5,??DataTable20_4
   \        0xE   0xE003             B.N      ??app_wisun_get_phy_list_0
   \                     ??app_wisun_get_phy_list_1: (+1)
   \       0x10   0xF109 0x0001      ADD      R0,R9,#+1
   \       0x14   0xFA1F 0xF980      UXTH     R9,R0
   \                     ??app_wisun_get_phy_list_0: (+1)
   \       0x18   0x....             LDR.N    R1,??DataTable20_5
   \       0x1A   0xF851 0x0029      LDR      R0,[R1, R9, LSL #+2]
   \       0x1E   0x2800             CMP      R0,#+0
   \       0x20   0xF000 0x808A      BEQ.W    ??app_wisun_get_phy_list_2
    457              // Iterate channel config entries
    458              for (uint16_t ch_entry_idx = 0U; ch_entry_idx < channelConfigs[idx]->length; ++ch_entry_idx) {
   \       0x24   0xF04F 0x0B00      MOV      R11,#+0
   \       0x28   0xE001             B.N      ??app_wisun_get_phy_list_3
   \                     ??app_wisun_get_phy_list_4: (+1)
   \       0x2A   0xF10B 0x0B01      ADD      R11,R11,#+1
   \                     ??app_wisun_get_phy_list_3: (+1)
   \       0x2E   0x....             LDR.N    R0,??DataTable20_5
   \       0x30   0xF850 0x0029      LDR      R0,[R0, R9, LSL #+2]
   \       0x34   0xFA1F 0xF18B      UXTH     R1,R11
   \       0x38   0x68C3             LDR      R3,[R0, #+12]
   \       0x3A   0x4299             CMP      R1,R3
   \       0x3C   0xD2E8             BCS.N    ??app_wisun_get_phy_list_1
    459                // Get PHY CFG
    460                status = _get_phy_cfg_from_ch_cfg_entry(&channelConfigs[idx]->configs[ch_entry_idx], &phy_cfg);
   \       0x3E   0x6882             LDR      R2,[R0, #+8]
   \       0x40   0x2024             MOVS     R0,#+36
   \       0x42   0x4341             MULS     R1,R0,R1
   \       0x44   0x1850             ADDS     R0,R2,R1
   \       0x46   0xD0F0             BEQ.N    ??app_wisun_get_phy_list_4
   \       0x48   0x69C7             LDR      R7,[R0, #+28]
   \       0x4A   0x7838             LDRB     R0,[R7, #+0]
   \       0x4C   0x2807             CMP      R0,#+7
   \       0x4E   0xD1EC             BNE.N    ??app_wisun_get_phy_list_4
   \       0x50   0x7878             LDRB     R0,[R7, #+1]
   \       0x52   0x78B9             LDRB     R1,[R7, #+2]
   \       0x54   0x0904             LSRS     R4,R0,#+4
   \       0x56   0xF000 0x060F      AND      R6,R0,#0xF
   \       0x5A   0xB199             CBZ.N    R1,??app_wisun_get_phy_list_5
   \       0x5C   0x2901             CMP      R1,#+1
   \       0x5E   0xD1E4             BNE.N    ??app_wisun_get_phy_list_4
   \       0x60   0x.... 0x....      BL       _is_fsk
   \       0x64   0xB928             CBNZ.N   R0,??app_wisun_get_phy_list_6
   \       0x66   0x7878             LDRB     R0,[R7, #+1]
   \       0x68   0x0900             LSRS     R0,R0,#+4
   \       0x6A   0x2801             CMP      R0,#+1
   \       0x6C   0xDDDD             BLE.N    ??app_wisun_get_phy_list_4
   \       0x6E   0x2806             CMP      R0,#+6
   \       0x70   0xDADB             BGE.N    ??app_wisun_get_phy_list_4
   \                     ??app_wisun_get_phy_list_6: (+1)
   \       0x72   0x2001             MOVS     R0,#+1
   \       0x74   0x6028             STR      R0,[R5, #+0]
   \       0x76   0x7939             LDRB     R1,[R7, #+4]
   \       0x78   0x7129             STRB     R1,[R5, #+4]
   \       0x7A   0x78F8             LDRB     R0,[R7, #+3]
   \       0x7C   0x7168             STRB     R0,[R5, #+5]
   \       0x7E   0x7879             LDRB     R1,[R7, #+1]
   \       0x80   0x71A9             STRB     R1,[R5, #+6]
   \       0x82   0xE016             B.N      ??app_wisun_get_phy_list_7
   \                     ??app_wisun_get_phy_list_5: (+1)
   \       0x84   0x.... 0x....      BL       _is_fsk
   \       0x88   0x2800             CMP      R0,#+0
   \       0x8A   0xBF18             IT       NE
   \       0x8C   0x2E00             CMPNE    R6,#+0
   \       0x8E   0xD0CC             BEQ.N    ??app_wisun_get_phy_list_4
   \       0x90   0x2E09             CMP      R6,#+9
   \       0x92   0xD2CA             BCS.N    ??app_wisun_get_phy_list_4
   \       0x94   0x2100             MOVS     R1,#+0
   \       0x96   0x6029             STR      R1,[R5, #+0]
   \       0x98   0x7938             LDRB     R0,[R7, #+4]
   \       0x9A   0x2C01             CMP      R4,#+1
   \       0x9C   0x7128             STRB     R0,[R5, #+4]
   \       0x9E   0x78F9             LDRB     R1,[R7, #+3]
   \       0xA0   0x.... 0x....      ADR.W    R0,_fsk_phy_mode_to_op_mode
   \       0xA4   0x7169             STRB     R1,[R5, #+5]
   \       0xA6   0x5D82             LDRB     R2,[R0, R6]
   \       0xA8   0x71AA             STRB     R2,[R5, #+6]
   \       0xAA   0xBF0C             ITE      EQ
   \       0xAC   0x2001             MOVEQ    R0,#+1
   \       0xAE   0x2000             MOVNE    R0,#+0
   \       0xB0   0x71E8             STRB     R0,[R5, #+7]
    461                if (status != SL_STATUS_OK) {
    462                  continue;
    463                }
    464          
    465                // Get count of PHY options. Only FAN1.1 OFDM PHYs has more options
    466                phy_option_cnt = _get_phy_options(&phy_cfg);
   \                     ??app_wisun_get_phy_list_7: (+1)
   \       0xB2   0x6828             LDR      R0,[R5, #+0]
   \       0xB4   0x2801             CMP      R0,#+1
   \       0xB6   0xD10C             BNE.N    ??app_wisun_get_phy_list_8
   \       0xB8   0x2200             MOVS     R2,#+0
   \                     ??app_wisun_get_phy_list_9: (+1)
   \       0xBA   0x.... 0x....      ADR.W    R1,_ofdm_phy_map
   \       0xBE   0xEB02 0x0042      ADD      R0,R2,R2, LSL #+1
   \       0xC2   0x4408             ADD      R0,R1,R0
   \       0xC4   0x79AB             LDRB     R3,[R5, #+6]
   \       0xC6   0x7801             LDRB     R1,[R0, #+0]
   \       0xC8   0x428B             CMP      R3,R1
   \       0xCA   0xD005             BEQ.N    ??app_wisun_get_phy_list_10
   \       0xCC   0x1C52             ADDS     R2,R2,#+1
   \       0xCE   0x2A04             CMP      R2,#+4
   \       0xD0   0xD3F3             BCC.N    ??app_wisun_get_phy_list_9
   \                     ??app_wisun_get_phy_list_8: (+1)
   \       0xD2   0x2401             MOVS     R4,#+1
    467                for (uint8_t opt = 0U; opt < phy_option_cnt; ++opt) {
   \                     ??app_wisun_get_phy_list_11: (+1)
   \       0xD4   0x2600             MOVS     R6,#+0
   \       0xD6   0xE013             B.N      ??app_wisun_get_phy_list_12
   \                     ??app_wisun_get_phy_list_10: (+1)
   \       0xD8   0x7841             LDRB     R1,[R0, #+1]
   \       0xDA   0x71A9             STRB     R1,[R5, #+6]
   \       0xDC   0x7884             LDRB     R4,[R0, #+2]
   \       0xDE   0x7840             LDRB     R0,[R0, #+1]
   \       0xE0   0x1A24             SUBS     R4,R4,R0
   \       0xE2   0x1C64             ADDS     R4,R4,#+1
   \       0xE4   0xB2E4             UXTB     R4,R4
   \       0xE6   0xE7F5             B.N      ??app_wisun_get_phy_list_11
    468                  if (filter != NULL) {
    469                    filter_res = filter(&phy_cfg);
    470                    if (!filter_res) {
    471                      continue;
    472                    }
    473                  }
    474          
    475                  // first element in the list
    476                  if (head == NULL) {
    477                    __alloc_phy_list_element_and_check(head, &phy_cfg);
    478                    continue;
    479                  }
    480          
    481                  // allocate new element
    482                  __alloc_phy_list_element_and_check(p, &phy_cfg);
    483          
    484                  // move tail to end of the list
    485                  tail = head;
    486                  while (tail->next != NULL) {
    487                    tail = tail->next;
   \                     ??app_wisun_get_phy_list_13: (+1)
   \       0xE8   0x4602             MOV      R2,R0
    488                  }
   \                     ??app_wisun_get_phy_list_14: (+1)
   \       0xEA   0x6950             LDR      R0,[R2, #+20]
   \       0xEC   0x2800             CMP      R0,#+0
   \       0xEE   0xD1FB             BNE.N    ??app_wisun_get_phy_list_13
    489                  tail->next = p;
   \       0xF0   0x6151             STR      R1,[R2, #+20]
    490          
    491                  // increment PHY mode id for FAN11 OFDM PHYs
    492                  if (phy_cfg.type == SL_WISUN_PHY_CONFIG_FAN11) {
   \       0xF2   0x6828             LDR      R0,[R5, #+0]
   \       0xF4   0x2801             CMP      R0,#+1
   \       0xF6   0xD102             BNE.N    ??app_wisun_get_phy_list_15
    493                    ++phy_cfg.config.fan11.phy_mode_id;
   \       0xF8   0x79A8             LDRB     R0,[R5, #+6]
   \       0xFA   0x1C40             ADDS     R0,R0,#+1
   \       0xFC   0x71A8             STRB     R0,[R5, #+6]
    494                  }
   \                     ??app_wisun_get_phy_list_15: (+1)
   \       0xFE   0x1C76             ADDS     R6,R6,#+1
   \                     ??app_wisun_get_phy_list_12: (+1)
   \      0x100   0xB2F0             UXTB     R0,R6
   \      0x102   0x42A0             CMP      R0,R4
   \      0x104   0xDA91             BGE.N    ??app_wisun_get_phy_list_4
   \      0x106   0xF1BA 0x0F00      CMP      R10,#+0
   \      0x10A   0xD003             BEQ.N    ??app_wisun_get_phy_list_16
   \      0x10C   0x4628             MOV      R0,R5
   \      0x10E   0x47D0             BLX      R10
   \      0x110   0x2800             CMP      R0,#+0
   \      0x112   0xD0F4             BEQ.N    ??app_wisun_get_phy_list_15
   \                     ??app_wisun_get_phy_list_16: (+1)
   \      0x114   0xF1B8 0x0F00      CMP      R8,#+0
   \      0x118   0x4628             MOV      R0,R5
   \      0x11A   0xD105             BNE.N    ??app_wisun_get_phy_list_17
   \      0x11C   0x.... 0x....      BL       _alloc_phy_list_element
   \      0x120   0xEA5F 0x0800      MOVS     R8,R0
   \      0x124   0xD1EB             BNE.N    ??app_wisun_get_phy_list_15
   \      0x126   0xE005             B.N      ??app_wisun_get_phy_list_18
   \                     ??app_wisun_get_phy_list_17: (+1)
   \      0x128   0x.... 0x....      BL       _alloc_phy_list_element
   \      0x12C   0x0001             MOVS     R1,R0
   \      0x12E   0xBF18             IT       NE
   \      0x130   0x4642             MOVNE    R2,R8
   \      0x132   0xD1DA             BNE.N    ??app_wisun_get_phy_list_14
   \                     ??app_wisun_get_phy_list_18: (+1)
   \      0x134   0x2000             MOVS     R0,#+0
   \      0x136   0xE000             B.N      ??app_wisun_get_phy_list_19
    495                }
    496              }
    497            }
    498          
    499            return head;
   \                     ??app_wisun_get_phy_list_2: (+1)
   \      0x138   0x4640             MOV      R0,R8
   \                     ??app_wisun_get_phy_list_19: (+1)
   \      0x13A   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}
    500          }

   \                                 In section .bss, align 4
   \                     `app_wisun_get_phy_list::phy_cfg`:
   \        0x0                      DS8 16
    501          

   \                                 In section .text, align 2, keep-with-next
    502          app_wisun_phy_list_t *app_wisun_filter_phy_list(app_wisun_phy_list_t *list,
    503                                                          app_wisun_phy_filter_t filter)
    504          {
   \                     app_wisun_filter_phy_list: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460E             MOV      R6,R1
    505            app_wisun_phy_list_t *head = NULL;
   \        0x6   0x2400             MOVS     R4,#+0
    506            app_wisun_phy_list_t *tail = NULL;
    507            app_wisun_phy_list_t *p    = NULL;
    508          
    509            if (list == NULL || filter == NULL) {
   \        0x8   0xB18D             CBZ.N    R5,??app_wisun_filter_phy_list_0
   \        0xA   0x0030             MOVS     R0,R6
   \        0xC   0xD00F             BEQ.N    ??app_wisun_filter_phy_list_0
    510              return NULL;
    511            }
    512          
    513            for (app_wisun_phy_list_t *iter = list; iter != NULL; iter = iter->next) {
    514              if (!filter(&iter->phy_cfg)) {
   \                     ??app_wisun_filter_phy_list_1: (+1)
   \        0xE   0x1D28             ADDS     R0,R5,#+4
   \       0x10   0x47B0             BLX      R6
   \       0x12   0xB198             CBZ.N    R0,??app_wisun_filter_phy_list_2
    515                continue;
    516              }
    517          
    518              // first element in the list
    519              if (head == NULL) {
   \       0x14   0xB92C             CBNZ.N   R4,??app_wisun_filter_phy_list_3
    520                __alloc_phy_list_element_and_check(head, &iter->phy_cfg);
   \       0x16   0x1D28             ADDS     R0,R5,#+4
   \       0x18   0x.... 0x....      BL       _alloc_phy_list_element
   \       0x1C   0x0004             MOVS     R4,R0
   \       0x1E   0xD10D             BNE.N    ??app_wisun_filter_phy_list_2
   \       0x20   0xE005             B.N      ??app_wisun_filter_phy_list_0
    521                continue;
    522              }
    523          
    524              // allocate new element
    525              __alloc_phy_list_element_and_check(p, &iter->phy_cfg);
   \                     ??app_wisun_filter_phy_list_3: (+1)
   \       0x22   0x1D28             ADDS     R0,R5,#+4
   \       0x24   0x.... 0x....      BL       _alloc_phy_list_element
   \       0x28   0xB108             CBZ.N    R0,??app_wisun_filter_phy_list_0
    526          
    527              // move tail to end of the list
    528              tail = head;
   \       0x2A   0x4622             MOV      R2,R4
   \       0x2C   0xE002             B.N      ??app_wisun_filter_phy_list_4
   \                     ??app_wisun_filter_phy_list_0: (+1)
   \       0x2E   0x2000             MOVS     R0,#+0
   \       0x30   0xBD70             POP      {R4-R6,PC}
    529              while (tail->next != NULL) {
    530                tail = tail->next;
   \                     ??app_wisun_filter_phy_list_5: (+1)
   \       0x32   0x460A             MOV      R2,R1
    531              }
   \                     ??app_wisun_filter_phy_list_4: (+1)
   \       0x34   0x6951             LDR      R1,[R2, #+20]
   \       0x36   0x2900             CMP      R1,#+0
   \       0x38   0xD1FB             BNE.N    ??app_wisun_filter_phy_list_5
    532              tail->next = p;
   \       0x3A   0x6150             STR      R0,[R2, #+20]
    533            }
   \                     ??app_wisun_filter_phy_list_2: (+1)
   \       0x3C   0x696D             LDR      R5,[R5, #+20]
   \       0x3E   0x2D00             CMP      R5,#+0
   \       0x40   0xD1E5             BNE.N    ??app_wisun_filter_phy_list_1
    534          
    535            return head;
   \       0x42   0x4620             MOV      R0,R4
   \       0x44   0xBD70             POP      {R4-R6,PC}
    536          }
    537          

   \                                 In section .text, align 2, keep-with-next
    538          void app_wisun_destroy_phy_list(app_wisun_phy_list_t * list)
    539          {
   \                     app_wisun_destroy_phy_list: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
    540            app_wisun_phy_list_t *tmp = NULL;
   \        0x4   0xE007             B.N      ??app_wisun_destroy_phy_list_0
    541            while (list != NULL) {
    542              tmp = list;
   \                     ??app_wisun_destroy_phy_list_1: (+1)
   \        0x6   0x4625             MOV      R5,R4
    543              list = list->next;
    544              app_wisun_free((void *)tmp->name);
   \        0x8   0x6828             LDR      R0,[R5, #+0]
   \        0xA   0x6964             LDR      R4,[R4, #+20]
   \        0xC   0x.... 0x....      BL       app_wisun_free
    545              app_wisun_free((void *)tmp);
   \       0x10   0x4628             MOV      R0,R5
   \       0x12   0x.... 0x....      BL       vPortFree
    546            }
   \                     ??app_wisun_destroy_phy_list_0: (+1)
   \       0x16   0x2C00             CMP      R4,#+0
   \       0x18   0xD1F5             BNE.N    ??app_wisun_destroy_phy_list_1
    547          }
   \       0x1A   0xBD31             POP      {R0,R4,R5,PC}
    548          

   \                                 In section .text, align 4, keep-with-next
    549          const char *app_wisun_phy_to_str(sl_wisun_phy_config_t *phy_cfg)
    550          {
   \                     app_wisun_phy_to_str: (+1)
   \        0x0   0xB53E             PUSH     {R1-R5,LR}
   \        0x2   0x.... 0x....      BL       ?Subroutine1
    551            char *str = NULL;
    552          
    553            str = app_wisun_malloc(PHY_STR_MAX_LENGTH);
   \                     ??CrossCallReturnLabel_2: (+1)
   \        0x6   0x0004             MOVS     R4,R0
    554          
    555            if (str == NULL) {
   \        0x8   0xD101             BNE.N    ??app_wisun_phy_to_str_0
    556              return NULL;
   \        0xA   0x2000             MOVS     R0,#+0
   \        0xC   0xBD3E             POP      {R1-R5,PC}
    557            }
    558          
    559            if (phy_cfg->type == SL_WISUN_PHY_CONFIG_FAN10) {
   \                     ??app_wisun_phy_to_str_0: (+1)
   \        0xE   0x6828             LDR      R0,[R5, #+0]
   \       0x10   0xB958             CBNZ.N   R0,??app_wisun_phy_to_str_1
    560              snprintf(str, PHY_STR_MAX_LENGTH, FAN10_FORMAT_STR,
    561                       app_wisun_trace_util_reg_domain_to_str(phy_cfg->config.fan10.reg_domain),
    562                       phy_cfg->config.fan10.op_class,
    563                       phy_cfg->config.fan10.op_mode,
    564                       FAN_1_0_STR);
   \       0x12   0x7928             LDRB     R0,[R5, #+4]
   \       0x14   0x.... 0x....      BL       app_wisun_trace_util_reg_domain_to_str
   \       0x18   0x....             ADR.N    R1,?_46
   \       0x1A   0x4603             MOV      R3,R0
   \       0x1C   0x9102             STR      R1,[SP, #+8]
   \       0x1E   0x79A8             LDRB     R0,[R5, #+6]
   \       0x20   0x....             ADR.N    R2,?_45
   \       0x22   0x9001             STR      R0,[SP, #+4]
   \       0x24   0x7969             LDRB     R1,[R5, #+5]
   \       0x26   0x9100             STR      R1,[SP, #+0]
   \       0x28   0xE00F             B.N      ??app_wisun_phy_to_str_2
    565            } else if (phy_cfg->type == SL_WISUN_PHY_CONFIG_FAN11) {
   \                     ??app_wisun_phy_to_str_1: (+1)
   \       0x2A   0x6828             LDR      R0,[R5, #+0]
   \       0x2C   0x2801             CMP      R0,#+1
   \       0x2E   0xD111             BNE.N    ??app_wisun_phy_to_str_3
    566              snprintf(str, PHY_STR_MAX_LENGTH, FAN11_FORMAT_STR,
    567                       app_wisun_trace_util_reg_domain_to_str(phy_cfg->config.fan11.reg_domain),
    568                       phy_cfg->config.fan11.chan_plan_id,
    569                       phy_cfg->config.fan11.phy_mode_id,
    570                       FAN_1_1_STR);
   \       0x30   0x7928             LDRB     R0,[R5, #+4]
   \       0x32   0x.... 0x....      BL       app_wisun_trace_util_reg_domain_to_str
   \       0x36   0xBF00             Nop
   \       0x38   0x....             ADR.N    R2,?_48
   \       0x3A   0x9202             STR      R2,[SP, #+8]
   \       0x3C   0x79A9             LDRB     R1,[R5, #+6]
   \       0x3E   0x4603             MOV      R3,R0
   \       0x40   0x9101             STR      R1,[SP, #+4]
   \       0x42   0x796A             LDRB     R2,[R5, #+5]
   \       0x44   0xF8CD 0x2000      STR.W    R2,[SP, #+0]
   \       0x48   0x....             ADR.N    R2,?_47
   \                     ??app_wisun_phy_to_str_2: (+1)
   \       0x4A   0x2118             MOVS     R1,#+24
   \       0x4C   0x4620             MOV      R0,R4
   \       0x4E   0x.... 0x....      BL       snprintf
   \       0x52   0xE002             B.N      ??app_wisun_phy_to_str_4
    571            } else {
    572              app_wisun_free(str);
   \                     ??app_wisun_phy_to_str_3: (+1)
   \       0x54   0x4620             MOV      R0,R4
   \       0x56   0x.... 0x....      BL       app_wisun_free
    573            }
    574          
    575            return (const char *) str;
   \                     ??app_wisun_phy_to_str_4: (+1)
   \       0x5A   0x4620             MOV      R0,R4
   \       0x5C   0xBD3E             POP      {R1-R5,PC}
    576          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \        0x0   0x4605             MOV      R5,R0
   \                     ??Subroutine1_0: (+1)
   \        0x2   0x2018             MOVS     R0,#+24
   \        0x4   0x....             B.N      app_wisun_malloc
    577          

   \                                 In section .text, align 2, keep-with-next
    578          const char *app_wisun_mac_addr_to_str(const sl_wisun_mac_address_t *mac_addr)
    579          {
   \                     app_wisun_mac_addr_to_str: (+1)
   \        0x0   0xB530             PUSH     {R4,R5,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0xB087             SUB      SP,SP,#+28
    580            char *buf = NULL;
    581          
    582            buf = app_wisun_malloc(MAC_ADDR_STR_LEN + 1);
   \        0x6   0x.... 0x....      BL       ??Subroutine1_0
   \                     ??CrossCallReturnLabel_0: (+1)
   \        0xA   0x0004             MOVS     R4,R0
    583            if (buf == NULL) {
   \        0xC   0xBF08             IT       EQ
   \        0xE   0x2000             MOVEQ    R0,#+0
    584              return NULL;
   \       0x10   0xD014             BEQ.N    ??app_wisun_mac_addr_to_str_0
    585            }
    586          
    587            snprintf(buf, MAC_ADDR_STR_LEN + 1,
    588                     "%.2X:%.2X:%.2X:%.2X:%.2X:%.2X:%.2X:%.2X",
    589                     mac_addr->address[0],
    590                     mac_addr->address[1],
    591                     mac_addr->address[2],
    592                     mac_addr->address[3],
    593                     mac_addr->address[4],
    594                     mac_addr->address[5],
    595                     mac_addr->address[6],
    596                     mac_addr->address[7]);
   \       0x12   0x79E8             LDRB     R0,[R5, #+7]
   \       0x14   0x....             LDR.N    R2,??DataTable20_6
   \       0x16   0x9006             STR      R0,[SP, #+24]
   \       0x18   0x79A9             LDRB     R1,[R5, #+6]
   \       0x1A   0x9105             STR      R1,[SP, #+20]
   \       0x1C   0x7968             LDRB     R0,[R5, #+5]
   \       0x1E   0x9004             STR      R0,[SP, #+16]
   \       0x20   0x7929             LDRB     R1,[R5, #+4]
   \       0x22   0x9103             STR      R1,[SP, #+12]
   \       0x24   0x78E8             LDRB     R0,[R5, #+3]
   \       0x26   0x9002             STR      R0,[SP, #+8]
   \       0x28   0x78A9             LDRB     R1,[R5, #+2]
   \       0x2A   0x9101             STR      R1,[SP, #+4]
   \       0x2C   0x7868             LDRB     R0,[R5, #+1]
   \       0x2E   0x2118             MOVS     R1,#+24
   \       0x30   0x9000             STR      R0,[SP, #+0]
   \       0x32   0x782B             LDRB     R3,[R5, #+0]
   \       0x34   0x4620             MOV      R0,R4
   \       0x36   0x.... 0x....      BL       snprintf
    597            return (const char *)buf;
   \       0x3A   0x4620             MOV      R0,R4
   \                     ??app_wisun_mac_addr_to_str_0: (+1)
   \       0x3C   0xB007             ADD      SP,SP,#+28
   \       0x3E   0xBD30             POP      {R4,R5,PC}
    598          }
    599          
    600          #if !defined(SL_CATALOG_WISUN_NCP_PRESENT)
    601          const sl_wisun_connection_params_t *sl_wisun_get_conn_param_by_nw_size(const sl_wisun_network_size_t nw_size)
    602          {
    603            switch (nw_size) {
    604              // Small
    605              case SL_WISUN_NETWORK_SIZE_SMALL:
    606                return &SL_WISUN_PARAMS_PROFILE_SMALL;
    607          
    608              // Medium
    609              case SL_WISUN_NETWORK_SIZE_MEDIUM:
    610                return &SL_WISUN_PARAMS_PROFILE_MEDIUM;
    611          
    612              // Large
    613              case SL_WISUN_NETWORK_SIZE_LARGE:
    614                return &SL_WISUN_PARAMS_PROFILE_LARGE;
    615          
    616              // Test
    617              case SL_WISUN_NETWORK_SIZE_TEST:
    618                return &SL_WISUN_PARAMS_PROFILE_TEST;
    619          
    620              // Certifacete and automatic size are not supported
    621              default:
    622                return NULL;
    623            }
    624          }
    625          #endif
    626          

   \                                 In section .text, align 2, keep-with-next
    627          void app_wisun_trace_util_timestamp_init(const uint64_t time_ms,
    628                                                   sl_wisun_trace_util_time_t * const time)
    629          {
   \                     app_wisun_trace_util_timestamp_init: (+1)
   \        0x0   0xE92D 0x4B70      PUSH     {R4-R6,R8,R9,R11,LR}
   \        0x4   0x4616             MOV      R6,R2
    630            uint64_t remaining_seconds = 0U;
    631          
    632            time->tot_milisecs = time_ms;
   \        0x6   0xE9C6 0x0100      STRD     R0,R1,[R6, #+0]
    633          
    634            remaining_seconds = time_ms / MS_IN_SEC;
   \        0xA   0xF44F 0x727A      MOV      R2,#+1000
   \        0xE   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_3: (+1)
   \       0x12   0x4680             MOV      R8,R0
   \       0x14   0x4689             MOV      R9,R1
    635            time->days = (uint16_t)(remaining_seconds / SEC_IN_DAY);
   \       0x16   0x....             LDR.N    R2,??DataTable20_7
   \       0x18   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_4: (+1)
   \       0x1C   0x4604             MOV      R4,R0
    636          
    637            remaining_seconds -= (time->days * SEC_IN_DAY);
   \       0x1E   0xB2A0             UXTH     R0,R4
   \       0x20   0x....             LDR.N    R5,??DataTable20_7
   \       0x22   0x4368             MULS     R0,R0,R5
   \       0x24   0xF04F 0x0B00      MOV      R11,#+0
    638            time->hours = (uint8_t)(remaining_seconds / SEC_IN_HOUR);
   \       0x28   0xF44F 0x6261      MOV      R2,#+3600
   \       0x2C   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_7: (+1)
   \       0x30   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_5: (+1)
   \       0x34   0x4605             MOV      R5,R0
    639          
    640            remaining_seconds -= (time->hours * SEC_IN_HOUR);
   \       0x36   0xB2C0             UXTB     R0,R0
   \       0x38   0xF44F 0x6161      MOV      R1,#+3600
   \       0x3C   0x4348             MULS     R0,R1,R0
    641            time->minutes = (uint8_t)(remaining_seconds / SEC_IN_MINUTE);
    642          
    643            remaining_seconds -= (time->minutes * SEC_IN_MINUTE);
    644            time->seconds = (uint8_t)remaining_seconds;
   \       0x3E   0x72B5             STRB     R5,[R6, #+10]
   \       0x40   0x8134             STRH     R4,[R6, #+8]
   \       0x42   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_8: (+1)
   \       0x46   0x223C             MOVS     R2,#+60
   \       0x48   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_6: (+1)
   \       0x4C   0x72F0             STRB     R0,[R6, #+11]
   \       0x4E   0x213C             MOVS     R1,#+60
   \       0x50   0xFB01 0x8010      MLS      R0,R1,R0,R8
   \       0x54   0x7330             STRB     R0,[R6, #+12]
    645          }
   \       0x56   0xE8BD 0x8B70      POP      {R4-R6,R8,R9,R11,PC}

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \        0x0   0xEBB8 0x0800      SUBS     R8,R8,R0
   \        0x4   0xEB69 0x090B      SBC      R9,R9,R11
   \        0x8   0x4640             MOV      R0,R8
   \        0xA   0x4649             MOV      R1,R9
   \        0xC   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \        0x0   0x2300             MOVS     R3,#+0
   \        0x2   0x.... 0x....      B.W      __aeabi_uldivmod
    646          

   \                                 In section .text, align 4, keep-with-next
    647          const char *app_wisun_trace_util_time_to_str(const sl_wisun_trace_util_time_t * const time)
    648          {
   \                     app_wisun_trace_util_time_to_str: (+1)
   \        0x0   0xB53E             PUSH     {R1-R5,LR}
   \        0x2   0x4605             MOV      R5,R0
    649            char *str = NULL;
    650          
    651            str = app_wisun_malloc(TIMESTAMP_BUF_LEN);
   \        0x4   0x2020             MOVS     R0,#+32
   \        0x6   0x.... 0x....      BL       app_wisun_malloc
   \        0xA   0x0004             MOVS     R4,R0
    652          
    653            if (str == NULL) {
   \        0xC   0xD101             BNE.N    ??app_wisun_trace_util_time_to_str_0
    654              return NULL;
   \        0xE   0x2000             MOVS     R0,#+0
   \       0x10   0xBD3E             POP      {R1-R5,PC}
    655            }
    656          
    657            (void) snprintf(str, TIMESTAMP_BUF_LEN, TIMESTAMP_FORMAT,
    658                            time->days, time->hours, time->minutes, time->seconds);
   \                     ??app_wisun_trace_util_time_to_str_0: (+1)
   \       0x12   0x7B28             LDRB     R0,[R5, #+12]
   \       0x14   0x....             ADR.N    R2,?_49
   \       0x16   0x9002             STR      R0,[SP, #+8]
   \       0x18   0x7AE9             LDRB     R1,[R5, #+11]
   \       0x1A   0x9101             STR      R1,[SP, #+4]
   \       0x1C   0x7AA8             LDRB     R0,[R5, #+10]
   \       0x1E   0x2120             MOVS     R1,#+32
   \       0x20   0x9000             STR      R0,[SP, #+0]
   \       0x22   0x892B             LDRH     R3,[R5, #+8]
   \       0x24   0x4620             MOV      R0,R4
   \       0x26   0x.... 0x....      BL       snprintf
    659          
    660            return (const char *) str;
   \       0x2A   0x4620             MOV      R0,R4
   \       0x2C   0xBD3E             POP      {R1-R5,PC}
    661          }
    662          
    663          

   \                                 In section .text, align 4, keep-with-next
    664          sl_status_t app_wisun_trace_util_evt_notify_init(app_wisun_trace_util_evt_notify_t * const evt_notify,
    665                                                           const uint32_t wait_opt)
    666          {
   \                     app_wisun_trace_util_evt_notify_init: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    667            static const osEventFlagsAttr_t evt_attr = {
    668              .name = "EvtNotify",
    669              .cb_mem = NULL,
    670              .cb_size = 0,
    671              .attr_bits = 0
    672            };
    673          
    674            if (evt_notify == NULL) {
   \        0x4   0xD007             BEQ.N    ??app_wisun_trace_util_evt_notify_init_0
    675              return SL_STATUS_FAIL;
    676            }
    677          
    678            evt_notify->evt_chs = 0UL;
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0x6060             STR      R0,[R4, #+4]
    679            evt_notify->wait_opt = wait_opt;
   \        0xA   0x60A1             STR      R1,[R4, #+8]
    680            evt_notify->evt_id = osEventFlagsNew(&evt_attr);
   \        0xC   0x....             ADR.N    R0,`app_wisun_trace_util_evt_notify_init::evt_attr`
   \        0xE   0x.... 0x....      BL       osEventFlagsNew
   \       0x12   0x6020             STR      R0,[R4, #+0]
    681            
    682            if (evt_notify->evt_id == NULL) {
   \       0x14   0xB908             CBNZ.N   R0,??app_wisun_trace_util_evt_notify_init_1
    683              return SL_STATUS_FAIL;
   \                     ??app_wisun_trace_util_evt_notify_init_0: (+1)
   \       0x16   0x2001             MOVS     R0,#+1
   \       0x18   0xBD10             POP      {R4,PC}
    684            }
    685          
    686            return SL_STATUS_OK;
   \                     ??app_wisun_trace_util_evt_notify_init_1: (+1)
   \       0x1A   0x2000             MOVS     R0,#+0
   \       0x1C   0xBD10             POP      {R4,PC}
    687          }

   \                                 In section .text, align 4, keep-with-next
   \                     `app_wisun_trace_util_evt_notify_init::evt_attr`:
   \        0x0   0x....'....        DC32 ?_43, 0, 0x0, 0
   \              0x0000'0000  
   \              0x0000'0000  
   \              0x0000'0000
    688          

   \                                 In section .text, align 2, keep-with-next
    689          sl_status_t app_wisun_trace_util_evt_notify_clear(app_wisun_trace_util_evt_notify_t * const evt_notify)
    690          {
   \                     app_wisun_trace_util_evt_notify_clear: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    691            uint32_t flags = 0UL;
    692          
    693            flags = osEventFlagsClear(evt_notify->evt_id, APP_WISUN_TRACE_UTIL_EVT_NOTIFY_ALL_FLAGS_MSK);
    694          
    695            if (flags & APP_WISUN_TRACE_UTIL_EVT_NOTIFY_ERROR_MSK) {
   \        0x2   0x6800             LDR      R0,[R0, #+0]
   \        0x4   0xF06F 0x4100      MVN      R1,#+2147483648
   \        0x8   0x.... 0x....      BL       osEventFlagsClear
   \        0xC   0xF010 0x4000      ANDS     R0,R0,#0x80000000
   \       0x10   0xBF18             IT       NE
   \       0x12   0x2001             MOVNE    R0,#+1
   \       0x14   0xBD02             POP      {R1,PC}
    696              return SL_STATUS_FAIL;
    697            }
    698          
    699            return SL_STATUS_OK;
    700          }
    701          
    702          

   \                                 In section .text, align 2, keep-with-next
    703          sl_status_t app_wisun_trace_util_evt_notify_subscribe_ch(app_wisun_trace_util_evt_notify_t * const evt_notify, 
    704                                                                   uint8_t * const evt_ch)
    705          {
   \                     app_wisun_trace_util_evt_notify_subscribe_ch: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    706            for (uint8_t ch_idx = 0; ch_idx < APP_WISUN_TRACE_UTIL_EVT_NOTIFY_MAX_CHS; ch_idx++) {
   \        0x2   0x2200             MOVS     R2,#+0
    707              if (!(evt_notify->evt_chs & (1UL << ch_idx))) {
   \                     ??app_wisun_trace_util_evt_notify_subscribe_ch_0: (+1)
   \        0x4   0x6843             LDR      R3,[R0, #+4]
   \        0x6   0x40D3             LSRS     R3,R3,R2
   \        0x8   0x07DC             LSLS     R4,R3,#+31
   \        0xA   0xD504             BPL.N    ??app_wisun_trace_util_evt_notify_subscribe_ch_1
   \        0xC   0x1C52             ADDS     R2,R2,#+1
   \        0xE   0xB2D3             UXTB     R3,R2
   \       0x10   0x2B1F             CMP      R3,#+31
   \       0x12   0xD3F7             BCC.N    ??app_wisun_trace_util_evt_notify_subscribe_ch_0
   \       0x14   0xE008             B.N      ??app_wisun_trace_util_evt_notify_subscribe_ch_2
    708                *evt_ch = ch_idx;
   \                     ??app_wisun_trace_util_evt_notify_subscribe_ch_1: (+1)
   \       0x16   0x700A             STRB     R2,[R1, #+0]
    709                evt_notify->evt_chs |= (1UL << ch_idx);
   \       0x18   0x6843             LDR      R3,[R0, #+4]
   \       0x1A   0x2101             MOVS     R1,#+1
   \       0x1C   0xFA01 0xF202      LSL      R2,R1,R2
   \       0x20   0x431A             ORRS     R2,R2,R3
   \       0x22   0x6042             STR      R2,[R0, #+4]
    710                return SL_STATUS_OK;
   \       0x24   0x2000             MOVS     R0,#+0
   \       0x26   0xBD10             POP      {R4,PC}
    711              }
    712            }
    713            return SL_STATUS_FAIL;
   \                     ??app_wisun_trace_util_evt_notify_subscribe_ch_2: (+1)
   \       0x28   0x2001             MOVS     R0,#+1
   \       0x2A   0xBD10             POP      {R4,PC}
    714          }
    715          

   \                                 In section .text, align 2, keep-with-next
    716          sl_status_t app_wisun_trace_util_evt_notify_unsubscribe_ch(app_wisun_trace_util_evt_notify_t * const evt_notify, 
    717                                                                     const uint8_t evt_ch)
    718          {
   \                     app_wisun_trace_util_evt_notify_unsubscribe_ch: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
    719          
    720            if (!(evt_notify->evt_chs & (1UL << evt_ch))) {
   \        0x6   0x6861             LDR      R1,[R4, #+4]
   \        0x8   0x40E9             LSRS     R1,R1,R5
   \        0xA   0x07C8             LSLS     R0,R1,#+31
   \        0xC   0xD401             BMI.N    ??app_wisun_trace_util_evt_notify_unsubscribe_c_0
    721              return SL_STATUS_FAIL;
   \        0xE   0x2001             MOVS     R0,#+1
   \       0x10   0xBD32             POP      {R1,R4,R5,PC}
    722            }
    723          
    724            (void) osEventFlagsClear(evt_notify->evt_id, 1UL << evt_ch);
   \                     ??app_wisun_trace_util_evt_notify_unsubscribe_c_0: (+1)
   \       0x12   0x2001             MOVS     R0,#+1
   \       0x14   0xFA00 0xF505      LSL      R5,R0,R5
   \       0x18   0x6820             LDR      R0,[R4, #+0]
   \       0x1A   0x4629             MOV      R1,R5
   \       0x1C   0x.... 0x....      BL       osEventFlagsClear
    725            evt_notify->evt_chs &= ~(1UL << evt_ch);
   \       0x20   0x6860             LDR      R0,[R4, #+4]
   \       0x22   0xEA20 0x0505      BIC      R5,R0,R5
   \       0x26   0x6065             STR      R5,[R4, #+4]
    726          
    727          
    728            return SL_STATUS_OK;
   \       0x28   0x2000             MOVS     R0,#+0
   \       0x2A   0xBD32             POP      {R1,R4,R5,PC}
    729          }
    730          

   \                                 In section .text, align 2, keep-with-next
    731          sl_status_t app_wisun_trace_util_evt_notfiy_chs(const app_wisun_trace_util_evt_notify_t * const evt_notify)
    732          {
   \                     app_wisun_trace_util_evt_notfiy_chs: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    733            uint32_t flags = 0UL;
    734          
    735            flags = osEventFlagsSet(evt_notify->evt_id, evt_notify->evt_chs);
    736          
    737            if (flags & APP_WISUN_TRACE_UTIL_EVT_NOTIFY_ERROR_MSK) {
   \        0x2   0x6841             LDR      R1,[R0, #+4]
   \        0x4   0x6800             LDR      R0,[R0, #+0]
   \        0x6   0x.... 0x....      BL       osEventFlagsSet
   \        0xA   0xF010 0x4000      ANDS     R0,R0,#0x80000000
   \        0xE   0xBF18             IT       NE
   \       0x10   0x2001             MOVNE    R0,#+1
   \       0x12   0xBD02             POP      {R1,PC}
    738              return SL_STATUS_FAIL;
    739            }
    740          
    741            return SL_STATUS_OK;
    742          }
    743          
    744          

   \                                 In section .text, align 2, keep-with-next
    745          sl_status_t app_wisun_trace_util_evt_notify_wait(const app_wisun_trace_util_evt_notify_t * const evt_notify,
    746                                                           const uint32_t ch_mask,
    747                                                           const uint32_t timeout)
    748          {
   \                     app_wisun_trace_util_evt_notify_wait: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x4613             MOV      R3,R2
    749            uint32_t flags = 0UL;
    750          
    751            if (!(evt_notify->evt_chs & ch_mask)) {
   \        0x4   0x6842             LDR      R2,[R0, #+4]
   \        0x6   0x420A             TST      R2,R1
   \        0x8   0xD006             BEQ.N    ??app_wisun_trace_util_evt_notify_wait_0
    752              return SL_STATUS_FAIL;
    753            }
    754          
    755            flags = osEventFlagsWait(evt_notify->evt_id, ch_mask, evt_notify->wait_opt, timeout);
    756          
    757            if (flags & APP_WISUN_TRACE_UTIL_EVT_NOTIFY_ERROR_MSK) {
   \        0xA   0x6882             LDR      R2,[R0, #+8]
   \        0xC   0x6800             LDR      R0,[R0, #+0]
   \        0xE   0x.... 0x....      BL       osEventFlagsWait
   \       0x12   0xF010 0x4000      ANDS     R0,R0,#0x80000000
   \       0x16   0xD000             BEQ.N    ??app_wisun_trace_util_evt_notify_wait_1
   \                     ??app_wisun_trace_util_evt_notify_wait_0: (+1)
   \       0x18   0x2001             MOVS     R0,#+1
   \                     ??app_wisun_trace_util_evt_notify_wait_1: (+1)
   \       0x1A   0xBD02             POP      {R1,PC}
    758              return SL_STATUS_FAIL;
    759            }
    760          
    761            return SL_STATUS_OK;
    762          }
    763          
    764          
    765          
    766          // -----------------------------------------------------------------------------
    767          //                          Static Function Definitions
    768          // -----------------------------------------------------------------------------
    769          

   \                                 In section .text, align 2, keep-with-next
    770          static const char *_get_str_key_by_val_from_enum(const app_enum_t * const app_enum,
    771                                                           const uint32_t val)
    772          {
   \                     _get_str_key_by_val_from_enum: (+1)
   \        0x0   0x4603             MOV      R3,R0
    773            const app_enum_t *p = NULL;
    774          
    775            p = app_enum;
   \        0x2   0xE000             B.N      ??_get_str_key_by_val_from_enum_0
    776            while (p->value_str != NULL) {
    777              if (p->value == val) {
    778                return p->value_str;
    779              }
    780              ++p;
   \                     ??_get_str_key_by_val_from_enum_1: (+1)
   \        0x4   0x3308             ADDS     R3,R3,#+8
   \                     ??_get_str_key_by_val_from_enum_0: (+1)
   \        0x6   0x6818             LDR      R0,[R3, #+0]
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xBF1C             ITT      NE
   \        0xC   0x685A             LDRNE    R2,[R3, #+4]
   \        0xE   0x428A             CMPNE    R2,R1
   \       0x10   0xD1F8             BNE.N    ??_get_str_key_by_val_from_enum_1
   \       0x12   0x4770             BX       LR
    781            }
    782            return NULL;
    783          }
    784          

   \                                 In section .text, align 2, keep-with-next
    785          static app_wisun_phy_list_t *_alloc_phy_list_element(sl_wisun_phy_config_t *phy_cfg)
    786          {
   \                     _alloc_phy_list_element: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x.... 0x....      BL       ?Subroutine1
    787            app_wisun_phy_list_t *p = NULL;
    788          
    789            p = app_wisun_malloc(sizeof(app_wisun_phy_list_t));
   \                     ??CrossCallReturnLabel_1: (+1)
   \        0x6   0x0004             MOVS     R4,R0
    790            if (p == NULL) {
   \        0x8   0xD101             BNE.N    ??_alloc_phy_list_element_0
    791              return NULL;
   \        0xA   0x2000             MOVS     R0,#+0
   \        0xC   0xBD32             POP      {R1,R4,R5,PC}
    792            }
    793          
    794            p->name = app_wisun_phy_to_str(phy_cfg);
   \                     ??_alloc_phy_list_element_0: (+1)
   \        0xE   0x4628             MOV      R0,R5
   \       0x10   0x.... 0x....      BL       app_wisun_phy_to_str
   \       0x14   0x6020             STR      R0,[R4, #+0]
    795            memcpy(&p->phy_cfg, phy_cfg, sizeof(sl_wisun_phy_config_t));
   \       0x16   0x2210             MOVS     R2,#+16
   \       0x18   0x4629             MOV      R1,R5
   \       0x1A   0x1D20             ADDS     R0,R4,#+4
   \       0x1C   0x.... 0x....      BL       __aeabi_memcpy
    796            p->next = NULL;
   \       0x20   0x2000             MOVS     R0,#+0
   \       0x22   0x6160             STR      R0,[R4, #+20]
    797            return p;
   \       0x24   0x4620             MOV      R0,R4
   \       0x26   0xBD32             POP      {R1,R4,R5,PC}
    798          }
    799          
    800          static sl_status_t _get_phy_cfg_from_ch_cfg_entry(const RAIL_ChannelConfigEntry_t * const ch_config_entry,
    801                                                            sl_wisun_phy_config_t * const phy_config)
    802          {
    803            const uint8_t *stack_info = NULL;
    804            uint8_t phy_mode = 0U;
    805            uint8_t phy_type = 0U;
    806          
    807            if (ch_config_entry == NULL) {
    808              return SL_STATUS_FAIL;
    809            }
    810          
    811            stack_info = ch_config_entry->stackInfo;
    812            if (stack_info[0] != RAIL_PTI_PROTOCOL_WISUN) {
    813              // Not a Wi-SUN configuration
    814              return SL_STATUS_FAIL;
    815            }
    816          
    817            phy_type = _get_phy_type(stack_info[1]);
    818            phy_mode = _get_phy_mode(stack_info[1]);
    819          
    820            switch (stack_info[2]) {
    821              case VERSION_WISUN_FAN1_0:
    822                if (!_is_fsk(stack_info[1]) || !_check_phy_mode(phy_mode)) {
    823                  return SL_STATUS_FAIL;
    824                }
    825                phy_config->type = SL_WISUN_PHY_CONFIG_FAN10;
    826                phy_config->config.fan10.reg_domain = stack_info[4];
    827                phy_config->config.fan10.op_class = stack_info[3];
    828                phy_config->config.fan10.op_mode = _fsk_phy_mode_to_op_mode[phy_mode];
    829                phy_config->config.fan10.fec = phy_type == PHY_TYPE_FSK_FEC;
    830                break;
    831              case VERSION_WISUN_FAN1_1:
    832                if (!(_is_fsk(stack_info[1]) || _is_ofdm(stack_info[1]))) {
    833                  return SL_STATUS_FAIL;
    834                }
    835                phy_config->type = SL_WISUN_PHY_CONFIG_FAN11;
    836                phy_config->config.fan11.reg_domain = stack_info[4];
    837                phy_config->config.fan11.chan_plan_id = stack_info[3];
    838                phy_config->config.fan11.phy_mode_id = stack_info[1];
    839                break;
    840              default:
    841                // Unsupported version.
    842                return SL_STATUS_FAIL;
    843            }
    844          
    845            return SL_STATUS_OK;
    846          }
    847          

   \                                 In section .text, align 2, keep-with-next
    848          __STATIC_INLINE uint8_t _get_phy_type(const uint8_t phy_mode_id)
    849          {
    850            return (phy_mode_id >> 4U) & 0x0FU;
   \                     _get_phy_type: (+1)
   \        0x0   0x0900             LSRS     R0,R0,#+4
   \        0x2   0x4770             BX       LR
    851          }
    852          
    853          __STATIC_INLINE uint8_t _get_phy_mode(const uint8_t phy_mode_id)
    854          {
    855            return phy_mode_id & 0x0FU;
    856          }
    857          

   \                                 In section .text, align 2, keep-with-next
    858          __STATIC_INLINE bool _is_fsk(const uint8_t phy_mode_id)
    859          {
   \                     _is_fsk: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
    860            return (bool)((_get_phy_type(phy_mode_id) == PHY_TYPE_FSK)
    861                          || (_get_phy_type(phy_mode_id) == PHY_TYPE_FSK_FEC));
   \        0x4   0x.... 0x....      BL       _get_phy_type
   \        0x8   0xB120             CBZ.N    R0,??_is_fsk_0
   \        0xA   0x4620             MOV      R0,R4
   \        0xC   0x.... 0x....      BL       _get_phy_type
   \       0x10   0x2801             CMP      R0,#+1
   \       0x12   0xD101             BNE.N    ??_is_fsk_1
   \                     ??_is_fsk_0: (+1)
   \       0x14   0x2001             MOVS     R0,#+1
   \       0x16   0xBD10             POP      {R4,PC}
   \                     ??_is_fsk_1: (+1)
   \       0x18   0x2000             MOVS     R0,#+0
   \       0x1A   0xBD10             POP      {R4,PC}
    862          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19:
   \        0x0   0x3A 0x3A          DC8      0x3A, 0x3A, 0x00, 0x00
   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20:
   \        0x0   0x....'....        DC32     app_wisun_conn_status_enum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_1:
   \        0x0   0x....'....        DC32     app_wisun_phy_reg_domain_enum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_2:
   \        0x0   0x....'....        DC32     app_wisun_nw_size_enum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_3:
   \        0x0   0x....'....        DC32     app_wisun_phy_channel_spacing_enum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_4:
   \        0x0   0x....'....        DC32     `app_wisun_get_phy_list::phy_cfg`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_5:
   \        0x0   0x....'....        DC32     channelConfigs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_6:
   \        0x0   0x....'....        DC32     ?_42

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_7:
   \        0x0   0x0001'5180        DC32     0x15180

   \                                 In section .text, align 4, keep-with-next
   \                     ?_45:
   \        0x0   0x25 0x73          DC8 "%s-%u-%x (%s)"
   \              0x2D 0x25    
   \              0x75 0x2D    
   \              0x25 0x78    
   \              0x20 0x28    
   \              0x25 0x73    
   \              0x29 0x00
   \        0xE                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x46 0x41          DC8 "FAN 1.0"
   \              0x4E 0x20    
   \              0x31 0x2E    
   \              0x30 0x00

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x46 0x41          DC8 "FAN 1.1"
   \              0x4E 0x20    
   \              0x31 0x2E    
   \              0x31 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ?_46:
   \        0x0   0x46 0x41          DC8 "FAN1.0"
   \              0x4E 0x31    
   \              0x2E 0x30    
   \              0x00
   \        0x7                      DS8 1

   \                                 In section .text, align 4, keep-with-next
   \                     ?_47:
   \        0x0   0x25 0x73          DC8 "%s-%u-%u (%s)"
   \              0x2D 0x25    
   \              0x75 0x2D    
   \              0x25 0x75    
   \              0x20 0x28    
   \              0x25 0x73    
   \              0x29 0x00
   \        0xE                      DS8 2

   \                                 In section .text, align 4, keep-with-next
   \                     ?_48:
   \        0x0   0x46 0x41          DC8 "FAN1.1"
   \              0x4E 0x31    
   \              0x2E 0x31    
   \              0x00
   \        0x7                      DS8 1

   \                                 In section .text, align 4, keep-with-next
   \                     ?_49:
   \        0x0   0x25 0x30          DC8 "%03d-%02d:%02d:%02d"
   \              0x33 0x64    
   \              0x2D 0x25    
   \              0x30 0x32    
   \              0x64 0x3A    
   \              0x25 0x30    
   \              0x32 0x64    
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x64 0x00

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x65 0x78          DC8 "explicit"
   \              0x70 0x6C    
   \              0x69 0x63    
   \              0x69 0x74    
   \              0x00
   \        0x9                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x44 0x69          DC8 "Disconnected"
   \              0x73 0x63    
   \              0x6F 0x6E    
   \              0x6E 0x65    
   \              0x63 0x74    
   \              0x65 0x64    
   \              0x00
   \        0xD                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0x53 0x65          DC8 "Select PAN"
   \              0x6C 0x65    
   \              0x63 0x74    
   \              0x20 0x50    
   \              0x41 0x4E    
   \              0x00
   \        0xB                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_5:
   \        0x0   0x41 0x75          DC8 "Authenticate"
   \              0x74 0x68    
   \              0x65 0x6E    
   \              0x74 0x69    
   \              0x63 0x61    
   \              0x74 0x65    
   \              0x00
   \        0xD                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_6:
   \        0x0   0x41 0x63          DC8 "Acquire PAN Config"
   \              0x71 0x75    
   \              0x69 0x72    
   \              0x65 0x20    
   \              0x50 0x41    
   \              0x4E 0x20    
   \              0x43 0x6F    
   \              0x6E 0x66    
   \              0x69 0x67    
   \              0x00
   \       0x13                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_7:
   \        0x0   0x43 0x6F          DC8 "Configure Routing"
   \              0x6E 0x66    
   \              0x69 0x67    
   \              0x75 0x72    
   \              0x65 0x20    
   \              0x52 0x6F    
   \              0x75 0x74    
   \              0x69 0x6E    
   \              0x67 0x00
   \       0x12                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_8:
   \        0x0   0x4F 0x70          DC8 "Operational"
   \              0x65 0x72    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x61    
   \              0x6C 0x00

   \                                 In section .rodata, align 4
   \                     ?_9:
   \        0x0   0x57 0x57          DC8 "WW"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_10:
   \        0x0   0x4E 0x41          DC8 "NA"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_11:
   \        0x0   0x4A 0x50          DC8 "JP"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_12:
   \        0x0   0x45 0x55          DC8 "EU"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_13:
   \        0x0   0x43 0x4E          DC8 "CN"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_14:
   \        0x0   0x49 0x4E          DC8 "IN"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_15:
   \        0x0   0x4D 0x58          DC8 "MX"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_16:
   \        0x0   0x42 0x5A          DC8 "BZ"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_17:
   \        0x0   0x41 0x5A          DC8 "AZ/NZ"
   \              0x2F 0x4E    
   \              0x5A 0x00
   \        0x6                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_18:
   \        0x0   0x4B 0x52          DC8 "KR"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_19:
   \        0x0   0x50 0x48          DC8 "PH"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_20:
   \        0x0   0x4D 0x59          DC8 "MY"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_21:
   \        0x0   0x48 0x4B          DC8 "HK"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_22:
   \        0x0   0x53 0x47          DC8 "SG"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_23:
   \        0x0   0x54 0x48          DC8 "TH"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_24:
   \        0x0   0x56 0x4E          DC8 "VN"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_25:
   \        0x0   0x41 0x50          DC8 "APPLICATION"
   \              0x50 0x4C    
   \              0x49 0x43    
   \              0x41 0x54    
   \              0x49 0x4F    
   \              0x4E 0x00

   \                                 In section .rodata, align 4
   \                     ?_26:
   \        0x0   0x61 0x75          DC8 "automatic"
   \              0x74 0x6F    
   \              0x6D 0x61    
   \              0x74 0x69    
   \              0x63 0x00
   \        0xA                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_27:
   \        0x0   0x73 0x6D          DC8 "small"
   \              0x61 0x6C    
   \              0x6C 0x00
   \        0x6                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_28:
   \        0x0   0x6D 0x65          DC8 "medium"
   \              0x64 0x69    
   \              0x75 0x6D    
   \              0x00
   \        0x7                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_29:
   \        0x0   0x6C 0x61          DC8 "large"
   \              0x72 0x67    
   \              0x65 0x00
   \        0x6                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_30:
   \        0x0   0x74 0x65          DC8 "test"
   \              0x73 0x74    
   \              0x00
   \        0x5                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_31:
   \        0x0   0x63 0x65          DC8 "certification"
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x00
   \        0xE                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_32:
   \        0x0   0x6E 0x6F          DC8 "none"
   \              0x6E 0x65    
   \              0x00
   \        0x5                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_33:
   \        0x0   0x61 0x72          DC8 "arib"
   \              0x69 0x62    
   \              0x00
   \        0x5                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_34:
   \        0x0   0x31 0x30          DC8 "100kHz"
   \              0x30 0x6B    
   \              0x48 0x7A    
   \              0x00
   \        0x7                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_35:
   \        0x0   0x32 0x30          DC8 "200kHz"
   \              0x30 0x6B    
   \              0x48 0x7A    
   \              0x00
   \        0x7                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_36:
   \        0x0   0x34 0x30          DC8 "400kHz"
   \              0x30 0x6B    
   \              0x48 0x7A    
   \              0x00
   \        0x7                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_37:
   \        0x0   0x36 0x30          DC8 "600kHz"
   \              0x30 0x6B    
   \              0x48 0x7A    
   \              0x00
   \        0x7                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_38:
   \        0x0   0x46 0x46          DC8 "FFN"
   \              0x4E 0x00

   \                                 In section .rodata, align 4
   \                     ?_39:
   \        0x0   0x4C 0x46          DC8 "LFN"
   \              0x4E 0x00

   \                                 In section .rodata, align 4
   \                     ?_40:
   \        0x0   0x62 0x61          DC8 "balanced"
   \              0x6C 0x61    
   \              0x6E 0x63    
   \              0x65 0x64    
   \              0x00
   \        0x9                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_41:
   \        0x0   0x65 0x63          DC8 "eco"
   \              0x6F 0x00

   \                                 In section .rodata, align 4
   \                     ?_42:
   \        0x0   0x25 0x2E          DC8 "%.2X:%.2X:%.2X:%.2X:%.2X:%.2X:%.2X:%.2X"
   \              0x32 0x58    
   \              0x3A 0x25    
   \              0x2E 0x32    
   \              0x58 0x3A    
   \              0x25 0x2E    
   \              0x32 0x58    
   \              0x3A 0x25    
   \              0x2E 0x32    
   \              0x58 0x3A    
   \              0x25 0x2E    
   \              0x32 0x58    
   \              0x3A 0x25    
   \              0x2E 0x32    
   \              0x58 0x3A    
   \              0x25 0x2E    
   \              0x32 0x58    
   \              0x3A 0x25    
   \              0x2E 0x32    
   \              0x58 0x00

   \                                 In section .rodata, align 4
   \                     ?_43:
   \        0x0   0x45 0x76          DC8 "EvtNotify"
   \              0x74 0x4E    
   \              0x6F 0x74    
   \              0x69 0x66    
   \              0x79 0x00
   \        0xA                      DS8 2

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_44:
   \        0x0   0x3A 0x3A          DC8 "::"
   \              0x00
   \        0x3                      DS8 1
    863          
    864          __STATIC_INLINE bool _is_ofdm(const uint8_t phy_mode_id)
    865          {
    866            return (bool)((_get_phy_type(phy_mode_id) >= PHY_TYPE_OFDM1)
    867                          && (_get_phy_type(phy_mode_id) <= PHY_TYPE_OFDM4));
    868          }
    869          
    870          __STATIC_INLINE bool _check_phy_mode(const uint8_t phy_mode)
    871          {
    872            return (bool)(phy_mode >= PHY_MODE_MIN_VAL && phy_mode <= PHY_MODE_MAX_VAL);
    873          }
    874          
    875          static uint8_t _get_phy_options(sl_wisun_phy_config_t * const phy_cfg)
    876          {
    877            uint8_t phy_option_cnt = 1U;
    878          
    879            if (phy_cfg->type != SL_WISUN_PHY_CONFIG_FAN11) {
    880              return phy_option_cnt;
    881            }
    882          
    883            for (uint32_t map_idx = 0; map_idx < (sizeof(_ofdm_phy_map) / sizeof(rail_ofdm_phy_mode_id_t)); ++map_idx) {
    884              if (phy_cfg->config.fan11.phy_mode_id == _ofdm_phy_map[map_idx].rail_phy_mode_id) {
    885                // Corrigate first PHY mode ID
    886                phy_cfg->config.fan11.phy_mode_id = _ofdm_phy_map[map_idx].wisun_phy_mode_id_min;
    887                return _ofdm_phy_map[map_idx].wisun_phy_mode_id_max - _ofdm_phy_map[map_idx].wisun_phy_mode_id_min + 1U;
    888              }
    889            }
    890          
    891            return phy_option_cnt;
    892          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   _alloc_phy_list_element
        16   -> __aeabi_memcpy
        16   -> app_wisun_malloc
        16   -> app_wisun_phy_to_str
       0   _get_phy_type
       0   _get_str_key_by_val_from_enum
       8   _is_fsk
         8   -> _get_phy_type
      16   app_wisun_destroy_phy_list
        16   -> app_wisun_free
        16   -> vPortFree
      16   app_wisun_filter_phy_list
        16   -- Indirect call
        16   -> _alloc_phy_list_element
       0   app_wisun_free
         0   -> vPortFree
      40   app_wisun_get_phy_list
        40   -- Indirect call
        40   -> _alloc_phy_list_element
        40   -> _is_fsk
      40   app_wisun_mac_addr_to_str
        40   -> app_wisun_malloc
        40   -> snprintf
       0   app_wisun_malloc
         0   -> pvPortMalloc
      24   app_wisun_phy_to_str
        24   -> app_wisun_free
        24   -> app_wisun_malloc
        24   -> app_wisun_trace_util_reg_domain_to_str
        24   -> snprintf
       0   app_wisun_trace_util_ch_spacing_to_str
         0   -> _get_str_key_by_val_from_enum
       0   app_wisun_trace_util_conn_state_to_str
         0   -> _get_str_key_by_val_from_enum
       0   app_wisun_trace_util_device_type_to_str
         0   -> _get_str_key_by_val_from_enum
       8   app_wisun_trace_util_evt_notfiy_chs
         8   -> osEventFlagsSet
       8   app_wisun_trace_util_evt_notify_clear
         8   -> osEventFlagsClear
       8   app_wisun_trace_util_evt_notify_init
         8   -> osEventFlagsNew
       8   app_wisun_trace_util_evt_notify_subscribe_ch
      16   app_wisun_trace_util_evt_notify_unsubscribe_ch
        16   -> osEventFlagsClear
       8   app_wisun_trace_util_evt_notify_wait
         8   -> osEventFlagsWait
      16   app_wisun_trace_util_get_ip_str
        16   -> app_wisun_malloc
        16   -> ip6tos
       0   app_wisun_trace_util_lfn_profile_to_str
         0   -> _get_str_key_by_val_from_enum
       0   app_wisun_trace_util_nw_size_to_str
         0   -> _get_str_key_by_val_from_enum
       0   app_wisun_trace_util_phy_cfg_type_to_str
         0   -> _get_str_key_by_val_from_enum
       0   app_wisun_trace_util_profile_to_str
         0   -> _get_str_key_by_val_from_enum
       0   app_wisun_trace_util_reg_domain_to_str
         0   -> _get_str_key_by_val_from_enum
      24   app_wisun_trace_util_time_to_str
        24   -> app_wisun_malloc
        24   -> snprintf
      28   app_wisun_trace_util_timestamp_init
        28 __aeabi_uldivmod


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable19
       4  ??DataTable20
       4  ??DataTable20_1
       4  ??DataTable20_2
       4  ??DataTable20_3
       4  ??DataTable20_4
       4  ??DataTable20_5
       4  ??DataTable20_6
       4  ??DataTable20_7
       8  ?Subroutine0
       6  ?Subroutine1
       6  ?Subroutine2
      14  ?Subroutine3
       8  ?_0
       8  ?_1
       4  ?_10
       4  ?_11
       4  ?_12
       4  ?_13
       4  ?_14
       4  ?_15
       4  ?_16
       8  ?_17
       4  ?_18
       4  ?_19
      12  ?_2
       4  ?_20
       4  ?_21
       4  ?_22
       4  ?_23
       4  ?_24
      12  ?_25
      12  ?_26
       8  ?_27
       8  ?_28
       8  ?_29
      16  ?_3
       8  ?_30
      16  ?_31
       8  ?_32
       8  ?_33
       8  ?_34
       8  ?_35
       8  ?_36
       8  ?_37
       4  ?_38
       4  ?_39
      12  ?_4
      12  ?_40
       4  ?_41
      40  ?_42
      12  ?_43
       4  ?_44
      16  ?_45
       8  ?_46
      16  ?_47
       8  ?_48
      20  ?_49
      16  ?_5
      20  ?_6
      20  ?_7
      12  ?_8
       4  ?_9
      40  _alloc_phy_list_element
      12  _fsk_phy_mode_to_op_mode
       4  _get_phy_type
      20  _get_str_key_by_val_from_enum
      28  _is_fsk
      12  _ofdm_phy_map
      24  app_regulation_enum
      56  app_wisun_conn_status_enum
      28  app_wisun_destroy_phy_list
      24  app_wisun_device_type_enum
      70  app_wisun_filter_phy_list
       4  app_wisun_free
     318  app_wisun_get_phy_list
      32  app_wisun_lfn_profile_enum
      64  app_wisun_mac_addr_to_str
       4  app_wisun_malloc
      56  app_wisun_nw_size_enum
      40  app_wisun_phy_channel_spacing_enum
      32  app_wisun_phy_config_type_enum
     144  app_wisun_phy_reg_domain_enum
      94  app_wisun_phy_to_str
       6  app_wisun_trace_util_ch_spacing_to_str
       6  app_wisun_trace_util_conn_state_to_str
       8  app_wisun_trace_util_device_type_to_str
      20  app_wisun_trace_util_evt_notfiy_chs
      22  app_wisun_trace_util_evt_notify_clear
      30  app_wisun_trace_util_evt_notify_init
      44  app_wisun_trace_util_evt_notify_subscribe_ch
      44  app_wisun_trace_util_evt_notify_unsubscribe_ch
      28  app_wisun_trace_util_evt_notify_wait
      34  app_wisun_trace_util_get_ip_str
       8  app_wisun_trace_util_lfn_profile_to_str
       6  app_wisun_trace_util_nw_size_to_str
       2  app_wisun_trace_util_phy_cfg_type_to_str
       2  app_wisun_trace_util_profile_to_str
       6  app_wisun_trace_util_reg_domain_to_str
      46  app_wisun_trace_util_time_to_str
      90  app_wisun_trace_util_timestamp_init
      16  evt_attr
      16  phy_cfg

 
    16 bytes in section .bss
   712 bytes in section .rodata
 1'342 bytes in section .text
 
 1'342 bytes of CODE  memory
   712 bytes of CONST memory
    16 bytes of DATA  memory

Errors: none
Warnings: none
