###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         27/Nov/2024  12:17:56
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emlib\src\em_system.c
#    Command line      =
#        -f
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\src_12162447720190469977.dir\em_system.o.rsp
#        (C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emlib\src\em_system.c
#        -D EFR32FG28B322F1024IM48=1 -D
#        configNUM_SDK_THREAD_LOCAL_STORAGE_POINTERS=2 -D
#        SL_COMPONENT_CATALOG_PRESENT=1 -D
#        MBEDTLS_CONFIG_FILE=<sl_mbedtls_config.h> -D
#        MBEDTLS_PSA_CRYPTO_CONFIG_FILE=<psa_crypto_config.h> -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -D
#        RTT_USE_ASM=0 -D MBED_CONF_MBED_TRACE_ENABLE=1 -D
#        MBED_CONF_NANOSTACK_CONFIGURATION=ws_router -D
#        MBED_TRACE_MAX_LEVEL=TRACE_ACTIVE_LEVEL_ALL -D DEBUG_EFM_USER=1 -D
#        HAVE_LFN=1 -D HAVE_LFN_PARENT=1 -lC
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\lst\src_12162447720190469977.dir
#        --diag_suppress Pa050 -o
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\src_12162447720190469977.dir
#        --debug --endian=little --cpu=Cortex-M33 --cmse --cmse -e
#        --fpu=VFPv5_sp --dlib_config "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emlib\src\
#        -I C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\autogen\ -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\config\ -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\config\rail\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\Device\SiliconLabs\EFR32FG28\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\common\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\CMSIS\Core\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\CMSIS\RTOS2\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\device_init\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\dmadrv\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\common\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emlib\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\cmsis\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\kernel\include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\kernel\portable\IAR\ARM_CM33_NTZ\non_secure\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\iostream\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\config\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\config\preset\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\nvm3\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\peripheral\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_psa_driver\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\common\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\wmbus\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\sidewalk\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\efr32xg28\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\rail_util_pti\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\src\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\segger\systemview\SEGGER\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\silicon_labs\silabs_core\memory_manager\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\common\toolchain\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\system\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\ns_list\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\nanostack\nanostack-libservice\mbed-client-libservice\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\sleeptimer\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\app\wisun_rcp\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\inc\socket\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\src\
#        -Ohz --use_c++_inline) --dependencies=n
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\src_12162447720190469977.dir\em_system.o.iar_deps
#    Locale            =  C
#    List file         =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\lst\src_12162447720190469977.dir\em_system.lst
#    Object file       =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\src_12162447720190469977.dir\em_system.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emlib\src\em_system.c
      1          /***************************************************************************//**
      2           * @file
      3           * @brief System Peripheral API
      4           *******************************************************************************
      5           * # License
      6           * <b>Copyright 2018 Silicon Laboratories Inc. www.silabs.com</b>
      7           *******************************************************************************
      8           *
      9           * SPDX-License-Identifier: Zlib
     10           *
     11           * The licensor of this software is Silicon Laboratories Inc.
     12           *
     13           * This software is provided 'as-is', without any express or implied
     14           * warranty. In no event will the authors be held liable for any damages
     15           * arising from the use of this software.
     16           *
     17           * Permission is granted to anyone to use this software for any purpose,
     18           * including commercial applications, and to alter it and redistribute it
     19           * freely, subject to the following restrictions:
     20           *
     21           * 1. The origin of this software must not be misrepresented; you must not
     22           *    claim that you wrote the original software. If you use this software
     23           *    in a product, an acknowledgment in the product documentation would be
     24           *    appreciated but is not required.
     25           * 2. Altered source versions must be plainly marked as such, and must not be
     26           *    misrepresented as being the original software.
     27           * 3. This notice may not be removed or altered from any source distribution.
     28           *
     29           ******************************************************************************/
     30          
     31          #include "em_system.h"
     32          #include "sl_assert.h"
     33          #include <stddef.h>
     34          #if defined(SYSCFG_PRESENT)
     35          #include "em_syscfg.h"
     36          #endif
     37          /***************************************************************************//**
     38           * @addtogroup system
     39           * @{
     40           ******************************************************************************/
     41          
     42          /*******************************************************************************
     43           *********************************   DEFINES   *********************************
     44           ******************************************************************************/
     45          
     46          /** @cond DO_NOT_INCLUDE_WITH_DOXYGEN */
     47          
     48          /* Bit mask used to extract the part number value without the new naming
     49           * bitfield. */
     50          #define SYSCFG_CHIPREV_PARTNUMBER1  0xFE0
     51          #define SYSCFG_CHIPREV_PARTNUMBER0  0xF
     52          
     53          /* Bit mask to convert NON-SECURE to SECURE */
     54          #define CONVERT_NS_TO_S (~(1 << 28U))
     55          
     56          /** @endcond */
     57          
     58          /*******************************************************************************
     59           **************************   GLOBAL FUNCTIONS   *******************************
     60           ******************************************************************************/
     61          
     62          /***************************************************************************//**
     63           * @brief
     64           *   Get a chip major/minor revision.
     65           *
     66           * @param[out] rev
     67           *   A location to place the chip revision information.
     68           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     69          void SYSTEM_ChipRevisionGet(SYSTEM_ChipRevision_TypeDef *rev)
     70          {
   \                     SYSTEM_ChipRevisionGet: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
     71          #if defined(_SYSCFG_CHIPREV_FAMILY_MASK) || defined(_SYSCFG_CHIPREV_PARTNUMBER_MASK)
     72            /* On series-2 (and higher) the revision info is in the SYSCFG->CHIPREV register. */
     73          #if defined(CMU_CLKEN0_SYSCFG)
     74            CMU->CLKEN0_SET = CMU_CLKEN0_SYSCFG;
   \        0x2   0xF44F 0x3280      MOV      R2,#+65536
   \        0x6   0x....             LDR.N    R1,??DataTable10
   \        0x8   0x600A             STR      R2,[R1, #+0]
     75          #endif
     76            uint32_t chiprev = SYSCFG_readChipRev();
   \        0xA   0x....             LDR.N    R4,??DataTable10_1
   \        0xC   0x6822             LDR      R2,[R4, #+0]
     77          #if defined(_SYSCFG_CHIPREV_PARTNUMBER_MASK)
     78            rev->partNumber = ((chiprev & SYSCFG_CHIPREV_PARTNUMBER1) >> 5) | (chiprev & SYSCFG_CHIPREV_PARTNUMBER0);
   \        0xE   0xF3C2 0x1346      UBFX     R3,R2,#+5,#+7
   \       0x12   0xF002 0x010F      AND      R1,R2,#0xF
   \       0x16   0x430B             ORRS     R3,R1,R3
   \       0x18   0x8043             STRH     R3,[R0, #+2]
     79          #else
     80            rev->family = (chiprev & _SYSCFG_CHIPREV_FAMILY_MASK) >> _SYSCFG_CHIPREV_FAMILY_SHIFT;
     81          #endif
     82            rev->major  = (chiprev & _SYSCFG_CHIPREV_MAJOR_MASK)  >> _SYSCFG_CHIPREV_MAJOR_SHIFT;
   \       0x1A   0x0C13             LSRS     R3,R2,#+16
   \       0x1C   0xF003 0x030F      AND      R3,R3,#0xF
     83            rev->minor  = (chiprev & _SYSCFG_CHIPREV_MINOR_MASK)  >> _SYSCFG_CHIPREV_MINOR_SHIFT;
   \       0x20   0x0B12             LSRS     R2,R2,#+12
   \       0x22   0x7043             STRB     R3,[R0, #+1]
   \       0x24   0xF002 0x020F      AND      R2,R2,#0xF
   \       0x28   0x7002             STRB     R2,[R0, #+0]
     84          #else
     85            uint8_t tmp;
     86          
     87            EFM_ASSERT(rev);
     88          
     89            /* CHIP FAMILY bit [5:2] */
     90            tmp  = (uint8_t)(((ROMTABLE->PID1 & _ROMTABLE_PID1_FAMILYMSB_MASK)
     91                              >> _ROMTABLE_PID1_FAMILYMSB_SHIFT) << 2);
     92            /* CHIP FAMILY bit [1:0] */
     93            tmp |=  (uint8_t)((ROMTABLE->PID0 & _ROMTABLE_PID0_FAMILYLSB_MASK)
     94                              >> _ROMTABLE_PID0_FAMILYLSB_SHIFT);
     95            rev->family = tmp;
     96          
     97            /* CHIP MAJOR bit [3:0] */
     98            rev->major = (uint8_t)((ROMTABLE->PID0 & _ROMTABLE_PID0_REVMAJOR_MASK)
     99                                   >> _ROMTABLE_PID0_REVMAJOR_SHIFT);
    100          
    101            /* CHIP MINOR bit [7:4] */
    102            tmp  = (uint8_t)(((ROMTABLE->PID2 & _ROMTABLE_PID2_REVMINORMSB_MASK)
    103                              >> _ROMTABLE_PID2_REVMINORMSB_SHIFT) << 4);
    104            /* CHIP MINOR bit [3:0] */
    105            tmp |= (uint8_t)((ROMTABLE->PID3 & _ROMTABLE_PID3_REVMINORLSB_MASK)
    106                             >> _ROMTABLE_PID3_REVMINORLSB_SHIFT);
    107            rev->minor = tmp;
    108          #endif
    109          }
   \       0x2A   0xBD10             POP      {R4,PC}
    110          
    111          /***************************************************************************//**
    112           * @brief
    113           *    Get a factory calibration value for a given peripheral register.
    114           *
    115           * @param[in] regAddress
    116           *    The peripheral calibration register address to get a calibration value for. If
    117           *    the calibration value is found, this register is updated with the
    118           *    calibration value.
    119           *
    120           * @return
    121           *    True if a calibration value exists, false otherwise.
    122           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    123          bool SYSTEM_GetCalibrationValue(volatile uint32_t *regAddress)
    124          {
    125            SYSTEM_CalAddrVal_TypeDef * p, * end;
    126          
    127            uint32_t s_regAddress = (uint32_t)regAddress;
    128            s_regAddress = s_regAddress & CONVERT_NS_TO_S;
   \                     SYSTEM_GetCalibrationValue: (+1)
   \        0x0   0xF020 0x5280      BIC      R2,R0,#0x10000000
    129          
    130          #if defined(MSC_FLASH_CHIPCONFIG_MEM_BASE)
    131            p   = (SYSTEM_CalAddrVal_TypeDef *)MSC_FLASH_CHIPCONFIG_MEM_BASE;
   \        0x4   0x....             LDR.N    R3,??DataTable10_2
    132            end = (SYSTEM_CalAddrVal_TypeDef *)MSC_FLASH_CHIPCONFIG_MEM_END;
    133          #else
    134            p   = (SYSTEM_CalAddrVal_TypeDef *)(DEVINFO_BASE & 0xFFFFF000U);
    135            end = (SYSTEM_CalAddrVal_TypeDef *)DEVINFO_BASE;
    136          #endif
    137          
    138            for (; p < end; p++) {
    139              if (p->address == 0) {
   \                     ??SYSTEM_GetCalibrationValue_0: (+1)
   \        0x6   0x6819             LDR      R1,[R3, #+0]
   \        0x8   0xB151             CBZ.N    R1,??SYSTEM_GetCalibrationValue_1
    140                /* p->address == 0 marks the end of the table */
    141                return false;
    142              }
    143              if (p->address == s_regAddress) {
   \        0xA   0x4291             CMP      R1,R2
   \        0xC   0xD004             BEQ.N    ??SYSTEM_GetCalibrationValue_2
   \        0xE   0x3308             ADDS     R3,R3,#+8
   \       0x10   0x....             LDR.N    R1,??DataTable10_3
   \       0x12   0x428B             CMP      R3,R1
   \       0x14   0xD3F7             BCC.N    ??SYSTEM_GetCalibrationValue_0
   \       0x16   0xE003             B.N      ??SYSTEM_GetCalibrationValue_1
    144                *regAddress = p->calValue;
   \                     ??SYSTEM_GetCalibrationValue_2: (+1)
   \       0x18   0x685A             LDR      R2,[R3, #+4]
   \       0x1A   0x6002             STR      R2,[R0, #+0]
    145                return true;
   \       0x1C   0x2001             MOVS     R0,#+1
   \       0x1E   0x4770             BX       LR
    146              }
    147            }
    148            /* Nothing found for regAddress. */
    149            return false;
   \                     ??SYSTEM_GetCalibrationValue_1: (+1)
   \       0x20   0x2000             MOVS     R0,#+0
   \       0x22   0x4770             BX       LR
    150          }
    151          
    152          /***************************************************************************//**
    153           * @brief
    154           *   Get family security capability.
    155           *
    156           * @note
    157           *   This function retrieves the family security capability based on the
    158           *   device number. The device number is one letter and 3 digits:
    159           *   DEVICENUMBER = (alpha-'A')*1000 + numeric. i.e. 0d = "A000"; 1123d = "B123".
    160           *   The security capabilities are represented by ::SYSTEM_SecurityCapability_TypeDef.
    161           *
    162           * @return
    163           *   Security capability of MCU.
    164           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    165          SYSTEM_SecurityCapability_TypeDef SYSTEM_GetSecurityCapability(void)
    166          {
    167            SYSTEM_SecurityCapability_TypeDef sc;
    168          
    169          #if (_SILICON_LABS_32B_SERIES == 0)
    170            sc = securityCapabilityNA;
    171          #elif (_SILICON_LABS_32B_SERIES == 1)
    172            sc = securityCapabilityBasic;
    173          #else
    174            sc = securityCapabilityUnknown;
    175          #endif
    176          
    177          #if (_SILICON_LABS_32B_SERIES == 2)
    178            uint16_t mcuFeatureSetMajor;
    179            uint16_t deviceNumber;
    180            deviceNumber = SYSTEM_GetPartNumber();
   \                     SYSTEM_GetSecurityCapability: (+1)
   \        0x0   0x....             LDR.N    R2,??DataTable10_4
   \        0x2   0x6812             LDR      R2,[R2, #+0]
    181            mcuFeatureSetMajor = 'A' + (deviceNumber / 1000);
    182          #if defined(_SILICON_LABS_32B_SERIES_2_CONFIG_2)
    183            // override feature set since BRD4182A Rev A00 -> rev B02 are marked "A"
    184            mcuFeatureSetMajor = 'C';
    185          #endif
    186          
    187            switch (mcuFeatureSetMajor) {
   \        0x4   0xF44F 0x717A      MOV      R1,#+1000
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0xB292             UXTH     R2,R2
   \        0xC   0xFB92 0xF1F1      SDIV     R1,R2,R1
   \       0x10   0x3141             ADDS     R1,R1,#+65
   \       0x12   0xB289             UXTH     R1,R1
   \       0x14   0x2941             CMP      R1,#+65
   \       0x16   0xD004             BEQ.N    ??SYSTEM_GetSecurityCapability_0
   \       0x18   0xD308             BCC.N    ??SYSTEM_GetSecurityCapability_1
   \       0x1A   0x2943             CMP      R1,#+67
   \       0x1C   0xD005             BEQ.N    ??SYSTEM_GetSecurityCapability_2
   \       0x1E   0xD302             BCC.N    ??SYSTEM_GetSecurityCapability_3
   \       0x20   0x4770             BX       LR
    188              case 'A':
    189                sc = securityCapabilitySE;
   \                     ??SYSTEM_GetSecurityCapability_0: (+1)
   \       0x22   0x2004             MOVS     R0,#+4
    190                break;
   \       0x24   0x4770             BX       LR
    191          
    192              case 'B':
    193                sc = securityCapabilityVault;
   \                     ??SYSTEM_GetSecurityCapability_3: (+1)
   \       0x26   0x2005             MOVS     R0,#+5
    194                break;
   \       0x28   0x4770             BX       LR
    195          
    196              case 'C':
    197                sc = securityCapabilityRoT;
   \                     ??SYSTEM_GetSecurityCapability_2: (+1)
   \       0x2A   0x2003             MOVS     R0,#+3
    198                break;
    199          
    200              default:
    201                sc = securityCapabilityUnknown;
    202                break;
    203            }
    204          #endif
    205          
    206            return sc;
   \                     ??SYSTEM_GetSecurityCapability_1: (+1)
   \       0x2C   0x4770             BX       LR
    207          }
    208          
    209          /***************************************************************************//**
    210           * @brief
    211           *   Get the unique number for this device.
    212           *
    213           * @return
    214           *   Unique number for this device.
    215           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    216          uint64_t SYSTEM_GetUnique(void)
    217          {
    218          #if defined (_DEVINFO_EUI64H_MASK)
    219            uint32_t tmp = DEVINFO->EUI64L;
   \                     SYSTEM_GetUnique: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable10_5
   \        0x2   0x6808             LDR      R0,[R1, #+0]
    220            return (uint64_t)((uint64_t)DEVINFO->EUI64H << 32) | tmp;
   \        0x4   0x6849             LDR      R1,[R1, #+4]
   \        0x6   0x4770             BX       LR
    221          #elif defined(_DEVINFO_UNIQUEH_MASK)
    222            uint32_t tmp = DEVINFO->UNIQUEL;
    223            return (uint64_t)((uint64_t)DEVINFO->UNIQUEH << 32) | tmp;
    224          #else
    225          #error (em_system.c): Location of device unique number is not defined.
    226          #endif
    227          }
    228          
    229          /***************************************************************************//**
    230           * @brief
    231           *   Get the production revision for this part.
    232           *
    233           * @return
    234           *   Production revision for this part.
    235           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    236          uint8_t SYSTEM_GetProdRev(void)
    237          {
    238          #if defined (_DEVINFO_PART_PROD_REV_MASK)
    239            return (uint8_t)((DEVINFO->PART & _DEVINFO_PART_PROD_REV_MASK)
    240                             >> _DEVINFO_PART_PROD_REV_SHIFT);
    241          #elif defined (_DEVINFO_INFO_PRODREV_MASK)
    242            return (uint8_t)((DEVINFO->INFO & _DEVINFO_INFO_PRODREV_MASK)
    243                             >> _DEVINFO_INFO_PRODREV_SHIFT);
   \                     SYSTEM_GetProdRev: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable10_6
   \        0x2   0x6800             LDR      R0,[R0, #+0]
   \        0x4   0x0200             LSLS     R0,R0,#+8
   \        0x6   0x0E00             LSRS     R0,R0,#+24
   \        0x8   0x4770             BX       LR
    244          #else
    245          #error (em_system.c): Location of production revision is not defined.
    246          #endif
    247          }
    248          
    249          /***************************************************************************//**
    250           * @brief
    251           *   Get the SRAM Base Address.
    252           *
    253           * @note
    254           *   This function is used to retrieve the base address of the SRAM.
    255           *
    256           * @return
    257           *   Base address SRAM (32-bit unsigned integer).
    258           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    259          uint32_t SYSTEM_GetSRAMBaseAddress(void)
    260          {
    261            return (uint32_t)SRAM_BASE;
   \                     SYSTEM_GetSRAMBaseAddress: (+1)
   \        0x0   0xF04F 0x5000      MOV      R0,#+536870912
   \        0x4   0x4770             BX       LR
    262          }
    263          
    264          /***************************************************************************//**
    265           * @brief
    266           *   Get the SRAM size (in KB).
    267           *
    268           * @note
    269           *   This function retrieves SRAM size by reading the chip device
    270           *   info structure. If your binary is made for one specific device only,
    271           *   use SRAM_SIZE instead.
    272           *
    273           * @return
    274           *   Size of internal SRAM (in KB).
    275           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    276          uint16_t SYSTEM_GetSRAMSize(void)
    277          {
    278            uint16_t sizekb;
    279          
    280          #if defined(_EFM32_GECKO_FAMILY)
    281            /* Early Gecko devices had a bug where SRAM and Flash size were swapped. */
    282            if (SYSTEM_GetProdRev() < 5) {
    283              sizekb = (DEVINFO->MSIZE & _DEVINFO_MSIZE_FLASH_MASK)
    284                       >> _DEVINFO_MSIZE_FLASH_SHIFT;
    285            }
    286          #endif
    287            sizekb = (uint16_t)((DEVINFO->MSIZE & _DEVINFO_MSIZE_SRAM_MASK)
    288                                >> _DEVINFO_MSIZE_SRAM_SHIFT);
   \                     SYSTEM_GetSRAMSize: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable10_7
   \        0x2   0x6800             LDR      R0,[R0, #+0]
    289          
    290          #if defined(_SILICON_LABS_GECKO_INTERNAL_SDID_80) && defined(_EFR_DEVICE)
    291            /* Do not include EFR32xG1 RAMH. */
    292            sizekb--;
    293          #endif
    294          
    295            return sizekb;
   \        0x4   0x0140             LSLS     R0,R0,#+5
   \        0x6   0x0D40             LSRS     R0,R0,#+21
   \        0x8   0x4770             BX       LR
    296          }
    297          
    298          /***************************************************************************//**
    299           * @brief
    300           *   Get the flash size (in KB).
    301           *
    302           * @note
    303           *   This function retrieves flash size by reading the chip device
    304           *   info structure. If your binary is made for one specific device only,
    305           *   use FLASH_SIZE instead.
    306           *
    307           * @return
    308           *   Size of internal flash (in KB).
    309           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    310          uint16_t SYSTEM_GetFlashSize(void)
    311          {
    312          #if defined(_EFM32_GECKO_FAMILY)
    313            /* Early Gecko devices had a bug where SRAM and Flash size were swapped. */
    314            if (SYSTEM_GetProdRev() < 5) {
    315              return (DEVINFO->MSIZE & _DEVINFO_MSIZE_SRAM_MASK)
    316                     >> _DEVINFO_MSIZE_SRAM_SHIFT;
    317            }
    318          #endif
    319            return (uint16_t)((DEVINFO->MSIZE & _DEVINFO_MSIZE_FLASH_MASK)
    320                              >> _DEVINFO_MSIZE_FLASH_SHIFT);
   \                     SYSTEM_GetFlashSize: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable10_7
   \        0x2   0x....             B.N      ?Subroutine0
    321          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0x6800             LDR      R0,[R0, #+0]
   \        0x2   0xB280             UXTH     R0,R0
   \        0x4   0x4770             BX       LR
    322          
    323          /***************************************************************************//**
    324           * @brief
    325           *   Get the flash page size in bytes.
    326           *
    327           * @note
    328           *   This function retrieves flash page size by reading the chip device
    329           *   info structure. If your binary is made for one specific device only,
    330           *   use FLASH_PAGE_SIZE instead.
    331           *
    332           * @return
    333           *   Page size of internal flash in bytes.
    334           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    335          uint32_t SYSTEM_GetFlashPageSize(void)
    336          {
    337            uint32_t tmp;
    338          
    339          #if defined(_SILICON_LABS_32B_SERIES_0)
    340          
    341          #if defined(_EFM32_GIANT_FAMILY)
    342            if (SYSTEM_GetProdRev() < 18) {
    343              /* Early Giant/Leopard devices did not have MEMINFO in DEVINFO. */
    344              return FLASH_PAGE_SIZE;
    345            }
    346          #elif defined(_EFM32_ZERO_FAMILY)
    347            if (SYSTEM_GetProdRev() < 24) {
    348              /* Early Zero devices have an incorrect DEVINFO flash page size */
    349              return FLASH_PAGE_SIZE;
    350            }
    351          #endif
    352          #endif
    353          
    354          #if defined(_DEVINFO_MEMINFO_FLASHPAGESIZE_MASK)
    355            tmp = (DEVINFO->MEMINFO & _DEVINFO_MEMINFO_FLASHPAGESIZE_MASK)
    356                  >> _DEVINFO_MEMINFO_FLASHPAGESIZE_SHIFT;
   \                     SYSTEM_GetFlashPageSize: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable10_8
   \        0x2   0x6800             LDR      R0,[R0, #+0]
    357          #elif defined(_DEVINFO_MEMINFO_FLASH_PAGE_SIZE_MASK)
    358            tmp = (DEVINFO->MEMINFO & _DEVINFO_MEMINFO_FLASH_PAGE_SIZE_MASK)
    359                  >> _DEVINFO_MEMINFO_FLASH_PAGE_SIZE_SHIFT;
    360          #else
    361          #error (em_system.c): Location of flash page size is not defined.
    362          #endif
    363          
    364            return 1UL << ((tmp + 10UL) & 0x1FUL);
   \        0x4   0x2101             MOVS     R1,#+1
   \        0x6   0x300A             ADDS     R0,R0,#+10
   \        0x8   0xF000 0x001F      AND      R0,R0,#0x1F
   \        0xC   0xFA01 0xF000      LSL      R0,R1,R0
   \       0x10   0x4770             BX       LR
    365          }
    366          
    367          /***************************************************************************//**
    368           * @brief
    369           *   Get the MCU part number.
    370           *
    371           * @return
    372           *   The part number of MCU.
    373           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    374          uint16_t SYSTEM_GetPartNumber(void)
    375          {
    376          #if defined(_DEVINFO_PART_DEVICENUM_MASK)
    377            return (uint16_t)((DEVINFO->PART & _DEVINFO_PART_DEVICENUM_MASK)
    378                              >> _DEVINFO_PART_DEVICENUM_SHIFT);
   \                     SYSTEM_GetPartNumber: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable10_4
   \        0x2                      REQUIRE ?Subroutine0
   \        0x2                      ;; // Fall through to label ?Subroutine0
    379          #elif defined(_DEVINFO_PART_DEVICE_NUMBER_MASK)
    380            return (uint16_t)((DEVINFO->PART & _DEVINFO_PART_DEVICE_NUMBER_MASK)
    381                              >> _DEVINFO_PART_DEVICE_NUMBER_SHIFT);
    382          #else
    383          #error (em_system.c): Location of device part number is not defined.
    384          #endif
    385          }
    386          
    387          /***************************************************************************//**
    388           * @brief
    389           *   Get the calibration temperature (in degrees Celsius).
    390           *
    391           * @return
    392           *   Calibration temperature in Celsius.
    393           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    394          uint8_t SYSTEM_GetCalibrationTemperature(void)
    395          {
    396          #if defined(_DEVINFO_CAL_TEMP_MASK)
    397            return (uint8_t)((DEVINFO->CAL & _DEVINFO_CAL_TEMP_MASK)
    398                             >> _DEVINFO_CAL_TEMP_SHIFT);
    399          #elif defined(_DEVINFO_CALTEMP_TEMP_MASK)
    400            return (uint8_t)((DEVINFO->CALTEMP & _DEVINFO_CALTEMP_TEMP_MASK)
    401                             >> _DEVINFO_CALTEMP_TEMP_SHIFT);
   \                     SYSTEM_GetCalibrationTemperature: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable10_9
   \        0x2   0x6800             LDR      R0,[R0, #+0]
   \        0x4   0xB2C0             UXTB     R0,R0
   \        0x6   0x4770             BX       LR
    402          #else
    403          #error (em_system.c): Location of calibration temperature is not defined.
    404          #endif
    405          }
    406          
    407          /***************************************************************************//**
    408           * @brief
    409           *   Get the MCU family identifier.
    410           *
    411           * @note
    412           *   This function retrieves family ID by reading the chip's device info
    413           *   structure in flash memory. Users can retrieve family ID directly
    414           *   by reading DEVINFO->PART item and decode with mask and shift
    415           *   \#defines defined in \<part_family\>_devinfo.h (refer to code
    416           *   below for details).
    417           *
    418           * @return
    419           *   Family identifier of MCU.
    420           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    421          SYSTEM_PartFamily_TypeDef SYSTEM_GetFamily(void)
    422          {
    423          #if defined(_DEVINFO_PART_FAMILY_MASK)
    424            return (SYSTEM_PartFamily_TypeDef)
    425                   ((uint32_t)((DEVINFO->PART & (_DEVINFO_PART_FAMILY_MASK
    426                                                 | _DEVINFO_PART_FAMILYNUM_MASK))));
   \                     SYSTEM_GetFamily: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable10_4
   \        0x2   0x6800             LDR      R0,[R0, #+0]
   \        0x4   0x....             LDR.N    R1,??DataTable10_10
   \        0x6   0x4008             ANDS     R0,R1,R0
   \        0x8   0x4770             BX       LR
    427          #elif defined(_DEVINFO_PART_DEVICE_FAMILY_MASK)
    428            return (SYSTEM_PartFamily_TypeDef)
    429                   ((uint32_t)((DEVINFO->PART & _DEVINFO_PART_DEVICE_FAMILY_MASK)
    430                               >> _DEVINFO_PART_DEVICE_FAMILY_SHIFT));
    431          #else
    432            #error (em_system.h): Location of device family name is not defined.
    433          #endif
    434          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \        0x0   0x5000'9064        DC32     0x50009064

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \        0x0   0x5007'C018        DC32     0x5007c018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \        0x0   0x0FE0'8400        DC32     0xfe08400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \        0x0   0x0FE0'89FF        DC32     0xfe089ff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \        0x0   0x0FE0'8004        DC32     0xfe08004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_5:
   \        0x0   0x0FE0'8048        DC32     0xfe08048

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_6:
   \        0x0   0x0FE0'8000        DC32     0xfe08000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_7:
   \        0x0   0x0FE0'800C        DC32     0xfe0800c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_8:
   \        0x0   0x0FE0'8008        DC32     0xfe08008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_9:
   \        0x0   0x0FE0'8050        DC32     0xfe08050

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_10:
   \        0x0   0x3F3F'0000        DC32     0x3f3f0000
    435          
    436          /** @} (end addtogroup system) */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   SYSTEM_ChipRevisionGet
       0   SYSTEM_GetCalibrationTemperature
       0   SYSTEM_GetCalibrationValue
       0   SYSTEM_GetFamily
       0   SYSTEM_GetFlashPageSize
       0   SYSTEM_GetFlashSize
       0   SYSTEM_GetPartNumber
       0   SYSTEM_GetProdRev
       0   SYSTEM_GetSRAMBaseAddress
       0   SYSTEM_GetSRAMSize
       0   SYSTEM_GetSecurityCapability
       0   SYSTEM_GetUnique


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_10
       4  ??DataTable10_2
       4  ??DataTable10_3
       4  ??DataTable10_4
       4  ??DataTable10_5
       4  ??DataTable10_6
       4  ??DataTable10_7
       4  ??DataTable10_8
       4  ??DataTable10_9
       6  ?Subroutine0
      44  SYSTEM_ChipRevisionGet
       8  SYSTEM_GetCalibrationTemperature
      36  SYSTEM_GetCalibrationValue
      10  SYSTEM_GetFamily
      18  SYSTEM_GetFlashPageSize
       4  SYSTEM_GetFlashSize
       2  SYSTEM_GetPartNumber
      10  SYSTEM_GetProdRev
       6  SYSTEM_GetSRAMBaseAddress
      10  SYSTEM_GetSRAMSize
      46  SYSTEM_GetSecurityCapability
       8  SYSTEM_GetUnique

 
 252 bytes in section .text
 
 252 bytes of CODE memory

Errors: none
Warnings: none
