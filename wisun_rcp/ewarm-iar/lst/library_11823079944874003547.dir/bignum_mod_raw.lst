###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         27/Nov/2024  12:17:24
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\bignum_mod_raw.c
#    Command line                 =
#        -f
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir\bignum_mod_raw.o.rsp
#        (C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\bignum_mod_raw.c
#        -D EFR32FG28B322F1024IM48=1 -D
#        configNUM_SDK_THREAD_LOCAL_STORAGE_POINTERS=2 -D
#        SL_COMPONENT_CATALOG_PRESENT=1 -D
#        MBEDTLS_CONFIG_FILE=<sl_mbedtls_config.h> -D
#        MBEDTLS_PSA_CRYPTO_CONFIG_FILE=<psa_crypto_config.h> -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -D
#        RTT_USE_ASM=0 -D MBED_CONF_MBED_TRACE_ENABLE=1 -D
#        MBED_CONF_NANOSTACK_CONFIGURATION=ws_router -D
#        MBED_TRACE_MAX_LEVEL=TRACE_ACTIVE_LEVEL_ALL -D DEBUG_EFM_USER=1 -D
#        HAVE_LFN=1 -D HAVE_LFN_PARENT=1 -lC
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\lst\library_11823079944874003547.dir
#        --diag_suppress Pa050 -o
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir
#        --debug --endian=little --cpu=Cortex-M33 --cmse --cmse -e
#        --fpu=VFPv5_sp --dlib_config "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\
#        -I C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\autogen\ -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\config\ -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\config\rail\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\Device\SiliconLabs\EFR32FG28\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\common\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\CMSIS\Core\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\CMSIS\RTOS2\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\device_init\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\dmadrv\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\common\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emlib\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\cmsis\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\kernel\include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\kernel\portable\IAR\ARM_CM33_NTZ\non_secure\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\iostream\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\config\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\config\preset\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\nvm3\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\peripheral\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_psa_driver\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\common\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\wmbus\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\sidewalk\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\efr32xg28\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\rail_util_pti\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\src\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\segger\systemview\SEGGER\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\silicon_labs\silabs_core\memory_manager\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\common\toolchain\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\system\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\ns_list\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\nanostack\nanostack-libservice\mbed-client-libservice\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\sleeptimer\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\app\wisun_rcp\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\inc\socket\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\src\
#        -Ohz --use_c++_inline) --dependencies=n
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir\bignum_mod_raw.o.iar_deps
#    Locale                       =  C
#    List file                    =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\lst\library_11823079944874003547.dir\bignum_mod_raw.lst
#    Object file                  =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir\bignum_mod_raw.o
#    Runtime model:                  
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#
###############################################################################

C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\bignum_mod_raw.c
      1          /*
      2           *  Low-level modular bignum functions
      3           *
      4           *  Copyright The Mbed TLS Contributors
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           */
     19          
     20          #include "common.h"
     21          
     22          #if defined(MBEDTLS_BIGNUM_C) && defined(MBEDTLS_ECP_WITH_MPI_UINT)
     23          
     24          #include <string.h>
     25          
     26          #include "mbedtls/error.h"
     27          #include "mbedtls/platform_util.h"
     28          
     29          #include "mbedtls/platform.h"
     30          
     31          #include "bignum_core.h"
     32          #include "bignum_mod_raw.h"
     33          #include "bignum_mod.h"
     34          #include "constant_time_internal.h"
     35          
     36          #include "bignum_mod_raw_invasive.h"
     37          
     38          void mbedtls_mpi_mod_raw_cond_assign(mbedtls_mpi_uint *X,
     39                                               const mbedtls_mpi_uint *A,
     40                                               const mbedtls_mpi_mod_modulus *N,
     41                                               unsigned char assign)
     42          {
     43              mbedtls_mpi_core_cond_assign(X, A, N->limbs, mbedtls_ct_bool(assign));
     44          }
     45          
     46          void mbedtls_mpi_mod_raw_cond_swap(mbedtls_mpi_uint *X,
     47                                             mbedtls_mpi_uint *Y,
     48                                             const mbedtls_mpi_mod_modulus *N,
     49                                             unsigned char swap)
     50          {
     51              mbedtls_mpi_core_cond_swap(X, Y, N->limbs, mbedtls_ct_bool(swap));
     52          }
     53          
     54          int mbedtls_mpi_mod_raw_read(mbedtls_mpi_uint *X,
     55                                       const mbedtls_mpi_mod_modulus *N,
     56                                       const unsigned char *input,
     57                                       size_t input_length,
     58                                       mbedtls_mpi_mod_ext_rep ext_rep)
     59          {
     60              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
     61          
     62              switch (ext_rep) {
     63                  case MBEDTLS_MPI_MOD_EXT_REP_LE:
     64                      ret = mbedtls_mpi_core_read_le(X, N->limbs,
     65                                                     input, input_length);
     66                      break;
     67                  case MBEDTLS_MPI_MOD_EXT_REP_BE:
     68                      ret = mbedtls_mpi_core_read_be(X, N->limbs,
     69                                                     input, input_length);
     70                      break;
     71                  default:
     72                      return MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
     73              }
     74          
     75              if (ret != 0) {
     76                  goto cleanup;
     77              }
     78          
     79              if (!mbedtls_mpi_core_lt_ct(X, N->p, N->limbs)) {
     80                  ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
     81                  goto cleanup;
     82              }
     83          
     84          cleanup:
     85          
     86              return ret;
     87          }
     88          
     89          int mbedtls_mpi_mod_raw_write(const mbedtls_mpi_uint *A,
     90                                        const mbedtls_mpi_mod_modulus *N,
     91                                        unsigned char *output,
     92                                        size_t output_length,
     93                                        mbedtls_mpi_mod_ext_rep ext_rep)
     94          {
     95              switch (ext_rep) {
     96                  case MBEDTLS_MPI_MOD_EXT_REP_LE:
     97                      return mbedtls_mpi_core_write_le(A, N->limbs,
     98                                                       output, output_length);
     99                  case MBEDTLS_MPI_MOD_EXT_REP_BE:
    100                      return mbedtls_mpi_core_write_be(A, N->limbs,
    101                                                       output, output_length);
    102                  default:
    103                      return MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
    104              }
    105          }
    106          
    107          void mbedtls_mpi_mod_raw_sub(mbedtls_mpi_uint *X,
    108                                       const mbedtls_mpi_uint *A,
    109                                       const mbedtls_mpi_uint *B,
    110                                       const mbedtls_mpi_mod_modulus *N)
    111          {
    112              mbedtls_mpi_uint c = mbedtls_mpi_core_sub(X, A, B, N->limbs);
    113          
    114              (void) mbedtls_mpi_core_add_if(X, N->p, N->limbs, (unsigned) c);
    115          }
    116          
    117          MBEDTLS_STATIC_TESTABLE
    118          void mbedtls_mpi_mod_raw_fix_quasi_reduction(mbedtls_mpi_uint *X,
    119                                                       const mbedtls_mpi_mod_modulus *N)
    120          {
    121              mbedtls_mpi_uint c = mbedtls_mpi_core_sub(X, X, N->p, N->limbs);
    122          
    123              (void) mbedtls_mpi_core_add_if(X, N->p, N->limbs, (unsigned) c);
    124          }
    125          
    126          
    127          void mbedtls_mpi_mod_raw_mul(mbedtls_mpi_uint *X,
    128                                       const mbedtls_mpi_uint *A,
    129                                       const mbedtls_mpi_uint *B,
    130                                       const mbedtls_mpi_mod_modulus *N,
    131                                       mbedtls_mpi_uint *T)
    132          {
    133              /* Standard (A * B) multiplication stored into pre-allocated T
    134               * buffer of fixed limb size of (2N + 1).
    135               *
    136               * The space may not not fully filled by when
    137               * MBEDTLS_MPI_MOD_REP_OPT_RED is used. */
    138              const size_t T_limbs = BITS_TO_LIMBS(N->bits) * 2;
    139              switch (N->int_rep) {
    140                  case MBEDTLS_MPI_MOD_REP_MONTGOMERY:
    141                      mbedtls_mpi_core_montmul(X, A, B, N->limbs, N->p, N->limbs,
    142                                               N->rep.mont.mm, T);
    143                      break;
    144                  case MBEDTLS_MPI_MOD_REP_OPT_RED:
    145                      mbedtls_mpi_core_mul(T, A, N->limbs, B, N->limbs);
    146          
    147                      /* Optimised Reduction */
    148                      (*N->rep.ored.modp)(T, T_limbs);
    149          
    150                      /* Convert back to canonical representation */
    151                      mbedtls_mpi_mod_raw_fix_quasi_reduction(T, N);
    152                      memcpy(X, T, N->limbs * sizeof(mbedtls_mpi_uint));
    153                      break;
    154                  default:
    155                      break;
    156              }
    157          
    158          }
    159          
    160          size_t mbedtls_mpi_mod_raw_inv_prime_working_limbs(size_t AN_limbs)
    161          {
    162              /* mbedtls_mpi_mod_raw_inv_prime() needs a temporary for the exponent,
    163               * which will be the same size as the modulus and input (AN_limbs),
    164               * and additional space to pass to mbedtls_mpi_core_exp_mod(). */
    165              return AN_limbs +
    166                     mbedtls_mpi_core_exp_mod_working_limbs(AN_limbs, AN_limbs);
    167          }
    168          
    169          void mbedtls_mpi_mod_raw_inv_prime(mbedtls_mpi_uint *X,
    170                                             const mbedtls_mpi_uint *A,
    171                                             const mbedtls_mpi_uint *N,
    172                                             size_t AN_limbs,
    173                                             const mbedtls_mpi_uint *RR,
    174                                             mbedtls_mpi_uint *T)
    175          {
    176              /* Inversion by power: g^|G| = 1 => g^(-1) = g^(|G|-1), and
    177               *                       |G| = N - 1, so we want
    178               *                 g^(|G|-1) = g^(N - 2)
    179               */
    180          
    181              /* Use the first AN_limbs of T to hold N - 2 */
    182              mbedtls_mpi_uint *Nminus2 = T;
    183              (void) mbedtls_mpi_core_sub_int(Nminus2, N, 2, AN_limbs);
    184          
    185              /* Rest of T is given to exp_mod for its working space */
    186              mbedtls_mpi_core_exp_mod(X,
    187                                       A, N, AN_limbs, Nminus2, AN_limbs,
    188                                       RR, T + AN_limbs);
    189          }
    190          
    191          void mbedtls_mpi_mod_raw_add(mbedtls_mpi_uint *X,
    192                                       const mbedtls_mpi_uint *A,
    193                                       const mbedtls_mpi_uint *B,
    194                                       const mbedtls_mpi_mod_modulus *N)
    195          {
    196              mbedtls_mpi_uint carry, borrow;
    197              carry  = mbedtls_mpi_core_add(X, A, B, N->limbs);
    198              borrow = mbedtls_mpi_core_sub(X, X, N->p, N->limbs);
    199              (void) mbedtls_mpi_core_add_if(X, N->p, N->limbs, (unsigned) (carry ^ borrow));
    200          }
    201          
    202          int mbedtls_mpi_mod_raw_canonical_to_modulus_rep(
    203              mbedtls_mpi_uint *X,
    204              const mbedtls_mpi_mod_modulus *N)
    205          {
    206              switch (N->int_rep) {
    207                  case MBEDTLS_MPI_MOD_REP_MONTGOMERY:
    208                      return mbedtls_mpi_mod_raw_to_mont_rep(X, N);
    209                  case MBEDTLS_MPI_MOD_REP_OPT_RED:
    210                      return 0;
    211                  default:
    212                      return MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
    213              }
    214          }
    215          
    216          int mbedtls_mpi_mod_raw_modulus_to_canonical_rep(
    217              mbedtls_mpi_uint *X,
    218              const mbedtls_mpi_mod_modulus *N)
    219          {
    220              switch (N->int_rep) {
    221                  case MBEDTLS_MPI_MOD_REP_MONTGOMERY:
    222                      return mbedtls_mpi_mod_raw_from_mont_rep(X, N);
    223                  case MBEDTLS_MPI_MOD_REP_OPT_RED:
    224                      return 0;
    225                  default:
    226                      return MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
    227              }
    228          }
    229          
    230          int mbedtls_mpi_mod_raw_random(mbedtls_mpi_uint *X,
    231                                         mbedtls_mpi_uint min,
    232                                         const mbedtls_mpi_mod_modulus *N,
    233                                         int (*f_rng)(void *, unsigned char *, size_t),
    234                                         void *p_rng)
    235          {
    236              int ret = mbedtls_mpi_core_random(X, min, N->p, N->limbs, f_rng, p_rng);
    237              if (ret != 0) {
    238                  return ret;
    239              }
    240              return mbedtls_mpi_mod_raw_canonical_to_modulus_rep(X, N);
    241          }
    242          
    243          int mbedtls_mpi_mod_raw_to_mont_rep(mbedtls_mpi_uint *X,
    244                                              const mbedtls_mpi_mod_modulus *N)
    245          {
    246              mbedtls_mpi_uint *T;
    247              const size_t t_limbs = mbedtls_mpi_core_montmul_working_limbs(N->limbs);
    248          
    249              if ((T = (mbedtls_mpi_uint *) mbedtls_calloc(t_limbs, ciL)) == NULL) {
    250                  return MBEDTLS_ERR_MPI_ALLOC_FAILED;
    251              }
    252          
    253              mbedtls_mpi_core_to_mont_rep(X, X, N->p, N->limbs,
    254                                           N->rep.mont.mm, N->rep.mont.rr, T);
    255          
    256              mbedtls_zeroize_and_free(T, t_limbs * ciL);
    257              return 0;
    258          }
    259          
    260          int mbedtls_mpi_mod_raw_from_mont_rep(mbedtls_mpi_uint *X,
    261                                                const mbedtls_mpi_mod_modulus *N)
    262          {
    263              const size_t t_limbs = mbedtls_mpi_core_montmul_working_limbs(N->limbs);
    264              mbedtls_mpi_uint *T;
    265          
    266              if ((T = (mbedtls_mpi_uint *) mbedtls_calloc(t_limbs, ciL)) == NULL) {
    267                  return MBEDTLS_ERR_MPI_ALLOC_FAILED;
    268              }
    269          
    270              mbedtls_mpi_core_from_mont_rep(X, X, N->p, N->limbs, N->rep.mont.mm, T);
    271          
    272              mbedtls_zeroize_and_free(T, t_limbs * ciL);
    273              return 0;
    274          }
    275          
    276          void mbedtls_mpi_mod_raw_neg(mbedtls_mpi_uint *X,
    277                                       const mbedtls_mpi_uint *A,
    278                                       const mbedtls_mpi_mod_modulus *N)
    279          {
    280              mbedtls_mpi_core_sub(X, N->p, A, N->limbs);
    281          
    282              /* If A=0 initially, then X=N now. Detect this by
    283               * subtracting N and catching the carry. */
    284              mbedtls_mpi_uint borrow = mbedtls_mpi_core_sub(X, X, N->p, N->limbs);
    285              (void) mbedtls_mpi_core_add_if(X, N->p, N->limbs, (unsigned) borrow);
    286          }
    287          
    288          #endif /* MBEDTLS_BIGNUM_C && MBEDTLS_ECP_WITH_MPI_UINT */


 
 
 0 bytes of memory

Errors: none
Warnings: none
