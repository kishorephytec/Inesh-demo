###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         27/Nov/2024  12:17:45
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\ssl_debug_helpers_generated.c
#    Command line                 =
#        -f
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir\ssl_debug_helpers_generated.o.rsp
#        (C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\ssl_debug_helpers_generated.c
#        -D EFR32FG28B322F1024IM48=1 -D
#        configNUM_SDK_THREAD_LOCAL_STORAGE_POINTERS=2 -D
#        SL_COMPONENT_CATALOG_PRESENT=1 -D
#        MBEDTLS_CONFIG_FILE=<sl_mbedtls_config.h> -D
#        MBEDTLS_PSA_CRYPTO_CONFIG_FILE=<psa_crypto_config.h> -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -D
#        RTT_USE_ASM=0 -D MBED_CONF_MBED_TRACE_ENABLE=1 -D
#        MBED_CONF_NANOSTACK_CONFIGURATION=ws_router -D
#        MBED_TRACE_MAX_LEVEL=TRACE_ACTIVE_LEVEL_ALL -D DEBUG_EFM_USER=1 -D
#        HAVE_LFN=1 -D HAVE_LFN_PARENT=1 -lC
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\lst\library_11823079944874003547.dir
#        --diag_suppress Pa050 -o
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir
#        --debug --endian=little --cpu=Cortex-M33 --cmse --cmse -e
#        --fpu=VFPv5_sp --dlib_config "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\
#        -I C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\autogen\ -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\config\ -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\config\rail\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\Device\SiliconLabs\EFR32FG28\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\common\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\CMSIS\Core\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\CMSIS\RTOS2\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\device_init\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\dmadrv\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\common\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emlib\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\cmsis\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\kernel\include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\kernel\portable\IAR\ARM_CM33_NTZ\non_secure\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\iostream\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\config\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\config\preset\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\nvm3\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\peripheral\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_psa_driver\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\common\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\wmbus\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\sidewalk\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\efr32xg28\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\rail_util_pti\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\src\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\segger\systemview\SEGGER\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\silicon_labs\silabs_core\memory_manager\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\common\toolchain\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\system\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\ns_list\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\nanostack\nanostack-libservice\mbed-client-libservice\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\sleeptimer\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\app\wisun_rcp\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\inc\socket\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\src\
#        -Ohz --use_c++_inline) --dependencies=n
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir\ssl_debug_helpers_generated.o.iar_deps
#    Locale                       =  C
#    List file                    =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\lst\library_11823079944874003547.dir\ssl_debug_helpers_generated.lst
#    Object file                  =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir\ssl_debug_helpers_generated.o
#    Runtime model:                  
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#
###############################################################################

C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\ssl_debug_helpers_generated.c
      1          /* Automatically generated by generate_ssl_debug_helpers.py. DO NOT EDIT. */
      2          
      3          /**
      4           * \file ssl_debug_helpers_generated.c
      5           *
      6           * \brief Automatically generated helper functions for debugging
      7           */
      8          /*
      9           *  Copyright The Mbed TLS Contributors
     10           *  SPDX-License-Identifier: Apache-2.0
     11           *
     12           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
     13           *  not use this file except in compliance with the License.
     14           *  You may obtain a copy of the License at
     15           *
     16           *  http://www.apache.org/licenses/LICENSE-2.0
     17           *
     18           *  Unless required by applicable law or agreed to in writing, software
     19           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     20           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     21           *  See the License for the specific language governing permissions and
     22           *  limitations under the License.
     23           */
     24          
     25          #include "common.h"
     26          
     27          #if defined(MBEDTLS_DEBUG_C)
     28          
     29          #include "ssl_debug_helpers.h"
     30          
     31          
     32          const char *mbedtls_ssl_named_group_to_str( uint16_t in )
     33          {
     34              switch( in )
     35              {
     36              case MBEDTLS_SSL_IANA_TLS_GROUP_SECP192K1:
     37                  return "secp192k1";
     38              case MBEDTLS_SSL_IANA_TLS_GROUP_SECP192R1:
     39                  return "secp192r1";
     40              case MBEDTLS_SSL_IANA_TLS_GROUP_SECP224K1:
     41                  return "secp224k1";
     42              case MBEDTLS_SSL_IANA_TLS_GROUP_SECP224R1:
     43                  return "secp224r1";
     44              case MBEDTLS_SSL_IANA_TLS_GROUP_SECP256K1:
     45                  return "secp256k1";
     46              case MBEDTLS_SSL_IANA_TLS_GROUP_SECP256R1:
     47                  return "secp256r1";
     48              case MBEDTLS_SSL_IANA_TLS_GROUP_SECP384R1:
     49                  return "secp384r1";
     50              case MBEDTLS_SSL_IANA_TLS_GROUP_SECP521R1:
     51                  return "secp521r1";
     52              case MBEDTLS_SSL_IANA_TLS_GROUP_BP256R1:
     53                  return "bp256r1";
     54              case MBEDTLS_SSL_IANA_TLS_GROUP_BP384R1:
     55                  return "bp384r1";
     56              case MBEDTLS_SSL_IANA_TLS_GROUP_BP512R1:
     57                  return "bp512r1";
     58              case MBEDTLS_SSL_IANA_TLS_GROUP_X25519:
     59                  return "x25519";
     60              case MBEDTLS_SSL_IANA_TLS_GROUP_X448:
     61                  return "x448";
     62              case MBEDTLS_SSL_IANA_TLS_GROUP_FFDHE2048:
     63                  return "ffdhe2048";
     64              case MBEDTLS_SSL_IANA_TLS_GROUP_FFDHE3072:
     65                  return "ffdhe3072";
     66              case MBEDTLS_SSL_IANA_TLS_GROUP_FFDHE4096:
     67                  return "ffdhe4096";
     68              case MBEDTLS_SSL_IANA_TLS_GROUP_FFDHE6144:
     69                  return "ffdhe6144";
     70              case MBEDTLS_SSL_IANA_TLS_GROUP_FFDHE8192:
     71                  return "ffdhe8192";
     72              };
     73          
     74              return "UNKOWN";
     75          }
     76          const char *mbedtls_ssl_sig_alg_to_str( uint16_t in )
     77          {
     78              switch( in )
     79              {
     80              case MBEDTLS_TLS1_3_SIG_RSA_PKCS1_SHA256:
     81                  return "rsa_pkcs1_sha256";
     82              case MBEDTLS_TLS1_3_SIG_RSA_PKCS1_SHA384:
     83                  return "rsa_pkcs1_sha384";
     84              case MBEDTLS_TLS1_3_SIG_RSA_PKCS1_SHA512:
     85                  return "rsa_pkcs1_sha512";
     86              case MBEDTLS_TLS1_3_SIG_ECDSA_SECP256R1_SHA256:
     87                  return "ecdsa_secp256r1_sha256";
     88              case MBEDTLS_TLS1_3_SIG_ECDSA_SECP384R1_SHA384:
     89                  return "ecdsa_secp384r1_sha384";
     90              case MBEDTLS_TLS1_3_SIG_ECDSA_SECP521R1_SHA512:
     91                  return "ecdsa_secp521r1_sha512";
     92              case MBEDTLS_TLS1_3_SIG_RSA_PSS_RSAE_SHA256:
     93                  return "rsa_pss_rsae_sha256";
     94              case MBEDTLS_TLS1_3_SIG_RSA_PSS_RSAE_SHA384:
     95                  return "rsa_pss_rsae_sha384";
     96              case MBEDTLS_TLS1_3_SIG_RSA_PSS_RSAE_SHA512:
     97                  return "rsa_pss_rsae_sha512";
     98              case MBEDTLS_TLS1_3_SIG_ED25519:
     99                  return "ed25519";
    100              case MBEDTLS_TLS1_3_SIG_ED448:
    101                  return "ed448";
    102              case MBEDTLS_TLS1_3_SIG_RSA_PSS_PSS_SHA256:
    103                  return "rsa_pss_pss_sha256";
    104              case MBEDTLS_TLS1_3_SIG_RSA_PSS_PSS_SHA384:
    105                  return "rsa_pss_pss_sha384";
    106              case MBEDTLS_TLS1_3_SIG_RSA_PSS_PSS_SHA512:
    107                  return "rsa_pss_pss_sha512";
    108              case MBEDTLS_TLS1_3_SIG_RSA_PKCS1_SHA1:
    109                  return "rsa_pkcs1_sha1";
    110              case MBEDTLS_TLS1_3_SIG_ECDSA_SHA1:
    111                  return "ecdsa_sha1";
    112              case MBEDTLS_TLS1_3_SIG_NONE:
    113                  return "none";
    114              };
    115          
    116              return "UNKNOWN";
    117          }
    118          const char *mbedtls_ssl_states_str( mbedtls_ssl_states in )
    119          {
    120              switch (in) {
    121                  case MBEDTLS_SSL_HELLO_REQUEST:
    122                      return "MBEDTLS_SSL_HELLO_REQUEST";
    123                  case MBEDTLS_SSL_CLIENT_HELLO:
    124                      return "MBEDTLS_SSL_CLIENT_HELLO";
    125                  case MBEDTLS_SSL_SERVER_HELLO:
    126                      return "MBEDTLS_SSL_SERVER_HELLO";
    127                  case MBEDTLS_SSL_SERVER_CERTIFICATE:
    128                      return "MBEDTLS_SSL_SERVER_CERTIFICATE";
    129                  case MBEDTLS_SSL_SERVER_KEY_EXCHANGE:
    130                      return "MBEDTLS_SSL_SERVER_KEY_EXCHANGE";
    131                  case MBEDTLS_SSL_CERTIFICATE_REQUEST:
    132                      return "MBEDTLS_SSL_CERTIFICATE_REQUEST";
    133                  case MBEDTLS_SSL_SERVER_HELLO_DONE:
    134                      return "MBEDTLS_SSL_SERVER_HELLO_DONE";
    135                  case MBEDTLS_SSL_CLIENT_CERTIFICATE:
    136                      return "MBEDTLS_SSL_CLIENT_CERTIFICATE";
    137                  case MBEDTLS_SSL_CLIENT_KEY_EXCHANGE:
    138                      return "MBEDTLS_SSL_CLIENT_KEY_EXCHANGE";
    139                  case MBEDTLS_SSL_CERTIFICATE_VERIFY:
    140                      return "MBEDTLS_SSL_CERTIFICATE_VERIFY";
    141                  case MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC:
    142                      return "MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC";
    143                  case MBEDTLS_SSL_CLIENT_FINISHED:
    144                      return "MBEDTLS_SSL_CLIENT_FINISHED";
    145                  case MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC:
    146                      return "MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC";
    147                  case MBEDTLS_SSL_SERVER_FINISHED:
    148                      return "MBEDTLS_SSL_SERVER_FINISHED";
    149                  case MBEDTLS_SSL_FLUSH_BUFFERS:
    150                      return "MBEDTLS_SSL_FLUSH_BUFFERS";
    151                  case MBEDTLS_SSL_HANDSHAKE_WRAPUP:
    152                      return "MBEDTLS_SSL_HANDSHAKE_WRAPUP";
    153                  case MBEDTLS_SSL_NEW_SESSION_TICKET:
    154                      return "MBEDTLS_SSL_NEW_SESSION_TICKET";
    155                  case MBEDTLS_SSL_SERVER_HELLO_VERIFY_REQUEST_SENT:
    156                      return "MBEDTLS_SSL_SERVER_HELLO_VERIFY_REQUEST_SENT";
    157                  case MBEDTLS_SSL_HELLO_RETRY_REQUEST:
    158                      return "MBEDTLS_SSL_HELLO_RETRY_REQUEST";
    159                  case MBEDTLS_SSL_ENCRYPTED_EXTENSIONS:
    160                      return "MBEDTLS_SSL_ENCRYPTED_EXTENSIONS";
    161                  case MBEDTLS_SSL_END_OF_EARLY_DATA:
    162                      return "MBEDTLS_SSL_END_OF_EARLY_DATA";
    163                  case MBEDTLS_SSL_CLIENT_CERTIFICATE_VERIFY:
    164                      return "MBEDTLS_SSL_CLIENT_CERTIFICATE_VERIFY";
    165                  case MBEDTLS_SSL_CLIENT_CCS_AFTER_SERVER_FINISHED:
    166                      return "MBEDTLS_SSL_CLIENT_CCS_AFTER_SERVER_FINISHED";
    167                  case MBEDTLS_SSL_CLIENT_CCS_BEFORE_2ND_CLIENT_HELLO:
    168                      return "MBEDTLS_SSL_CLIENT_CCS_BEFORE_2ND_CLIENT_HELLO";
    169                  case MBEDTLS_SSL_SERVER_CCS_AFTER_SERVER_HELLO:
    170                      return "MBEDTLS_SSL_SERVER_CCS_AFTER_SERVER_HELLO";
    171                  case MBEDTLS_SSL_CLIENT_CCS_AFTER_CLIENT_HELLO:
    172                      return "MBEDTLS_SSL_CLIENT_CCS_AFTER_CLIENT_HELLO";
    173                  case MBEDTLS_SSL_SERVER_CCS_AFTER_HELLO_RETRY_REQUEST:
    174                      return "MBEDTLS_SSL_SERVER_CCS_AFTER_HELLO_RETRY_REQUEST";
    175                  case MBEDTLS_SSL_HANDSHAKE_OVER:
    176                      return "MBEDTLS_SSL_HANDSHAKE_OVER";
    177                  case MBEDTLS_SSL_TLS1_3_NEW_SESSION_TICKET:
    178                      return "MBEDTLS_SSL_TLS1_3_NEW_SESSION_TICKET";
    179                  case MBEDTLS_SSL_TLS1_3_NEW_SESSION_TICKET_FLUSH:
    180                      return "MBEDTLS_SSL_TLS1_3_NEW_SESSION_TICKET_FLUSH";
    181                  default:
    182                      return "UNKNOWN_VALUE";
    183              }
    184          }
    185          
    186          const char *mbedtls_ssl_protocol_version_str( mbedtls_ssl_protocol_version in )
    187          {
    188              switch (in) {
    189                  case MBEDTLS_SSL_VERSION_UNKNOWN:
    190                      return "MBEDTLS_SSL_VERSION_UNKNOWN";
    191                  case MBEDTLS_SSL_VERSION_TLS1_2:
    192                      return "MBEDTLS_SSL_VERSION_TLS1_2";
    193                  case MBEDTLS_SSL_VERSION_TLS1_3:
    194                      return "MBEDTLS_SSL_VERSION_TLS1_3";
    195                  default:
    196                      return "UNKNOWN_VALUE";
    197              }
    198          }
    199          
    200          const char *mbedtls_tls_prf_types_str( mbedtls_tls_prf_types in )
    201          {
    202              switch (in) {
    203                  case MBEDTLS_SSL_TLS_PRF_NONE:
    204                      return "MBEDTLS_SSL_TLS_PRF_NONE";
    205                  case MBEDTLS_SSL_TLS_PRF_SHA384:
    206                      return "MBEDTLS_SSL_TLS_PRF_SHA384";
    207                  case MBEDTLS_SSL_TLS_PRF_SHA256:
    208                      return "MBEDTLS_SSL_TLS_PRF_SHA256";
    209                  case MBEDTLS_SSL_HKDF_EXPAND_SHA384:
    210                      return "MBEDTLS_SSL_HKDF_EXPAND_SHA384";
    211                  case MBEDTLS_SSL_HKDF_EXPAND_SHA256:
    212                      return "MBEDTLS_SSL_HKDF_EXPAND_SHA256";
    213                  default:
    214                      return "UNKNOWN_VALUE";
    215              }
    216          }
    217          
    218          const char *mbedtls_ssl_key_export_type_str( mbedtls_ssl_key_export_type in )
    219          {
    220              switch (in) {
    221                  case MBEDTLS_SSL_KEY_EXPORT_TLS12_MASTER_SECRET:
    222                      return "MBEDTLS_SSL_KEY_EXPORT_TLS12_MASTER_SECRET";
    223          #if defined(MBEDTLS_SSL_PROTO_TLS1_3)
    224                  case MBEDTLS_SSL_KEY_EXPORT_TLS1_3_CLIENT_EARLY_SECRET:
    225                      return "MBEDTLS_SSL_KEY_EXPORT_TLS1_3_CLIENT_EARLY_SECRET";
    226                  case MBEDTLS_SSL_KEY_EXPORT_TLS1_3_EARLY_EXPORTER_SECRET:
    227                      return "MBEDTLS_SSL_KEY_EXPORT_TLS1_3_EARLY_EXPORTER_SECRET";
    228                  case MBEDTLS_SSL_KEY_EXPORT_TLS1_3_CLIENT_HANDSHAKE_TRAFFIC_SECRET:
    229                      return "MBEDTLS_SSL_KEY_EXPORT_TLS1_3_CLIENT_HANDSHAKE_TRAFFIC_SECRET";
    230                  case MBEDTLS_SSL_KEY_EXPORT_TLS1_3_SERVER_HANDSHAKE_TRAFFIC_SECRET:
    231                      return "MBEDTLS_SSL_KEY_EXPORT_TLS1_3_SERVER_HANDSHAKE_TRAFFIC_SECRET";
    232                  case MBEDTLS_SSL_KEY_EXPORT_TLS1_3_CLIENT_APPLICATION_TRAFFIC_SECRET:
    233                      return "MBEDTLS_SSL_KEY_EXPORT_TLS1_3_CLIENT_APPLICATION_TRAFFIC_SECRET";
    234                  case MBEDTLS_SSL_KEY_EXPORT_TLS1_3_SERVER_APPLICATION_TRAFFIC_SECRET:
    235                      return "MBEDTLS_SSL_KEY_EXPORT_TLS1_3_SERVER_APPLICATION_TRAFFIC_SECRET";
    236          #endif
    237                  default:
    238                      return "UNKNOWN_VALUE";
    239              }
    240          }
    241          
    242          
    243          
    244          #endif /* MBEDTLS_DEBUG_C */
    245          /* End of automatically generated file. */
    246          


 
 
 0 bytes of memory

Errors: none
Warnings: none
