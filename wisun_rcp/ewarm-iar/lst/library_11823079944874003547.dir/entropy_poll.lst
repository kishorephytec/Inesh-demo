###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         27/Nov/2024  12:17:30
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\entropy_poll.c
#    Command line                 =
#        -f
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir\entropy_poll.o.rsp
#        (C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\entropy_poll.c
#        -D EFR32FG28B322F1024IM48=1 -D
#        configNUM_SDK_THREAD_LOCAL_STORAGE_POINTERS=2 -D
#        SL_COMPONENT_CATALOG_PRESENT=1 -D
#        MBEDTLS_CONFIG_FILE=<sl_mbedtls_config.h> -D
#        MBEDTLS_PSA_CRYPTO_CONFIG_FILE=<psa_crypto_config.h> -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -D
#        RTT_USE_ASM=0 -D MBED_CONF_MBED_TRACE_ENABLE=1 -D
#        MBED_CONF_NANOSTACK_CONFIGURATION=ws_router -D
#        MBED_TRACE_MAX_LEVEL=TRACE_ACTIVE_LEVEL_ALL -D DEBUG_EFM_USER=1 -D
#        HAVE_LFN=1 -D HAVE_LFN_PARENT=1 -lC
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\lst\library_11823079944874003547.dir
#        --diag_suppress Pa050 -o
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir
#        --debug --endian=little --cpu=Cortex-M33 --cmse --cmse -e
#        --fpu=VFPv5_sp --dlib_config "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\
#        -I C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\autogen\ -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\config\ -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\config\rail\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\Device\SiliconLabs\EFR32FG28\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\common\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\CMSIS\Core\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\CMSIS\RTOS2\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\device_init\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\dmadrv\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\common\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emlib\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\cmsis\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\kernel\include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\kernel\portable\IAR\ARM_CM33_NTZ\non_secure\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\iostream\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\config\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\config\preset\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\nvm3\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\peripheral\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_psa_driver\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\common\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\wmbus\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\sidewalk\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\efr32xg28\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\rail_util_pti\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\src\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\segger\systemview\SEGGER\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\silicon_labs\silabs_core\memory_manager\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\common\toolchain\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\system\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\ns_list\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\nanostack\nanostack-libservice\mbed-client-libservice\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\sleeptimer\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\app\wisun_rcp\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\inc\socket\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\src\
#        -Ohz --use_c++_inline) --dependencies=n
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir\entropy_poll.o.iar_deps
#    Locale                       =  C
#    List file                    =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\lst\library_11823079944874003547.dir\entropy_poll.lst
#    Object file                  =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir\entropy_poll.o
#    Runtime model:                  
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_file_descriptor     =  0
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#
###############################################################################

C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\entropy_poll.c
      1          /*
      2           *  Platform-specific and custom entropy polling functions
      3           *
      4           *  Copyright The Mbed TLS Contributors
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           */
     19          
     20          #if defined(__linux__) && !defined(_GNU_SOURCE)
     21          /* Ensure that syscall() is available even when compiling with -std=c99 */
     22          #define _GNU_SOURCE
     23          #endif
     24          
     25          #include "common.h"
     26          
     27          #include <string.h>
     28          
     29          #if defined(MBEDTLS_ENTROPY_C)
     30          
     31          #include "mbedtls/entropy.h"
     32          #include "entropy_poll.h"
     33          #include "mbedtls/error.h"
     34          
     35          #if defined(MBEDTLS_TIMING_C)
     36          #include "mbedtls/timing.h"
     37          #endif
     38          #include "mbedtls/platform.h"
     39          
     40          #if !defined(MBEDTLS_NO_PLATFORM_ENTROPY)
     41          
     42          #if !defined(unix) && !defined(__unix__) && !defined(__unix) && \
     43              !defined(__APPLE__) && !defined(_WIN32) && !defined(__QNXNTO__) && \
     44              !defined(__HAIKU__) && !defined(__midipix__)
     45          #error \
     46              "Platform entropy sources only work on Unix and Windows, see MBEDTLS_NO_PLATFORM_ENTROPY in mbedtls_config.h"
     47          #endif
     48          
     49          #if defined(_WIN32) && !defined(EFIX64) && !defined(EFI32)
     50          
     51          #include <windows.h>
     52          #include <bcrypt.h>
     53          #include <intsafe.h>
     54          
     55          int mbedtls_platform_entropy_poll(void *data, unsigned char *output, size_t len,
     56                                            size_t *olen)
     57          {
     58              ((void) data);
     59              *olen = 0;
     60          
     61              /*
     62               * BCryptGenRandom takes ULONG for size, which is smaller than size_t on
     63               * 64-bit Windows platforms. Extract entropy in chunks of len (dependent
     64               * on ULONG_MAX) size.
     65               */
     66              while (len != 0) {
     67                  unsigned long ulong_bytes =
     68                      (len > ULONG_MAX) ? ULONG_MAX : (unsigned long) len;
     69          
     70                  if (!BCRYPT_SUCCESS(BCryptGenRandom(NULL, output, ulong_bytes,
     71                                                      BCRYPT_USE_SYSTEM_PREFERRED_RNG))) {
     72                      return MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
     73                  }
     74          
     75                  *olen += ulong_bytes;
     76                  len -= ulong_bytes;
     77              }
     78          
     79              return 0;
     80          }
     81          #else /* _WIN32 && !EFIX64 && !EFI32 */
     82          
     83          /*
     84           * Test for Linux getrandom() support.
     85           * Since there is no wrapper in the libc yet, use the generic syscall wrapper
     86           * available in GNU libc and compatible libc's (eg uClibc).
     87           */
     88          #if ((defined(__linux__) && defined(__GLIBC__)) || defined(__midipix__))
     89          #include <unistd.h>
     90          #include <sys/syscall.h>
     91          #if defined(SYS_getrandom)
     92          #define HAVE_GETRANDOM
     93          #include <errno.h>
     94          
     95          static int getrandom_wrapper(void *buf, size_t buflen, unsigned int flags)
     96          {
     97              /* MemSan cannot understand that the syscall writes to the buffer */
     98          #if defined(__has_feature)
     99          #if __has_feature(memory_sanitizer)
    100              memset(buf, 0, buflen);
    101          #endif
    102          #endif
    103              return syscall(SYS_getrandom, buf, buflen, flags);
    104          }
    105          #endif /* SYS_getrandom */
    106          #endif /* __linux__ || __midipix__ */
    107          
    108          #if defined(__FreeBSD__) || defined(__DragonFly__)
    109          #include <sys/param.h>
    110          #if (defined(__FreeBSD__) && __FreeBSD_version >= 1200000) || \
    111              (defined(__DragonFly__) && __DragonFly_version >= 500700)
    112          #include <errno.h>
    113          #include <sys/random.h>
    114          #define HAVE_GETRANDOM
    115          static int getrandom_wrapper(void *buf, size_t buflen, unsigned int flags)
    116          {
    117              return getrandom(buf, buflen, flags);
    118          }
    119          #endif /* (__FreeBSD__ && __FreeBSD_version >= 1200000) ||
    120                    (__DragonFly__ && __DragonFly_version >= 500700) */
    121          #endif /* __FreeBSD__ || __DragonFly__ */
    122          
    123          /*
    124           * Some BSD systems provide KERN_ARND.
    125           * This is equivalent to reading from /dev/urandom, only it doesn't require an
    126           * open file descriptor, and provides up to 256 bytes per call (basically the
    127           * same as getentropy(), but with a longer history).
    128           *
    129           * Documentation: https://netbsd.gw.com/cgi-bin/man-cgi?sysctl+7
    130           */
    131          #if (defined(__FreeBSD__) || defined(__NetBSD__)) && !defined(HAVE_GETRANDOM)
    132          #include <sys/param.h>
    133          #include <sys/sysctl.h>
    134          #if defined(KERN_ARND)
    135          #define HAVE_SYSCTL_ARND
    136          
    137          static int sysctl_arnd_wrapper(unsigned char *buf, size_t buflen)
    138          {
    139              int name[2];
    140              size_t len;
    141          
    142              name[0] = CTL_KERN;
    143              name[1] = KERN_ARND;
    144          
    145              while (buflen > 0) {
    146                  len = buflen > 256 ? 256 : buflen;
    147                  if (sysctl(name, 2, buf, &len, NULL, 0) == -1) {
    148                      return -1;
    149                  }
    150                  buflen -= len;
    151                  buf += len;
    152              }
    153              return 0;
    154          }
    155          #endif /* KERN_ARND */
    156          #endif /* __FreeBSD__ || __NetBSD__ */
    157          
    158          #include <stdio.h>
    159          
    160          int mbedtls_platform_entropy_poll(void *data,
    161                                            unsigned char *output, size_t len, size_t *olen)
    162          {
    163              FILE *file;
    164              size_t read_len;
    165              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    166              ((void) data);
    167          
    168          #if defined(HAVE_GETRANDOM)
    169              ret = getrandom_wrapper(output, len, 0);
    170              if (ret >= 0) {
    171                  *olen = ret;
    172                  return 0;
    173              } else if (errno != ENOSYS) {
    174                  return MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
    175              }
    176              /* Fall through if the system call isn't known. */
    177          #else
    178              ((void) ret);
    179          #endif /* HAVE_GETRANDOM */
    180          
    181          #if defined(HAVE_SYSCTL_ARND)
    182              ((void) file);
    183              ((void) read_len);
    184              if (sysctl_arnd_wrapper(output, len) == -1) {
    185                  return MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
    186              }
    187              *olen = len;
    188              return 0;
    189          #else
    190          
    191              *olen = 0;
    192          
    193              file = fopen("/dev/urandom", "rb");
    194              if (file == NULL) {
    195                  return MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
    196              }
    197          
    198              /* Ensure no stdio buffering of secrets, as such buffers cannot be wiped. */
    199              mbedtls_setbuf(file, NULL);
    200          
    201              read_len = fread(output, 1, len, file);
    202              if (read_len != len) {
    203                  fclose(file);
    204                  return MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
    205              }
    206          
    207              fclose(file);
    208              *olen = len;
    209          
    210              return 0;
    211          #endif /* HAVE_SYSCTL_ARND */
    212          }
    213          #endif /* _WIN32 && !EFIX64 && !EFI32 */
    214          #endif /* !MBEDTLS_NO_PLATFORM_ENTROPY */
    215          
    216          #if defined(MBEDTLS_ENTROPY_NV_SEED)
    217          int mbedtls_nv_seed_poll(void *data,
    218                                   unsigned char *output, size_t len, size_t *olen)
    219          {
    220              unsigned char buf[MBEDTLS_ENTROPY_BLOCK_SIZE];
    221              size_t use_len = MBEDTLS_ENTROPY_BLOCK_SIZE;
    222              ((void) data);
    223          
    224              memset(buf, 0, MBEDTLS_ENTROPY_BLOCK_SIZE);
    225          
    226              if (mbedtls_nv_seed_read(buf, MBEDTLS_ENTROPY_BLOCK_SIZE) < 0) {
    227                  return MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
    228              }
    229          
    230              if (len < use_len) {
    231                  use_len = len;
    232              }
    233          
    234              memcpy(output, buf, use_len);
    235              *olen = use_len;
    236          
    237              return 0;
    238          }
    239          #endif /* MBEDTLS_ENTROPY_NV_SEED */
    240          
    241          #endif /* MBEDTLS_ENTROPY_C */


 
 
 0 bytes of memory

Errors: none
Warnings: none
