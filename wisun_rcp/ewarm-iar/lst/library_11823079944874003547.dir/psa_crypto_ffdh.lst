###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         27/Nov/2024  12:17:39
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\psa_crypto_ffdh.c
#    Command line                 =
#        -f
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir\psa_crypto_ffdh.o.rsp
#        (C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\psa_crypto_ffdh.c
#        -D EFR32FG28B322F1024IM48=1 -D
#        configNUM_SDK_THREAD_LOCAL_STORAGE_POINTERS=2 -D
#        SL_COMPONENT_CATALOG_PRESENT=1 -D
#        MBEDTLS_CONFIG_FILE=<sl_mbedtls_config.h> -D
#        MBEDTLS_PSA_CRYPTO_CONFIG_FILE=<psa_crypto_config.h> -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -D
#        RTT_USE_ASM=0 -D MBED_CONF_MBED_TRACE_ENABLE=1 -D
#        MBED_CONF_NANOSTACK_CONFIGURATION=ws_router -D
#        MBED_TRACE_MAX_LEVEL=TRACE_ACTIVE_LEVEL_ALL -D DEBUG_EFM_USER=1 -D
#        HAVE_LFN=1 -D HAVE_LFN_PARENT=1 -lC
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\lst\library_11823079944874003547.dir
#        --diag_suppress Pa050 -o
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir
#        --debug --endian=little --cpu=Cortex-M33 --cmse --cmse -e
#        --fpu=VFPv5_sp --dlib_config "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\
#        -I C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\autogen\ -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\config\ -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\config\rail\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\Device\SiliconLabs\EFR32FG28\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\common\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\CMSIS\Core\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\CMSIS\RTOS2\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\device_init\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\dmadrv\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\common\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emlib\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\cmsis\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\kernel\include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\kernel\portable\IAR\ARM_CM33_NTZ\non_secure\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\iostream\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\config\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\config\preset\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\nvm3\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\peripheral\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_psa_driver\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\common\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\wmbus\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\sidewalk\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\efr32xg28\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\rail_util_pti\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\src\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\segger\systemview\SEGGER\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\silicon_labs\silabs_core\memory_manager\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\common\toolchain\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\system\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\ns_list\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\nanostack\nanostack-libservice\mbed-client-libservice\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\sleeptimer\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\app\wisun_rcp\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\inc\socket\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\src\
#        -Ohz --use_c++_inline) --dependencies=n
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir\psa_crypto_ffdh.o.iar_deps
#    Locale                       =  C
#    List file                    =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\lst\library_11823079944874003547.dir\psa_crypto_ffdh.lst
#    Object file                  =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir\psa_crypto_ffdh.o
#    Runtime model:                  
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_file_descriptor     =  0
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#
###############################################################################

C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\psa_crypto_ffdh.c
      1          /*
      2           *  PSA FFDH layer on top of Mbed TLS crypto
      3           */
      4          /*
      5           *  Copyright The Mbed TLS Contributors
      6           *  SPDX-License-Identifier: Apache-2.0
      7           *
      8           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      9           *  not use this file except in compliance with the License.
     10           *  You may obtain a copy of the License at
     11           *
     12           *  http://www.apache.org/licenses/LICENSE-2.0
     13           *
     14           *  Unless required by applicable law or agreed to in writing, software
     15           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     16           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     17           *  See the License for the specific language governing permissions and
     18           *  limitations under the License.
     19           */
     20          
     21          #include "common.h"
     22          
     23          #if defined(MBEDTLS_PSA_CRYPTO_C)
     24          
     25          #include <psa/crypto.h>
     26          #include "psa_crypto_core.h"
     27          #include "psa_crypto_ffdh.h"
     28          #include "psa_crypto_random_impl.h"
     29          #include "mbedtls/platform.h"
     30          #include "mbedtls/error.h"
     31          
     32          #if defined(MBEDTLS_PSA_BUILTIN_KEY_TYPE_DH_KEY_PAIR_EXPORT) ||   \
     33              defined(MBEDTLS_PSA_BUILTIN_KEY_TYPE_DH_KEY_PAIR_GENERATE) ||   \
     34              defined(MBEDTLS_PSA_BUILTIN_KEY_TYPE_DH_PUBLIC_KEY) || \
     35              defined(MBEDTLS_PSA_BUILTIN_ALG_FFDH)
     36          static psa_status_t mbedtls_psa_ffdh_set_prime_generator(size_t key_size,
     37                                                                   mbedtls_mpi *P,
     38                                                                   mbedtls_mpi *G)
     39          {
     40              const unsigned char *dhm_P = NULL;
     41              const unsigned char *dhm_G = NULL;
     42              size_t dhm_size_P = 0;
     43              size_t dhm_size_G = 0;
     44              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
     45          
     46              if (P == NULL && G == NULL) {
     47                  return PSA_ERROR_INVALID_ARGUMENT;
     48              }
     49          
     50              static const unsigned char dhm_P_2048[] =
     51                  MBEDTLS_DHM_RFC7919_FFDHE2048_P_BIN;
     52              static const unsigned char dhm_P_3072[] =
     53                  MBEDTLS_DHM_RFC7919_FFDHE3072_P_BIN;
     54              static const unsigned char dhm_P_4096[] =
     55                  MBEDTLS_DHM_RFC7919_FFDHE4096_P_BIN;
     56              static const unsigned char dhm_P_6144[] =
     57                  MBEDTLS_DHM_RFC7919_FFDHE6144_P_BIN;
     58              static const unsigned char dhm_P_8192[] =
     59                  MBEDTLS_DHM_RFC7919_FFDHE8192_P_BIN;
     60              static const unsigned char dhm_G_2048[] =
     61                  MBEDTLS_DHM_RFC7919_FFDHE2048_G_BIN;
     62              static const unsigned char dhm_G_3072[] =
     63                  MBEDTLS_DHM_RFC7919_FFDHE3072_G_BIN;
     64              static const unsigned char dhm_G_4096[] =
     65                  MBEDTLS_DHM_RFC7919_FFDHE4096_G_BIN;
     66              static const unsigned char dhm_G_6144[] =
     67                  MBEDTLS_DHM_RFC7919_FFDHE6144_G_BIN;
     68              static const unsigned char dhm_G_8192[] =
     69                  MBEDTLS_DHM_RFC7919_FFDHE8192_G_BIN;
     70          
     71              switch (key_size) {
     72                  case sizeof(dhm_P_2048):
     73                      dhm_P = dhm_P_2048;
     74                      dhm_G = dhm_G_2048;
     75                      dhm_size_P = sizeof(dhm_P_2048);
     76                      dhm_size_G = sizeof(dhm_G_2048);
     77                      break;
     78                  case sizeof(dhm_P_3072):
     79                      dhm_P = dhm_P_3072;
     80                      dhm_G = dhm_G_3072;
     81                      dhm_size_P = sizeof(dhm_P_3072);
     82                      dhm_size_G = sizeof(dhm_G_3072);
     83                      break;
     84                  case sizeof(dhm_P_4096):
     85                      dhm_P = dhm_P_4096;
     86                      dhm_G = dhm_G_4096;
     87                      dhm_size_P = sizeof(dhm_P_4096);
     88                      dhm_size_G = sizeof(dhm_G_4096);
     89                      break;
     90                  case sizeof(dhm_P_6144):
     91                      dhm_P = dhm_P_6144;
     92                      dhm_G = dhm_G_6144;
     93                      dhm_size_P = sizeof(dhm_P_6144);
     94                      dhm_size_G = sizeof(dhm_G_6144);
     95                      break;
     96                  case sizeof(dhm_P_8192):
     97                      dhm_P = dhm_P_8192;
     98                      dhm_G = dhm_G_8192;
     99                      dhm_size_P = sizeof(dhm_P_8192);
    100                      dhm_size_G = sizeof(dhm_G_8192);
    101                      break;
    102                  default:
    103                      return PSA_ERROR_INVALID_ARGUMENT;
    104              }
    105          
    106              if (P != NULL) {
    107                  MBEDTLS_MPI_CHK(mbedtls_mpi_read_binary(P, dhm_P,
    108                                                          dhm_size_P));
    109              }
    110              if (G != NULL) {
    111                  MBEDTLS_MPI_CHK(mbedtls_mpi_read_binary(G, dhm_G,
    112                                                          dhm_size_G));
    113              }
    114          
    115          cleanup:
    116              if (ret != 0) {
    117                  return mbedtls_to_psa_error(ret);
    118              }
    119          
    120              return PSA_SUCCESS;
    121          }
    122          #endif /* MBEDTLS_PSA_BUILTIN_KEY_TYPE_DH_KEY_PAIR_EXPORT ||
    123                    MBEDTLS_PSA_BUILTIN_KEY_TYPE_DH_KEY_PAIR_GENERATE ||
    124                    MBEDTLS_PSA_BUILTIN_KEY_TYPE_DH_PUBLIC_KEY ||
    125                    MBEDTLS_PSA_BUILTIN_ALG_FFDH */
    126          
    127          #if defined(MBEDTLS_PSA_BUILTIN_KEY_TYPE_DH_KEY_PAIR_EXPORT) || \
    128              defined(MBEDTLS_PSA_BUILTIN_KEY_TYPE_DH_PUBLIC_KEY)
    129          psa_status_t mbedtls_psa_ffdh_export_public_key(
    130              const psa_key_attributes_t *attributes,
    131              const uint8_t *key_buffer,
    132              size_t key_buffer_size,
    133              uint8_t *data,
    134              size_t data_size,
    135              size_t *data_length)
    136          {
    137              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    138              psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;
    139              mbedtls_mpi GX, G, X, P;
    140              psa_key_type_t type = attributes->core.type;
    141          
    142              if (PSA_KEY_TYPE_IS_PUBLIC_KEY(type)) {
    143                  if (key_buffer_size > data_size) {
    144                      return PSA_ERROR_BUFFER_TOO_SMALL;
    145                  }
    146                  memcpy(data, key_buffer, key_buffer_size);
    147                  memset(data + key_buffer_size, 0,
    148                         data_size - key_buffer_size);
    149                  *data_length = key_buffer_size;
    150                  return PSA_SUCCESS;
    151              }
    152          
    153              mbedtls_mpi_init(&GX); mbedtls_mpi_init(&G);
    154              mbedtls_mpi_init(&X); mbedtls_mpi_init(&P);
    155          
    156              size_t key_len = PSA_BITS_TO_BYTES(attributes->core.bits);
    157          
    158              status = mbedtls_psa_ffdh_set_prime_generator(key_len, &P, &G);
    159          
    160              if (status != PSA_SUCCESS) {
    161                  goto cleanup;
    162              }
    163          
    164              MBEDTLS_MPI_CHK(mbedtls_mpi_read_binary(&X, key_buffer,
    165                                                      key_buffer_size));
    166          
    167              MBEDTLS_MPI_CHK(mbedtls_mpi_exp_mod(&GX, &G, &X, &P, NULL));
    168              MBEDTLS_MPI_CHK(mbedtls_mpi_write_binary(&GX, data, key_len));
    169          
    170              *data_length = key_len;
    171          
    172              ret = 0;
    173          cleanup:
    174              mbedtls_mpi_free(&P); mbedtls_mpi_free(&G);
    175              mbedtls_mpi_free(&X); mbedtls_mpi_free(&GX);
    176          
    177              if (status == PSA_SUCCESS && ret != 0) {
    178                  status = mbedtls_to_psa_error(ret);
    179              }
    180          
    181              return status;
    182          }
    183          #endif /* MBEDTLS_PSA_BUILTIN_KEY_TYPE_DH_KEY_PAIR_EXPORT ||
    184                    MBEDTLS_PSA_BUILTIN_KEY_TYPE_DH_PUBLIC_KEY */
    185          
    186          #if defined(MBEDTLS_PSA_BUILTIN_KEY_TYPE_DH_KEY_PAIR_GENERATE)
    187          psa_status_t mbedtls_psa_ffdh_generate_key(
    188              const psa_key_attributes_t *attributes,
    189              uint8_t *key_buffer, size_t key_buffer_size, size_t *key_buffer_length)
    190          {
    191              mbedtls_mpi X, P;
    192              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    193              psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;
    194              mbedtls_mpi_init(&P); mbedtls_mpi_init(&X);
    195              (void) attributes;
    196          
    197              status = mbedtls_psa_ffdh_set_prime_generator(key_buffer_size, &P, NULL);
    198          
    199              if (status != PSA_SUCCESS) {
    200                  goto cleanup;
    201              }
    202          
    203              /* RFC7919: Traditional finite field Diffie-Hellman has each peer choose their
    204                  secret exponent from the range [2, P-2].
    205                  Select random value in range [3, P-1] and decrease it by 1. */
    206              MBEDTLS_MPI_CHK(mbedtls_mpi_random(&X, 3, &P, mbedtls_psa_get_random,
    207                                                 MBEDTLS_PSA_RANDOM_STATE));
    208              MBEDTLS_MPI_CHK(mbedtls_mpi_sub_int(&X, &X, 1));
    209              MBEDTLS_MPI_CHK(mbedtls_mpi_write_binary(&X, key_buffer, key_buffer_size));
    210              *key_buffer_length = key_buffer_size;
    211          
    212          cleanup:
    213              mbedtls_mpi_free(&P); mbedtls_mpi_free(&X);
    214              if (status == PSA_SUCCESS && ret != 0) {
    215                  return mbedtls_to_psa_error(ret);
    216              }
    217          
    218              return status;
    219          }
    220          #endif /* MBEDTLS_PSA_BUILTIN_KEY_TYPE_DH_KEY_PAIR_GENERATE */
    221          
    222          #if defined(MBEDTLS_PSA_BUILTIN_KEY_TYPE_DH_KEY_PAIR_IMPORT)
    223          psa_status_t mbedtls_psa_ffdh_import_key(
    224              const psa_key_attributes_t *attributes,
    225              const uint8_t *data, size_t data_length,
    226              uint8_t *key_buffer, size_t key_buffer_size,
    227              size_t *key_buffer_length, size_t *bits)
    228          {
    229              (void) attributes;
    230          
    231              if (key_buffer_size < data_length) {
    232                  return PSA_ERROR_BUFFER_TOO_SMALL;
    233              }
    234              memcpy(key_buffer, data, data_length);
    235              *key_buffer_length = data_length;
    236              *bits = PSA_BYTES_TO_BITS(data_length);
    237          
    238              return PSA_SUCCESS;
    239          }
    240          #endif /* MBEDTLS_PSA_BUILTIN_KEY_TYPE_DH_KEY_PAIR_IMPORT */
    241          
    242          #if defined(MBEDTLS_PSA_BUILTIN_ALG_FFDH)
    243          psa_status_t mbedtls_psa_ffdh_key_agreement(
    244              const psa_key_attributes_t *attributes,
    245              const uint8_t *peer_key,
    246              size_t peer_key_length,
    247              const uint8_t *key_buffer,
    248              size_t key_buffer_size,
    249              uint8_t *shared_secret,
    250              size_t shared_secret_size,
    251              size_t *shared_secret_length)
    252          {
    253              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    254              psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;
    255              mbedtls_mpi P, G, X, GY, K;
    256              const size_t calculated_shared_secret_size = peer_key_length;
    257          
    258              if (peer_key_length != key_buffer_size ||
    259                  calculated_shared_secret_size > shared_secret_size) {
    260                  return PSA_ERROR_INVALID_ARGUMENT;
    261              }
    262          
    263              if (!PSA_KEY_TYPE_IS_DH_KEY_PAIR(psa_get_key_type(attributes))) {
    264                  return PSA_ERROR_INVALID_ARGUMENT;
    265              }
    266          
    267              mbedtls_mpi_init(&P); mbedtls_mpi_init(&G);
    268              mbedtls_mpi_init(&X); mbedtls_mpi_init(&GY);
    269              mbedtls_mpi_init(&K);
    270          
    271              status = mbedtls_psa_ffdh_set_prime_generator(
    272                  PSA_BITS_TO_BYTES(attributes->core.bits), &P, &G);
    273          
    274              if (status != PSA_SUCCESS) {
    275                  goto cleanup;
    276              }
    277          
    278              MBEDTLS_MPI_CHK(mbedtls_mpi_read_binary(&X, key_buffer,
    279                                                      key_buffer_size));
    280          
    281              MBEDTLS_MPI_CHK(mbedtls_mpi_read_binary(&GY, peer_key,
    282                                                      peer_key_length));
    283          
    284              /* Calculate shared secret public key: K = G^(XY) mod P = GY^X mod P */
    285              MBEDTLS_MPI_CHK(mbedtls_mpi_exp_mod(&K, &GY, &X, &P, NULL));
    286          
    287              MBEDTLS_MPI_CHK(mbedtls_mpi_write_binary(&K, shared_secret,
    288                                                       calculated_shared_secret_size));
    289          
    290              *shared_secret_length = calculated_shared_secret_size;
    291          
    292              ret = 0;
    293          
    294          cleanup:
    295              mbedtls_mpi_free(&P); mbedtls_mpi_free(&G);
    296              mbedtls_mpi_free(&X); mbedtls_mpi_free(&GY);
    297              mbedtls_mpi_free(&K);
    298          
    299              if (status == PSA_SUCCESS && ret != 0) {
    300                  status = mbedtls_to_psa_error(ret);
    301              }
    302          
    303              return status;
    304          }
    305          #endif /* MBEDTLS_PSA_BUILTIN_ALG_FFDH */
    306          
    307          #endif /* MBEDTLS_PSA_CRYPTO_C */


 
 
 0 bytes of memory

Errors: none
Warnings: none
