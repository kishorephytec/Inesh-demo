###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         27/Nov/2024  12:17:36
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\psa_crypto_ecp.c
#    Command line                 =
#        -f
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir\psa_crypto_ecp.o.rsp
#        (C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\psa_crypto_ecp.c
#        -D EFR32FG28B322F1024IM48=1 -D
#        configNUM_SDK_THREAD_LOCAL_STORAGE_POINTERS=2 -D
#        SL_COMPONENT_CATALOG_PRESENT=1 -D
#        MBEDTLS_CONFIG_FILE=<sl_mbedtls_config.h> -D
#        MBEDTLS_PSA_CRYPTO_CONFIG_FILE=<psa_crypto_config.h> -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -D
#        RTT_USE_ASM=0 -D MBED_CONF_MBED_TRACE_ENABLE=1 -D
#        MBED_CONF_NANOSTACK_CONFIGURATION=ws_router -D
#        MBED_TRACE_MAX_LEVEL=TRACE_ACTIVE_LEVEL_ALL -D DEBUG_EFM_USER=1 -D
#        HAVE_LFN=1 -D HAVE_LFN_PARENT=1 -lC
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\lst\library_11823079944874003547.dir
#        --diag_suppress Pa050 -o
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir
#        --debug --endian=little --cpu=Cortex-M33 --cmse --cmse -e
#        --fpu=VFPv5_sp --dlib_config "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\
#        -I C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\autogen\ -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\config\ -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\config\rail\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\Device\SiliconLabs\EFR32FG28\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\common\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\CMSIS\Core\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\CMSIS\RTOS2\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\device_init\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\dmadrv\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\common\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emlib\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\cmsis\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\kernel\include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\kernel\portable\IAR\ARM_CM33_NTZ\non_secure\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\iostream\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\config\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\config\preset\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\nvm3\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\peripheral\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_psa_driver\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\common\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\wmbus\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\sidewalk\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\efr32xg28\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\rail_util_pti\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\src\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\segger\systemview\SEGGER\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\silicon_labs\silabs_core\memory_manager\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\common\toolchain\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\system\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\ns_list\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\nanostack\nanostack-libservice\mbed-client-libservice\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\sleeptimer\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\app\wisun_rcp\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\inc\socket\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\src\
#        -Ohz --use_c++_inline) --dependencies=n
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir\psa_crypto_ecp.o.iar_deps
#    Locale                       =  C
#    List file                    =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\lst\library_11823079944874003547.dir\psa_crypto_ecp.lst
#    Object file                  =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir\psa_crypto_ecp.o
#    Runtime model:                  
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_file_descriptor     =  0
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#
###############################################################################

C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\psa_crypto_ecp.c
      1          /*
      2           *  PSA ECP layer on top of Mbed TLS crypto
      3           */
      4          /*
      5           *  Copyright The Mbed TLS Contributors
      6           *  SPDX-License-Identifier: Apache-2.0
      7           *
      8           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      9           *  not use this file except in compliance with the License.
     10           *  You may obtain a copy of the License at
     11           *
     12           *  http://www.apache.org/licenses/LICENSE-2.0
     13           *
     14           *  Unless required by applicable law or agreed to in writing, software
     15           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     16           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     17           *  See the License for the specific language governing permissions and
     18           *  limitations under the License.
     19           */
     20          
     21          #include "common.h"
     22          
     23          #if defined(MBEDTLS_PSA_CRYPTO_C)
     24          
     25          #include <psa/crypto.h>
     26          #include "psa_crypto_core.h"
     27          #include "psa_crypto_ecp.h"
     28          #include "psa_crypto_random_impl.h"
     29          #include "md_psa.h"
     30          
     31          #include <stdlib.h>
     32          #include <string.h>
     33          #include "mbedtls/platform.h"
     34          
     35          #include <mbedtls/ecdsa.h>
     36          #include <mbedtls/ecdh.h>
     37          #include <mbedtls/ecp.h>
     38          #include <mbedtls/error.h>
     39          
     40          #if defined(MBEDTLS_PSA_BUILTIN_KEY_TYPE_ECC_KEY_PAIR_BASIC) || \
     41              defined(MBEDTLS_PSA_BUILTIN_KEY_TYPE_ECC_KEY_PAIR_IMPORT) || \
     42              defined(MBEDTLS_PSA_BUILTIN_KEY_TYPE_ECC_KEY_PAIR_EXPORT) || \
     43              defined(MBEDTLS_PSA_BUILTIN_KEY_TYPE_ECC_PUBLIC_KEY) || \
     44              defined(MBEDTLS_PSA_BUILTIN_ALG_ECDSA) || \
     45              defined(MBEDTLS_PSA_BUILTIN_ALG_DETERMINISTIC_ECDSA) || \
     46              defined(MBEDTLS_PSA_BUILTIN_ALG_ECDH)

   \                                 In section .text, align 2, keep-with-next
     47          psa_status_t mbedtls_psa_ecp_load_representation(
     48              psa_key_type_t type, size_t curve_bits,
     49              const uint8_t *data, size_t data_length,
     50              mbedtls_ecp_keypair **p_ecp)
     51          {
   \                     mbedtls_psa_ecp_load_representation: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0x4606             MOV      R6,R0
   \        0x6   0x4689             MOV      R9,R1
   \        0x8   0x461F             MOV      R7,R3
   \        0xA   0x4690             MOV      R8,R2
     52              mbedtls_ecp_group_id grp_id = MBEDTLS_ECP_DP_NONE;
     53              psa_status_t status;
     54              mbedtls_ecp_keypair *ecp = NULL;
     55              size_t curve_bytes = data_length;
   \        0xC   0x4638             MOV      R0,R7
     56              int explicit_bits = (curve_bits != 0);
   \        0xE   0xEA5F 0x0409      MOVS     R4,R9
   \       0x12   0xBF18             IT       NE
   \       0x14   0x2401             MOVNE    R4,#+1
     57          
     58              if (PSA_KEY_TYPE_IS_PUBLIC_KEY(type) &&
     59                  PSA_KEY_TYPE_ECC_GET_FAMILY(type) != PSA_ECC_FAMILY_MONTGOMERY) {
   \       0x16   0x46B3             MOV      R11,R6
   \       0x18   0xF40B 0x41E0      AND      R1,R11,#0x7000
   \       0x1C   0x.... 0x....      LDR.W    R10,??DataTable6
   \       0x20   0xF5B1 0x4F80      CMP      R1,#+16384
   \       0x24   0xD10A             BNE.N    ??mbedtls_psa_ecp_load_representation_0
   \       0x26   0xEA0A 0x010B      AND      R1,R10,R11
   \       0x2A   0xF5B1 0x4F82      CMP      R1,#+16640
   \       0x2E   0xBF04             ITT      EQ
   \       0x30   0xB2F1             UXTBEQ   R1,R6
   \       0x32   0x2941             CMPEQ    R1,#+65
   \       0x34   0xD002             BEQ.N    ??mbedtls_psa_ecp_load_representation_0
     60                  /* A Weierstrass public key is represented as:
     61                   * - The byte 0x04;
     62                   * - `x_P` as a `ceiling(m/8)`-byte string, big-endian;
     63                   * - `y_P` as a `ceiling(m/8)`-byte string, big-endian.
     64                   * So its data length is 2m+1 where m is the curve size in bits.
     65                   */
     66                  if ((data_length & 1) == 0) {
   \       0x36   0x07F8             LSLS     R0,R7,#+31
   \       0x38   0xD506             BPL.N    ??mbedtls_psa_ecp_load_representation_1
     67                      return PSA_ERROR_INVALID_ARGUMENT;
     68                  }
     69                  curve_bytes = data_length / 2;
   \       0x3A   0x0878             LSRS     R0,R7,#+1
     70          
     71                  /* Montgomery public keys are represented in compressed format, meaning
     72                   * their curve_bytes is equal to the amount of input. */
     73          
     74                  /* Private keys are represented in uncompressed private random integer
     75                   * format, meaning their curve_bytes is equal to the amount of input. */
     76              }
     77          
     78              if (explicit_bits) {
   \                     ??mbedtls_psa_ecp_load_representation_0: (+1)
   \       0x3C   0xB13C             CBZ.N    R4,??mbedtls_psa_ecp_load_representation_2
     79                  /* With an explicit bit-size, the data must have the matching length. */
     80                  if (curve_bytes != PSA_BITS_TO_BYTES(curve_bits)) {
   \       0x3E   0xF109 0x0107      ADD      R1,R9,#+7
   \       0x42   0xEBB0 0x0FD1      CMP      R0,R1, LSR #+3
   \       0x46   0xD004             BEQ.N    ??mbedtls_psa_ecp_load_representation_3
     81                      return PSA_ERROR_INVALID_ARGUMENT;
   \                     ??mbedtls_psa_ecp_load_representation_1: (+1)
   \       0x48   0xF06F 0x0086      MVN      R0,#+134
   \       0x4C   0xE051             B.N      ??mbedtls_psa_ecp_load_representation_4
     82                  }
     83              } else {
     84                  /* We need to infer the bit-size from the data. Since the only
     85                   * information we have is the length in bytes, the value of curve_bits
     86                   * at this stage is rounded up to the nearest multiple of 8. */
     87                  curve_bits = PSA_BYTES_TO_BITS(curve_bytes);
   \                     ??mbedtls_psa_ecp_load_representation_2: (+1)
   \       0x4E   0xEA4F 0x09C0      LSL      R9,R0,#+3
     88              }
     89          
     90              /* Allocate and initialize a key representation. */
     91              ecp = mbedtls_calloc(1, sizeof(mbedtls_ecp_keypair));
   \                     ??mbedtls_psa_ecp_load_representation_3: (+1)
   \       0x52   0x2180             MOVS     R1,#+128
   \       0x54   0x2001             MOVS     R0,#+1
   \       0x56   0x.... 0x....      BL       sl_calloc
   \       0x5A   0x0005             MOVS     R5,R0
     92              if (ecp == NULL) {
   \       0x5C   0xBF08             IT       EQ
   \       0x5E   0xF06F 0x008C      MVNEQ    R0,#+140
     93                  return PSA_ERROR_INSUFFICIENT_MEMORY;
   \       0x62   0xD046             BEQ.N    ??mbedtls_psa_ecp_load_representation_4
     94              }
     95              mbedtls_ecp_keypair_init(ecp);
   \       0x64   0x.... 0x....      BL       mbedtls_ecp_keypair_init
     96          
     97              /* Load the group. */
     98              grp_id = mbedtls_ecc_group_of_psa(PSA_KEY_TYPE_ECC_GET_FAMILY(type),
     99                                                curve_bits, !explicit_bits);
   \       0x68   0xEA0A 0x000B      AND      R0,R10,R11
   \       0x6C   0xF084 0x0401      EOR      R4,R4,#0x1
   \       0x70   0xF5B0 0x4F82      CMP      R0,#+16640
   \       0x74   0xBF18             IT       NE
   \       0x76   0x2600             MOVNE    R6,#+0
   \       0x78   0xB2E2             UXTB     R2,R4
   \       0x7A   0x4649             MOV      R1,R9
   \       0x7C   0xB2F0             UXTB     R0,R6
   \       0x7E   0x.... 0x....      BL       mbedtls_ecc_group_of_psa
    100              if (grp_id == MBEDTLS_ECP_DP_NONE) {
   \       0x82   0x0001             MOVS     R1,R0
   \       0x84   0xBF08             IT       EQ
   \       0x86   0xF06F 0x0485      MVNEQ    R4,#+133
    101                  /* We can't distinguish between a nonsensical family/size combination
    102                   * (which would warrant PSA_ERROR_INVALID_ARGUMENT) and a
    103                   * well-regarded curve that Mbed TLS just doesn't know about (which
    104                   * would warrant PSA_ERROR_NOT_SUPPORTED). For uniformity with how
    105                   * curves that Mbed TLS knows about but for which support is disabled
    106                   * at build time, return NOT_SUPPORTED. */
    107                  status = PSA_ERROR_NOT_SUPPORTED;
    108                  goto exit;
   \       0x8A   0xD02B             BEQ.N    ??mbedtls_psa_ecp_load_representation_5
    109              }
    110          
    111              status = mbedtls_to_psa_error(
    112                  mbedtls_ecp_group_load(&ecp->grp, grp_id));
   \       0x8C   0x4628             MOV      R0,R5
   \       0x8E   0x.... 0x....      BL       mbedtls_ecp_group_load
   \       0x92   0x.... 0x....      BL       mbedtls_to_psa_error
   \       0x96   0x0004             MOVS     R4,R0
    113              if (status != PSA_SUCCESS) {
   \       0x98   0xD123             BNE.N    ??mbedtls_psa_ecp_load_representation_6
    114                  goto exit;
    115              }
    116          
    117              /* Load the key material. */
    118              if (PSA_KEY_TYPE_IS_PUBLIC_KEY(type)) {
   \       0x9A   0xF40B 0x40E0      AND      R0,R11,#0x7000
   \       0x9E   0x4642             MOV      R2,R8
   \       0xA0   0xF5B0 0x4F80      CMP      R0,#+16384
   \       0xA4   0x463B             MOV      R3,R7
   \       0xA6   0xD112             BNE.N    ??mbedtls_psa_ecp_load_representation_7
    119                  /* Load the public value. */
    120                  status = mbedtls_to_psa_error(
    121                      mbedtls_ecp_point_read_binary(&ecp->grp, &ecp->Q,
    122                                                    data,
    123                                                    data_length));
   \       0xA8   0xF105 0x0168      ADD      R1,R5,#+104
   \       0xAC   0x4628             MOV      R0,R5
   \       0xAE   0x.... 0x....      BL       mbedtls_ecp_point_read_binary
   \       0xB2   0x.... 0x....      BL       mbedtls_to_psa_error
   \       0xB6   0x0004             MOVS     R4,R0
    124                  if (status != PSA_SUCCESS) {
   \       0xB8   0xD113             BNE.N    ??mbedtls_psa_ecp_load_representation_6
    125                      goto exit;
    126                  }
    127          
    128                  /* Check that the point is on the curve. */
    129                  status = mbedtls_to_psa_error(
    130                      mbedtls_ecp_check_pubkey(&ecp->grp, &ecp->Q));
   \       0xBA   0xF105 0x0168      ADD      R1,R5,#+104
   \       0xBE   0x4628             MOV      R0,R5
   \       0xC0   0x.... 0x....      BL       mbedtls_ecp_check_pubkey
   \       0xC4   0x.... 0x....      BL       mbedtls_to_psa_error
   \       0xC8   0x0004             MOVS     R4,R0
    131                  if (status != PSA_SUCCESS) {
   \       0xCA   0xD10A             BNE.N    ??mbedtls_psa_ecp_load_representation_6
   \       0xCC   0xE007             B.N      ??mbedtls_psa_ecp_load_representation_8
    132                      goto exit;
    133                  }
    134              } else {
    135                  /* Load and validate the secret value. */
    136                  status = mbedtls_to_psa_error(
    137                      mbedtls_ecp_read_key(ecp->grp.id,
    138                                           ecp,
    139                                           data,
    140                                           data_length));
   \                     ??mbedtls_psa_ecp_load_representation_7: (+1)
   \       0xCE   0x7828             LDRB     R0,[R5, #+0]
   \       0xD0   0x4629             MOV      R1,R5
   \       0xD2   0x.... 0x....      BL       mbedtls_ecp_read_key
   \       0xD6   0x.... 0x....      BL       mbedtls_to_psa_error
   \       0xDA   0x0004             MOVS     R4,R0
    141                  if (status != PSA_SUCCESS) {
   \       0xDC   0xD101             BNE.N    ??mbedtls_psa_ecp_load_representation_6
   \                     ??mbedtls_psa_ecp_load_representation_8: (+1)
   \       0xDE   0x980A             LDR      R0,[SP, #+40]
    142                      goto exit;
    143                  }
    144              }
    145          
    146              *p_ecp = ecp;
   \       0xE0   0x6005             STR      R5,[R0, #+0]
    147          exit:
    148              if (status != PSA_SUCCESS) {
   \                     ??mbedtls_psa_ecp_load_representation_6: (+1)
   \       0xE2   0xB12C             CBZ.N    R4,??mbedtls_psa_ecp_load_representation_9
    149                  mbedtls_ecp_keypair_free(ecp);
   \                     ??mbedtls_psa_ecp_load_representation_5: (+1)
   \       0xE4   0x4628             MOV      R0,R5
   \       0xE6   0x.... 0x....      BL       mbedtls_ecp_keypair_free
    150                  mbedtls_free(ecp);
   \       0xEA   0x4628             MOV      R0,R5
   \       0xEC   0x.... 0x....      BL       sl_free
    151              }
    152          
    153              return status;
   \                     ??mbedtls_psa_ecp_load_representation_9: (+1)
   \       0xF0   0x4620             MOV      R0,R4
   \                     ??mbedtls_psa_ecp_load_representation_4: (+1)
   \       0xF2   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}
    154          }
    155          #endif /* defined(MBEDTLS_PSA_BUILTIN_KEY_TYPE_ECC_KEY_PAIR_BASIC) ||
    156                  * defined(MBEDTLS_PSA_BUILTIN_KEY_TYPE_ECC_KEY_PAIR_IMPORT) ||
    157                  * defined(MBEDTLS_PSA_BUILTIN_KEY_TYPE_ECC_KEY_PAIR_EXPORT) ||
    158                  * defined(MBEDTLS_PSA_BUILTIN_KEY_TYPE_ECC_PUBLIC_KEY) ||
    159                  * defined(MBEDTLS_PSA_BUILTIN_ALG_ECDSA) ||
    160                  * defined(MBEDTLS_PSA_BUILTIN_ALG_DETERMINISTIC_ECDSA) ||
    161                  * defined(MBEDTLS_PSA_BUILTIN_ALG_ECDH) */
    162          
    163          #if defined(MBEDTLS_PSA_BUILTIN_KEY_TYPE_ECC_KEY_PAIR_IMPORT) || \
    164              defined(MBEDTLS_PSA_BUILTIN_KEY_TYPE_ECC_KEY_PAIR_EXPORT) || \
    165              defined(MBEDTLS_PSA_BUILTIN_KEY_TYPE_ECC_PUBLIC_KEY)
    166          

   \                                 In section .text, align 2, keep-with-next
    167          psa_status_t mbedtls_psa_ecp_import_key(
    168              const psa_key_attributes_t *attributes,
    169              const uint8_t *data, size_t data_length,
    170              uint8_t *key_buffer, size_t key_buffer_size,
    171              size_t *key_buffer_length, size_t *bits)
    172          {
   \                     mbedtls_psa_ecp_import_key: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x461D             MOV      R5,R3
    173              psa_status_t status;
    174              mbedtls_ecp_keypair *ecp = NULL;
    175          
    176              /* Parse input */
    177              status = mbedtls_psa_ecp_load_representation(attributes->core.type,
    178                                                           attributes->core.bits,
    179                                                           data,
    180                                                           data_length,
    181                                                           &ecp);
   \        0x4   0xAB01             ADD      R3,SP,#+4
   \        0x6   0x4606             MOV      R6,R0
   \        0x8   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_4: (+1)
   \        0xC   0x8871             LDRH     R1,[R6, #+2]
   \        0xE   0x8830             LDRH     R0,[R6, #+0]
   \       0x10   0x.... 0x....      BL       mbedtls_psa_ecp_load_representation
   \       0x14   0x0004             MOVS     R4,R0
    182              if (status != PSA_SUCCESS) {
   \       0x16   0xD116             BNE.N    ??mbedtls_psa_ecp_import_key_0
    183                  goto exit;
    184              }
    185          
    186              if (PSA_KEY_TYPE_ECC_GET_FAMILY(attributes->core.type) ==
    187                  PSA_ECC_FAMILY_MONTGOMERY) {
   \       0x18   0x8830             LDRH     R0,[R6, #+0]
   \       0x1A   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_0: (+1)
   \       0x1E   0xBF04             ITT      EQ
   \       0x20   0xB2C1             UXTBEQ   R1,R0
   \       0x22   0x2941             CMPEQ    R1,#+65
   \       0x24   0xD103             BNE.N    ??mbedtls_psa_ecp_import_key_1
    188                  *bits = ecp->grp.nbits + 1;
   \       0x26   0x9901             LDR      R1,[SP, #+4]
   \       0x28   0x6C09             LDR      R1,[R1, #+64]
   \       0x2A   0x1C49             ADDS     R1,R1,#+1
   \       0x2C   0xE001             B.N      ??mbedtls_psa_ecp_import_key_2
    189              } else {
    190                  *bits = ecp->grp.nbits;
   \                     ??mbedtls_psa_ecp_import_key_1: (+1)
   \       0x2E   0x9901             LDR      R1,[SP, #+4]
   \       0x30   0x6C09             LDR      R1,[R1, #+64]
   \                     ??mbedtls_psa_ecp_import_key_2: (+1)
   \       0x32   0x9A08             LDR      R2,[SP, #+32]
   \       0x34   0x9B06             LDR      R3,[SP, #+24]
   \       0x36   0x6011             STR      R1,[R2, #+0]
    191              }
    192          
    193              /* Re-export the data to PSA export format. There is currently no support
    194               * for other input formats then the export format, so this is a 1-1
    195               * copy operation. */
    196              status = mbedtls_psa_ecp_export_key(attributes->core.type,
    197                                                  ecp,
    198                                                  key_buffer,
    199                                                  key_buffer_size,
    200                                                  key_buffer_length);
   \       0x38   0x9907             LDR      R1,[SP, #+28]
   \       0x3A   0x462A             MOV      R2,R5
   \       0x3C   0x9100             STR      R1,[SP, #+0]
   \       0x3E   0x9901             LDR      R1,[SP, #+4]
   \       0x40   0x.... 0x....      BL       mbedtls_psa_ecp_export_key
   \       0x44   0x4604             MOV      R4,R0
    201          exit:
    202              /* Always free the PK object (will also free contained ECP context) */
    203              mbedtls_ecp_keypair_free(ecp);
   \                     ??mbedtls_psa_ecp_import_key_0: (+1)
   \       0x46   0x9801             LDR      R0,[SP, #+4]
   \       0x48   0x.... 0x....      BL       mbedtls_ecp_keypair_free
    204              mbedtls_free(ecp);
   \       0x4C   0x9801             LDR      R0,[SP, #+4]
   \       0x4E   0x.... 0x....      BL       sl_free
    205          
    206              return status;
   \       0x52   0x4620             MOV      R0,R4
   \       0x54   0xBD76             POP      {R1,R2,R4-R6,PC}
    207          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \        0x0   0x9300             STR      R3,[SP, #+0]
   \        0x2   0x2000             MOVS     R0,#+0
   \        0x4   0x4613             MOV      R3,R2
   \        0x6   0x9001             STR      R0,[SP, #+4]
   \        0x8   0x460A             MOV      R2,R1
   \        0xA   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable6
   \        0x2   0xEA01 0x0200      AND      R2,R1,R0
   \        0x6   0xF5B2 0x4F82      CMP      R2,#+16640
   \        0xA   0x4770             BX       LR
    208          

   \                                 In section .text, align 2, keep-with-next
    209          psa_status_t mbedtls_psa_ecp_export_key(psa_key_type_t type,
    210                                                  mbedtls_ecp_keypair *ecp,
    211                                                  uint8_t *data,
    212                                                  size_t data_size,
    213                                                  size_t *data_length)
    214          {
   \                     mbedtls_psa_ecp_export_key: (+1)
   \        0x0   0xE92D 0x41FC      PUSH     {R2-R8,LR}
    215              psa_status_t status;
    216          
    217              if (PSA_KEY_TYPE_IS_PUBLIC_KEY(type)) {
   \        0x4   0xF400 0x40E0      AND      R0,R0,#0x7000
   \        0x8   0x460C             MOV      R4,R1
   \        0xA   0x4615             MOV      R5,R2
   \        0xC   0x461E             MOV      R6,R3
   \        0xE   0x9F08             LDR      R7,[SP, #+32]
   \       0x10   0xF5B0 0x4F80      CMP      R0,#+16384
   \       0x14   0xD11C             BNE.N    ??mbedtls_psa_ecp_export_key_0
    218                  /* Check whether the public part is loaded */
    219                  if (mbedtls_ecp_is_zero(&ecp->Q)) {
   \       0x16   0xF104 0x0068      ADD      R0,R4,#+104
   \       0x1A   0x.... 0x....      BL       mbedtls_ecp_is_zero
   \       0x1E   0xB140             CBZ.N    R0,??mbedtls_psa_ecp_export_key_1
    220                      /* Calculate the public key */
    221                      status = mbedtls_to_psa_error(
    222                          mbedtls_ecp_mul(&ecp->grp, &ecp->Q, &ecp->d, &ecp->grp.G,
    223                                          mbedtls_psa_get_random,
    224                                          MBEDTLS_PSA_RANDOM_STATE));
   \       0x20   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_8: (+1)
   \       0x24   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_7: (+1)
   \       0x28   0x.... 0x....      BL       mbedtls_to_psa_error
   \       0x2C   0xEA5F 0x0800      MOVS     R8,R0
    225                      if (status != PSA_SUCCESS) {
   \       0x30   0xD128             BNE.N    ??mbedtls_psa_ecp_export_key_2
    226                          return status;
    227                      }
    228                  }
    229          
    230                  status = mbedtls_to_psa_error(
    231                      mbedtls_ecp_point_write_binary(&ecp->grp, &ecp->Q,
    232                                                     MBEDTLS_ECP_PF_UNCOMPRESSED,
    233                                                     data_length,
    234                                                     data,
    235                                                     data_size));
   \                     ??mbedtls_psa_ecp_export_key_1: (+1)
   \       0x32   0x9601             STR      R6,[SP, #+4]
   \       0x34   0x9500             STR      R5,[SP, #+0]
   \       0x36   0x463B             MOV      R3,R7
   \       0x38   0x2200             MOVS     R2,#+0
   \       0x3A   0xF104 0x0168      ADD      R1,R4,#+104
   \       0x3E   0x4620             MOV      R0,R4
   \       0x40   0x.... 0x....      BL       mbedtls_ecp_point_write_binary
   \       0x44   0x.... 0x....      BL       mbedtls_to_psa_error
   \       0x48   0xEA5F 0x0800      MOVS     R8,R0
    236                  if (status != PSA_SUCCESS) {
   \       0x4C   0xD01A             BEQ.N    ??mbedtls_psa_ecp_export_key_2
    237                      memset(data, 0, data_size);
   \       0x4E   0xE015             B.N      ??mbedtls_psa_ecp_export_key_3
    238                  }
    239          
    240                  return status;
    241              } else {
    242                  if (data_size < PSA_BITS_TO_BYTES(ecp->grp.nbits)) {
   \                     ??mbedtls_psa_ecp_export_key_0: (+1)
   \       0x50   0x6C22             LDR      R2,[R4, #+64]
   \       0x52   0x1DD2             ADDS     R2,R2,#+7
   \       0x54   0x08D2             LSRS     R2,R2,#+3
   \       0x56   0x4296             CMP      R6,R2
   \       0x58   0xBF38             IT       CC
   \       0x5A   0xF06F 0x0089      MVNCC    R0,#+137
    243                      return PSA_ERROR_BUFFER_TOO_SMALL;
   \       0x5E   0xD312             BCC.N    ??mbedtls_psa_ecp_export_key_4
    244                  }
    245          
    246                  status = mbedtls_to_psa_error(
    247                      mbedtls_ecp_write_key(ecp,
    248                                            data,
    249                                            PSA_BITS_TO_BYTES(ecp->grp.nbits)));
   \       0x60   0x4629             MOV      R1,R5
   \       0x62   0x4620             MOV      R0,R4
   \       0x64   0x.... 0x....      BL       mbedtls_ecp_write_key
   \       0x68   0x.... 0x....      BL       mbedtls_to_psa_error
   \       0x6C   0xEA5F 0x0800      MOVS     R8,R0
    250                  if (status == PSA_SUCCESS) {
   \       0x70   0xD104             BNE.N    ??mbedtls_psa_ecp_export_key_3
    251                      *data_length = PSA_BITS_TO_BYTES(ecp->grp.nbits);
   \       0x72   0x6C20             LDR      R0,[R4, #+64]
   \       0x74   0x1DC0             ADDS     R0,R0,#+7
   \       0x76   0x08C0             LSRS     R0,R0,#+3
   \       0x78   0x6038             STR      R0,[R7, #+0]
   \       0x7A   0xE003             B.N      ??mbedtls_psa_ecp_export_key_2
    252                  } else {
    253                      memset(data, 0, data_size);
   \                     ??mbedtls_psa_ecp_export_key_3: (+1)
   \       0x7C   0x4631             MOV      R1,R6
   \       0x7E   0x4628             MOV      R0,R5
   \       0x80   0x.... 0x....      BL       __aeabi_memclr
    254                  }
    255          
    256                  return status;
   \                     ??mbedtls_psa_ecp_export_key_2: (+1)
   \       0x84   0x4640             MOV      R0,R8
   \                     ??mbedtls_psa_ecp_export_key_4: (+1)
   \       0x86   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}
    257              }
    258          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \        0x0   0xF104 0x031C      ADD      R3,R4,#+28
   \        0x4   0xF104 0x0260      ADD      R2,R4,#+96
   \        0x8   0xF104 0x0168      ADD      R1,R4,#+104
   \        0xC   0x4620             MOV      R0,R4
   \        0xE   0x.... 0x....      B.W      mbedtls_ecp_mul

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4: (+1)
   \        0x0   0x2100             MOVS     R1,#+0
   \        0x2   0x....             LDR.N    R0,??DataTable6_1
   \        0x4   0x9101             STR      R1,[SP, #+4]
   \        0x6   0x9000             STR      R0,[SP, #+0]
   \        0x8   0x4770             BX       LR
    259          

   \                                 In section .text, align 2, keep-with-next
    260          psa_status_t mbedtls_psa_ecp_export_public_key(
    261              const psa_key_attributes_t *attributes,
    262              const uint8_t *key_buffer, size_t key_buffer_size,
    263              uint8_t *data, size_t data_size, size_t *data_length)
    264          {
   \                     mbedtls_psa_ecp_export_public_key: (+1)
   \        0x0   0xB53E             PUSH     {R1-R5,LR}
   \        0x2   0x461C             MOV      R4,R3
    265              psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;
    266              mbedtls_ecp_keypair *ecp = NULL;
    267          
    268              status = mbedtls_psa_ecp_load_representation(
    269                  attributes->core.type, attributes->core.bits,
    270                  key_buffer, key_buffer_size, &ecp);
   \        0x4   0xAB01             ADD      R3,SP,#+4
   \        0x6   0x4605             MOV      R5,R0
   \        0x8   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_5: (+1)
   \        0xC   0x8869             LDRH     R1,[R5, #+2]
   \        0xE   0x8828             LDRH     R0,[R5, #+0]
   \       0x10   0x.... 0x....      BL       mbedtls_psa_ecp_load_representation
    271              if (status != PSA_SUCCESS) {
   \       0x14   0xB9B8             CBNZ.N   R0,??mbedtls_psa_ecp_export_public_key_0
    272                  return status;
    273              }
    274          
    275              status = mbedtls_psa_ecp_export_key(
    276                  PSA_KEY_TYPE_ECC_PUBLIC_KEY(
    277                      PSA_KEY_TYPE_ECC_GET_FAMILY(attributes->core.type)),
    278                  ecp, data, data_size, data_length);
   \       0x16   0x8828             LDRH     R0,[R5, #+0]
   \       0x18   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_1: (+1)
   \       0x1C   0xBF06             ITTE     EQ
   \       0x1E   0xB2C0             UXTBEQ   R0,R0
   \       0x20   0xF440 0x4082      ORREQ    R0,R0,#0x4100
   \       0x24   0xF44F 0x4082      MOVNE    R0,#+16640
   \       0x28   0x9907             LDR      R1,[SP, #+28]
   \       0x2A   0x9B06             LDR      R3,[SP, #+24]
   \       0x2C   0x4622             MOV      R2,R4
   \       0x2E   0x9100             STR      R1,[SP, #+0]
   \       0x30   0x9901             LDR      R1,[SP, #+4]
   \       0x32   0x.... 0x....      BL       mbedtls_psa_ecp_export_key
   \       0x36   0x4604             MOV      R4,R0
    279          
    280              mbedtls_ecp_keypair_free(ecp);
   \       0x38   0x9801             LDR      R0,[SP, #+4]
   \       0x3A   0x.... 0x....      BL       mbedtls_ecp_keypair_free
    281              mbedtls_free(ecp);
   \       0x3E   0x9801             LDR      R0,[SP, #+4]
   \       0x40   0x.... 0x....      BL       sl_free
    282          
    283              return status;
   \       0x44   0x4620             MOV      R0,R4
   \                     ??mbedtls_psa_ecp_export_public_key_0: (+1)
   \       0x46   0xBD3E             POP      {R1-R5,PC}
    284          }
    285          #endif /* defined(MBEDTLS_PSA_BUILTIN_KEY_TYPE_ECC_KEY_PAIR_IMPORT) ||
    286                  * defined(MBEDTLS_PSA_BUILTIN_KEY_TYPE_ECC_KEY_PAIR_EXPORT) ||
    287                  * defined(MBEDTLS_PSA_BUILTIN_KEY_TYPE_ECC_PUBLIC_KEY) */
    288          
    289          #if defined(MBEDTLS_PSA_BUILTIN_KEY_TYPE_ECC_KEY_PAIR_GENERATE)

   \                                 In section .text, align 2, keep-with-next
    290          psa_status_t mbedtls_psa_ecp_generate_key(
    291              const psa_key_attributes_t *attributes,
    292              uint8_t *key_buffer, size_t key_buffer_size, size_t *key_buffer_length)
    293          {
   \                     mbedtls_psa_ecp_generate_key: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0xB0A0             SUB      SP,SP,#+128
   \        0x6   0x4604             MOV      R4,R0
    294              psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;
    295              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    296          
    297              psa_ecc_family_t curve = PSA_KEY_TYPE_ECC_GET_FAMILY(
    298                  attributes->core.type);
   \        0x8   0x8820             LDRH     R0,[R4, #+0]
   \        0xA   0x4688             MOV      R8,R1
   \        0xC   0x4616             MOV      R6,R2
   \        0xE   0x....             LDR.N    R1,??DataTable6
   \       0x10   0xEA01 0x0200      AND      R2,R1,R0
   \       0x14   0x461D             MOV      R5,R3
   \       0x16   0xF5B2 0x4F82      CMP      R2,#+16640
   \       0x1A   0xBF18             IT       NE
   \       0x1C   0x2000             MOVNE    R0,#+0
    299              mbedtls_ecp_group_id grp_id =
    300                  mbedtls_ecc_group_of_psa(curve, attributes->core.bits, 0);
   \       0x1E   0x8861             LDRH     R1,[R4, #+2]
   \       0x20   0x2200             MOVS     R2,#+0
   \       0x22   0xB2C0             UXTB     R0,R0
   \       0x24   0x.... 0x....      BL       mbedtls_ecc_group_of_psa
   \       0x28   0x4607             MOV      R7,R0
    301          
    302              const mbedtls_ecp_curve_info *curve_info =
    303                  mbedtls_ecp_curve_info_from_grp_id(grp_id);
   \       0x2A   0x.... 0x....      BL       mbedtls_ecp_curve_info_from_grp_id
    304              mbedtls_ecp_keypair ecp;
    305          
    306              if (attributes->domain_parameters_size != 0) {
   \       0x2E   0x6A21             LDR      R1,[R4, #+32]
   \       0x30   0xB919             CBNZ.N   R1,??mbedtls_psa_ecp_generate_key_0
    307                  return PSA_ERROR_NOT_SUPPORTED;
    308              }
    309          
    310              if (grp_id == MBEDTLS_ECP_DP_NONE || curve_info == NULL) {
   \       0x32   0x2F00             CMP      R7,#+0
   \       0x34   0xBF18             IT       NE
   \       0x36   0x2800             CMPNE    R0,#+0
   \       0x38   0xD102             BNE.N    ??mbedtls_psa_ecp_generate_key_1
    311                  return PSA_ERROR_NOT_SUPPORTED;
   \                     ??mbedtls_psa_ecp_generate_key_0: (+1)
   \       0x3A   0xF06F 0x0085      MVN      R0,#+133
   \       0x3E   0xE01F             B.N      ??mbedtls_psa_ecp_generate_key_2
    312              }
    313          
    314              mbedtls_ecp_keypair_init(&ecp);
   \                     ??mbedtls_psa_ecp_generate_key_1: (+1)
   \       0x40   0x4668             MOV      R0,SP
   \       0x42   0x.... 0x....      BL       mbedtls_ecp_keypair_init
    315              ret = mbedtls_ecp_gen_key(grp_id, &ecp,
    316                                        mbedtls_psa_get_random,
    317                                        MBEDTLS_PSA_RANDOM_STATE);
   \       0x46   0x2300             MOVS     R3,#+0
   \       0x48   0x....             LDR.N    R2,??DataTable6_1
   \       0x4A   0x4669             MOV      R1,SP
   \       0x4C   0x4638             MOV      R0,R7
   \       0x4E   0x.... 0x....      BL       mbedtls_ecp_gen_key
   \       0x52   0x0004             MOVS     R4,R0
    318              if (ret != 0) {
   \       0x54   0xD006             BEQ.N    ??mbedtls_psa_ecp_generate_key_3
    319                  mbedtls_ecp_keypair_free(&ecp);
   \       0x56   0x4668             MOV      R0,SP
   \       0x58   0x.... 0x....      BL       mbedtls_ecp_keypair_free
    320                  return mbedtls_to_psa_error(ret);
   \       0x5C   0x4620             MOV      R0,R4
   \       0x5E   0x.... 0x....      BL       mbedtls_to_psa_error
   \       0x62   0xE00D             B.N      ??mbedtls_psa_ecp_generate_key_2
    321              }
    322          
    323              status = mbedtls_to_psa_error(
    324                  mbedtls_ecp_write_key(&ecp, key_buffer, key_buffer_size));
   \                     ??mbedtls_psa_ecp_generate_key_3: (+1)
   \       0x64   0x4632             MOV      R2,R6
   \       0x66   0x4641             MOV      R1,R8
   \       0x68   0x4668             MOV      R0,SP
   \       0x6A   0x.... 0x....      BL       mbedtls_ecp_write_key
   \       0x6E   0x.... 0x....      BL       mbedtls_to_psa_error
   \       0x72   0x4604             MOV      R4,R0
    325          
    326              mbedtls_ecp_keypair_free(&ecp);
   \       0x74   0x4668             MOV      R0,SP
   \       0x76   0x.... 0x....      BL       mbedtls_ecp_keypair_free
    327          
    328              if (status == PSA_SUCCESS) {
   \       0x7A   0xB904             CBNZ.N   R4,??mbedtls_psa_ecp_generate_key_4
    329                  *key_buffer_length = key_buffer_size;
   \       0x7C   0x602E             STR      R6,[R5, #+0]
    330              }
    331          
    332              return status;
   \                     ??mbedtls_psa_ecp_generate_key_4: (+1)
   \       0x7E   0x4620             MOV      R0,R4
   \                     ??mbedtls_psa_ecp_generate_key_2: (+1)
   \       0x80   0xB020             ADD      SP,SP,#+128
   \       0x82   0xE8BD 0x81F0      POP      {R4-R8,PC}
    333          }
    334          #endif /* MBEDTLS_PSA_BUILTIN_KEY_TYPE_ECC_KEY_PAIR_GENERATE */
    335          
    336          /****************************************************************/
    337          /* ECDSA sign/verify */
    338          /****************************************************************/
    339          
    340          #if defined(MBEDTLS_PSA_BUILTIN_ALG_ECDSA) || \
    341              defined(MBEDTLS_PSA_BUILTIN_ALG_DETERMINISTIC_ECDSA)

   \                                 In section .text, align 2, keep-with-next
    342          psa_status_t mbedtls_psa_ecdsa_sign_hash(
    343              const psa_key_attributes_t *attributes,
    344              const uint8_t *key_buffer, size_t key_buffer_size,
    345              psa_algorithm_t alg, const uint8_t *hash, size_t hash_length,
    346              uint8_t *signature, size_t signature_size, size_t *signature_length)
    347          {
   \                     mbedtls_psa_ecdsa_sign_hash: (+1)
   \        0x0   0xB5F0             PUSH     {R4-R7,LR}
   \        0x2   0x461C             MOV      R4,R3
   \        0x4   0xB089             SUB      SP,SP,#+36
    348              psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;
    349              mbedtls_ecp_keypair *ecp = NULL;
    350              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    351              size_t curve_bytes;
    352              mbedtls_mpi r, s;
    353          
    354              status = mbedtls_psa_ecp_load_representation(attributes->core.type,
    355                                                           attributes->core.bits,
    356                                                           key_buffer,
    357                                                           key_buffer_size,
    358                                                           &ecp);
   \        0x6   0xAB04             ADD      R3,SP,#+16
   \        0x8   0x9300             STR      R3,[SP, #+0]
   \        0xA   0x2500             MOVS     R5,#+0
   \        0xC   0x4613             MOV      R3,R2
   \        0xE   0x9504             STR      R5,[SP, #+16]
   \       0x10   0x.... 0x....      BL       ?Subroutine1
    359              if (status != PSA_SUCCESS) {
   \                     ??CrossCallReturnLabel_3: (+1)
   \       0x14   0x2800             CMP      R0,#+0
   \       0x16   0xD144             BNE.N    ??mbedtls_psa_ecdsa_sign_hash_0
    360                  return status;
    361              }
    362          
    363              curve_bytes = PSA_BITS_TO_BYTES(ecp->grp.pbits);
   \       0x18   0x9804             LDR      R0,[SP, #+16]
   \       0x1A   0x9F11             LDR      R7,[SP, #+68]
   \       0x1C   0x6BC5             LDR      R5,[R0, #+60]
    364              mbedtls_mpi_init(&r);
   \       0x1E   0xA807             ADD      R0,SP,#+28
   \       0x20   0x.... 0x....      BL       mbedtls_mpi_init
   \       0x24   0x1DED             ADDS     R5,R5,#+7
   \       0x26   0x08ED             LSRS     R5,R5,#+3
    365              mbedtls_mpi_init(&s);
   \       0x28   0xA805             ADD      R0,SP,#+20
   \       0x2A   0x.... 0x....      BL       mbedtls_mpi_init
    366          
    367              if (signature_size < 2 * curve_bytes) {
   \       0x2E   0x006E             LSLS     R6,R5,#+1
   \       0x30   0x42B7             CMP      R7,R6
   \       0x32   0xBF38             IT       CC
   \       0x34   0x....             LDRCC.N  R4,??DataTable6_2
    368                  ret = MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL;
    369                  goto cleanup;
   \       0x36   0xD322             BCC.N    ??mbedtls_psa_ecdsa_sign_hash_1
    370              }
    371          
    372              if (PSA_ALG_ECDSA_IS_DETERMINISTIC(alg)) {
   \       0x38   0x05E0             LSLS     R0,R4,#+23
   \       0x3A   0xBF48             IT       MI
   \       0x3C   0x....             LDRMI.N  R4,??DataTable6_3
    373          #if defined(MBEDTLS_PSA_BUILTIN_ALG_DETERMINISTIC_ECDSA)
    374                  psa_algorithm_t hash_alg = PSA_ALG_SIGN_GET_HASH(alg);
    375                  mbedtls_md_type_t md_alg = mbedtls_md_type_from_psa_alg(hash_alg);
    376                  MBEDTLS_MPI_CHK(mbedtls_ecdsa_sign_det_ext(
    377                                      &ecp->grp, &r, &s,
    378                                      &ecp->d, hash,
    379                                      hash_length, md_alg,
    380                                      mbedtls_psa_get_random,
    381                                      MBEDTLS_PSA_RANDOM_STATE));
    382          #else
    383                  ret = MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE;
    384                  goto cleanup;
   \       0x3E   0xD41E             BMI.N    ??mbedtls_psa_ecdsa_sign_hash_1
    385          #endif /* defined(MBEDTLS_PSA_BUILTIN_ALG_DETERMINISTIC_ECDSA) */
    386              } else {
    387                  (void) alg;
    388                  MBEDTLS_MPI_CHK(mbedtls_ecdsa_sign(&ecp->grp, &r, &s, &ecp->d,
    389                                                     hash, hash_length,
    390                                                     mbedtls_psa_get_random,
    391                                                     MBEDTLS_PSA_RANDOM_STATE));
   \       0x40   0x980F             LDR      R0,[SP, #+60]
   \       0x42   0x....             LDR.N    R1,??DataTable6_1
   \       0x44   0x9102             STR      R1,[SP, #+8]
   \       0x46   0x9001             STR      R0,[SP, #+4]
   \       0x48   0x990E             LDR      R1,[SP, #+56]
   \       0x4A   0x9804             LDR      R0,[SP, #+16]
   \       0x4C   0x2200             MOVS     R2,#+0
   \       0x4E   0x9203             STR      R2,[SP, #+12]
   \       0x50   0x9100             STR      R1,[SP, #+0]
   \       0x52   0xF100 0x0360      ADD      R3,R0,#+96
   \       0x56   0xAA05             ADD      R2,SP,#+20
   \       0x58   0xA907             ADD      R1,SP,#+28
   \       0x5A   0x.... 0x....      BL       mbedtls_ecdsa_sign
   \       0x5E   0x0004             MOVS     R4,R0
   \       0x60   0xD10D             BNE.N    ??mbedtls_psa_ecdsa_sign_hash_1
   \       0x62   0x9F10             LDR      R7,[SP, #+64]
    392              }
    393          
    394              MBEDTLS_MPI_CHK(mbedtls_mpi_write_binary(&r,
    395                                                       signature,
    396                                                       curve_bytes));
   \       0x64   0x462A             MOV      R2,R5
   \       0x66   0xA807             ADD      R0,SP,#+28
   \       0x68   0x4639             MOV      R1,R7
   \       0x6A   0x.... 0x....      BL       mbedtls_mpi_write_binary
   \       0x6E   0x0004             MOVS     R4,R0
   \       0x70   0xD105             BNE.N    ??mbedtls_psa_ecdsa_sign_hash_1
    397              MBEDTLS_MPI_CHK(mbedtls_mpi_write_binary(&s,
    398                                                       signature + curve_bytes,
    399                                                       curve_bytes));
   \       0x72   0x462A             MOV      R2,R5
   \       0x74   0x1979             ADDS     R1,R7,R5
   \       0x76   0xA805             ADD      R0,SP,#+20
   \       0x78   0x.... 0x....      BL       mbedtls_mpi_write_binary
   \       0x7C   0x4604             MOV      R4,R0
    400          cleanup:
    401              mbedtls_mpi_free(&r);
   \                     ??mbedtls_psa_ecdsa_sign_hash_1: (+1)
   \       0x7E   0xA807             ADD      R0,SP,#+28
   \       0x80   0x.... 0x....      BL       mbedtls_mpi_free
    402              mbedtls_mpi_free(&s);
   \       0x84   0xA805             ADD      R0,SP,#+20
   \       0x86   0x.... 0x....      BL       mbedtls_mpi_free
    403              if (ret == 0) {
   \       0x8A   0xB90C             CBNZ.N   R4,??mbedtls_psa_ecdsa_sign_hash_2
   \       0x8C   0x9812             LDR      R0,[SP, #+72]
    404                  *signature_length = 2 * curve_bytes;
   \       0x8E   0x6006             STR      R6,[R0, #+0]
    405              }
    406          
    407              mbedtls_ecp_keypair_free(ecp);
   \                     ??mbedtls_psa_ecdsa_sign_hash_2: (+1)
   \       0x90   0x9804             LDR      R0,[SP, #+16]
   \       0x92   0x.... 0x....      BL       mbedtls_ecp_keypair_free
    408              mbedtls_free(ecp);
   \       0x96   0x9804             LDR      R0,[SP, #+16]
   \       0x98   0x.... 0x....      BL       sl_free
    409          
    410              return mbedtls_to_psa_error(ret);
   \       0x9C   0x4620             MOV      R0,R4
   \       0x9E   0x.... 0x....      BL       mbedtls_to_psa_error
   \                     ??mbedtls_psa_ecdsa_sign_hash_0: (+1)
   \       0xA2   0xB009             ADD      SP,SP,#+36
   \       0xA4   0xBDF0             POP      {R4-R7,PC}
    411          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \        0x0   0x460A             MOV      R2,R1
   \        0x2   0x8841             LDRH     R1,[R0, #+2]
   \        0x4   0x8800             LDRH     R0,[R0, #+0]
   \        0x6   0x....             B.N      mbedtls_psa_ecp_load_representation
    412          

   \                                 In section .text, align 2, keep-with-next
    413          psa_status_t mbedtls_psa_ecp_load_public_part(mbedtls_ecp_keypair *ecp)
    414          {
   \                     mbedtls_psa_ecp_load_public_part: (+1)
   \        0x0   0xB53E             PUSH     {R1-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
    415              int ret = 0;
    416          
    417              /* Check whether the public part is loaded. If not, load it. */
    418              if (mbedtls_ecp_is_zero(&ecp->Q)) {
   \        0x4   0xF104 0x0068      ADD      R0,R4,#+104
   \        0x8   0x2500             MOVS     R5,#+0
   \        0xA   0x.... 0x....      BL       mbedtls_ecp_is_zero
   \        0xE   0xB128             CBZ.N    R0,??mbedtls_psa_ecp_load_public_part_0
    419                  ret = mbedtls_ecp_mul(&ecp->grp, &ecp->Q,
    420                                        &ecp->d, &ecp->grp.G,
    421                                        mbedtls_psa_get_random,
    422                                        MBEDTLS_PSA_RANDOM_STATE);
   \       0x10   0x....             LDR.N    R0,??DataTable6_1
   \       0x12   0x9000             STR      R0,[SP, #+0]
   \       0x14   0x9501             STR      R5,[SP, #+4]
   \       0x16   0x.... 0x....      BL       ?Subroutine3
    423              }
   \                     ??CrossCallReturnLabel_6: (+1)
   \       0x1A   0x4605             MOV      R5,R0
    424          
    425              return mbedtls_to_psa_error(ret);
   \                     ??mbedtls_psa_ecp_load_public_part_0: (+1)
   \       0x1C   0x4628             MOV      R0,R5
   \       0x1E   0xE8BD 0x403E      POP      {R1-R5,LR}
   \       0x22   0x.... 0x....      B.W      mbedtls_to_psa_error
    426          }
    427          

   \                                 In section .text, align 2, keep-with-next
    428          psa_status_t mbedtls_psa_ecdsa_verify_hash(
    429              const psa_key_attributes_t *attributes,
    430              const uint8_t *key_buffer, size_t key_buffer_size,
    431              psa_algorithm_t alg, const uint8_t *hash, size_t hash_length,
    432              const uint8_t *signature, size_t signature_length)
    433          {
   \                     mbedtls_psa_ecdsa_verify_hash: (+1)
   \        0x0   0xB578             PUSH     {R3-R6,LR}
   \        0x2   0x4613             MOV      R3,R2
   \        0x4   0xB087             SUB      SP,SP,#+28
    434              psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;
    435              mbedtls_ecp_keypair *ecp = NULL;
    436              size_t curve_bytes;
    437              mbedtls_mpi r, s;
    438          
    439              (void) alg;
    440          
    441              status = mbedtls_psa_ecp_load_representation(attributes->core.type,
    442                                                           attributes->core.bits,
    443                                                           key_buffer,
    444                                                           key_buffer_size,
    445                                                           &ecp);
   \        0x6   0xAA02             ADD      R2,SP,#+8
   \        0x8   0x2400             MOVS     R4,#+0
   \        0xA   0x9200             STR      R2,[SP, #+0]
   \        0xC   0x9402             STR      R4,[SP, #+8]
   \        0xE   0x.... 0x....      BL       ?Subroutine1
    446              if (status != PSA_SUCCESS) {
   \                     ??CrossCallReturnLabel_2: (+1)
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0xD143             BNE.N    ??mbedtls_psa_ecdsa_verify_hash_0
    447                  return status;
    448              }
    449          
    450              curve_bytes = PSA_BITS_TO_BYTES(ecp->grp.pbits);
   \       0x16   0x9802             LDR      R0,[SP, #+8]
   \       0x18   0x9C0F             LDR      R4,[SP, #+60]
   \       0x1A   0x6BC5             LDR      R5,[R0, #+60]
    451              mbedtls_mpi_init(&r);
   \       0x1C   0xA805             ADD      R0,SP,#+20
   \       0x1E   0x.... 0x....      BL       mbedtls_mpi_init
   \       0x22   0x1DED             ADDS     R5,R5,#+7
    452              mbedtls_mpi_init(&s);
   \       0x24   0xA803             ADD      R0,SP,#+12
   \       0x26   0x08ED             LSRS     R5,R5,#+3
   \       0x28   0x.... 0x....      BL       mbedtls_mpi_init
    453          
    454              if (signature_length != 2 * curve_bytes) {
   \       0x2C   0xEBB4 0x0F45      CMP      R4,R5, LSL #+1
   \       0x30   0xBF18             IT       NE
   \       0x32   0xF06F 0x0494      MVNNE    R4,#+148
    455                  status = PSA_ERROR_INVALID_SIGNATURE;
    456                  goto cleanup;
   \       0x36   0xD125             BNE.N    ??mbedtls_psa_ecdsa_verify_hash_1
   \       0x38   0x9E0E             LDR      R6,[SP, #+56]
    457              }
    458          
    459              status = mbedtls_to_psa_error(mbedtls_mpi_read_binary(&r,
    460                                                                    signature,
    461                                                                    curve_bytes));
   \       0x3A   0x462A             MOV      R2,R5
   \       0x3C   0xA805             ADD      R0,SP,#+20
   \       0x3E   0x4631             MOV      R1,R6
   \       0x40   0x.... 0x....      BL       mbedtls_mpi_read_binary
   \       0x44   0x.... 0x....      BL       mbedtls_to_psa_error
   \       0x48   0x0004             MOVS     R4,R0
    462              if (status != PSA_SUCCESS) {
   \       0x4A   0xD11B             BNE.N    ??mbedtls_psa_ecdsa_verify_hash_1
    463                  goto cleanup;
    464              }
    465          
    466              status = mbedtls_to_psa_error(mbedtls_mpi_read_binary(&s,
    467                                                                    signature + curve_bytes,
    468                                                                    curve_bytes));
   \       0x4C   0x462A             MOV      R2,R5
   \       0x4E   0x1971             ADDS     R1,R6,R5
   \       0x50   0xA803             ADD      R0,SP,#+12
   \       0x52   0x.... 0x....      BL       mbedtls_mpi_read_binary
   \       0x56   0x.... 0x....      BL       mbedtls_to_psa_error
   \       0x5A   0x0004             MOVS     R4,R0
    469              if (status != PSA_SUCCESS) {
   \       0x5C   0xD112             BNE.N    ??mbedtls_psa_ecdsa_verify_hash_1
    470                  goto cleanup;
    471              }
    472          
    473              status = mbedtls_psa_ecp_load_public_part(ecp);
   \       0x5E   0x9802             LDR      R0,[SP, #+8]
   \       0x60   0x.... 0x....      BL       mbedtls_psa_ecp_load_public_part
   \       0x64   0x0004             MOVS     R4,R0
    474              if (status != PSA_SUCCESS) {
   \       0x66   0xD10D             BNE.N    ??mbedtls_psa_ecdsa_verify_hash_1
    475                  goto cleanup;
    476              }
    477          
    478              status = mbedtls_to_psa_error(mbedtls_ecdsa_verify(&ecp->grp, hash,
    479                                                                 hash_length, &ecp->Q,
    480                                                                 &r, &s));
   \       0x68   0x9802             LDR      R0,[SP, #+8]
   \       0x6A   0x9A0D             LDR      R2,[SP, #+52]
   \       0x6C   0x990C             LDR      R1,[SP, #+48]
   \       0x6E   0xAB05             ADD      R3,SP,#+20
   \       0x70   0xAC03             ADD      R4,SP,#+12
   \       0x72   0x9300             STR      R3,[SP, #+0]
   \       0x74   0x9401             STR      R4,[SP, #+4]
   \       0x76   0xF100 0x0368      ADD      R3,R0,#+104
   \       0x7A   0x.... 0x....      BL       mbedtls_ecdsa_verify
   \       0x7E   0x.... 0x....      BL       mbedtls_to_psa_error
   \       0x82   0x4604             MOV      R4,R0
    481          cleanup:
    482              mbedtls_mpi_free(&r);
   \                     ??mbedtls_psa_ecdsa_verify_hash_1: (+1)
   \       0x84   0xA805             ADD      R0,SP,#+20
   \       0x86   0x.... 0x....      BL       mbedtls_mpi_free
    483              mbedtls_mpi_free(&s);
   \       0x8A   0xA803             ADD      R0,SP,#+12
   \       0x8C   0x.... 0x....      BL       mbedtls_mpi_free
    484              mbedtls_ecp_keypair_free(ecp);
   \       0x90   0x9802             LDR      R0,[SP, #+8]
   \       0x92   0x.... 0x....      BL       mbedtls_ecp_keypair_free
    485              mbedtls_free(ecp);
   \       0x96   0x9802             LDR      R0,[SP, #+8]
   \       0x98   0x.... 0x....      BL       sl_free
    486          
    487              return status;
   \       0x9C   0x4620             MOV      R0,R4
   \                     ??mbedtls_psa_ecdsa_verify_hash_0: (+1)
   \       0x9E   0xB008             ADD      SP,SP,#+32
   \       0xA0   0xBD70             POP      {R4-R6,PC}
    488          }
    489          
    490          #endif /* defined(MBEDTLS_PSA_BUILTIN_ALG_ECDSA) || \
    491                  * defined(MBEDTLS_PSA_BUILTIN_ALG_DETERMINISTIC_ECDSA) */
    492          
    493          /****************************************************************/
    494          /* ECDH Key Agreement */
    495          /****************************************************************/
    496          
    497          #if defined(MBEDTLS_PSA_BUILTIN_ALG_ECDH)

   \                                 In section .text, align 2, keep-with-next
    498          psa_status_t mbedtls_psa_key_agreement_ecdh(
    499              const psa_key_attributes_t *attributes,
    500              const uint8_t *key_buffer, size_t key_buffer_size,
    501              psa_algorithm_t alg, const uint8_t *peer_key, size_t peer_key_length,
    502              uint8_t *shared_secret, size_t shared_secret_size,
    503              size_t *shared_secret_length)
    504          {
   \                     mbedtls_psa_key_agreement_ecdh: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0xB0AE             SUB      SP,SP,#+184
    505              psa_status_t status;
    506              if (!PSA_KEY_TYPE_IS_ECC_KEY_PAIR(attributes->core.type) ||
    507                  !PSA_ALG_IS_ECDH(alg)) {
   \        0x4   0x8804             LDRH     R4,[R0, #+0]
   \        0x6   0xF024 0x05FF      BIC      R5,R4,#0xFF
   \        0xA   0xF5B5 0x4FE2      CMP      R5,#+28928
   \        0xE   0xD106             BNE.N    ??mbedtls_psa_key_agreement_ecdh_0
   \       0x10   0x0C1B             LSRS     R3,R3,#+16
   \       0x12   0x041B             LSLS     R3,R3,#+16
   \       0x14   0xF043 0x6310      ORR      R3,R3,#0x9000000
   \       0x18   0x....             LDR.N    R5,??DataTable6_4
   \       0x1A   0x42AB             CMP      R3,R5
   \       0x1C   0xD002             BEQ.N    ??mbedtls_psa_key_agreement_ecdh_1
    508                  return PSA_ERROR_INVALID_ARGUMENT;
   \                     ??mbedtls_psa_key_agreement_ecdh_0: (+1)
   \       0x1E   0xF06F 0x0086      MVN      R0,#+134
   \       0x22   0xE063             B.N      ??mbedtls_psa_key_agreement_ecdh_2
    509              }
    510              mbedtls_ecp_keypair *ecp = NULL;
    511              status = mbedtls_psa_ecp_load_representation(
    512                  attributes->core.type,
    513                  attributes->core.bits,
    514                  key_buffer,
    515                  key_buffer_size,
    516                  &ecp);
   \                     ??mbedtls_psa_key_agreement_ecdh_1: (+1)
   \       0x24   0xAB02             ADD      R3,SP,#+8
   \       0x26   0x9300             STR      R3,[SP, #+0]
   \       0x28   0x2500             MOVS     R5,#+0
   \       0x2A   0x4613             MOV      R3,R2
   \       0x2C   0x9502             STR      R5,[SP, #+8]
   \       0x2E   0x460A             MOV      R2,R1
   \       0x30   0x8841             LDRH     R1,[R0, #+2]
   \       0x32   0x4620             MOV      R0,R4
   \       0x34   0x.... 0x....      BL       mbedtls_psa_ecp_load_representation
    517              if (status != PSA_SUCCESS) {
   \       0x38   0x2800             CMP      R0,#+0
   \       0x3A   0xD157             BNE.N    ??mbedtls_psa_key_agreement_ecdh_2
    518                  return status;
    519              }
    520              mbedtls_ecp_keypair *their_key = NULL;
   \       0x3C   0x2200             MOVS     R2,#+0
   \       0x3E   0x9203             STR      R2,[SP, #+12]
    521              mbedtls_ecdh_context ecdh;
    522              size_t bits = 0;
   \       0x40   0x9204             STR      R2,[SP, #+16]
    523              psa_ecc_family_t curve = mbedtls_ecc_group_to_psa(ecp->grp.id, &bits);
   \       0x42   0x9A02             LDR      R2,[SP, #+8]
   \       0x44   0x9C35             LDR      R4,[SP, #+212]
   \       0x46   0x9D34             LDR      R5,[SP, #+208]
   \       0x48   0x7810             LDRB     R0,[R2, #+0]
   \       0x4A   0xA904             ADD      R1,SP,#+16
   \       0x4C   0x.... 0x....      BL       mbedtls_ecc_group_to_psa
   \       0x50   0x4606             MOV      R6,R0
    524              mbedtls_ecdh_init(&ecdh);
   \       0x52   0xA805             ADD      R0,SP,#+20
   \       0x54   0x.... 0x....      BL       mbedtls_ecdh_init
    525          
    526              status = mbedtls_psa_ecp_load_representation(
    527                  PSA_KEY_TYPE_ECC_PUBLIC_KEY(curve),
    528                  bits,
    529                  peer_key,
    530                  peer_key_length,
    531                  &their_key);
   \       0x58   0xA803             ADD      R0,SP,#+12
   \       0x5A   0x9904             LDR      R1,[SP, #+16]
   \       0x5C   0x9000             STR      R0,[SP, #+0]
   \       0x5E   0x4623             MOV      R3,R4
   \       0x60   0x462A             MOV      R2,R5
   \       0x62   0xF446 0x4082      ORR      R0,R6,#0x4100
   \       0x66   0x.... 0x....      BL       mbedtls_psa_ecp_load_representation
   \       0x6A   0x0004             MOVS     R4,R0
   \       0x6C   0x9D36             LDR      R5,[SP, #+216]
   \       0x6E   0x9E37             LDR      R6,[SP, #+220]
    532              if (status != PSA_SUCCESS) {
   \       0x70   0xD127             BNE.N    ??mbedtls_psa_key_agreement_ecdh_3
    533                  goto exit;
    534              }
    535          
    536              status = mbedtls_to_psa_error(
    537                  mbedtls_ecdh_get_params(&ecdh, their_key, MBEDTLS_ECDH_THEIRS));
   \       0x72   0x9903             LDR      R1,[SP, #+12]
   \       0x74   0x2201             MOVS     R2,#+1
   \       0x76   0xA805             ADD      R0,SP,#+20
   \       0x78   0x.... 0x....      BL       mbedtls_ecdh_get_params
   \       0x7C   0x.... 0x....      BL       mbedtls_to_psa_error
   \       0x80   0x0004             MOVS     R4,R0
    538              if (status != PSA_SUCCESS) {
   \       0x82   0xD11E             BNE.N    ??mbedtls_psa_key_agreement_ecdh_3
    539                  goto exit;
    540              }
    541              status = mbedtls_to_psa_error(
    542                  mbedtls_ecdh_get_params(&ecdh, ecp, MBEDTLS_ECDH_OURS));
   \       0x84   0x9902             LDR      R1,[SP, #+8]
   \       0x86   0x2200             MOVS     R2,#+0
   \       0x88   0xA805             ADD      R0,SP,#+20
   \       0x8A   0x.... 0x....      BL       mbedtls_ecdh_get_params
   \       0x8E   0x.... 0x....      BL       mbedtls_to_psa_error
   \       0x92   0x0004             MOVS     R4,R0
    543              if (status != PSA_SUCCESS) {
   \       0x94   0xD115             BNE.N    ??mbedtls_psa_key_agreement_ecdh_3
   \       0x96   0x9F38             LDR      R7,[SP, #+224]
    544                  goto exit;
    545              }
    546          
    547              status = mbedtls_to_psa_error(
    548                  mbedtls_ecdh_calc_secret(&ecdh,
    549                                           shared_secret_length,
    550                                           shared_secret, shared_secret_size,
    551                                           mbedtls_psa_get_random,
    552                                           MBEDTLS_PSA_RANDOM_STATE));
   \       0x98   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_9: (+1)
   \       0x9C   0x4633             MOV      R3,R6
   \       0x9E   0x462A             MOV      R2,R5
   \       0xA0   0x4639             MOV      R1,R7
   \       0xA2   0xA805             ADD      R0,SP,#+20
   \       0xA4   0x.... 0x....      BL       mbedtls_ecdh_calc_secret
   \       0xA8   0x.... 0x....      BL       mbedtls_to_psa_error
   \       0xAC   0x0004             MOVS     R4,R0
    553              if (status != PSA_SUCCESS) {
   \       0xAE   0xD108             BNE.N    ??mbedtls_psa_key_agreement_ecdh_3
    554                  goto exit;
    555              }
    556              if (PSA_BITS_TO_BYTES(bits) != *shared_secret_length) {
   \       0xB0   0x9804             LDR      R0,[SP, #+16]
   \       0xB2   0x6839             LDR      R1,[R7, #+0]
   \       0xB4   0x1DC0             ADDS     R0,R0,#+7
   \       0xB6   0x08C0             LSRS     R0,R0,#+3
   \       0xB8   0x4288             CMP      R0,R1
   \       0xBA   0xD007             BEQ.N    ??mbedtls_psa_key_agreement_ecdh_4
    557                  status = PSA_ERROR_CORRUPTION_DETECTED;
   \       0xBC   0xF06F 0x0496      MVN      R4,#+150
   \       0xC0   0xE000             B.N      ??mbedtls_psa_key_agreement_ecdh_5
    558              }
    559          exit:
    560              if (status != PSA_SUCCESS) {
   \                     ??mbedtls_psa_key_agreement_ecdh_3: (+1)
   \       0xC2   0xB11C             CBZ.N    R4,??mbedtls_psa_key_agreement_ecdh_4
    561                  mbedtls_platform_zeroize(shared_secret, shared_secret_size);
   \                     ??mbedtls_psa_key_agreement_ecdh_5: (+1)
   \       0xC4   0x4631             MOV      R1,R6
   \       0xC6   0x4628             MOV      R0,R5
   \       0xC8   0x.... 0x....      BL       mbedtls_platform_zeroize
    562              }
    563              mbedtls_ecdh_free(&ecdh);
   \                     ??mbedtls_psa_key_agreement_ecdh_4: (+1)
   \       0xCC   0xA805             ADD      R0,SP,#+20
   \       0xCE   0x.... 0x....      BL       mbedtls_ecdh_free
    564              mbedtls_ecp_keypair_free(their_key);
   \       0xD2   0x9803             LDR      R0,[SP, #+12]
   \       0xD4   0x.... 0x....      BL       mbedtls_ecp_keypair_free
    565              mbedtls_free(their_key);
   \       0xD8   0x9803             LDR      R0,[SP, #+12]
   \       0xDA   0x.... 0x....      BL       sl_free
    566              mbedtls_ecp_keypair_free(ecp);
   \       0xDE   0x9802             LDR      R0,[SP, #+8]
   \       0xE0   0x.... 0x....      BL       mbedtls_ecp_keypair_free
    567              mbedtls_free(ecp);
   \       0xE4   0x9802             LDR      R0,[SP, #+8]
   \       0xE6   0x.... 0x....      BL       sl_free
    568              return status;
   \       0xEA   0x4620             MOV      R0,R4
   \                     ??mbedtls_psa_key_agreement_ecdh_2: (+1)
   \       0xEC   0xB02F             ADD      SP,SP,#+188
   \       0xEE   0xBDF0             POP      {R4-R7,PC}
    569          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \        0x0   0xFFFF'CF00        DC32     0xffffcf00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \        0x0   0x....'....        DC32     mbedtls_psa_get_random

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \        0x0   0xFFFF'B100        DC32     0xffffb100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \        0x0   0xFFFF'B180        DC32     0xffffb180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \        0x0   0x0902'0000        DC32     0x9020000
    570          #endif /* MBEDTLS_PSA_BUILTIN_ALG_ECDH */
    571          
    572          
    573          #endif /* MBEDTLS_PSA_CRYPTO_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      56   mbedtls_psa_ecdsa_sign_hash
        56   -> mbedtls_ecdsa_sign
        56   -> mbedtls_ecp_keypair_free
        56   -> mbedtls_mpi_free
        56   -> mbedtls_mpi_init
        56   -> mbedtls_mpi_write_binary
        56   -> mbedtls_psa_ecp_load_representation
        56   -> mbedtls_to_psa_error
        56   -> sl_free
      48   mbedtls_psa_ecdsa_verify_hash
        48   -> mbedtls_ecdsa_verify
        48   -> mbedtls_ecp_keypair_free
        48   -> mbedtls_mpi_free
        48   -> mbedtls_mpi_init
        48   -> mbedtls_mpi_read_binary
        48   -> mbedtls_psa_ecp_load_public_part
        48   -> mbedtls_psa_ecp_load_representation
        48   -> mbedtls_to_psa_error
        48   -> sl_free
      32   mbedtls_psa_ecp_export_key
        32   -> __aeabi_memclr
        32   -> mbedtls_ecp_is_zero
        32   -> mbedtls_ecp_mul
        32   -> mbedtls_ecp_point_write_binary
        32   -> mbedtls_ecp_write_key
        32   -> mbedtls_to_psa_error
      24   mbedtls_psa_ecp_export_public_key
        24   -> mbedtls_ecp_keypair_free
        24   -> mbedtls_psa_ecp_export_key
        24   -> mbedtls_psa_ecp_load_representation
        24   -> sl_free
     152   mbedtls_psa_ecp_generate_key
       152   -> mbedtls_ecc_group_of_psa
       152   -> mbedtls_ecp_curve_info_from_grp_id
       152   -> mbedtls_ecp_gen_key
       152   -> mbedtls_ecp_keypair_free
       152   -> mbedtls_ecp_keypair_init
       152   -> mbedtls_ecp_write_key
       152   -> mbedtls_to_psa_error
      24   mbedtls_psa_ecp_import_key
        24   -> mbedtls_ecp_keypair_free
        24   -> mbedtls_psa_ecp_export_key
        24   -> mbedtls_psa_ecp_load_representation
        24   -> sl_free
      24   mbedtls_psa_ecp_load_public_part
        24   -> mbedtls_ecp_is_zero
        24   -> mbedtls_ecp_mul
         0   -> mbedtls_to_psa_error
      40   mbedtls_psa_ecp_load_representation
        40   -> mbedtls_ecc_group_of_psa
        40   -> mbedtls_ecp_check_pubkey
        40   -> mbedtls_ecp_group_load
        40   -> mbedtls_ecp_keypair_free
        40   -> mbedtls_ecp_keypair_init
        40   -> mbedtls_ecp_point_read_binary
        40   -> mbedtls_ecp_read_key
        40   -> mbedtls_to_psa_error
        40   -> sl_calloc
        40   -> sl_free
     208   mbedtls_psa_key_agreement_ecdh
       208   -> mbedtls_ecc_group_to_psa
       208   -> mbedtls_ecdh_calc_secret
       208   -> mbedtls_ecdh_free
       208   -> mbedtls_ecdh_get_params
       208   -> mbedtls_ecdh_init
       208   -> mbedtls_ecp_keypair_free
       208   -> mbedtls_platform_zeroize
       208   -> mbedtls_psa_ecp_load_representation
       208   -> mbedtls_to_psa_error
       208   -> sl_free


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
      12  ?Subroutine0
       8  ?Subroutine1
      12  ?Subroutine2
      18  ?Subroutine3
      10  ?Subroutine4
     166  mbedtls_psa_ecdsa_sign_hash
     162  mbedtls_psa_ecdsa_verify_hash
     138  mbedtls_psa_ecp_export_key
      72  mbedtls_psa_ecp_export_public_key
     134  mbedtls_psa_ecp_generate_key
      86  mbedtls_psa_ecp_import_key
      38  mbedtls_psa_ecp_load_public_part
     246  mbedtls_psa_ecp_load_representation
     240  mbedtls_psa_key_agreement_ecdh

 
 1'362 bytes in section .text
 
 1'362 bytes of CODE memory

Errors: none
Warnings: none
