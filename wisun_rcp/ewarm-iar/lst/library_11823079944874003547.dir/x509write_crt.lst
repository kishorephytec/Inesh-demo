###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         27/Nov/2024  12:18:02
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\x509write_crt.c
#    Command line                 =
#        -f
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir\x509write_crt.o.rsp
#        (C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\x509write_crt.c
#        -D EFR32FG28B322F1024IM48=1 -D
#        configNUM_SDK_THREAD_LOCAL_STORAGE_POINTERS=2 -D
#        SL_COMPONENT_CATALOG_PRESENT=1 -D
#        MBEDTLS_CONFIG_FILE=<sl_mbedtls_config.h> -D
#        MBEDTLS_PSA_CRYPTO_CONFIG_FILE=<psa_crypto_config.h> -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -D
#        RTT_USE_ASM=0 -D MBED_CONF_MBED_TRACE_ENABLE=1 -D
#        MBED_CONF_NANOSTACK_CONFIGURATION=ws_router -D
#        MBED_TRACE_MAX_LEVEL=TRACE_ACTIVE_LEVEL_ALL -D DEBUG_EFM_USER=1 -D
#        HAVE_LFN=1 -D HAVE_LFN_PARENT=1 -lC
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\lst\library_11823079944874003547.dir
#        --diag_suppress Pa050 -o
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir
#        --debug --endian=little --cpu=Cortex-M33 --cmse --cmse -e
#        --fpu=VFPv5_sp --dlib_config "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\
#        -I C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\autogen\ -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\config\ -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\config\rail\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\Device\SiliconLabs\EFR32FG28\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\common\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\CMSIS\Core\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\CMSIS\RTOS2\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\device_init\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\dmadrv\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\common\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emlib\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\cmsis\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\kernel\include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\kernel\portable\IAR\ARM_CM33_NTZ\non_secure\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\iostream\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\config\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\config\preset\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\nvm3\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\peripheral\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_psa_driver\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\common\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\wmbus\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\sidewalk\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\efr32xg28\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\rail_util_pti\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\src\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\segger\systemview\SEGGER\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\silicon_labs\silabs_core\memory_manager\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\common\toolchain\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\system\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\ns_list\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\nanostack\nanostack-libservice\mbed-client-libservice\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\sleeptimer\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\app\wisun_rcp\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\inc\socket\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\src\
#        -Ohz --use_c++_inline) --dependencies=n
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir\x509write_crt.o.iar_deps
#    Locale                       =  C
#    List file                    =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\lst\library_11823079944874003547.dir\x509write_crt.lst
#    Object file                  =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir\x509write_crt.o
#    Runtime model:                  
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_file_descriptor     =  0
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#
###############################################################################

C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\x509write_crt.c
      1          /*
      2           *  X.509 certificate writing
      3           *
      4           *  Copyright The Mbed TLS Contributors
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           */
     19          /*
     20           * References:
     21           * - certificates: RFC 5280, updated by RFC 6818
     22           * - CSRs: PKCS#10 v1.7 aka RFC 2986
     23           * - attributes: PKCS#9 v2.0 aka RFC 2985
     24           */
     25          
     26          #include "common.h"

   \                                 In section .text, align 2
   \   __vfp void mbedtls_put_unaligned_uint16(void *, uint16_t)
   \                     mbedtls_put_unaligned_uint16: (+1)
   \        0x0   0xB402             PUSH     {R1}
   \        0x2   0xF89D 0x2000      LDRB     R2,[SP, #+0]
   \        0x6   0x7002             STRB     R2,[R0, #+0]
   \        0x8   0xF89D 0x2001      LDRB     R2,[SP, #+1]
   \        0xC   0x7042             STRB     R2,[R0, #+1]
   \        0xE   0xB001             ADD      SP,SP,#+4
   \       0x10   0x4770             BX       LR

   \                                 In section .text, align 4, keep-with-next
   \   static __absolute uint16_t const mbedtls_byte_order_detector
   \                     mbedtls_byte_order_detector:
   \        0x0   0x0100             DC16 256
     27          
     28          #if defined(MBEDTLS_X509_CRT_WRITE_C)
     29          
     30          #include "mbedtls/x509_crt.h"
     31          #include "mbedtls/asn1write.h"
     32          #include "mbedtls/error.h"
     33          #include "mbedtls/oid.h"
     34          #include "mbedtls/platform.h"
     35          #include "mbedtls/platform_util.h"
     36          #include "mbedtls/md.h"
     37          
     38          #include <string.h>
     39          #include <stdint.h>
     40          
     41          #if defined(MBEDTLS_PEM_WRITE_C)
     42          #include "mbedtls/pem.h"
     43          #endif /* MBEDTLS_PEM_WRITE_C */
     44          
     45          #if defined(MBEDTLS_USE_PSA_CRYPTO)
     46          #include "psa/crypto.h"
     47          #include "psa_util_internal.h"
     48          #include "md_psa.h"
     49          #endif /* MBEDTLS_USE_PSA_CRYPTO */
     50          

   \                                 In section .text, align 2, keep-with-next
     51          void mbedtls_x509write_crt_init(mbedtls_x509write_cert *ctx)
     52          {
   \                     mbedtls_x509write_crt_init: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
     53              memset(ctx, 0, sizeof(mbedtls_x509write_cert));
   \        0x4   0x2154             MOVS     R1,#+84
   \        0x6   0x.... 0x....      BL       __aeabi_memclr4
     54          
     55              ctx->version = MBEDTLS_X509_CRT_VERSION_3;
   \        0xA   0x2202             MOVS     R2,#+2
   \        0xC   0x6022             STR      R2,[R4, #+0]
     56          }
   \        0xE   0xBD10             POP      {R4,PC}
     57          

   \                                 In section .text, align 2, keep-with-next
     58          void mbedtls_x509write_crt_free(mbedtls_x509write_cert *ctx)
     59          {
   \                     mbedtls_x509write_crt_free: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
     60              mbedtls_asn1_free_named_data_list(&ctx->subject);
   \        0x4   0xF104 0x0024      ADD      R0,R4,#+36
   \        0x8   0x.... 0x....      BL       mbedtls_asn1_free_named_data_list
     61              mbedtls_asn1_free_named_data_list(&ctx->issuer);
   \        0xC   0xF104 0x0028      ADD      R0,R4,#+40
   \       0x10   0x.... 0x....      BL       mbedtls_asn1_free_named_data_list
     62              mbedtls_asn1_free_named_data_list(&ctx->extensions);
   \       0x14   0xF104 0x0050      ADD      R0,R4,#+80
   \       0x18   0x.... 0x....      BL       mbedtls_asn1_free_named_data_list
     63          
     64              mbedtls_platform_zeroize(ctx, sizeof(mbedtls_x509write_cert));
   \       0x1C   0x4620             MOV      R0,R4
   \       0x1E   0x2154             MOVS     R1,#+84
   \       0x20   0xE8BD 0x4010      POP      {R4,LR}
   \       0x24   0x.... 0x....      B.W      mbedtls_platform_zeroize
     65          }
     66          

   \                                 In section .text, align 2, keep-with-next
     67          void mbedtls_x509write_crt_set_version(mbedtls_x509write_cert *ctx,
     68                                                 int version)
     69          {
     70              ctx->version = version;
   \                     mbedtls_x509write_crt_set_version: (+1)
   \        0x0   0x6001             STR      R1,[R0, #+0]
     71          }
   \        0x2   0x4770             BX       LR
     72          

   \                                 In section .text, align 2, keep-with-next
     73          void mbedtls_x509write_crt_set_md_alg(mbedtls_x509write_cert *ctx,
     74                                                mbedtls_md_type_t md_alg)
     75          {
     76              ctx->md_alg = md_alg;
   \                     mbedtls_x509write_crt_set_md_alg: (+1)
   \        0x0   0xF880 0x102C      STRB     R1,[R0, #+44]
     77          }
   \        0x4   0x4770             BX       LR
     78          

   \                                 In section .text, align 2, keep-with-next
     79          void mbedtls_x509write_crt_set_subject_key(mbedtls_x509write_cert *ctx,
     80                                                     mbedtls_pk_context *key)
     81          {
     82              ctx->subject_key = key;
   \                     mbedtls_x509write_crt_set_subject_key: (+1)
   \        0x0   0x61C1             STR      R1,[R0, #+28]
     83          }
   \        0x2   0x4770             BX       LR
     84          

   \                                 In section .text, align 2, keep-with-next
     85          void mbedtls_x509write_crt_set_issuer_key(mbedtls_x509write_cert *ctx,
     86                                                    mbedtls_pk_context *key)
     87          {
     88              ctx->issuer_key = key;
   \                     mbedtls_x509write_crt_set_issuer_key: (+1)
   \        0x0   0x6201             STR      R1,[R0, #+32]
     89          }
   \        0x2   0x4770             BX       LR
     90          

   \                                 In section .text, align 2, keep-with-next
     91          int mbedtls_x509write_crt_set_subject_name(mbedtls_x509write_cert *ctx,
     92                                                     const char *subject_name)
     93          {
     94              return mbedtls_x509_string_to_names(&ctx->subject, subject_name);
   \                     mbedtls_x509write_crt_set_subject_name: (+1)
   \        0x0   0x3024             ADDS     R0,R0,#+36
   \        0x2   0x.... 0x....      B.W      mbedtls_x509_string_to_names
     95          }
     96          

   \                                 In section .text, align 2, keep-with-next
     97          int mbedtls_x509write_crt_set_issuer_name(mbedtls_x509write_cert *ctx,
     98                                                    const char *issuer_name)
     99          {
    100              return mbedtls_x509_string_to_names(&ctx->issuer, issuer_name);
   \                     mbedtls_x509write_crt_set_issuer_name: (+1)
   \        0x0   0x3028             ADDS     R0,R0,#+40
   \        0x2   0x.... 0x....      B.W      mbedtls_x509_string_to_names
    101          }
    102          
    103          #if defined(MBEDTLS_BIGNUM_C) && !defined(MBEDTLS_DEPRECATED_REMOVED)

   \                                 In section .text, align 2, keep-with-next
    104          int mbedtls_x509write_crt_set_serial(mbedtls_x509write_cert *ctx,
    105                                               const mbedtls_mpi *serial)
    106          {
   \                     mbedtls_x509write_crt_set_serial: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460C             MOV      R4,R1
    107              int ret;
    108              size_t tmp_len;
    109          
    110              /* Ensure that the MPI value fits into the buffer */
    111              tmp_len = mbedtls_mpi_size(serial);
   \        0x6   0x4620             MOV      R0,R4
   \        0x8   0x.... 0x....      BL       mbedtls_mpi_size
    112              if (tmp_len > MBEDTLS_X509_RFC5280_MAX_SERIAL_LEN) {
   \        0xC   0x2815             CMP      R0,#+21
   \        0xE   0xD302             BCC.N    ??mbedtls_x509write_crt_set_serial_0
    113                  return MBEDTLS_ERR_X509_BAD_INPUT_DATA;
   \       0x10   0x.... 0x....      LDR.W    R0,??DataTable17
   \       0x14   0xBD32             POP      {R1,R4,R5,PC}
    114              }
    115          
    116              ctx->serial_len = tmp_len;
   \                     ??mbedtls_x509write_crt_set_serial_0: (+1)
   \       0x16   0x61A8             STR      R0,[R5, #+24]
    117          
    118              ret = mbedtls_mpi_write_binary(serial, ctx->serial, tmp_len);
   \       0x18   0x4602             MOV      R2,R0
   \       0x1A   0x1D29             ADDS     R1,R5,#+4
   \       0x1C   0x4620             MOV      R0,R4
   \       0x1E   0x.... 0x....      BL       mbedtls_mpi_write_binary
    119              if (ret < 0) {
   \       0x22   0x2800             CMP      R0,#+0
   \       0x24   0xBFC8             IT       GT
   \       0x26   0x2000             MOVGT    R0,#+0
   \       0x28   0xBD32             POP      {R1,R4,R5,PC}
    120                  return ret;
    121              }
    122          
    123              return 0;
    124          }
    125          #endif // MBEDTLS_BIGNUM_C && !MBEDTLS_DEPRECATED_REMOVED
    126          

   \                                 In section .text, align 2, keep-with-next
    127          int mbedtls_x509write_crt_set_serial_raw(mbedtls_x509write_cert *ctx,
    128                                                   unsigned char *serial, size_t serial_len)
    129          {
   \                     mbedtls_x509write_crt_set_serial_raw: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    130              if (serial_len > MBEDTLS_X509_RFC5280_MAX_SERIAL_LEN) {
   \        0x2   0x2A15             CMP      R2,#+21
   \        0x4   0xD302             BCC.N    ??mbedtls_x509write_crt_set_serial_raw_0
    131                  return MBEDTLS_ERR_X509_BAD_INPUT_DATA;
   \        0x6   0x.... 0x....      LDR.W    R0,??DataTable17
   \        0xA   0xBD02             POP      {R1,PC}
    132              }
    133          
    134              ctx->serial_len = serial_len;
   \                     ??mbedtls_x509write_crt_set_serial_raw_0: (+1)
   \        0xC   0x6182             STR      R2,[R0, #+24]
    135              memcpy(ctx->serial, serial, serial_len);
   \        0xE   0x1D00             ADDS     R0,R0,#+4
   \       0x10   0x.... 0x....      BL       __aeabi_memcpy
    136          
    137              return 0;
   \       0x14   0x2000             MOVS     R0,#+0
   \       0x16   0xBD02             POP      {R1,PC}
    138          }
    139          

   \                                 In section .text, align 2, keep-with-next
    140          int mbedtls_x509write_crt_set_validity(mbedtls_x509write_cert *ctx,
    141                                                 const char *not_before,
    142                                                 const char *not_after)
    143          {
   \                     mbedtls_x509write_crt_set_validity: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4606             MOV      R6,R0
   \        0x4   0x460C             MOV      R4,R1
   \        0x6   0x4615             MOV      R5,R2
    144              if (strlen(not_before) != MBEDTLS_X509_RFC5280_UTC_TIME_LEN - 1 ||
    145                  strlen(not_after)  != MBEDTLS_X509_RFC5280_UTC_TIME_LEN - 1) {
   \        0x8   0x4620             MOV      R0,R4
   \        0xA   0x.... 0x....      BL       strlen
   \        0xE   0x280E             CMP      R0,#+14
   \       0x10   0xD104             BNE.N    ??mbedtls_x509write_crt_set_validity_0
   \       0x12   0x4628             MOV      R0,R5
   \       0x14   0x.... 0x....      BL       strlen
   \       0x18   0x280E             CMP      R0,#+14
   \       0x1A   0xD002             BEQ.N    ??mbedtls_x509write_crt_set_validity_1
    146                  return MBEDTLS_ERR_X509_BAD_INPUT_DATA;
   \                     ??mbedtls_x509write_crt_set_validity_0: (+1)
   \       0x1C   0x.... 0x....      LDR.W    R0,??DataTable17
   \       0x20   0xBD70             POP      {R4-R6,PC}
    147              }
    148              strncpy(ctx->not_before, not_before, MBEDTLS_X509_RFC5280_UTC_TIME_LEN);
   \                     ??mbedtls_x509write_crt_set_validity_1: (+1)
   \       0x22   0x220F             MOVS     R2,#+15
   \       0x24   0x4621             MOV      R1,R4
   \       0x26   0xF106 0x002D      ADD      R0,R6,#+45
   \       0x2A   0x.... 0x....      BL       strncpy
    149              strncpy(ctx->not_after, not_after, MBEDTLS_X509_RFC5280_UTC_TIME_LEN);
   \       0x2E   0x220F             MOVS     R2,#+15
   \       0x30   0x4629             MOV      R1,R5
   \       0x32   0xF106 0x003D      ADD      R0,R6,#+61
   \       0x36   0x.... 0x....      BL       strncpy
    150              ctx->not_before[MBEDTLS_X509_RFC5280_UTC_TIME_LEN - 1] = 'Z';
   \       0x3A   0xF106 0x003B      ADD      R0,R6,#+59
   \       0x3E   0x225A             MOVS     R2,#+90
   \       0x40   0x7002             STRB     R2,[R0, #+0]
    151              ctx->not_after[MBEDTLS_X509_RFC5280_UTC_TIME_LEN - 1] = 'Z';
   \       0x42   0x7402             STRB     R2,[R0, #+16]
    152          
    153              return 0;
   \       0x44   0x2000             MOVS     R0,#+0
   \       0x46   0xBD70             POP      {R4-R6,PC}
    154          }
    155          

   \                                 In section .text, align 2, keep-with-next
    156          int mbedtls_x509write_crt_set_subject_alternative_name(mbedtls_x509write_cert *ctx,
    157                                                                 const mbedtls_x509_san_list *san_list)
    158          {
    159              return mbedtls_x509_write_set_san_common(&ctx->extensions, san_list);
   \                     mbedtls_x509write_crt_set_subject_alternative_name: (+1)
   \        0x0   0x3050             ADDS     R0,R0,#+80
   \        0x2   0x.... 0x....      B.W      mbedtls_x509_write_set_san_common
    160          }
    161          
    162          

   \                                 In section .text, align 2, keep-with-next
    163          int mbedtls_x509write_crt_set_extension(mbedtls_x509write_cert *ctx,
    164                                                  const char *oid, size_t oid_len,
    165                                                  int critical,
    166                                                  const unsigned char *val, size_t val_len)
    167          {
   \                     mbedtls_x509write_crt_set_extension: (+1)
   \        0x0   0xB53E             PUSH     {R1-R5,LR}
    168              return mbedtls_x509_set_extension(&ctx->extensions, oid, oid_len,
    169                                                critical, val, val_len);
   \        0x2   0x9D07             LDR      R5,[SP, #+28]
   \        0x4   0x9C06             LDR      R4,[SP, #+24]
   \        0x6   0x3050             ADDS     R0,R0,#+80
   \        0x8   0x9501             STR      R5,[SP, #+4]
   \        0xA   0x9400             STR      R4,[SP, #+0]
   \        0xC   0x.... 0x....      BL       mbedtls_x509_set_extension
   \       0x10   0xBD3E             POP      {R1-R5,PC}
    170          }
    171          

   \                                 In section .text, align 2, keep-with-next
    172          int mbedtls_x509write_crt_set_basic_constraints(mbedtls_x509write_cert *ctx,
    173                                                          int is_ca, int max_pathlen)
    174          {
   \                     mbedtls_x509write_crt_set_basic_constraints: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0xB086             SUB      SP,SP,#+24
   \        0x4   0x4605             MOV      R5,R0
    175              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    176              unsigned char buf[9];
    177              unsigned char *c = buf + sizeof(buf);
   \        0x6   0xF10D 0x0015      ADD      R0,SP,#+21
   \        0xA   0x460C             MOV      R4,R1
   \        0xC   0x9002             STR      R0,[SP, #+8]
   \        0xE   0x4617             MOV      R7,R2
    178              size_t len = 0;
    179          
    180              memset(buf, 0, sizeof(buf));
   \       0x10   0x2109             MOVS     R1,#+9
   \       0x12   0xA803             ADD      R0,SP,#+12
   \       0x14   0x2600             MOVS     R6,#+0
   \       0x16   0x.... 0x....      BL       __aeabi_memclr4
    181          
    182              if (is_ca && max_pathlen > 127) {
   \       0x1A   0xB1AC             CBZ.N    R4,??mbedtls_x509write_crt_set_basic_constraints_0
   \       0x1C   0x2F80             CMP      R7,#+128
   \       0x1E   0xBFA8             IT       GE
   \       0x20   0x.... 0x....      LDRGE.W  R0,??DataTable17
    183                  return MBEDTLS_ERR_X509_BAD_INPUT_DATA;
   \       0x24   0xDA26             BGE.N    ??mbedtls_x509write_crt_set_basic_constraints_1
    184              }
    185          
    186              if (is_ca) {
    187                  if (max_pathlen >= 0) {
   \       0x26   0x2F00             CMP      R7,#+0
   \       0x28   0xD406             BMI.N    ??mbedtls_x509write_crt_set_basic_constraints_2
    188                      MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_int(&c, buf,
    189                                                                       max_pathlen));
   \       0x2A   0x463A             MOV      R2,R7
   \       0x2C   0xA903             ADD      R1,SP,#+12
   \       0x2E   0xA802             ADD      R0,SP,#+8
   \       0x30   0x.... 0x....      BL       mbedtls_asn1_write_int
   \       0x34   0x0006             MOVS     R6,R0
   \       0x36   0xD41D             BMI.N    ??mbedtls_x509write_crt_set_basic_constraints_1
    190                  }
    191                  MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_bool(&c, buf, 1));
   \                     ??mbedtls_x509write_crt_set_basic_constraints_2: (+1)
   \       0x38   0x2201             MOVS     R2,#+1
   \       0x3A   0xA903             ADD      R1,SP,#+12
   \       0x3C   0xA802             ADD      R0,SP,#+8
   \       0x3E   0x.... 0x....      BL       mbedtls_asn1_write_bool
   \       0x42   0x2800             CMP      R0,#+0
   \       0x44   0xD416             BMI.N    ??mbedtls_x509write_crt_set_basic_constraints_1
   \       0x46   0x1986             ADDS     R6,R0,R6
    192              }
    193          
    194              MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_len(&c, buf, len));
   \                     ??mbedtls_x509write_crt_set_basic_constraints_0: (+1)
   \       0x48   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_10: (+1)
   \       0x4C   0x0007             MOVS     R7,R0
   \       0x4E   0xD411             BMI.N    ??mbedtls_x509write_crt_set_basic_constraints_1
    195              MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_tag(&c, buf,
    196                                                               MBEDTLS_ASN1_CONSTRUCTED |
    197                                                               MBEDTLS_ASN1_SEQUENCE));
   \       0x50   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_13: (+1)
   \       0x54   0x2800             CMP      R0,#+0
   \       0x56   0xD40D             BMI.N    ??mbedtls_x509write_crt_set_basic_constraints_1
   \       0x58   0x19BE             ADDS     R6,R7,R6
   \       0x5A   0x1986             ADDS     R6,R0,R6
    198          
    199              return
    200                  mbedtls_x509write_crt_set_extension(ctx, MBEDTLS_OID_BASIC_CONSTRAINTS,
    201                                                      MBEDTLS_OID_SIZE(MBEDTLS_OID_BASIC_CONSTRAINTS),
    202                                                      is_ca, buf + sizeof(buf) - len, len);
   \       0x5C   0x9601             STR      R6,[SP, #+4]
   \       0x5E   0xF10D 0x0015      ADD      R0,SP,#+21
   \       0x62   0x4276             RSBS     R6,R6,#+0
   \       0x64   0x4430             ADD      R0,R0,R6
   \       0x66   0x9000             STR      R0,[SP, #+0]
   \       0x68   0x4623             MOV      R3,R4
   \       0x6A   0x2203             MOVS     R2,#+3
   \       0x6C   0x....             ADR.N    R1,??DataTable16
   \       0x6E   0x4628             MOV      R0,R5
   \       0x70   0x.... 0x....      BL       mbedtls_x509write_crt_set_extension
   \                     ??mbedtls_x509write_crt_set_basic_constraints_1: (+1)
   \       0x74   0xB007             ADD      SP,SP,#+28
   \       0x76   0xBDF0             POP      {R4-R7,PC}
    203          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \        0x0   0x2230             MOVS     R2,#+48
   \                     ??Subroutine3_0: (+1)
   \        0x2   0xA903             ADD      R1,SP,#+12
   \        0x4   0xA802             ADD      R0,SP,#+8
   \        0x6   0x.... 0x....      B.W      mbedtls_asn1_write_tag

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \        0x0   0x4632             MOV      R2,R6
   \                     ??Subroutine2_0: (+1)
   \        0x2   0xA903             ADD      R1,SP,#+12
   \        0x4   0xA802             ADD      R0,SP,#+8
   \        0x6   0x.... 0x....      B.W      mbedtls_asn1_write_len
    204          
    205          #if defined(MBEDTLS_MD_CAN_SHA1)

   \                                 In section .text, align 2, keep-with-next
    206          static int mbedtls_x509write_crt_set_key_identifier(mbedtls_x509write_cert *ctx,
    207                                                              int is_ca,
    208                                                              unsigned char tag)
    209          {
   \                     mbedtls_x509write_crt_set_key_identifier: (+1)
   \        0x0   0xE92D 0x41F8      PUSH     {R3-R8,LR}
   \        0x4   0xB099             SUB      SP,SP,#+100
   \        0x6   0x4605             MOV      R5,R0
    210              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    211              unsigned char buf[MBEDTLS_MPI_MAX_SIZE * 2 + 20]; /* tag, length + 2xMPI */
    212              unsigned char *c = buf + sizeof(buf);
   \        0x8   0xA819             ADD      R0,SP,#+100
   \        0xA   0x460C             MOV      R4,R1
   \        0xC   0x9002             STR      R0,[SP, #+8]
   \        0xE   0x4616             MOV      R6,R2
    213              size_t len = 0;
    214          #if defined(MBEDTLS_USE_PSA_CRYPTO)
    215              psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;
    216              size_t hash_length;
    217          #endif /* MBEDTLS_USE_PSA_CRYPTO */
    218          
    219              memset(buf, 0, sizeof(buf));
   \       0x10   0x2154             MOVS     R1,#+84
   \       0x12   0xA804             ADD      R0,SP,#+16
   \       0x14   0x.... 0x....      BL       __aeabi_memclr4
    220              MBEDTLS_ASN1_CHK_ADD(len,
    221                                   mbedtls_pk_write_pubkey(&c,
    222                                                           buf,
    223                                                           is_ca ?
    224                                                           ctx->issuer_key :
    225                                                           ctx->subject_key));
   \       0x18   0x2C00             CMP      R4,#+0
   \       0x1A   0xBF14             ITE      NE
   \       0x1C   0x6A2A             LDRNE    R2,[R5, #+32]
   \       0x1E   0x69EA             LDREQ    R2,[R5, #+28]
   \       0x20   0xA904             ADD      R1,SP,#+16
   \       0x22   0xA802             ADD      R0,SP,#+8
   \       0x24   0x.... 0x....      BL       mbedtls_pk_write_pubkey
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD440             BMI.N    ??mbedtls_x509write_crt_set_key_identifier_0
    226          
    227          
    228          #if defined(MBEDTLS_USE_PSA_CRYPTO)
    229              status = psa_hash_compute(PSA_ALG_SHA_1,
    230                                        buf + sizeof(buf) - len,
    231                                        len,
    232                                        buf + sizeof(buf) - 20,
    233                                        20,
    234                                        &hash_length);
    235              if (status != PSA_SUCCESS) {
   \       0x2C   0xAA03             ADD      R2,SP,#+12
   \       0x2E   0x9201             STR      R2,[SP, #+4]
   \       0x30   0x2114             MOVS     R1,#+20
   \       0x32   0x4602             MOV      R2,R0
   \       0x34   0xAF19             ADD      R7,SP,#+100
   \       0x36   0x9100             STR      R1,[SP, #+0]
   \       0x38   0x4240             RSBS     R0,R0,#+0
   \       0x3A   0x1839             ADDS     R1,R7,R0
   \       0x3C   0xAB14             ADD      R3,SP,#+80
   \       0x3E   0x.... 0x....      LDR.W    R0,??DataTable17_1
   \       0x42   0x.... 0x....      BL       psa_hash_compute
   \       0x46   0xB110             CBZ.N    R0,??mbedtls_x509write_crt_set_key_identifier_1
    236                  return MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED;
   \       0x48   0xF06F 0x006F      MVN      R0,#+111
   \       0x4C   0xE02F             B.N      ??mbedtls_x509write_crt_set_key_identifier_0
    237              }
    238          #else
    239              ret = mbedtls_md(mbedtls_md_info_from_type(MBEDTLS_MD_SHA1),
    240                               buf + sizeof(buf) - len, len,
    241                               buf + sizeof(buf) - 20);
    242              if (ret != 0) {
    243                  return ret;
    244              }
    245          #endif /* MBEDTLS_USE_PSA_CRYPTO */
    246          
    247              c = buf + sizeof(buf) - 20;
   \                     ??mbedtls_x509write_crt_set_key_identifier_1: (+1)
   \       0x4E   0xA814             ADD      R0,SP,#+80
   \       0x50   0x9002             STR      R0,[SP, #+8]
    248              len = 20;
    249          
    250              MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_len(&c, buf, len));
   \       0x52   0x2214             MOVS     R2,#+20
   \       0x54   0xA904             ADD      R1,SP,#+16
   \       0x56   0xA802             ADD      R0,SP,#+8
   \       0x58   0x.... 0x....      BL       mbedtls_asn1_write_len
   \       0x5C   0x4680             MOV      R8,R0
   \       0x5E   0xF1B8 0x0F00      CMP      R8,#+0
   \       0x62   0xD424             BMI.N    ??mbedtls_x509write_crt_set_key_identifier_0
    251              MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_tag(&c, buf, tag));
   \       0x64   0x4632             MOV      R2,R6
   \       0x66   0xA904             ADD      R1,SP,#+16
   \       0x68   0xA802             ADD      R0,SP,#+8
   \       0x6A   0x.... 0x....      BL       mbedtls_asn1_write_tag
   \       0x6E   0x0006             MOVS     R6,R0
   \       0x70   0xD41D             BMI.N    ??mbedtls_x509write_crt_set_key_identifier_0
   \       0x72   0xEB00 0x0608      ADD      R6,R0,R8
   \       0x76   0x3614             ADDS     R6,R6,#+20
    252          
    253              if (is_ca) { // writes AuthorityKeyIdentifier sequence
   \       0x78   0xB19C             CBZ.N    R4,??mbedtls_x509write_crt_set_key_identifier_2
    254                  MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_len(&c, buf, len));
   \       0x7A   0x4632             MOV      R2,R6
   \       0x7C   0xA904             ADD      R1,SP,#+16
   \       0x7E   0xA802             ADD      R0,SP,#+8
   \       0x80   0x.... 0x....      BL       mbedtls_asn1_write_len
   \       0x84   0x0004             MOVS     R4,R0
   \       0x86   0xD412             BMI.N    ??mbedtls_x509write_crt_set_key_identifier_0
    255                  MBEDTLS_ASN1_CHK_ADD(len,
    256                                       mbedtls_asn1_write_tag(&c,
    257                                                              buf,
    258                                                              MBEDTLS_ASN1_CONSTRUCTED |
    259                                                              MBEDTLS_ASN1_SEQUENCE));
   \       0x88   0x2230             MOVS     R2,#+48
   \       0x8A   0xA904             ADD      R1,SP,#+16
   \       0x8C   0xA802             ADD      R0,SP,#+8
   \       0x8E   0x.... 0x....      BL       mbedtls_asn1_write_tag
   \       0x92   0x2800             CMP      R0,#+0
   \       0x94   0xD40B             BMI.N    ??mbedtls_x509write_crt_set_key_identifier_0
   \       0x96   0x19A6             ADDS     R6,R4,R6
   \       0x98   0x1986             ADDS     R6,R0,R6
    260              }
    261          
    262              if (is_ca) {
    263                  return mbedtls_x509write_crt_set_extension(ctx,
    264                                                             MBEDTLS_OID_AUTHORITY_KEY_IDENTIFIER,
    265                                                             MBEDTLS_OID_SIZE(
    266                                                                 MBEDTLS_OID_AUTHORITY_KEY_IDENTIFIER),
    267                                                             0, buf + sizeof(buf) - len, len);
   \       0x9A   0x.... 0x....      BL       ?Subroutine4
    268              } else {
   \                     ??CrossCallReturnLabel_14: (+1)
   \       0x9E   0x....             ADR.N    R1,??DataTable16_1
   \       0xA0   0xE002             B.N      ??mbedtls_x509write_crt_set_key_identifier_3
    269                  return mbedtls_x509write_crt_set_extension(ctx,
    270                                                             MBEDTLS_OID_SUBJECT_KEY_IDENTIFIER,
    271                                                             MBEDTLS_OID_SIZE(
    272                                                                 MBEDTLS_OID_SUBJECT_KEY_IDENTIFIER),
    273                                                             0, buf + sizeof(buf) - len, len);
   \                     ??mbedtls_x509write_crt_set_key_identifier_2: (+1)
   \       0xA2   0x.... 0x....      BL       ?Subroutine4
    274              }
   \                     ??CrossCallReturnLabel_15: (+1)
   \       0xA6   0x....             ADR.N    R1,??DataTable16_2
   \                     ??mbedtls_x509write_crt_set_key_identifier_3: (+1)
   \       0xA8   0x4628             MOV      R0,R5
   \       0xAA   0x.... 0x....      BL       mbedtls_x509write_crt_set_extension
   \                     ??mbedtls_x509write_crt_set_key_identifier_0: (+1)
   \       0xAE   0xB01A             ADD      SP,SP,#+104
   \       0xB0   0xE8BD 0x81F0      POP      {R4-R8,PC}
    275          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4: (+1)
   \        0x0   0x9601             STR      R6,[SP, #+4]
   \        0x2   0x4276             RSBS     R6,R6,#+0
   \        0x4   0x19B8             ADDS     R0,R7,R6
   \        0x6   0x9000             STR      R0,[SP, #+0]
   \        0x8   0x2300             MOVS     R3,#+0
   \        0xA   0x2203             MOVS     R2,#+3
   \        0xC   0x4770             BX       LR
    276          

   \                                 In section .text, align 2, keep-with-next
    277          int mbedtls_x509write_crt_set_subject_key_identifier(mbedtls_x509write_cert *ctx)
    278          {
    279              return mbedtls_x509write_crt_set_key_identifier(ctx,
    280                                                              0,
    281                                                              MBEDTLS_ASN1_OCTET_STRING);
   \                     mbedtls_x509write_crt_set_subject_key_identifier: (+1)
   \        0x0   0x2204             MOVS     R2,#+4
   \        0x2   0x2100             MOVS     R1,#+0
   \        0x4   0x....             B.N      mbedtls_x509write_crt_set_key_identifier
    282          }
    283          

   \                                 In section .text, align 2, keep-with-next
    284          int mbedtls_x509write_crt_set_authority_key_identifier(mbedtls_x509write_cert *ctx)
    285          {
    286              return mbedtls_x509write_crt_set_key_identifier(ctx,
    287                                                              1,
    288                                                              (MBEDTLS_ASN1_CONTEXT_SPECIFIC | 0));
   \                     mbedtls_x509write_crt_set_authority_key_identifier: (+1)
   \        0x0   0x2280             MOVS     R2,#+128
   \        0x2   0x2101             MOVS     R1,#+1
   \        0x4   0x....             B.N      mbedtls_x509write_crt_set_key_identifier
    289          }
    290          #endif /* MBEDTLS_MD_CAN_SHA1 */
    291          

   \                                 In section .text, align 2, keep-with-next
    292          int mbedtls_x509write_crt_set_key_usage(mbedtls_x509write_cert *ctx,
    293                                                  unsigned int key_usage)
    294          {
   \                     mbedtls_x509write_crt_set_key_usage: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0xB086             SUB      SP,SP,#+24
   \        0x4   0x4604             MOV      R4,R0
   \        0x6   0x460D             MOV      R5,R1
   \        0x8   0x2105             MOVS     R1,#+5
   \        0xA   0xA804             ADD      R0,SP,#+16
   \        0xC   0x.... 0x....      BL       __aeabi_memclr4
   \       0x10   0xAA02             ADD      R2,SP,#+8
   \       0x12   0x2000             MOVS     R0,#+0
   \       0x14   0x8010             STRH     R0,[R2, #+0]
    295              unsigned char buf[5] = { 0 }, ku[2] = { 0 };
    296              unsigned char *c;
    297              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    298              const unsigned int allowed_bits = MBEDTLS_X509_KU_DIGITAL_SIGNATURE |
    299                                                MBEDTLS_X509_KU_NON_REPUDIATION   |
    300                                                MBEDTLS_X509_KU_KEY_ENCIPHERMENT  |
    301                                                MBEDTLS_X509_KU_DATA_ENCIPHERMENT |
    302                                                MBEDTLS_X509_KU_KEY_AGREEMENT     |
    303                                                MBEDTLS_X509_KU_KEY_CERT_SIGN     |
    304                                                MBEDTLS_X509_KU_CRL_SIGN          |
    305                                                MBEDTLS_X509_KU_ENCIPHER_ONLY     |
    306                                                MBEDTLS_X509_KU_DECIPHER_ONLY;
    307          
    308              /* Check that nothing other than the allowed flags is set */
    309              if ((key_usage & ~allowed_bits) != 0) {
   \       0x16   0x.... 0x....      LDR.W    R0,??DataTable17_2
   \       0x1A   0x4205             TST      R5,R0
   \       0x1C   0xBF18             IT       NE
   \       0x1E   0x.... 0x....      LDRNE.W  R0,??DataTable17_3
    310                  return MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE;
   \       0x22   0xD128             BNE.N    ??mbedtls_x509write_crt_set_key_usage_0
    311              }
    312          
    313              c = buf + 5;
    314              MBEDTLS_PUT_UINT16_LE(key_usage, ku, 0);
   \       0x24   0x.... 0x....      ADR.W    R2,mbedtls_byte_order_detector
   \       0x28   0x7811             LDRB     R1,[R2, #+0]
   \       0x2A   0xF10D 0x0015      ADD      R0,SP,#+21
   \       0x2E   0x9003             STR      R0,[SP, #+12]
   \       0x30   0x2901             CMP      R1,#+1
   \       0x32   0xD105             BNE.N    ??mbedtls_x509write_crt_set_key_usage_1
   \       0x34   0x0429             LSLS     R1,R5,#+16
   \       0x36   0x0E09             LSRS     R1,R1,#+24
   \       0x38   0xEA41 0x2105      ORR      R1,R1,R5, LSL #+8
   \       0x3C   0xB289             UXTH     R1,R1
   \       0x3E   0xE000             B.N      ??mbedtls_x509write_crt_set_key_usage_2
   \                     ??mbedtls_x509write_crt_set_key_usage_1: (+1)
   \       0x40   0xB2A9             UXTH     R1,R5
   \                     ??mbedtls_x509write_crt_set_key_usage_2: (+1)
   \       0x42   0xA802             ADD      R0,SP,#+8
   \       0x44   0x.... 0x....      BL       mbedtls_put_unaligned_uint16
    315              ret = mbedtls_asn1_write_named_bitstring(&c, buf, ku, 9);
   \       0x48   0x2309             MOVS     R3,#+9
   \       0x4A   0xAA02             ADD      R2,SP,#+8
   \       0x4C   0xA904             ADD      R1,SP,#+16
   \       0x4E   0xA803             ADD      R0,SP,#+12
   \       0x50   0x.... 0x....      BL       mbedtls_asn1_write_named_bitstring
    316          
    317              if (ret < 0) {
   \       0x54   0x2800             CMP      R0,#+0
   \       0x56   0xD40E             BMI.N    ??mbedtls_x509write_crt_set_key_usage_0
    318                  return ret;
    319              } else if (ret < 3 || ret > 5) {
   \       0x58   0x1EC1             SUBS     R1,R0,#+3
   \       0x5A   0x2902             CMP      R1,#+2
   \       0x5C   0xBF88             IT       HI
   \       0x5E   0x.... 0x....      LDRHI.W  R0,??DataTable17_4
    320                  return MBEDTLS_ERR_X509_INVALID_FORMAT;
   \       0x62   0xD808             BHI.N    ??mbedtls_x509write_crt_set_key_usage_0
    321              }
    322          
    323              ret = mbedtls_x509write_crt_set_extension(ctx, MBEDTLS_OID_KEY_USAGE,
    324                                                        MBEDTLS_OID_SIZE(MBEDTLS_OID_KEY_USAGE),
    325                                                        1, c, (size_t) ret);
    326              if (ret != 0) {
    327                  return ret;
   \       0x64   0x9001             STR      R0,[SP, #+4]
   \       0x66   0x9803             LDR      R0,[SP, #+12]
   \       0x68   0x2301             MOVS     R3,#+1
   \       0x6A   0x2203             MOVS     R2,#+3
   \       0x6C   0x9000             STR      R0,[SP, #+0]
   \       0x6E   0x....             ADR.N    R1,??DataTable16_3
   \       0x70   0x4620             MOV      R0,R4
   \       0x72   0x.... 0x....      BL       mbedtls_x509write_crt_set_extension
   \                     ??mbedtls_x509write_crt_set_key_usage_0: (+1)
   \       0x76   0xB007             ADD      SP,SP,#+28
   \       0x78   0xBD30             POP      {R4,R5,PC}
    328              }
    329          
    330              return 0;
    331          }
    332          

   \                                 In section .text, align 2, keep-with-next
    333          int mbedtls_x509write_crt_set_ext_key_usage(mbedtls_x509write_cert *ctx,
    334                                                      const mbedtls_asn1_sequence *exts)
    335          {
   \                     mbedtls_x509write_crt_set_ext_key_usage: (+1)
   \        0x0   0xE92D 0x41F8      PUSH     {R3-R8,LR}
   \        0x4   0xB0C3             SUB      SP,SP,#+268
   \        0x6   0x4680             MOV      R8,R0
    336              unsigned char buf[256];
    337              unsigned char *c = buf + sizeof(buf);
   \        0x8   0xA843             ADD      R0,SP,#+268
   \        0xA   0x460C             MOV      R4,R1
   \        0xC   0x9002             STR      R0,[SP, #+8]
    338              int ret;
    339              size_t len = 0;
    340              const mbedtls_asn1_sequence *last_ext = NULL;
    341              const mbedtls_asn1_sequence *ext;
    342          
    343              memset(buf, 0, sizeof(buf));
   \        0xE   0xF44F 0x7180      MOV      R1,#+256
   \       0x12   0xA803             ADD      R0,SP,#+12
   \       0x14   0x2600             MOVS     R6,#+0
   \       0x16   0x2700             MOVS     R7,#+0
   \       0x18   0x.... 0x....      BL       __aeabi_memclr4
    344          
    345              /* We need at least one extension: SEQUENCE SIZE (1..MAX) OF KeyPurposeId */
    346              if (exts == NULL) {
   \       0x1C   0xB9B4             CBNZ.N   R4,??mbedtls_x509write_crt_set_ext_key_usage_0
   \       0x1E   0xE021             B.N      ??mbedtls_x509write_crt_set_ext_key_usage_1
    347                  return MBEDTLS_ERR_X509_BAD_INPUT_DATA;
    348              }
    349          
    350              /* Iterate over exts backwards, so we write them out in the requested order */
    351              while (last_ext != exts) {
    352                  for (ext = exts; ext->next != last_ext; ext = ext->next) {
    353                  }
    354                  if (ext->buf.tag != MBEDTLS_ASN1_OID) {
    355                      return MBEDTLS_ERR_X509_BAD_INPUT_DATA;
    356                  }
    357                  MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_raw_buffer(&c, buf, ext->buf.p, ext->buf.len));
   \                     ??mbedtls_x509write_crt_set_ext_key_usage_2: (+1)
   \       0x20   0x687B             LDR      R3,[R7, #+4]
   \       0x22   0x68BA             LDR      R2,[R7, #+8]
   \       0x24   0xA903             ADD      R1,SP,#+12
   \       0x26   0xA802             ADD      R0,SP,#+8
   \       0x28   0x.... 0x....      BL       mbedtls_asn1_write_raw_buffer
   \       0x2C   0x4605             MOV      R5,R0
   \       0x2E   0x2D00             CMP      R5,#+0
   \       0x30   0xD42E             BMI.N    ??mbedtls_x509write_crt_set_ext_key_usage_3
    358                  MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_len(&c, buf, ext->buf.len));
   \       0x32   0x687A             LDR      R2,[R7, #+4]
   \       0x34   0x.... 0x....      BL       ??Subroutine2_0
   \                     ??CrossCallReturnLabel_8: (+1)
   \       0x38   0x2800             CMP      R0,#+0
   \       0x3A   0xD429             BMI.N    ??mbedtls_x509write_crt_set_ext_key_usage_3
   \       0x3C   0x19AE             ADDS     R6,R5,R6
   \       0x3E   0x1985             ADDS     R5,R0,R6
    359                  MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_tag(&c, buf, MBEDTLS_ASN1_OID));
   \       0x40   0x2206             MOVS     R2,#+6
   \       0x42   0x.... 0x....      BL       ??Subroutine3_0
   \                     ??CrossCallReturnLabel_11: (+1)
   \       0x46   0x0006             MOVS     R6,R0
   \       0x48   0xD422             BMI.N    ??mbedtls_x509write_crt_set_ext_key_usage_3
   \       0x4A   0x1946             ADDS     R6,R0,R5
    360                  last_ext = ext;
   \                     ??mbedtls_x509write_crt_set_ext_key_usage_0: (+1)
   \       0x4C   0x42A7             CMP      R7,R4
   \       0x4E   0xD00C             BEQ.N    ??mbedtls_x509write_crt_set_ext_key_usage_4
   \       0x50   0x4621             MOV      R1,R4
   \       0x52   0xE000             B.N      ??mbedtls_x509write_crt_set_ext_key_usage_5
   \                     ??mbedtls_x509write_crt_set_ext_key_usage_6: (+1)
   \       0x54   0x4601             MOV      R1,R0
   \                     ??mbedtls_x509write_crt_set_ext_key_usage_5: (+1)
   \       0x56   0x68C8             LDR      R0,[R1, #+12]
   \       0x58   0x42B8             CMP      R0,R7
   \       0x5A   0xD1FB             BNE.N    ??mbedtls_x509write_crt_set_ext_key_usage_6
   \       0x5C   0x460F             MOV      R7,R1
   \       0x5E   0x6838             LDR      R0,[R7, #+0]
   \       0x60   0x2806             CMP      R0,#+6
   \       0x62   0xD0DD             BEQ.N    ??mbedtls_x509write_crt_set_ext_key_usage_2
   \                     ??mbedtls_x509write_crt_set_ext_key_usage_1: (+1)
   \       0x64   0x.... 0x....      LDR.W    R0,??DataTable17
   \       0x68   0xE012             B.N      ??mbedtls_x509write_crt_set_ext_key_usage_3
    361              }
    362          
    363              MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_len(&c, buf, len));
   \                     ??mbedtls_x509write_crt_set_ext_key_usage_4: (+1)
   \       0x6A   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_9: (+1)
   \       0x6E   0x0004             MOVS     R4,R0
   \       0x70   0xD40E             BMI.N    ??mbedtls_x509write_crt_set_ext_key_usage_3
    364              MBEDTLS_ASN1_CHK_ADD(len,
    365                                   mbedtls_asn1_write_tag(&c, buf,
    366                                                          MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE));
   \       0x72   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_12: (+1)
   \       0x76   0x2800             CMP      R0,#+0
   \       0x78   0xD40A             BMI.N    ??mbedtls_x509write_crt_set_ext_key_usage_3
    367          
    368              return mbedtls_x509write_crt_set_extension(ctx,
    369                                                         MBEDTLS_OID_EXTENDED_KEY_USAGE,
    370                                                         MBEDTLS_OID_SIZE(MBEDTLS_OID_EXTENDED_KEY_USAGE),
    371                                                         1, c, len);
   \       0x7A   0x19A6             ADDS     R6,R4,R6
   \       0x7C   0x1986             ADDS     R6,R0,R6
   \       0x7E   0x9802             LDR      R0,[SP, #+8]
   \       0x80   0x9601             STR      R6,[SP, #+4]
   \       0x82   0x2301             MOVS     R3,#+1
   \       0x84   0x9000             STR      R0,[SP, #+0]
   \       0x86   0x2203             MOVS     R2,#+3
   \       0x88   0x....             ADR.N    R1,??DataTable16_4
   \       0x8A   0x4640             MOV      R0,R8
   \       0x8C   0x.... 0x....      BL       mbedtls_x509write_crt_set_extension
   \                     ??mbedtls_x509write_crt_set_ext_key_usage_3: (+1)
   \       0x90   0xB044             ADD      SP,SP,#+272
   \       0x92   0xE8BD 0x81F0      POP      {R4-R8,PC}
    372          }
    373          

   \                                 In section .text, align 2, keep-with-next
    374          int mbedtls_x509write_crt_set_ns_cert_type(mbedtls_x509write_cert *ctx,
    375                                                     unsigned char ns_cert_type)
    376          {
   \                     mbedtls_x509write_crt_set_ns_cert_type: (+1)
   \        0x0   0xB513             PUSH     {R0,R1,R4,LR}
   \        0x2   0xB084             SUB      SP,SP,#+16
   \        0x4   0x4604             MOV      R4,R0
   \        0x6   0xA902             ADD      R1,SP,#+8
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0x6008             STR      R0,[R1, #+0]
    377              unsigned char buf[4] = { 0 };
    378              unsigned char *c;
    379              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    380          
    381              c = buf + 4;
   \        0xC   0xA803             ADD      R0,SP,#+12
   \        0xE   0x9003             STR      R0,[SP, #+12]
    382          
    383              ret = mbedtls_asn1_write_named_bitstring(&c, buf, &ns_cert_type, 8);
   \       0x10   0x2308             MOVS     R3,#+8
   \       0x12   0xAA05             ADD      R2,SP,#+20
   \       0x14   0x.... 0x....      BL       mbedtls_asn1_write_named_bitstring
    384              if (ret < 3 || ret > 4) {
   \       0x18   0x1EC1             SUBS     R1,R0,#+3
   \       0x1A   0x2902             CMP      R1,#+2
   \       0x1C   0xD209             BCS.N    ??mbedtls_x509write_crt_set_ns_cert_type_0
    385                  return ret;
    386              }
    387          
    388              ret = mbedtls_x509write_crt_set_extension(ctx, MBEDTLS_OID_NS_CERT_TYPE,
    389                                                        MBEDTLS_OID_SIZE(MBEDTLS_OID_NS_CERT_TYPE),
    390                                                        0, c, (size_t) ret);
    391              if (ret != 0) {
    392                  return ret;
   \       0x1E   0x9001             STR      R0,[SP, #+4]
   \       0x20   0x9803             LDR      R0,[SP, #+12]
   \       0x22   0x2300             MOVS     R3,#+0
   \       0x24   0x2209             MOVS     R2,#+9
   \       0x26   0x9000             STR      R0,[SP, #+0]
   \       0x28   0x.... 0x....      ADR.W    R1,?_5
   \       0x2C   0x4620             MOV      R0,R4
   \       0x2E   0x.... 0x....      BL       mbedtls_x509write_crt_set_extension
   \                     ??mbedtls_x509write_crt_set_ns_cert_type_0: (+1)
   \       0x32   0xB006             ADD      SP,SP,#+24
   \       0x34   0xBD10             POP      {R4,PC}
    393              }
    394          
    395              return 0;
    396          }
    397          

   \                                 In section .text, align 2, keep-with-next
    398          static int x509_write_time(unsigned char **p, unsigned char *start,
    399                                     const char *t, size_t size)
    400          {
   \                     x509_write_time: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0x460D             MOV      R5,R1
    401              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    402              size_t len = 0;
    403          
    404              /*
    405               * write MBEDTLS_ASN1_UTC_TIME if year < 2050 (2 bytes shorter)
    406               */
    407              if (t[0] < '2' || (t[0] == '2' && t[1] == '0' && t[2] < '5')) {
   \        0x6   0x7811             LDRB     R1,[R2, #+0]
   \        0x8   0x4604             MOV      R4,R0
   \        0xA   0x2932             CMP      R1,#+50
   \        0xC   0xDB06             BLT.N    ??x509_write_time_0
   \        0xE   0xBF04             ITT      EQ
   \       0x10   0x7850             LDRBEQ   R0,[R2, #+1]
   \       0x12   0x2830             CMPEQ    R0,#+48
   \       0x14   0xD11B             BNE.N    ??x509_write_time_1
   \       0x16   0x7890             LDRB     R0,[R2, #+2]
   \       0x18   0x2835             CMP      R0,#+53
   \       0x1A   0xDA18             BGE.N    ??x509_write_time_1
    408                  MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_raw_buffer(p, start,
    409                                                                          (const unsigned char *) t + 2,
    410                                                                          size - 2));
   \                     ??x509_write_time_0: (+1)
   \       0x1C   0x1E9B             SUBS     R3,R3,#+2
   \       0x1E   0x1C92             ADDS     R2,R2,#+2
   \       0x20   0x4629             MOV      R1,R5
   \       0x22   0x4620             MOV      R0,R4
   \       0x24   0x.... 0x....      BL       mbedtls_asn1_write_raw_buffer
   \       0x28   0x0006             MOVS     R6,R0
   \       0x2A   0xD429             BMI.N    ??x509_write_time_2
    411                  MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_len(p, start, len));
   \       0x2C   0x4632             MOV      R2,R6
   \       0x2E   0x4629             MOV      R1,R5
   \       0x30   0x4620             MOV      R0,R4
   \       0x32   0x.... 0x....      BL       mbedtls_asn1_write_len
   \       0x36   0x0007             MOVS     R7,R0
   \       0x38   0xD422             BMI.N    ??x509_write_time_2
    412                  MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_tag(p, start,
    413                                                                   MBEDTLS_ASN1_UTC_TIME));
   \       0x3A   0x2217             MOVS     R2,#+23
   \       0x3C   0x4629             MOV      R1,R5
   \       0x3E   0x4620             MOV      R0,R4
   \       0x40   0x.... 0x....      BL       mbedtls_asn1_write_tag
   \       0x44   0x2800             CMP      R0,#+0
   \       0x46   0xD41B             BMI.N    ??x509_write_time_2
   \       0x48   0x443E             ADD      R6,R7,R6
   \       0x4A   0x1986             ADDS     R6,R0,R6
   \       0x4C   0xE017             B.N      ??x509_write_time_3
    414              } else {
    415                  MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_raw_buffer(p, start,
    416                                                                          (const unsigned char *) t,
    417                                                                          size));
   \                     ??x509_write_time_1: (+1)
   \       0x4E   0x4629             MOV      R1,R5
   \       0x50   0x4620             MOV      R0,R4
   \       0x52   0x.... 0x....      BL       mbedtls_asn1_write_raw_buffer
   \       0x56   0x4607             MOV      R7,R0
   \       0x58   0x2F00             CMP      R7,#+0
   \       0x5A   0xD411             BMI.N    ??x509_write_time_2
    418                  MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_len(p, start, len));
   \       0x5C   0x463A             MOV      R2,R7
   \       0x5E   0x4629             MOV      R1,R5
   \       0x60   0x4620             MOV      R0,R4
   \       0x62   0x.... 0x....      BL       mbedtls_asn1_write_len
   \       0x66   0xEA5F 0x0800      MOVS     R8,R0
   \       0x6A   0xD409             BMI.N    ??x509_write_time_2
    419                  MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_tag(p, start,
    420                                                                   MBEDTLS_ASN1_GENERALIZED_TIME));
   \       0x6C   0x2218             MOVS     R2,#+24
   \       0x6E   0x4629             MOV      R1,R5
   \       0x70   0x4620             MOV      R0,R4
   \       0x72   0x.... 0x....      BL       mbedtls_asn1_write_tag
   \       0x76   0x0006             MOVS     R6,R0
   \       0x78   0xD402             BMI.N    ??x509_write_time_2
   \       0x7A   0x4447             ADD      R7,R8,R7
   \       0x7C   0x19C6             ADDS     R6,R0,R7
    421              }
    422          
    423              return (int) len;
   \                     ??x509_write_time_3: (+1)
   \       0x7E   0x4630             MOV      R0,R6
   \                     ??x509_write_time_2: (+1)
   \       0x80   0xE8BD 0x81F0      POP      {R4-R8,PC}
    424          }
    425          

   \                                 In section .text, align 2, keep-with-next
    426          int mbedtls_x509write_crt_der(mbedtls_x509write_cert *ctx,
    427                                        unsigned char *buf, size_t size,
    428                                        int (*f_rng)(void *, unsigned char *, size_t),
    429                                        void *p_rng)
    430          {
   \                     mbedtls_x509write_crt_der: (+1)
   \        0x0   0xE92D 0x47FC      PUSH     {R2-R10,LR}
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x4689             MOV      R9,R1
    431              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    432              const char *sig_oid;
    433              size_t sig_oid_len = 0;
    434              unsigned char *c, *c2;
    435              unsigned char sig[MBEDTLS_PK_SIGNATURE_MAX_SIZE];
    436              size_t hash_length = 0;
    437              unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    438          #if defined(MBEDTLS_USE_PSA_CRYPTO)
    439              psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;
    440              psa_algorithm_t psa_algorithm;
    441          #endif /* MBEDTLS_USE_PSA_CRYPTO */
    442          
    443              size_t sub_len = 0, pub_len = 0, sig_and_oid_len = 0, sig_len;
    444              size_t len = 0;
    445              mbedtls_pk_type_t pk_alg;
    446              int write_sig_null_par;
    447          
    448              /*
    449               * Prepare data to be signed at the end of the target buffer
    450               */
    451              c = buf + size;
   \        0x8   0xEB09 0x0A02      ADD      R10,R9,R2
   \        0xC   0xB0A6             SUB      SP,SP,#+152
   \        0xE   0xF8CD 0xA014      STR      R10,[SP, #+20]
   \       0x12   0x2100             MOVS     R1,#+0
   \       0x14   0x910A             STR      R1,[SP, #+40]
   \       0x16   0x9109             STR      R1,[SP, #+36]
    452          
    453              /* Signature algorithm needed in TBS, and later for actual signature */
    454          
    455              /* There's no direct way of extracting a signature algorithm
    456               * (represented as an element of mbedtls_pk_type_t) from a PK instance. */
    457              if (mbedtls_pk_can_do(ctx->issuer_key, MBEDTLS_PK_RSA)) {
   \       0x18   0x6A28             LDR      R0,[R5, #+32]
   \       0x1A   0x4698             MOV      R8,R3
   \       0x1C   0x2101             MOVS     R1,#+1
   \       0x1E   0x2400             MOVS     R4,#+0
   \       0x20   0x.... 0x....      BL       mbedtls_pk_can_do
   \       0x24   0xB148             CBZ.N    R0,??mbedtls_x509write_crt_der_0
    458                  pk_alg = MBEDTLS_PK_RSA;
   \       0x26   0x2701             MOVS     R7,#+1
    459              } else if (mbedtls_pk_can_do(ctx->issuer_key, MBEDTLS_PK_ECDSA)) {
    460                  pk_alg = MBEDTLS_PK_ECDSA;
    461              } else {
    462                  return MBEDTLS_ERR_X509_INVALID_ALG;
    463              }
    464          
    465              if ((ret = mbedtls_oid_get_oid_by_sig_alg(pk_alg, ctx->md_alg,
    466                                                        &sig_oid, &sig_oid_len)) != 0) {
   \                     ??mbedtls_x509write_crt_der_1: (+1)
   \       0x28   0xF895 0x102C      LDRB     R1,[R5, #+44]
   \       0x2C   0xAB0A             ADD      R3,SP,#+40
   \       0x2E   0xAA06             ADD      R2,SP,#+24
   \       0x30   0x4638             MOV      R0,R7
   \       0x32   0x.... 0x....      BL       mbedtls_oid_get_oid_by_sig_alg
   \       0x36   0xB148             CBZ.N    R0,??mbedtls_x509write_crt_der_2
    467                  return ret;
   \       0x38   0xE115             B.N      ??mbedtls_x509write_crt_der_3
    468              }
   \                     ??mbedtls_x509write_crt_der_0: (+1)
   \       0x3A   0x6A28             LDR      R0,[R5, #+32]
   \       0x3C   0x2104             MOVS     R1,#+4
   \       0x3E   0x.... 0x....      BL       mbedtls_pk_can_do
   \       0x42   0xB108             CBZ.N    R0,??mbedtls_x509write_crt_der_4
   \       0x44   0x2704             MOVS     R7,#+4
   \       0x46   0xE7EF             B.N      ??mbedtls_x509write_crt_der_1
   \                     ??mbedtls_x509write_crt_der_4: (+1)
   \       0x48   0x....             LDR.N    R0,??DataTable17_5
   \                     ??mbedtls_x509write_crt_der_5: (+1)
   \       0x4A   0xE10C             B.N      ??mbedtls_x509write_crt_der_3
    469          
    470              /*
    471               *  Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension
    472               */
    473          
    474              /* Only for v3 */
    475              if (ctx->version == MBEDTLS_X509_CRT_VERSION_3) {
   \                     ??mbedtls_x509write_crt_der_2: (+1)
   \       0x4C   0x6828             LDR      R0,[R5, #+0]
   \       0x4E   0x2802             CMP      R0,#+2
   \       0x50   0xD11D             BNE.N    ??mbedtls_x509write_crt_der_6
    476                  MBEDTLS_ASN1_CHK_ADD(len,
    477                                       mbedtls_x509_write_extensions(&c,
    478                                                                     buf, ctx->extensions));
   \       0x52   0xF105 0x012C      ADD      R1,R5,#+44
   \       0x56   0x6A4A             LDR      R2,[R1, #+36]
   \       0x58   0x4649             MOV      R1,R9
   \       0x5A   0xA805             ADD      R0,SP,#+20
   \       0x5C   0x.... 0x....      BL       mbedtls_x509_write_extensions
   \       0x60   0x4606             MOV      R6,R0
   \       0x62   0x2E00             CMP      R6,#+0
   \       0x64   0xD4F1             BMI.N    ??mbedtls_x509write_crt_der_5
    479                  MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_len(&c, buf, len));
   \       0x66   0x.... 0x....      BL       ??Subroutine0_0
   \                     ??CrossCallReturnLabel_1: (+1)
   \       0x6A   0x0004             MOVS     R4,R0
   \       0x6C   0xD4ED             BMI.N    ??mbedtls_x509write_crt_der_5
    480                  MBEDTLS_ASN1_CHK_ADD(len,
    481                                       mbedtls_asn1_write_tag(&c, buf,
    482                                                              MBEDTLS_ASN1_CONSTRUCTED |
    483                                                              MBEDTLS_ASN1_SEQUENCE));
   \       0x6E   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_7: (+1)
   \       0x72   0x2800             CMP      R0,#+0
   \       0x74   0xD4E9             BMI.N    ??mbedtls_x509write_crt_der_5
   \       0x76   0x19A6             ADDS     R6,R4,R6
   \       0x78   0x.... 0x....      BL       ?Subroutine0
    484                  MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_len(&c, buf, len));
   \                     ??CrossCallReturnLabel_3: (+1)
   \       0x7C   0x0004             MOVS     R4,R0
   \       0x7E   0xD4E4             BMI.N    ??mbedtls_x509write_crt_der_5
    485                  MBEDTLS_ASN1_CHK_ADD(len,
    486                                       mbedtls_asn1_write_tag(&c, buf,
    487                                                              MBEDTLS_ASN1_CONTEXT_SPECIFIC |
    488                                                              MBEDTLS_ASN1_CONSTRUCTED | 3));
   \       0x80   0x22A3             MOVS     R2,#+163
   \       0x82   0x.... 0x....      BL       ?Subroutine6
   \                     ??CrossCallReturnLabel_21: (+1)
   \       0x86   0x2800             CMP      R0,#+0
   \       0x88   0xD4DF             BMI.N    ??mbedtls_x509write_crt_der_5
   \       0x8A   0x19A6             ADDS     R6,R4,R6
   \       0x8C   0x1984             ADDS     R4,R0,R6
    489              }
    490          
    491              /*
    492               *  SubjectPublicKeyInfo
    493               */
    494              MBEDTLS_ASN1_CHK_ADD(pub_len,
    495                                   mbedtls_pk_write_pubkey_der(ctx->subject_key,
    496                                                               buf, c - buf));
   \                     ??mbedtls_x509write_crt_der_6: (+1)
   \       0x8E   0x9A05             LDR      R2,[SP, #+20]
   \       0x90   0x69E8             LDR      R0,[R5, #+28]
   \       0x92   0x4649             MOV      R1,R9
   \       0x94   0xEBA2 0x0209      SUB      R2,R2,R9
   \       0x98   0x.... 0x....      BL       mbedtls_pk_write_pubkey_der
   \       0x9C   0x4606             MOV      R6,R0
   \       0x9E   0x2E00             CMP      R6,#+0
   \       0xA0   0xD4D3             BMI.N    ??mbedtls_x509write_crt_der_5
    497              c -= pub_len;
   \       0xA2   0x9905             LDR      R1,[SP, #+20]
   \       0xA4   0x4270             RSBS     R0,R6,#+0
   \       0xA6   0x4408             ADD      R0,R1,R0
   \       0xA8   0x9005             STR      R0,[SP, #+20]
    498              len += pub_len;
    499          
    500              /*
    501               *  Subject  ::=  Name
    502               */
    503              MBEDTLS_ASN1_CHK_ADD(len,
    504                                   mbedtls_x509_write_names(&c, buf,
    505                                                            ctx->subject));
   \       0xAA   0x6A6A             LDR      R2,[R5, #+36]
   \       0xAC   0x4649             MOV      R1,R9
   \       0xAE   0xA805             ADD      R0,SP,#+20
   \       0xB0   0x.... 0x....      BL       mbedtls_x509_write_names
   \       0xB4   0x2800             CMP      R0,#+0
   \       0xB6   0xD4C8             BMI.N    ??mbedtls_x509write_crt_der_5
   \       0xB8   0x1934             ADDS     R4,R6,R4
   \       0xBA   0x1904             ADDS     R4,R0,R4
    506          
    507              /*
    508               *  Validity ::= SEQUENCE {
    509               *       notBefore      Time,
    510               *       notAfter       Time }
    511               */
    512              sub_len = 0;
    513          
    514              MBEDTLS_ASN1_CHK_ADD(sub_len,
    515                                   x509_write_time(&c, buf, ctx->not_after,
    516                                                   MBEDTLS_X509_RFC5280_UTC_TIME_LEN));
   \       0xBC   0x230F             MOVS     R3,#+15
   \       0xBE   0xF105 0x023D      ADD      R2,R5,#+61
   \       0xC2   0x4649             MOV      R1,R9
   \       0xC4   0xA805             ADD      R0,SP,#+20
   \       0xC6   0x.... 0x....      BL       x509_write_time
   \       0xCA   0x4606             MOV      R6,R0
   \       0xCC   0x2E00             CMP      R6,#+0
   \       0xCE   0xD4BC             BMI.N    ??mbedtls_x509write_crt_der_5
    517          
    518              MBEDTLS_ASN1_CHK_ADD(sub_len,
    519                                   x509_write_time(&c, buf, ctx->not_before,
    520                                                   MBEDTLS_X509_RFC5280_UTC_TIME_LEN));
   \       0xD0   0x230F             MOVS     R3,#+15
   \       0xD2   0xF105 0x022D      ADD      R2,R5,#+45
   \       0xD6   0x4649             MOV      R1,R9
   \       0xD8   0xA805             ADD      R0,SP,#+20
   \       0xDA   0x.... 0x....      BL       x509_write_time
   \       0xDE   0x2800             CMP      R0,#+0
   \       0xE0   0xD445             BMI.N    ??mbedtls_x509write_crt_der_7
   \       0xE2   0x.... 0x....      BL       ?Subroutine0
    521          
    522              len += sub_len;
    523              MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_len(&c, buf, sub_len));
   \                     ??CrossCallReturnLabel_2: (+1)
   \       0xE6   0x2800             CMP      R0,#+0
   \       0xE8   0xD441             BMI.N    ??mbedtls_x509write_crt_der_7
   \       0xEA   0x1934             ADDS     R4,R6,R4
   \       0xEC   0x1904             ADDS     R4,R0,R4
    524              MBEDTLS_ASN1_CHK_ADD(len,
    525                                   mbedtls_asn1_write_tag(&c, buf,
    526                                                          MBEDTLS_ASN1_CONSTRUCTED |
    527                                                          MBEDTLS_ASN1_SEQUENCE));
   \       0xEE   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_6: (+1)
   \       0xF2   0x4606             MOV      R6,R0
   \       0xF4   0x2E00             CMP      R6,#+0
   \       0xF6   0xD43A             BMI.N    ??mbedtls_x509write_crt_der_7
    528          
    529              /*
    530               *  Issuer  ::=  Name
    531               */
    532              MBEDTLS_ASN1_CHK_ADD(len, mbedtls_x509_write_names(&c, buf,
    533                                                                 ctx->issuer));
   \       0xF8   0x6AAA             LDR      R2,[R5, #+40]
   \       0xFA   0x4649             MOV      R1,R9
   \       0xFC   0xA805             ADD      R0,SP,#+20
   \       0xFE   0x.... 0x....      BL       mbedtls_x509_write_names
   \      0x102   0x2800             CMP      R0,#+0
   \      0x104   0xD433             BMI.N    ??mbedtls_x509write_crt_der_7
   \      0x106   0x1934             ADDS     R4,R6,R4
   \      0x108   0x1904             ADDS     R4,R0,R4
    534          
    535              /*
    536               *  Signature   ::=  AlgorithmIdentifier
    537               */
    538              if (pk_alg == MBEDTLS_PK_ECDSA) {
   \      0x10A   0x2F04             CMP      R7,#+4
   \      0x10C   0xBF0C             ITE      EQ
   \      0x10E   0x2600             MOVEQ    R6,#+0
   \      0x110   0x2601             MOVNE    R6,#+1
    539                  /*
    540                   * The AlgorithmIdentifier's parameters field must be absent for DSA/ECDSA signature
    541                   * algorithms, see https://www.rfc-editor.org/rfc/rfc5480#page-17 and
    542                   * https://www.rfc-editor.org/rfc/rfc5758#section-3.
    543                   */
    544                  write_sig_null_par = 0;
    545              } else {
    546                  write_sig_null_par = 1;
    547              }
    548              MBEDTLS_ASN1_CHK_ADD(len,
    549                                   mbedtls_asn1_write_algorithm_identifier_ext(&c, buf,
    550                                                                               sig_oid, strlen(sig_oid),
    551                                                                               0, write_sig_null_par));
   \      0x112   0x9806             LDR      R0,[SP, #+24]
   \      0x114   0x.... 0x....      BL       strlen
   \      0x118   0x9601             STR      R6,[SP, #+4]
   \      0x11A   0x2100             MOVS     R1,#+0
   \      0x11C   0x9A06             LDR      R2,[SP, #+24]
   \      0x11E   0x9100             STR      R1,[SP, #+0]
   \      0x120   0x4603             MOV      R3,R0
   \      0x122   0x4649             MOV      R1,R9
   \      0x124   0xA805             ADD      R0,SP,#+20
   \      0x126   0x.... 0x....      BL       mbedtls_asn1_write_algorithm_identifier_ext
   \      0x12A   0x4606             MOV      R6,R0
   \      0x12C   0x2E00             CMP      R6,#+0
   \      0x12E   0xD41E             BMI.N    ??mbedtls_x509write_crt_der_7
    552          
    553              /*
    554               *  Serial   ::=  INTEGER
    555               *
    556               * Written data is:
    557               * - "ctx->serial_len" bytes for the raw serial buffer
    558               *   - if MSb of "serial" is 1, then prepend an extra 0x00 byte
    559               * - 1 byte for the length
    560               * - 1 byte for the TAG
    561               */
    562              MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_raw_buffer(&c, buf,
    563                                                                      ctx->serial, ctx->serial_len));
   \      0x130   0x69AB             LDR      R3,[R5, #+24]
   \      0x132   0x1D2A             ADDS     R2,R5,#+4
   \      0x134   0x4649             MOV      R1,R9
   \      0x136   0xA805             ADD      R0,SP,#+20
   \      0x138   0x.... 0x....      BL       mbedtls_asn1_write_raw_buffer
   \      0x13C   0x2800             CMP      R0,#+0
   \      0x13E   0xD416             BMI.N    ??mbedtls_x509write_crt_der_7
   \      0x140   0x1934             ADDS     R4,R6,R4
   \      0x142   0x1904             ADDS     R4,R0,R4
    564              if (*c & 0x80) {
   \      0x144   0x9805             LDR      R0,[SP, #+20]
   \      0x146   0x7801             LDRB     R1,[R0, #+0]
   \      0x148   0x060A             LSLS     R2,R1,#+24
   \      0x14A   0xD514             BPL.N    ??mbedtls_x509write_crt_der_8
    565                  if (c - buf < 1) {
   \      0x14C   0xEBA0 0x0109      SUB      R1,R0,R9
   \      0x150   0x2900             CMP      R1,#+0
   \      0x152   0xBFD8             IT       LE
   \      0x154   0x....             LDRLE.N  R0,??DataTable17_6
    566                      return MBEDTLS_ERR_X509_BUFFER_TOO_SMALL;
   \      0x156   0xDD4B             BLE.N    ??mbedtls_x509write_crt_der_9
    567                  }
    568                  *(--c) = 0x0;
   \      0x158   0x1E41             SUBS     R1,R0,#+1
   \      0x15A   0x9105             STR      R1,[SP, #+20]
   \      0x15C   0x2000             MOVS     R0,#+0
   \      0x15E   0x7008             STRB     R0,[R1, #+0]
    569                  len++;
    570                  MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_len(&c, buf,
    571                                                                   ctx->serial_len + 1));
   \      0x160   0x69AA             LDR      R2,[R5, #+24]
   \      0x162   0x4649             MOV      R1,R9
   \      0x164   0xA805             ADD      R0,SP,#+20
   \      0x166   0x1C52             ADDS     R2,R2,#+1
   \      0x168   0x.... 0x....      BL       mbedtls_asn1_write_len
   \      0x16C   0x2800             CMP      R0,#+0
   \                     ??mbedtls_x509write_crt_der_7: (+1)
   \      0x16E   0xD47A             BMI.N    ??mbedtls_x509write_crt_der_3
   \      0x170   0x1904             ADDS     R4,R0,R4
   \      0x172   0x1C64             ADDS     R4,R4,#+1
   \      0x174   0xE005             B.N      ??mbedtls_x509write_crt_der_10
    572              } else {
    573                  MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_len(&c, buf,
    574                                                                   ctx->serial_len));
   \                     ??mbedtls_x509write_crt_der_8: (+1)
   \      0x176   0x69AA             LDR      R2,[R5, #+24]
   \      0x178   0x.... 0x....      BL       ??Subroutine5_0
   \                     ??CrossCallReturnLabel_16: (+1)
   \      0x17C   0x2800             CMP      R0,#+0
   \      0x17E   0xD472             BMI.N    ??mbedtls_x509write_crt_der_3
   \      0x180   0x1904             ADDS     R4,R0,R4
    575              }
    576              MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_tag(&c, buf,
    577                                                               MBEDTLS_ASN1_INTEGER));
   \                     ??mbedtls_x509write_crt_der_10: (+1)
   \      0x182   0x2202             MOVS     R2,#+2
   \      0x184   0x.... 0x....      BL       ?Subroutine6
   \                     ??CrossCallReturnLabel_20: (+1)
   \      0x188   0x2800             CMP      R0,#+0
   \      0x18A   0xD46C             BMI.N    ??mbedtls_x509write_crt_der_3
    578          
    579              /*
    580               *  Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  }
    581               */
    582          
    583              /* Can be omitted for v1 */
    584              if (ctx->version != MBEDTLS_X509_CRT_VERSION_1) {
   \      0x18C   0x682A             LDR      R2,[R5, #+0]
   \      0x18E   0x1904             ADDS     R4,R0,R4
   \      0x190   0xB192             CBZ.N    R2,??mbedtls_x509write_crt_der_11
    585                  sub_len = 0;
    586                  MBEDTLS_ASN1_CHK_ADD(sub_len,
    587                                       mbedtls_asn1_write_int(&c, buf, ctx->version));
   \      0x192   0x4649             MOV      R1,R9
   \      0x194   0xA805             ADD      R0,SP,#+20
   \      0x196   0x.... 0x....      BL       mbedtls_asn1_write_int
   \      0x19A   0x4606             MOV      R6,R0
   \      0x19C   0x2E00             CMP      R6,#+0
   \      0x19E   0xD462             BMI.N    ??mbedtls_x509write_crt_der_3
    588                  len += sub_len;
    589                  MBEDTLS_ASN1_CHK_ADD(len,
    590                                       mbedtls_asn1_write_len(&c, buf, sub_len));
   \      0x1A0   0x.... 0x....      BL       ??Subroutine0_0
   \                     ??CrossCallReturnLabel_0: (+1)
   \      0x1A4   0x2800             CMP      R0,#+0
   \      0x1A6   0xD45E             BMI.N    ??mbedtls_x509write_crt_der_3
   \      0x1A8   0x1934             ADDS     R4,R6,R4
   \      0x1AA   0x1904             ADDS     R4,R0,R4
    591                  MBEDTLS_ASN1_CHK_ADD(len,
    592                                       mbedtls_asn1_write_tag(&c, buf,
    593                                                              MBEDTLS_ASN1_CONTEXT_SPECIFIC |
    594                                                              MBEDTLS_ASN1_CONSTRUCTED | 0));
   \      0x1AC   0x22A0             MOVS     R2,#+160
   \      0x1AE   0x.... 0x....      BL       ?Subroutine6
   \                     ??CrossCallReturnLabel_19: (+1)
   \      0x1B2   0x2800             CMP      R0,#+0
   \      0x1B4   0xD457             BMI.N    ??mbedtls_x509write_crt_der_3
   \      0x1B6   0x1904             ADDS     R4,R0,R4
    595              }
    596          
    597              MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_len(&c, buf, len));
   \                     ??mbedtls_x509write_crt_der_11: (+1)
   \      0x1B8   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_18: (+1)
   \      0x1BC   0x4606             MOV      R6,R0
   \      0x1BE   0x2E00             CMP      R6,#+0
   \      0x1C0   0xD451             BMI.N    ??mbedtls_x509write_crt_der_3
    598              MBEDTLS_ASN1_CHK_ADD(len,
    599                                   mbedtls_asn1_write_tag(&c, buf, MBEDTLS_ASN1_CONSTRUCTED |
    600                                                          MBEDTLS_ASN1_SEQUENCE));
   \      0x1C2   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_5: (+1)
   \      0x1C6   0x2800             CMP      R0,#+0
   \      0x1C8   0xD44D             BMI.N    ??mbedtls_x509write_crt_der_3
   \      0x1CA   0x1934             ADDS     R4,R6,R4
   \      0x1CC   0x1904             ADDS     R4,R0,R4
    601          
    602              /*
    603               * Make signature
    604               */
    605          
    606              /* Compute hash of CRT. */
    607          #if defined(MBEDTLS_USE_PSA_CRYPTO)
    608              psa_algorithm = mbedtls_md_psa_alg_from_type(ctx->md_alg);
    609          
    610              status = psa_hash_compute(psa_algorithm,
    611                                        c,
    612                                        len,
    613                                        hash,
    614                                        sizeof(hash),
    615                                        &hash_length);
    616              if (status != PSA_SUCCESS) {
   \      0x1CE   0xA809             ADD      R0,SP,#+36
   \      0x1D0   0xF105 0x062C      ADD      R6,R5,#+44
   \      0x1D4   0x9001             STR      R0,[SP, #+4]
   \      0x1D6   0x2120             MOVS     R1,#+32
   \      0x1D8   0x9100             STR      R1,[SP, #+0]
   \      0x1DA   0x7830             LDRB     R0,[R6, #+0]
   \      0x1DC   0x9905             LDR      R1,[SP, #+20]
   \      0x1DE   0xAB0B             ADD      R3,SP,#+44
   \      0x1E0   0x4622             MOV      R2,R4
   \      0x1E2   0xF040 0x7000      ORR      R0,R0,#0x2000000
   \      0x1E6   0x.... 0x....      BL       psa_hash_compute
   \      0x1EA   0xB110             CBZ.N    R0,??mbedtls_x509write_crt_der_12
    617                  return MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED;
   \      0x1EC   0xF06F 0x006F      MVN      R0,#+111
   \                     ??mbedtls_x509write_crt_der_9: (+1)
   \      0x1F0   0xE039             B.N      ??mbedtls_x509write_crt_der_3
    618              }
    619          #else
    620              if ((ret = mbedtls_md(mbedtls_md_info_from_type(ctx->md_alg), c,
    621                                    len, hash)) != 0) {
    622                  return ret;
    623              }
    624          #endif /* MBEDTLS_USE_PSA_CRYPTO */
    625          
    626          
    627              if ((ret = mbedtls_pk_sign(ctx->issuer_key, ctx->md_alg,
    628                                         hash, hash_length, sig, sizeof(sig), &sig_len,
    629                                         f_rng, p_rng)) != 0) {
   \                     ??mbedtls_x509write_crt_der_12: (+1)
   \      0x1F2   0x9830             LDR      R0,[SP, #+192]
   \      0x1F4   0x214B             MOVS     R1,#+75
   \      0x1F6   0xAB13             ADD      R3,SP,#+76
   \      0x1F8   0x9004             STR      R0,[SP, #+16]
   \      0x1FA   0xF8CD 0x800C      STR      R8,[SP, #+12]
   \      0x1FE   0x9101             STR      R1,[SP, #+4]
   \      0x200   0x9300             STR      R3,[SP, #+0]
   \      0x202   0xAA08             ADD      R2,SP,#+32
   \      0x204   0x9B09             LDR      R3,[SP, #+36]
   \      0x206   0x9202             STR      R2,[SP, #+8]
   \      0x208   0x7831             LDRB     R1,[R6, #+0]
   \      0x20A   0x6A28             LDR      R0,[R5, #+32]
   \      0x20C   0xAA0B             ADD      R2,SP,#+44
   \      0x20E   0x.... 0x....      BL       mbedtls_pk_sign
   \      0x212   0xBB40             CBNZ.N   R0,??mbedtls_x509write_crt_der_3
    630                  return ret;
    631              }
    632          
    633              /* Move CRT to the front of the buffer to have space
    634               * for the signature. */
    635              memmove(buf, c, len);
   \      0x214   0x9905             LDR      R1,[SP, #+20]
   \      0x216   0x4622             MOV      R2,R4
   \      0x218   0x4648             MOV      R0,R9
   \      0x21A   0x.... 0x....      BL       __aeabi_memmove
    636              c = buf + len;
    637          
    638              /* Add signature at the end of the buffer,
    639               * making sure that it doesn't underflow
    640               * into the CRT buffer. */
    641              c2 = buf + size;
    642              MBEDTLS_ASN1_CHK_ADD(sig_and_oid_len, mbedtls_x509_write_sig(&c2, c,
    643                                                                           sig_oid, sig_oid_len,
    644                                                                           sig, sig_len, pk_alg));
   \      0x21E   0x9A08             LDR      R2,[SP, #+32]
   \      0x220   0xA813             ADD      R0,SP,#+76
   \      0x222   0x9B0A             LDR      R3,[SP, #+40]
   \      0x224   0x9201             STR      R2,[SP, #+4]
   \      0x226   0x9A06             LDR      R2,[SP, #+24]
   \      0x228   0xEB09 0x0104      ADD      R1,R9,R4
   \      0x22C   0x9000             STR      R0,[SP, #+0]
   \      0x22E   0x9105             STR      R1,[SP, #+20]
   \      0x230   0xF8CD 0xA01C      STR      R10,[SP, #+28]
   \      0x234   0x9702             STR      R7,[SP, #+8]
   \      0x236   0xA807             ADD      R0,SP,#+28
   \      0x238   0x.... 0x....      BL       mbedtls_x509_write_sig
   \      0x23C   0x0005             MOVS     R5,R0
   \      0x23E   0xD412             BMI.N    ??mbedtls_x509write_crt_der_3
    645          
    646              /*
    647               * Memory layout after this step:
    648               *
    649               * buf       c=buf+len                c2            buf+size
    650               * [CRT0,...,CRTn, UNUSED, ..., UNUSED, SIG0, ..., SIGm]
    651               */
    652          
    653              /* Move raw CRT to just before the signature. */
    654              c = c2 - len;
   \      0x240   0x9907             LDR      R1,[SP, #+28]
   \      0x242   0x4260             RSBS     R0,R4,#+0
    655              memmove(c, buf, len);
   \      0x244   0x4622             MOV      R2,R4
   \      0x246   0x4408             ADD      R0,R1,R0
   \      0x248   0x9005             STR      R0,[SP, #+20]
   \      0x24A   0x4649             MOV      R1,R9
   \      0x24C   0x.... 0x....      BL       __aeabi_memmove
    656          
    657              len += sig_and_oid_len;
   \      0x250   0x442C             ADD      R4,R5,R4
    658              MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_len(&c, buf, len));
   \      0x252   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_17: (+1)
   \      0x256   0x0005             MOVS     R5,R0
   \      0x258   0xD405             BMI.N    ??mbedtls_x509write_crt_der_3
    659              MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_tag(&c, buf,
    660                                                               MBEDTLS_ASN1_CONSTRUCTED |
    661                                                               MBEDTLS_ASN1_SEQUENCE));
   \      0x25A   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_4: (+1)
   \      0x25E   0x2800             CMP      R0,#+0
   \      0x260   0xBF5C             ITT      PL
   \      0x262   0x192C             ADDPL    R4,R5,R4
   \      0x264   0x1900             ADDPL    R0,R0,R4
    662          
    663              return (int) len;
   \                     ??mbedtls_x509write_crt_der_3: (+1)
   \      0x266   0xB028             ADD      SP,SP,#+160
   \      0x268   0xE8BD 0x87F0      POP      {R4-R10,PC}
    664          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine6: (+1)
   \        0x0   0x4649             MOV      R1,R9
   \        0x2   0xA805             ADD      R0,SP,#+20
   \        0x4   0x.... 0x....      B.W      mbedtls_asn1_write_tag

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5: (+1)
   \        0x0   0x4622             MOV      R2,R4
   \                     ??Subroutine5_0: (+1)
   \        0x2   0x4649             MOV      R1,R9
   \        0x4   0xA805             ADD      R0,SP,#+20
   \        0x6   0x.... 0x....      B.W      mbedtls_asn1_write_len

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \        0x0   0x2230             MOVS     R2,#+48
   \        0x2   0x4649             MOV      R1,R9
   \        0x4   0xA805             ADD      R0,SP,#+20
   \        0x6   0x.... 0x....      B.W      mbedtls_asn1_write_tag

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0x1986             ADDS     R6,R0,R6
   \                     ??Subroutine0_0: (+1)
   \        0x2   0x4632             MOV      R2,R6
   \        0x4   0x4649             MOV      R1,R9
   \        0x6   0xA805             ADD      R0,SP,#+20
   \        0x8   0x.... 0x....      B.W      mbedtls_asn1_write_len
    665          
    666          #define PEM_BEGIN_CRT           "-----BEGIN CERTIFICATE-----\n"
    667          #define PEM_END_CRT             "-----END CERTIFICATE-----\n"
    668          
    669          #if defined(MBEDTLS_PEM_WRITE_C)

   \                                 In section .text, align 4, keep-with-next
    670          int mbedtls_x509write_crt_pem(mbedtls_x509write_cert *crt,
    671                                        unsigned char *buf, size_t size,
    672                                        int (*f_rng)(void *, unsigned char *, size_t),
    673                                        void *p_rng)
    674          {
   \                     mbedtls_x509write_crt_pem: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0xB084             SUB      SP,SP,#+16
   \        0x4   0x460C             MOV      R4,R1
    675              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    676              size_t olen;
    677          
    678              if ((ret = mbedtls_x509write_crt_der(crt, buf, size,
    679                                                   f_rng, p_rng)) < 0) {
   \        0x6   0x9908             LDR      R1,[SP, #+32]
   \        0x8   0x4615             MOV      R5,R2
   \        0xA   0x9100             STR      R1,[SP, #+0]
   \        0xC   0x4621             MOV      R1,R4
   \        0xE   0x.... 0x....      BL       mbedtls_x509write_crt_der
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0xD40D             BMI.N    ??mbedtls_x509write_crt_pem_0
    680                  return ret;
    681              }
    682          
    683              if ((ret = mbedtls_pem_write_buffer(PEM_BEGIN_CRT, PEM_END_CRT,
    684                                                  buf + size - ret, ret,
    685                                                  buf, size, &olen)) != 0) {
    686                  return ret;
   \       0x16   0xA903             ADD      R1,SP,#+12
   \       0x18   0x9102             STR      R1,[SP, #+8]
   \       0x1A   0x4603             MOV      R3,R0
   \       0x1C   0x1961             ADDS     R1,R4,R5
   \       0x1E   0x4240             RSBS     R0,R0,#+0
   \       0x20   0x180A             ADDS     R2,R1,R0
   \       0x22   0x9501             STR      R5,[SP, #+4]
   \       0x24   0xF8CD 0x4000      STR.W    R4,[SP, #+0]
   \       0x28   0x.... 0x....      ADR.W    R1,?_7
   \       0x2C   0x....             ADR.N    R0,?_6
   \       0x2E   0x.... 0x....      BL       mbedtls_pem_write_buffer
   \                     ??mbedtls_x509write_crt_pem_0: (+1)
   \       0x32   0xB005             ADD      SP,SP,#+20
   \       0x34   0xBD30             POP      {R4,R5,PC}
    687              }
    688          
    689              return 0;
    690          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \        0x0   0x55 0x1D          DC8      "U\035\023"    
   \              0x13 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_1:
   \        0x0   0x55 0x1D          DC8      "U\035#"       
   \              0x23 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_2:
   \        0x0   0x55 0x1D          DC8      "U\035\016"    
   \              0x0E 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_3:
   \        0x0   0x55 0x1D          DC8      "U\035\017"    
   \              0x0F 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_4:
   \        0x0   0x55 0x1D          DC8      "U\035%"       
   \              0x25 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \        0x0   0xFFFF'D800        DC32     0xffffd800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_1:
   \        0x0   0x0200'0005        DC32     0x2000005

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_2:
   \        0x0   0xFFFF'7F00        DC32     0xffff7f00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_3:
   \        0x0   0xFFFF'DF80        DC32     0xffffdf80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_4:
   \        0x0   0xFFFF'DE80        DC32     0xffffde80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_5:
   \        0x0   0xFFFF'DD00        DC32     0xffffdd00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_6:
   \        0x0   0xFFFF'D680        DC32     0xffffd680

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_0:
   \        0x0   0x55 0x1D          DC8 "U\035\023"
   \              0x13 0x00

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_1:
   \        0x0   0x55 0x1D          DC8 "U\035#"
   \              0x23 0x00

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_2:
   \        0x0   0x55 0x1D          DC8 "U\035\016"
   \              0x0E 0x00

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_3:
   \        0x0   0x55 0x1D          DC8 "U\035\017"
   \              0x0F 0x00

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_4:
   \        0x0   0x55 0x1D          DC8 "U\035%"
   \              0x25 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ?_5:
   \        0x0   0x60 0x86          DC8 "`\206H\001\206\370B\001\001"
   \              0x48 0x01    
   \              0x86 0xF8    
   \              0x42 0x01    
   \              0x01 0x00
   \        0xA                      DS8 2

   \                                 In section .text, align 4, keep-with-next
   \                     ?_6:
   \        0x0   0x2D 0x2D          DC8 "-----BEGIN CERTIFICATE-----\012"
   \              0x2D 0x2D    
   \              0x2D 0x42    
   \              0x45 0x47    
   \              0x49 0x4E    
   \              0x20 0x43    
   \              0x45 0x52    
   \              0x54 0x49    
   \              0x46 0x49    
   \              0x43 0x41    
   \              0x54 0x45    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x0A    
   \              0x00
   \       0x1D                      DS8 3

   \                                 In section .text, align 4, keep-with-next
   \                     ?_7:
   \        0x0   0x2D 0x2D          DC8 "-----END CERTIFICATE-----\012"
   \              0x2D 0x2D    
   \              0x2D 0x45    
   \              0x4E 0x44    
   \              0x20 0x43    
   \              0x45 0x52    
   \              0x54 0x49    
   \              0x46 0x49    
   \              0x43 0x41    
   \              0x54 0x45    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x0A    
   \              0x00
   \       0x1B                      DS8 1
    691          #endif /* MBEDTLS_PEM_WRITE_C */
    692          
    693          #endif /* MBEDTLS_X509_CRT_WRITE_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   mbedtls_put_unaligned_uint16
     192   mbedtls_x509write_crt_der
       192   -> __aeabi_memmove
       192   -> mbedtls_asn1_write_algorithm_identifier_ext
       192   -> mbedtls_asn1_write_int
       192   -> mbedtls_asn1_write_len
       192   -> mbedtls_asn1_write_raw_buffer
       192   -> mbedtls_asn1_write_tag
       192   -> mbedtls_oid_get_oid_by_sig_alg
       192   -> mbedtls_pk_can_do
       192   -> mbedtls_pk_sign
       192   -> mbedtls_pk_write_pubkey_der
       192   -> mbedtls_x509_write_extensions
       192   -> mbedtls_x509_write_names
       192   -> mbedtls_x509_write_sig
       192   -> psa_hash_compute
       192   -> strlen
       192   -> x509_write_time
       8   mbedtls_x509write_crt_free
         8   -> mbedtls_asn1_free_named_data_list
         0   -> mbedtls_platform_zeroize
       8   mbedtls_x509write_crt_init
         8   -> __aeabi_memclr4
      32   mbedtls_x509write_crt_pem
        32   -> mbedtls_pem_write_buffer
        32   -> mbedtls_x509write_crt_der
       0   mbedtls_x509write_crt_set_authority_key_identifier
         0   -> mbedtls_x509write_crt_set_key_identifier
      48   mbedtls_x509write_crt_set_basic_constraints
        48   -> __aeabi_memclr4
        48   -> mbedtls_asn1_write_bool
        48   -> mbedtls_asn1_write_int
        48   -> mbedtls_asn1_write_len
        48   -> mbedtls_asn1_write_tag
        48   -> mbedtls_x509write_crt_set_extension
     296   mbedtls_x509write_crt_set_ext_key_usage
       296   -> __aeabi_memclr4
       296   -> mbedtls_asn1_write_len
       296   -> mbedtls_asn1_write_raw_buffer
       296   -> mbedtls_asn1_write_tag
       296   -> mbedtls_x509write_crt_set_extension
      24   mbedtls_x509write_crt_set_extension
        24   -> mbedtls_x509_set_extension
       0   mbedtls_x509write_crt_set_issuer_key
       0   mbedtls_x509write_crt_set_issuer_name
         0   -> mbedtls_x509_string_to_names
     128   mbedtls_x509write_crt_set_key_identifier
       128   -> __aeabi_memclr4
       128   -> mbedtls_asn1_write_len
       128   -> mbedtls_asn1_write_tag
       128   -> mbedtls_pk_write_pubkey
       128   -> mbedtls_x509write_crt_set_extension
       128   -> psa_hash_compute
      40   mbedtls_x509write_crt_set_key_usage
        40   -> __aeabi_memclr4
        40   -> mbedtls_asn1_write_named_bitstring
        40   -> mbedtls_put_unaligned_uint16
        40   -> mbedtls_x509write_crt_set_extension
       0   mbedtls_x509write_crt_set_md_alg
      32   mbedtls_x509write_crt_set_ns_cert_type
        32   -> mbedtls_asn1_write_named_bitstring
        32   -> mbedtls_x509write_crt_set_extension
      16   mbedtls_x509write_crt_set_serial
        16   -> mbedtls_mpi_size
        16   -> mbedtls_mpi_write_binary
       8   mbedtls_x509write_crt_set_serial_raw
         8   -> __aeabi_memcpy
       0   mbedtls_x509write_crt_set_subject_alternative_name
         0   -> mbedtls_x509_write_set_san_common
       0   mbedtls_x509write_crt_set_subject_key
       0   mbedtls_x509write_crt_set_subject_key_identifier
         0   -> mbedtls_x509write_crt_set_key_identifier
       0   mbedtls_x509write_crt_set_subject_name
         0   -> mbedtls_x509_string_to_names
      16   mbedtls_x509write_crt_set_validity
        16   -> strlen
        16   -> strncpy
       0   mbedtls_x509write_crt_set_version
      24   x509_write_time
        24   -> mbedtls_asn1_write_len
        24   -> mbedtls_asn1_write_raw_buffer
        24   -> mbedtls_asn1_write_tag


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable16
       4  ??DataTable16_1
       4  ??DataTable16_2
       4  ??DataTable16_3
       4  ??DataTable16_4
       4  ??DataTable17
       4  ??DataTable17_1
       4  ??DataTable17_2
       4  ??DataTable17_3
       4  ??DataTable17_4
       4  ??DataTable17_5
       4  ??DataTable17_6
      12  ?Subroutine0
      10  ?Subroutine1
      10  ?Subroutine2
      10  ?Subroutine3
      14  ?Subroutine4
      10  ?Subroutine5
       8  ?Subroutine6
       4  ?_0
       4  ?_1
       4  ?_2
       4  ?_3
       4  ?_4
      12  ?_5
      32  ?_6
      28  ?_7
       2  mbedtls_byte_order_detector
      18  mbedtls_put_unaligned_uint16
     620  mbedtls_x509write_crt_der
      40  mbedtls_x509write_crt_free
      16  mbedtls_x509write_crt_init
      54  mbedtls_x509write_crt_pem
       6  mbedtls_x509write_crt_set_authority_key_identifier
     120  mbedtls_x509write_crt_set_basic_constraints
     150  mbedtls_x509write_crt_set_ext_key_usage
      18  mbedtls_x509write_crt_set_extension
       4  mbedtls_x509write_crt_set_issuer_key
       6  mbedtls_x509write_crt_set_issuer_name
     180  mbedtls_x509write_crt_set_key_identifier
     122  mbedtls_x509write_crt_set_key_usage
       6  mbedtls_x509write_crt_set_md_alg
      54  mbedtls_x509write_crt_set_ns_cert_type
      42  mbedtls_x509write_crt_set_serial
      24  mbedtls_x509write_crt_set_serial_raw
       6  mbedtls_x509write_crt_set_subject_alternative_name
       4  mbedtls_x509write_crt_set_subject_key
       6  mbedtls_x509write_crt_set_subject_key_identifier
       6  mbedtls_x509write_crt_set_subject_name
      72  mbedtls_x509write_crt_set_validity
       4  mbedtls_x509write_crt_set_version
     132  x509_write_time

 
    20 bytes in section .rodata
 1'906 bytes in section .text
 
 1'888 bytes of CODE  memory (+ 18 bytes shared)
    20 bytes of CONST memory

Errors: none
Warnings: none
