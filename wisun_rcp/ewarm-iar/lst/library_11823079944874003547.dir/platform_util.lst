###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         27/Nov/2024  12:17:33
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\platform_util.c
#    Command line                 =
#        -f
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir\platform_util.o.rsp
#        (C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\platform_util.c
#        -D EFR32FG28B322F1024IM48=1 -D
#        configNUM_SDK_THREAD_LOCAL_STORAGE_POINTERS=2 -D
#        SL_COMPONENT_CATALOG_PRESENT=1 -D
#        MBEDTLS_CONFIG_FILE=<sl_mbedtls_config.h> -D
#        MBEDTLS_PSA_CRYPTO_CONFIG_FILE=<psa_crypto_config.h> -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -D
#        RTT_USE_ASM=0 -D MBED_CONF_MBED_TRACE_ENABLE=1 -D
#        MBED_CONF_NANOSTACK_CONFIGURATION=ws_router -D
#        MBED_TRACE_MAX_LEVEL=TRACE_ACTIVE_LEVEL_ALL -D DEBUG_EFM_USER=1 -D
#        HAVE_LFN=1 -D HAVE_LFN_PARENT=1 -lC
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\lst\library_11823079944874003547.dir
#        --diag_suppress Pa050 -o
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir
#        --debug --endian=little --cpu=Cortex-M33 --cmse --cmse -e
#        --fpu=VFPv5_sp --dlib_config "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\
#        -I C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\autogen\ -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\config\ -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\config\rail\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\Device\SiliconLabs\EFR32FG28\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\common\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\CMSIS\Core\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\CMSIS\RTOS2\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\device_init\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\dmadrv\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\common\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emlib\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\cmsis\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\kernel\include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\kernel\portable\IAR\ARM_CM33_NTZ\non_secure\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\iostream\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\config\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\config\preset\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\nvm3\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\peripheral\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_psa_driver\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\common\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\wmbus\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\sidewalk\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\efr32xg28\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\rail_util_pti\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\src\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\segger\systemview\SEGGER\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\silicon_labs\silabs_core\memory_manager\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\common\toolchain\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\system\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\ns_list\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\nanostack\nanostack-libservice\mbed-client-libservice\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\sleeptimer\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\app\wisun_rcp\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\inc\socket\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\src\
#        -Ohz --use_c++_inline) --dependencies=n
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir\platform_util.o.iar_deps
#    Locale                       =  C
#    List file                    =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\lst\library_11823079944874003547.dir\platform_util.lst
#    Object file                  =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir\platform_util.o
#    Runtime model:                  
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_file_descriptor     =  0
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#
###############################################################################

C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\platform_util.c
      1          /*
      2           * Common and shared functions used by multiple modules in the Mbed TLS
      3           * library.
      4           *
      5           *  Copyright The Mbed TLS Contributors
      6           *  SPDX-License-Identifier: Apache-2.0
      7           *
      8           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      9           *  not use this file except in compliance with the License.
     10           *  You may obtain a copy of the License at
     11           *
     12           *  http://www.apache.org/licenses/LICENSE-2.0
     13           *
     14           *  Unless required by applicable law or agreed to in writing, software
     15           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     16           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     17           *  See the License for the specific language governing permissions and
     18           *  limitations under the License.
     19           */
     20          
     21          /*
     22           * Ensure gmtime_r is available even with -std=c99; must be defined before
     23           * mbedtls_config.h, which pulls in glibc's features.h. Harmless on other platforms
     24           * except OpenBSD, where it stops us accessing explicit_bzero.
     25           */
     26          #if !defined(_POSIX_C_SOURCE) && !defined(__OpenBSD__)
     27          #define _POSIX_C_SOURCE 200112L
     28          #endif
     29          
     30          #if !defined(_GNU_SOURCE)
     31          /* Clang requires this to get support for explicit_bzero */
     32          #define _GNU_SOURCE
     33          #endif
     34          
     35          #include "common.h"
     36          
     37          #include "mbedtls/platform_util.h"
     38          #include "mbedtls/platform.h"
     39          #include "mbedtls/threading.h"
     40          
     41          #include <stddef.h>
     42          
     43          #ifndef __STDC_WANT_LIB_EXT1__
     44          #define __STDC_WANT_LIB_EXT1__ 1 /* Ask for the C11 gmtime_s() and memset_s() if available */
     45          #endif
     46          #include <string.h>
     47          
     48          #if defined(_WIN32)
     49          #include <windows.h>
     50          #endif
     51          
     52          // Detect platforms known to support explicit_bzero()
     53          #if defined(__GLIBC__) && (__GLIBC__ >= 2) && (__GLIBC_MINOR__ >= 25)
     54          #define MBEDTLS_PLATFORM_HAS_EXPLICIT_BZERO 1
     55          #elif (defined(__FreeBSD__) && (__FreeBSD_version >= 1100037)) || defined(__OpenBSD__)
     56          #define MBEDTLS_PLATFORM_HAS_EXPLICIT_BZERO 1
     57          #endif
     58          
     59          #if !defined(MBEDTLS_PLATFORM_ZEROIZE_ALT)
     60          
     61          #undef HAVE_MEMORY_SANITIZER
     62          #if defined(__has_feature)
     63          #if __has_feature(memory_sanitizer)
     64          #include <sanitizer/msan_interface.h>
     65          #define HAVE_MEMORY_SANITIZER
     66          #endif
     67          #endif
     68          
     69          /*
     70           * Where possible, we try to detect the presence of a platform-provided
     71           * secure memset, such as explicit_bzero(), that is safe against being optimized
     72           * out, and use that.
     73           *
     74           * For other platforms, we provide an implementation that aims not to be
     75           * optimized out by the compiler.
     76           *
     77           * This implementation for mbedtls_platform_zeroize() was inspired from Colin
     78           * Percival's blog article at:
     79           *
     80           * http://www.daemonology.net/blog/2014-09-04-how-to-zero-a-buffer.html
     81           *
     82           * It uses a volatile function pointer to the standard memset(). Because the
     83           * pointer is volatile the compiler expects it to change at
     84           * any time and will not optimize out the call that could potentially perform
     85           * other operations on the input buffer instead of just setting it to 0.
     86           * Nevertheless, as pointed out by davidtgoldblatt on Hacker News
     87           * (refer to http://www.daemonology.net/blog/2014-09-05-erratum.html for
     88           * details), optimizations of the following form are still possible:
     89           *
     90           * if (memset_func != memset)
     91           *     memset_func(buf, 0, len);
     92           *
     93           * Note that it is extremely difficult to guarantee that
     94           * the memset() call will not be optimized out by aggressive compilers
     95           * in a portable way. For this reason, Mbed TLS also provides the configuration
     96           * option MBEDTLS_PLATFORM_ZEROIZE_ALT, which allows users to configure
     97           * mbedtls_platform_zeroize() to use a suitable implementation for their
     98           * platform and needs.
     99           */
    100          #if !defined(MBEDTLS_PLATFORM_HAS_EXPLICIT_BZERO) && !(defined(__STDC_LIB_EXT1__) && \
    101              !defined(__IAR_SYSTEMS_ICC__)) \
    102              && !defined(_WIN32)

   \                                 In section .data, align 4
    103          static void *(*const volatile memset_func)(void *, int, size_t) = memset;
   \                     memset_func:
   \        0x0   0x....'....        DC32 memset
    104          #endif
    105          

   \                                 In section .text, align 2, keep-with-next
    106          void mbedtls_platform_zeroize(void *buf, size_t len)
    107          {
   \                     mbedtls_platform_zeroize: (+1)
   \        0x0   0x000A             MOVS     R2,R1
   \        0x2   0xD100             BNE.N    ??mbedtls_platform_zeroize_0
   \        0x4   0x4770             BX       LR
   \                     ??mbedtls_platform_zeroize_0: (+1)
   \        0x6   0xB510             PUSH     {R4,LR}
    108              MBEDTLS_INTERNAL_VALIDATE(len == 0 || buf != NULL);
    109          
    110              if (len > 0) {
    111          #if defined(MBEDTLS_PLATFORM_HAS_EXPLICIT_BZERO)
    112                  explicit_bzero(buf, len);
    113          #if defined(HAVE_MEMORY_SANITIZER)
    114                  /* You'd think that Msan would recognize explicit_bzero() as
    115                   * equivalent to bzero(), but it actually doesn't on several
    116                   * platforms, including Linux (Ubuntu 20.04).
    117                   * https://github.com/google/sanitizers/issues/1507
    118                   * https://github.com/openssh/openssh-portable/commit/74433a19bb6f4cef607680fa4d1d7d81ca3826aa
    119                   */
    120                  __msan_unpoison(buf, len);
    121          #endif
    122          #elif defined(__STDC_LIB_EXT1__) && !defined(__IAR_SYSTEMS_ICC__)
    123                  memset_s(buf, len, 0, len);
    124          #elif defined(_WIN32)
    125                  SecureZeroMemory(buf, len);
    126          #else
    127                  memset_func(buf, 0, len);
   \        0x8   0x....             LDR.N    R4,??DataTable0
   \        0xA   0x6823             LDR      R3,[R4, #+0]
   \        0xC   0x2100             MOVS     R1,#+0
   \        0xE   0xE8BD 0x4010      POP      {R4,LR}
   \       0x12   0x4718             BX       R3
    128          #endif
    129          
    130          #if defined(__GNUC__)
    131                  /* For clang and recent gcc, pretend that we have some assembly that reads the
    132                   * zero'd memory as an additional protection against being optimised away. */
    133          #if defined(__clang__) || (__GNUC__ >= 10)
    134          #if defined(__clang__)
    135          #pragma clang diagnostic push
    136          #pragma clang diagnostic ignored "-Wvla"
    137          #elif defined(MBEDTLS_COMPILER_IS_GCC)
    138          #pragma GCC diagnostic push
    139          #pragma GCC diagnostic ignored "-Wvla"
    140          #endif
    141                  asm volatile ("" : : "m" (*(char (*)[len]) buf) :);
    142          #if defined(__clang__)
    143          #pragma clang diagnostic pop
    144          #elif defined(MBEDTLS_COMPILER_IS_GCC)
    145          #pragma GCC diagnostic pop
    146          #endif
    147          #endif
    148          #endif
    149              }
    150          }
    151          #endif /* MBEDTLS_PLATFORM_ZEROIZE_ALT */
    152          

   \                                 In section .text, align 2, keep-with-next
    153          void mbedtls_zeroize_and_free(void *buf, size_t len)
    154          {
   \                     mbedtls_zeroize_and_free: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    155              if (buf != NULL) {
   \        0x4   0xBF18             IT       NE
    156                  mbedtls_platform_zeroize(buf, len);
   \        0x6   0x.... 0x....      BLNE     mbedtls_platform_zeroize
    157              }
    158          
    159              mbedtls_free(buf);
   \        0xA   0x4620             MOV      R0,R4
   \        0xC   0xE8BD 0x4010      POP      {R4,LR}
   \       0x10   0x.... 0x....      B.W      sl_free
    160          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \        0x0   0x....'....        DC32     memset_func
    161          
    162          #if defined(MBEDTLS_HAVE_TIME_DATE) && !defined(MBEDTLS_PLATFORM_GMTIME_R_ALT)
    163          #include <time.h>
    164          #if !defined(_WIN32) && (defined(unix) || \
    165              defined(__unix) || defined(__unix__) || (defined(__APPLE__) && \
    166              defined(__MACH__)))
    167          #include <unistd.h>
    168          #endif /* !_WIN32 && (unix || __unix || __unix__ ||
    169                  * (__APPLE__ && __MACH__)) */
    170          
    171          #if !((defined(_POSIX_VERSION) && _POSIX_VERSION >= 200809L) ||     \
    172              (defined(_POSIX_THREAD_SAFE_FUNCTIONS) &&                     \
    173              _POSIX_THREAD_SAFE_FUNCTIONS >= 200112L))
    174          /*
    175           * This is a convenience shorthand macro to avoid checking the long
    176           * preprocessor conditions above. Ideally, we could expose this macro in
    177           * platform_util.h and simply use it in platform_util.c, threading.c and
    178           * threading.h. However, this macro is not part of the Mbed TLS public API, so
    179           * we keep it private by only defining it in this file
    180           */
    181          #if !(defined(_WIN32) && !defined(EFIX64) && !defined(EFI32)) || \
    182              (defined(__MINGW32__) && !defined(__MINGW64_VERSION_MAJOR))
    183          #define PLATFORM_UTIL_USE_GMTIME
    184          #endif
    185          
    186          #endif /* !( ( defined(_POSIX_VERSION) && _POSIX_VERSION >= 200809L ) || \
    187                       ( defined(_POSIX_THREAD_SAFE_FUNCTIONS ) && \
    188                          _POSIX_THREAD_SAFE_FUNCTIONS >= 200112L ) ) */
    189          
    190          struct tm *mbedtls_platform_gmtime_r(const mbedtls_time_t *tt,
    191                                               struct tm *tm_buf)
    192          {
    193          #if defined(_WIN32) && !defined(PLATFORM_UTIL_USE_GMTIME)
    194          #if defined(__STDC_LIB_EXT1__)
    195              return (gmtime_s(tt, tm_buf) == 0) ? NULL : tm_buf;
    196          #else
    197              /* MSVC and mingw64 argument order and return value are inconsistent with the C11 standard */
    198              return (gmtime_s(tm_buf, tt) == 0) ? tm_buf : NULL;
    199          #endif
    200          #elif !defined(PLATFORM_UTIL_USE_GMTIME)
    201              return gmtime_r(tt, tm_buf);
    202          #else
    203              struct tm *lt;
    204          
    205          #if defined(MBEDTLS_THREADING_C)
    206              if (mbedtls_mutex_lock(&mbedtls_threading_gmtime_mutex) != 0) {
    207                  return NULL;
    208              }
    209          #endif /* MBEDTLS_THREADING_C */
    210          
    211              lt = gmtime(tt);
    212          
    213              if (lt != NULL) {
    214                  memcpy(tm_buf, lt, sizeof(struct tm));
    215              }
    216          
    217          #if defined(MBEDTLS_THREADING_C)
    218              if (mbedtls_mutex_unlock(&mbedtls_threading_gmtime_mutex) != 0) {
    219                  return NULL;
    220              }
    221          #endif /* MBEDTLS_THREADING_C */
    222          
    223              return (lt == NULL) ? NULL : tm_buf;
    224          #endif /* _WIN32 && !EFIX64 && !EFI32 */
    225          }
    226          #endif /* MBEDTLS_HAVE_TIME_DATE && MBEDTLS_PLATFORM_GMTIME_R_ALT */
    227          
    228          #if defined(MBEDTLS_TEST_HOOKS)
    229          void (*mbedtls_test_hook_test_fail)(const char *, int, const char *);
    230          #endif /* MBEDTLS_TEST_HOOKS */
    231          
    232          /*
    233           * Provide external definitions of some inline functions so that the compiler
    234           * has the option to not inline them
    235           */
    236          extern inline void mbedtls_xor(unsigned char *r,
    237                                         const unsigned char *a,
    238                                         const unsigned char *b,
    239                                         size_t n);
    240          
    241          extern inline uint16_t mbedtls_get_unaligned_uint16(const void *p);
    242          
    243          extern inline void mbedtls_put_unaligned_uint16(void *p, uint16_t x);
    244          
    245          extern inline uint32_t mbedtls_get_unaligned_uint32(const void *p);
    246          
    247          extern inline void mbedtls_put_unaligned_uint32(void *p, uint32_t x);
    248          
    249          extern inline uint64_t mbedtls_get_unaligned_uint64(const void *p);
    250          
    251          extern inline void mbedtls_put_unaligned_uint64(void *p, uint64_t x);
    252          
    253          #if defined(MBEDTLS_HAVE_TIME) && !defined(MBEDTLS_PLATFORM_MS_TIME_ALT)
    254          
    255          #include <time.h>
    256          #if !defined(_WIN32) && \
    257              (defined(unix) || defined(__unix) || defined(__unix__) || \
    258              (defined(__APPLE__) && defined(__MACH__)))
    259          #include <unistd.h>
    260          #endif /* !_WIN32 && (unix || __unix || __unix__ || (__APPLE__ && __MACH__)) */
    261          #if (defined(_POSIX_VERSION) && _POSIX_VERSION >= 199309L)
    262          mbedtls_ms_time_t mbedtls_ms_time(void)
    263          {
    264              int ret;
    265              struct timespec tv;
    266              mbedtls_ms_time_t current_ms;
    267          
    268          #if defined(__linux__)
    269              ret = clock_gettime(CLOCK_BOOTTIME, &tv);
    270          #else
    271              ret = clock_gettime(CLOCK_MONOTONIC, &tv);
    272          #endif
    273              if (ret) {
    274                  return time(NULL) * 1000;
    275              }
    276          
    277              current_ms = tv.tv_sec;
    278          
    279              return current_ms*1000 + tv.tv_nsec / 1000000;
    280          }
    281          #elif defined(_WIN32) || defined(WIN32) || defined(__CYGWIN__) || \
    282              defined(__MINGW32__) || defined(_WIN64)
    283          #include <windows.h>
    284          mbedtls_ms_time_t mbedtls_ms_time(void)
    285          {
    286              FILETIME ct;
    287              mbedtls_ms_time_t current_ms;
    288          
    289              GetSystemTimeAsFileTime(&ct);
    290              current_ms = ((mbedtls_ms_time_t) ct.dwLowDateTime +
    291                            ((mbedtls_ms_time_t) (ct.dwHighDateTime) << 32LL))/10000;
    292              return current_ms;
    293          }
    294          #else
    295          #error "No mbedtls_ms_time available"
    296          #endif
    297          #endif /* MBEDTLS_HAVE_TIME && !MBEDTLS_PLATFORM_MS_TIME_ALT */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   mbedtls_platform_zeroize
         0   -- Indirect call
       8   mbedtls_zeroize_and_free
         8   -> mbedtls_platform_zeroize
         0   -> sl_free


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
      20  mbedtls_platform_zeroize
      20  mbedtls_zeroize_and_free
       4  memset_func

 
  4 bytes in section .data
 44 bytes in section .text
 
 44 bytes of CODE memory
  4 bytes of DATA memory

Errors: none
Warnings: none
