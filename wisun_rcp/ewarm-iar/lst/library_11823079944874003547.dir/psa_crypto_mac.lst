###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         27/Nov/2024  12:17:41
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\psa_crypto_mac.c
#    Command line                 =
#        -f
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir\psa_crypto_mac.o.rsp
#        (C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\psa_crypto_mac.c
#        -D EFR32FG28B322F1024IM48=1 -D
#        configNUM_SDK_THREAD_LOCAL_STORAGE_POINTERS=2 -D
#        SL_COMPONENT_CATALOG_PRESENT=1 -D
#        MBEDTLS_CONFIG_FILE=<sl_mbedtls_config.h> -D
#        MBEDTLS_PSA_CRYPTO_CONFIG_FILE=<psa_crypto_config.h> -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -D
#        RTT_USE_ASM=0 -D MBED_CONF_MBED_TRACE_ENABLE=1 -D
#        MBED_CONF_NANOSTACK_CONFIGURATION=ws_router -D
#        MBED_TRACE_MAX_LEVEL=TRACE_ACTIVE_LEVEL_ALL -D DEBUG_EFM_USER=1 -D
#        HAVE_LFN=1 -D HAVE_LFN_PARENT=1 -lC
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\lst\library_11823079944874003547.dir
#        --diag_suppress Pa050 -o
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir
#        --debug --endian=little --cpu=Cortex-M33 --cmse --cmse -e
#        --fpu=VFPv5_sp --dlib_config "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\
#        -I C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\autogen\ -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\config\ -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\config\rail\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\Device\SiliconLabs\EFR32FG28\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\common\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\CMSIS\Core\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\CMSIS\RTOS2\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\device_init\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\dmadrv\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\common\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emlib\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\cmsis\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\kernel\include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\kernel\portable\IAR\ARM_CM33_NTZ\non_secure\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\iostream\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\config\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\config\preset\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\nvm3\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\peripheral\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_psa_driver\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\common\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\wmbus\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\sidewalk\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\efr32xg28\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\rail_util_pti\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\src\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\segger\systemview\SEGGER\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\silicon_labs\silabs_core\memory_manager\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\common\toolchain\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\system\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\ns_list\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\nanostack\nanostack-libservice\mbed-client-libservice\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\sleeptimer\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\app\wisun_rcp\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\inc\socket\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\src\
#        -Ohz --use_c++_inline) --dependencies=n
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir\psa_crypto_mac.o.iar_deps
#    Locale                       =  C
#    List file                    =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\lst\library_11823079944874003547.dir\psa_crypto_mac.lst
#    Object file                  =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir\psa_crypto_mac.o
#    Runtime model:                  
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#
###############################################################################

C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\psa_crypto_mac.c
      1          /*
      2           *  PSA MAC layer on top of Mbed TLS software crypto
      3           */
      4          /*
      5           *  Copyright The Mbed TLS Contributors
      6           *  SPDX-License-Identifier: Apache-2.0
      7           *
      8           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      9           *  not use this file except in compliance with the License.
     10           *  You may obtain a copy of the License at
     11           *
     12           *  http://www.apache.org/licenses/LICENSE-2.0
     13           *
     14           *  Unless required by applicable law or agreed to in writing, software
     15           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     16           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     17           *  See the License for the specific language governing permissions and
     18           *  limitations under the License.
     19           */
     20          
     21          #include "common.h"
     22          
     23          #if defined(MBEDTLS_PSA_CRYPTO_C)
     24          
     25          #include <psa/crypto.h>
     26          #include "psa_crypto_core.h"
     27          #include "psa_crypto_cipher.h"
     28          #include "psa_crypto_mac.h"
     29          #include <mbedtls/md.h>
     30          
     31          #include <mbedtls/error.h>
     32          #include "mbedtls/constant_time.h"
     33          #include <string.h>
     34          
     35          #if defined(MBEDTLS_PSA_BUILTIN_ALG_HMAC)
     36          static psa_status_t psa_hmac_abort_internal(
     37              mbedtls_psa_hmac_operation_t *hmac)
     38          {
     39              mbedtls_platform_zeroize(hmac->opad, sizeof(hmac->opad));
     40              return psa_hash_abort(&hmac->hash_ctx);
     41          }
     42          
     43          static psa_status_t psa_hmac_setup_internal(
     44              mbedtls_psa_hmac_operation_t *hmac,
     45              const uint8_t *key,
     46              size_t key_length,
     47              psa_algorithm_t hash_alg)
     48          {
     49              uint8_t ipad[PSA_HMAC_MAX_HASH_BLOCK_SIZE];
     50              size_t i;
     51              size_t hash_size = PSA_HASH_LENGTH(hash_alg);
     52              size_t block_size = PSA_HASH_BLOCK_LENGTH(hash_alg);
     53              psa_status_t status;
     54          
     55              hmac->alg = hash_alg;
     56          
     57              /* Sanity checks on block_size, to guarantee that there won't be a buffer
     58               * overflow below. This should never trigger if the hash algorithm
     59               * is implemented correctly. */
     60              /* The size checks against the ipad and opad buffers cannot be written
     61               * `block_size > sizeof( ipad ) || block_size > sizeof( hmac->opad )`
     62               * because that triggers -Wlogical-op on GCC 7.3. */
     63              if (block_size > sizeof(ipad)) {
     64                  return PSA_ERROR_NOT_SUPPORTED;
     65              }
     66              if (block_size > sizeof(hmac->opad)) {
     67                  return PSA_ERROR_NOT_SUPPORTED;
     68              }
     69              if (block_size < hash_size) {
     70                  return PSA_ERROR_NOT_SUPPORTED;
     71              }
     72          
     73              if (key_length > block_size) {
     74                  status = psa_hash_compute(hash_alg, key, key_length,
     75                                            ipad, sizeof(ipad), &key_length);
     76                  if (status != PSA_SUCCESS) {
     77                      goto cleanup;
     78                  }
     79              }
     80              /* A 0-length key is not commonly used in HMAC when used as a MAC,
     81               * but it is permitted. It is common when HMAC is used in HKDF, for
     82               * example. Don't call `memcpy` in the 0-length because `key` could be
     83               * an invalid pointer which would make the behavior undefined. */
     84              else if (key_length != 0) {
     85                  memcpy(ipad, key, key_length);
     86              }
     87          
     88              /* ipad contains the key followed by garbage. Xor and fill with 0x36
     89               * to create the ipad value. */
     90              for (i = 0; i < key_length; i++) {
     91                  ipad[i] ^= 0x36;
     92              }
     93              memset(ipad + key_length, 0x36, block_size - key_length);
     94          
     95              /* Copy the key material from ipad to opad, flipping the requisite bits,
     96               * and filling the rest of opad with the requisite constant. */
     97              for (i = 0; i < key_length; i++) {
     98                  hmac->opad[i] = ipad[i] ^ 0x36 ^ 0x5C;
     99              }
    100              memset(hmac->opad + key_length, 0x5C, block_size - key_length);
    101          
    102              status = psa_hash_setup(&hmac->hash_ctx, hash_alg);
    103              if (status != PSA_SUCCESS) {
    104                  goto cleanup;
    105              }
    106          
    107              status = psa_hash_update(&hmac->hash_ctx, ipad, block_size);
    108          
    109          cleanup:
    110              mbedtls_platform_zeroize(ipad, sizeof(ipad));
    111          
    112              return status;
    113          }
    114          
    115          static psa_status_t psa_hmac_update_internal(
    116              mbedtls_psa_hmac_operation_t *hmac,
    117              const uint8_t *data,
    118              size_t data_length)
    119          {
    120              return psa_hash_update(&hmac->hash_ctx, data, data_length);
    121          }
    122          
    123          static psa_status_t psa_hmac_finish_internal(
    124              mbedtls_psa_hmac_operation_t *hmac,
    125              uint8_t *mac,
    126              size_t mac_size)
    127          {
    128              uint8_t tmp[PSA_HASH_MAX_SIZE];
    129              psa_algorithm_t hash_alg = hmac->alg;
    130              size_t hash_size = 0;
    131              size_t block_size = PSA_HASH_BLOCK_LENGTH(hash_alg);
    132              psa_status_t status;
    133          
    134              status = psa_hash_finish(&hmac->hash_ctx, tmp, sizeof(tmp), &hash_size);
    135              if (status != PSA_SUCCESS) {
    136                  return status;
    137              }
    138              /* From here on, tmp needs to be wiped. */
    139          
    140              status = psa_hash_setup(&hmac->hash_ctx, hash_alg);
    141              if (status != PSA_SUCCESS) {
    142                  goto exit;
    143              }
    144          
    145              status = psa_hash_update(&hmac->hash_ctx, hmac->opad, block_size);
    146              if (status != PSA_SUCCESS) {
    147                  goto exit;
    148              }
    149          
    150              status = psa_hash_update(&hmac->hash_ctx, tmp, hash_size);
    151              if (status != PSA_SUCCESS) {
    152                  goto exit;
    153              }
    154          
    155              status = psa_hash_finish(&hmac->hash_ctx, tmp, sizeof(tmp), &hash_size);
    156              if (status != PSA_SUCCESS) {
    157                  goto exit;
    158              }
    159          
    160              memcpy(mac, tmp, mac_size);
    161          
    162          exit:
    163              mbedtls_platform_zeroize(tmp, hash_size);
    164              return status;
    165          }
    166          #endif /* MBEDTLS_PSA_BUILTIN_ALG_HMAC */
    167          
    168          #if defined(MBEDTLS_PSA_BUILTIN_ALG_CMAC)
    169          static psa_status_t cmac_setup(mbedtls_psa_mac_operation_t *operation,
    170                                         const psa_key_attributes_t *attributes,
    171                                         const uint8_t *key_buffer)
    172          {
    173              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    174          
    175          #if defined(PSA_WANT_KEY_TYPE_DES)
    176              /* Mbed TLS CMAC does not accept 3DES with only two keys, nor does it accept
    177               * to do CMAC with pure DES, so return NOT_SUPPORTED here. */
    178              if (psa_get_key_type(attributes) == PSA_KEY_TYPE_DES &&
    179                  (psa_get_key_bits(attributes) == 64 ||
    180                   psa_get_key_bits(attributes) == 128)) {
    181                  return PSA_ERROR_NOT_SUPPORTED;
    182              }
    183          #endif
    184          
    185              const mbedtls_cipher_info_t *cipher_info =
    186                  mbedtls_cipher_info_from_psa(
    187                      PSA_ALG_CMAC,
    188                      psa_get_key_type(attributes),
    189                      psa_get_key_bits(attributes),
    190                      NULL);
    191          
    192              if (cipher_info == NULL) {
    193                  return PSA_ERROR_NOT_SUPPORTED;
    194              }
    195          
    196              ret = mbedtls_cipher_setup(&operation->ctx.cmac, cipher_info);
    197              if (ret != 0) {
    198                  goto exit;
    199              }
    200          
    201              ret = mbedtls_cipher_cmac_starts(&operation->ctx.cmac,
    202                                               key_buffer,
    203                                               psa_get_key_bits(attributes));
    204          exit:
    205              return mbedtls_to_psa_error(ret);
    206          }
    207          #endif /* MBEDTLS_PSA_BUILTIN_ALG_CMAC */
    208          
    209          #if defined(MBEDTLS_PSA_BUILTIN_ALG_HMAC) || \
    210              defined(MBEDTLS_PSA_BUILTIN_ALG_CMAC)
    211          
    212          /* Initialize this driver's MAC operation structure. Once this function has been
    213           * called, mbedtls_psa_mac_abort can run and will do the right thing. */
    214          static psa_status_t mac_init(
    215              mbedtls_psa_mac_operation_t *operation,
    216              psa_algorithm_t alg)
    217          {
    218              psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;
    219          
    220              operation->alg = alg;
    221          
    222          #if defined(MBEDTLS_PSA_BUILTIN_ALG_CMAC)
    223              if (PSA_ALG_FULL_LENGTH_MAC(operation->alg) == PSA_ALG_CMAC) {
    224                  mbedtls_cipher_init(&operation->ctx.cmac);
    225                  status = PSA_SUCCESS;
    226              } else
    227          #endif /* MBEDTLS_PSA_BUILTIN_ALG_CMAC */
    228          #if defined(MBEDTLS_PSA_BUILTIN_ALG_HMAC)
    229              if (PSA_ALG_IS_HMAC(operation->alg)) {
    230                  /* We'll set up the hash operation later in psa_hmac_setup_internal. */
    231                  operation->ctx.hmac.alg = 0;
    232                  status = PSA_SUCCESS;
    233              } else
    234          #endif /* MBEDTLS_PSA_BUILTIN_ALG_HMAC */
    235              {
    236                  (void) operation;
    237                  status = PSA_ERROR_NOT_SUPPORTED;
    238              }
    239          
    240              if (status != PSA_SUCCESS) {
    241                  memset(operation, 0, sizeof(*operation));
    242              }
    243              return status;
    244          }
    245          

   \                                 In section .text, align 2, keep-with-next
    246          psa_status_t mbedtls_psa_mac_abort(mbedtls_psa_mac_operation_t *operation)
    247          {
   \                     mbedtls_psa_mac_abort: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
    248              if (operation->alg == 0) {
   \        0x4   0x6820             LDR      R0,[R4, #+0]
   \        0x6   0xB1B8             CBZ.N    R0,??mbedtls_psa_mac_abort_0
    249                  /* The object has (apparently) been initialized but it is not
    250                   * in use. It's ok to call abort on such an object, and there's
    251                   * nothing to do. */
    252                  return PSA_SUCCESS;
    253              } else
    254          #if defined(MBEDTLS_PSA_BUILTIN_ALG_CMAC)
    255              if (PSA_ALG_FULL_LENGTH_MAC(operation->alg) == PSA_ALG_CMAC) {
    256                  mbedtls_cipher_free(&operation->ctx.cmac);
    257              } else
    258          #endif /* MBEDTLS_PSA_BUILTIN_ALG_CMAC */
    259          #if defined(MBEDTLS_PSA_BUILTIN_ALG_HMAC)
    260              if (PSA_ALG_IS_HMAC(operation->alg)) {
   \        0x8   0x....             LDR.N    R1,??DataTable3
   \        0xA   0x4008             ANDS     R0,R1,R0
   \        0xC   0xF1B0 0x7F60      CMP      R0,#+58720256
   \       0x10   0xD10B             BNE.N    ??mbedtls_psa_mac_abort_1
    261                  psa_hmac_abort_internal(&operation->ctx.hmac);
   \       0x12   0x2140             MOVS     R1,#+64
   \       0x14   0xF104 0x00E8      ADD      R0,R4,#+232
   \       0x18   0x.... 0x....      BL       mbedtls_platform_zeroize
   \       0x1C   0xF104 0x0008      ADD      R0,R4,#+8
   \       0x20   0x.... 0x....      BL       psa_hash_abort
    262              } else
    263          #endif /* MBEDTLS_PSA_BUILTIN_ALG_HMAC */
    264              {
    265                  /* Sanity check (shouldn't happen: operation->alg should
    266                   * always have been initialized to a valid value). */
    267                  goto bad_state;
    268              }
    269          
    270              operation->alg = 0;
   \       0x24   0x2000             MOVS     R0,#+0
   \       0x26   0x6020             STR      R0,[R4, #+0]
    271          
    272              return PSA_SUCCESS;
   \       0x28   0xBD10             POP      {R4,PC}
    273          
    274          bad_state:
    275              /* If abort is called on an uninitialized object, we can't trust
    276               * anything. Wipe the object in case it contains confidential data.
    277               * This may result in a memory leak if a pointer gets overwritten,
    278               * but it's too late to do anything about this. */
    279              memset(operation, 0, sizeof(*operation));
   \                     ??mbedtls_psa_mac_abort_1: (+1)
   \       0x2A   0xF44F 0x7194      MOV      R1,#+296
   \       0x2E   0x4620             MOV      R0,R4
   \       0x30   0x.... 0x....      BL       __aeabi_memclr4
    280              return PSA_ERROR_BAD_STATE;
   \       0x34   0xF06F 0x0088      MVN      R0,#+136
   \                     ??mbedtls_psa_mac_abort_0: (+1)
   \       0x38   0xBD10             POP      {R4,PC}
    281          }
    282          

   \                                 In section .text, align 2, keep-with-next
    283          static psa_status_t psa_mac_setup(mbedtls_psa_mac_operation_t *operation,
    284                                            const psa_key_attributes_t *attributes,
    285                                            const uint8_t *key_buffer,
    286                                            size_t key_buffer_size,
    287                                            psa_algorithm_t alg)
    288          {
   \                     psa_mac_setup: (+1)
   \        0x0   0xB5F0             PUSH     {R4-R7,LR}
   \        0x2   0xB093             SUB      SP,SP,#+76
   \        0x4   0x4605             MOV      R5,R0
    289              psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;
    290          
    291              /* A context must be freshly initialized before it can be set up. */
    292              if (operation->alg != 0) {
   \        0x6   0x6828             LDR      R0,[R5, #+0]
   \        0x8   0x4611             MOV      R1,R2
   \        0xA   0xB110             CBZ.N    R0,??psa_mac_setup_0
    293                  return PSA_ERROR_BAD_STATE;
   \        0xC   0xF06F 0x0088      MVN      R0,#+136
   \       0x10   0xE0AF             B.N      ??psa_mac_setup_1
    294              }
   \                     ??psa_mac_setup_0: (+1)
   \       0x12   0x9E18             LDR      R6,[SP, #+96]
    295          
    296              status = mac_init(operation, alg);
   \       0x14   0x....             LDR.N    R0,??DataTable3
   \       0x16   0xF06F 0x0485      MVN      R4,#+133
   \       0x1A   0xEA00 0x0206      AND      R2,R0,R6
   \       0x1E   0x602E             STR      R6,[R5, #+0]
   \       0x20   0xF1B2 0x7F60      CMP      R2,#+58720256
   \       0x24   0xD121             BNE.N    ??psa_mac_setup_2
   \       0x26   0x2200             MOVS     R2,#+0
    297              if (status != PSA_SUCCESS) {
    298                  return status;
    299              }
    300          
    301          #if defined(MBEDTLS_PSA_BUILTIN_ALG_CMAC)
    302              if (PSA_ALG_FULL_LENGTH_MAC(alg) == PSA_ALG_CMAC) {
    303                  /* Key buffer size for CMAC is dictated by the key bits set on the
    304                   * attributes, and previously validated by the core on key import. */
    305                  (void) key_buffer_size;
    306                  status = cmac_setup(operation, attributes, key_buffer);
    307              } else
    308          #endif /* MBEDTLS_PSA_BUILTIN_ALG_CMAC */
    309          #if defined(MBEDTLS_PSA_BUILTIN_ALG_HMAC)
    310              if (PSA_ALG_IS_HMAC(alg)) {
    311                  status = psa_hmac_setup_internal(&operation->ctx.hmac,
    312                                                   key_buffer,
    313                                                   key_buffer_size,
    314                                                   PSA_ALG_HMAC_GET_HASH(alg));
   \       0x28   0xF006 0x06FF      AND      R6,R6,#0xFF
   \       0x2C   0x606A             STR      R2,[R5, #+4]
   \       0x2E   0xF046 0x7600      ORR      R6,R6,#0x2000000
   \       0x32   0x....             LDR.N    R0,??DataTable3_1
   \       0x34   0x9302             STR      R3,[SP, #+8]
   \       0x36   0x4286             CMP      R6,R0
   \       0x38   0xD11D             BNE.N    ??psa_mac_setup_3
   \       0x3A   0x2010             MOVS     R0,#+16
   \                     ??psa_mac_setup_4: (+1)
   \       0x3C   0x2740             MOVS     R7,#+64
   \                     ??psa_mac_setup_5: (+1)
   \       0x3E   0x606E             STR      R6,[R5, #+4]
   \       0x40   0x2F40             CMP      R7,#+64
   \       0x42   0xF200 0x8092      BHI.W    ??psa_mac_setup_6
   \       0x46   0x4287             CMP      R7,R0
   \       0x48   0xF0C0 0x808F      BCC.W    ??psa_mac_setup_6
   \       0x4C   0x9B02             LDR      R3,[SP, #+8]
   \       0x4E   0x429F             CMP      R7,R3
   \       0x50   0xD251             BCS.N    ??psa_mac_setup_7
   \       0x52   0xAA02             ADD      R2,SP,#+8
   \       0x54   0x9201             STR      R2,[SP, #+4]
   \       0x56   0x2040             MOVS     R0,#+64
   \       0x58   0x9A02             LDR      R2,[SP, #+8]
   \       0x5A   0x9000             STR      R0,[SP, #+0]
   \       0x5C   0xAB03             ADD      R3,SP,#+12
   \       0x5E   0x4630             MOV      R0,R6
   \       0x60   0x.... 0x....      BL       psa_hash_compute
   \       0x64   0x0004             MOVS     R4,R0
   \       0x66   0xD17B             BNE.N    ??psa_mac_setup_8
   \       0x68   0xE04A             B.N      ??psa_mac_setup_9
    315              } else
   \                     ??psa_mac_setup_2: (+1)
   \       0x6A   0xF44F 0x7194      MOV      R1,#+296
   \       0x6E   0x4628             MOV      R0,R5
   \       0x70   0x.... 0x....      BL       __aeabi_memclr4
   \       0x74   0xE07C             B.N      ??psa_mac_setup_10
   \                     ??psa_mac_setup_3: (+1)
   \       0x76   0x....             LDR.N    R2,??DataTable3_2
   \       0x78   0x4296             CMP      R6,R2
   \       0x7A   0xBF1A             ITTE     NE
   \       0x7C   0x....             LDRNE.N  R0,??DataTable3_3
   \       0x7E   0x4286             CMPNE    R6,R0
   \       0x80   0x2014             MOVEQ    R0,#+20
   \       0x82   0xD0DB             BEQ.N    ??psa_mac_setup_4
   \       0x84   0x....             LDR.N    R0,??DataTable3_4
   \       0x86   0x4286             CMP      R6,R0
   \       0x88   0xBF08             IT       EQ
   \       0x8A   0x201C             MOVEQ    R0,#+28
   \       0x8C   0xD0D6             BEQ.N    ??psa_mac_setup_4
   \       0x8E   0x....             LDR.N    R0,??DataTable3_5
   \       0x90   0x4286             CMP      R6,R0
   \       0x92   0xBF08             IT       EQ
   \       0x94   0x2020             MOVEQ    R0,#+32
   \       0x96   0xD0D1             BEQ.N    ??psa_mac_setup_4
   \       0x98   0x....             LDR.N    R0,??DataTable3_6
   \       0x9A   0x4286             CMP      R6,R0
   \       0x9C   0xD102             BNE.N    ??psa_mac_setup_11
   \       0x9E   0x2030             MOVS     R0,#+48
   \                     ??psa_mac_setup_12: (+1)
   \       0xA0   0x2780             MOVS     R7,#+128
   \       0xA2   0xE7CC             B.N      ??psa_mac_setup_5
   \                     ??psa_mac_setup_11: (+1)
   \       0xA4   0x....             LDR.N    R0,??DataTable3_7
   \       0xA6   0x4286             CMP      R6,R0
   \       0xA8   0xBF08             IT       EQ
   \       0xAA   0x2040             MOVEQ    R0,#+64
   \       0xAC   0xD0F8             BEQ.N    ??psa_mac_setup_12
   \       0xAE   0x....             LDR.N    R0,??DataTable3_8
   \       0xB0   0x4286             CMP      R6,R0
   \       0xB2   0xBF08             IT       EQ
   \       0xB4   0x201C             MOVEQ    R0,#+28
   \       0xB6   0xD0F3             BEQ.N    ??psa_mac_setup_12
   \       0xB8   0x....             LDR.N    R0,??DataTable3_9
   \       0xBA   0x4286             CMP      R6,R0
   \       0xBC   0xBF08             IT       EQ
   \       0xBE   0x2020             MOVEQ    R0,#+32
   \       0xC0   0xD0EE             BEQ.N    ??psa_mac_setup_12
   \       0xC2   0x....             LDR.N    R0,??DataTable3_10
   \       0xC4   0x4286             CMP      R6,R0
   \       0xC6   0xD102             BNE.N    ??psa_mac_setup_13
   \       0xC8   0x201C             MOVS     R0,#+28
   \       0xCA   0x2790             MOVS     R7,#+144
   \       0xCC   0xE7B7             B.N      ??psa_mac_setup_5
   \                     ??psa_mac_setup_13: (+1)
   \       0xCE   0x....             LDR.N    R0,??DataTable3_11
   \       0xD0   0x4286             CMP      R6,R0
   \       0xD2   0xD102             BNE.N    ??psa_mac_setup_14
   \       0xD4   0x2020             MOVS     R0,#+32
   \       0xD6   0x2788             MOVS     R7,#+136
   \       0xD8   0xE7B1             B.N      ??psa_mac_setup_5
   \                     ??psa_mac_setup_14: (+1)
   \       0xDA   0x....             LDR.N    R0,??DataTable3_12
   \       0xDC   0x4286             CMP      R6,R0
   \       0xDE   0xD102             BNE.N    ??psa_mac_setup_15
   \       0xE0   0x2030             MOVS     R0,#+48
   \       0xE2   0x2768             MOVS     R7,#+104
   \       0xE4   0xE7AB             B.N      ??psa_mac_setup_5
   \                     ??psa_mac_setup_15: (+1)
   \       0xE6   0x....             LDR.N    R0,??DataTable3_13
   \       0xE8   0x4286             CMP      R6,R0
   \       0xEA   0xBF19             ITTEE    NE
   \       0xEC   0x2000             MOVNE    R0,#+0
   \       0xEE   0x2700             MOVNE    R7,#+0
   \       0xF0   0x2040             MOVEQ    R0,#+64
   \       0xF2   0x2748             MOVEQ    R7,#+72
   \       0xF4   0xE7A3             B.N      ??psa_mac_setup_5
   \                     ??psa_mac_setup_7: (+1)
   \       0xF6   0xB11B             CBZ.N    R3,??psa_mac_setup_9
   \       0xF8   0x461A             MOV      R2,R3
   \       0xFA   0xA803             ADD      R0,SP,#+12
   \       0xFC   0x.... 0x....      BL       __aeabi_memcpy
   \                     ??psa_mac_setup_9: (+1)
   \      0x100   0x2000             MOVS     R0,#+0
   \      0x102   0xAC03             ADD      R4,SP,#+12
   \      0x104   0xE004             B.N      ??psa_mac_setup_16
   \                     ??psa_mac_setup_17: (+1)
   \      0x106   0x5C21             LDRB     R1,[R4, R0]
   \      0x108   0xF081 0x0136      EOR      R1,R1,#0x36
   \      0x10C   0x5421             STRB     R1,[R4, R0]
   \      0x10E   0x1C40             ADDS     R0,R0,#+1
   \                     ??psa_mac_setup_16: (+1)
   \      0x110   0x9902             LDR      R1,[SP, #+8]
   \      0x112   0x4288             CMP      R0,R1
   \      0x114   0xD3F7             BCC.N    ??psa_mac_setup_17
   \      0x116   0x9802             LDR      R0,[SP, #+8]
   \      0x118   0xAB03             ADD      R3,SP,#+12
   \      0x11A   0x2236             MOVS     R2,#+54
   \      0x11C   0x1A79             SUBS     R1,R7,R1
   \      0x11E   0x4418             ADD      R0,R3,R0
   \      0x120   0x.... 0x....      BL       __aeabi_memset
   \      0x124   0x2100             MOVS     R1,#+0
   \      0x126   0xF105 0x00E8      ADD      R0,R5,#+232
   \      0x12A   0xE004             B.N      ??psa_mac_setup_18
   \                     ??psa_mac_setup_19: (+1)
   \      0x12C   0x5C62             LDRB     R2,[R4, R1]
   \      0x12E   0xF082 0x026A      EOR      R2,R2,#0x6A
   \      0x132   0x5442             STRB     R2,[R0, R1]
   \      0x134   0x1C49             ADDS     R1,R1,#+1
   \                     ??psa_mac_setup_18: (+1)
   \      0x136   0x9A02             LDR      R2,[SP, #+8]
   \      0x138   0x4291             CMP      R1,R2
   \      0x13A   0xD3F7             BCC.N    ??psa_mac_setup_19
   \      0x13C   0x9902             LDR      R1,[SP, #+8]
   \      0x13E   0x9B02             LDR      R3,[SP, #+8]
   \      0x140   0x225C             MOVS     R2,#+92
   \      0x142   0x1A79             SUBS     R1,R7,R1
   \      0x144   0x4418             ADD      R0,R0,R3
   \      0x146   0x.... 0x....      BL       __aeabi_memset
   \      0x14A   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_3: (+1)
   \      0x14E   0x0004             MOVS     R4,R0
   \      0x150   0xD106             BNE.N    ??psa_mac_setup_8
   \      0x152   0x463A             MOV      R2,R7
   \      0x154   0xA903             ADD      R1,SP,#+12
   \      0x156   0xF105 0x0008      ADD      R0,R5,#+8
   \      0x15A   0x.... 0x....      BL       psa_hash_update
   \      0x15E   0x4604             MOV      R4,R0
   \                     ??psa_mac_setup_8: (+1)
   \      0x160   0x2140             MOVS     R1,#+64
   \      0x162   0xA803             ADD      R0,SP,#+12
   \      0x164   0x.... 0x....      BL       mbedtls_platform_zeroize
    316          #endif /* MBEDTLS_PSA_BUILTIN_ALG_HMAC */
    317              {
    318                  (void) attributes;
    319                  (void) key_buffer;
    320                  (void) key_buffer_size;
    321                  status = PSA_ERROR_NOT_SUPPORTED;
    322              }
    323          
    324              if (status != PSA_SUCCESS) {
   \      0x168   0xB114             CBZ.N    R4,??psa_mac_setup_10
    325                  mbedtls_psa_mac_abort(operation);
   \                     ??psa_mac_setup_6: (+1)
   \      0x16A   0x4628             MOV      R0,R5
   \      0x16C   0x.... 0x....      BL       mbedtls_psa_mac_abort
    326              }
    327          
    328              return status;
   \                     ??psa_mac_setup_10: (+1)
   \      0x170   0x4620             MOV      R0,R4
   \                     ??psa_mac_setup_1: (+1)
   \      0x172   0xB013             ADD      SP,SP,#+76
   \      0x174   0xBDF0             POP      {R4-R7,PC}
    329          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \        0x0   0x4631             MOV      R1,R6
   \        0x2   0xF105 0x0008      ADD      R0,R5,#+8
   \        0x6   0x.... 0x....      B.W      psa_hash_setup
    330          

   \                                 In section .text, align 2, keep-with-next
    331          psa_status_t mbedtls_psa_mac_sign_setup(
    332              mbedtls_psa_mac_operation_t *operation,
    333              const psa_key_attributes_t *attributes,
    334              const uint8_t *key_buffer,
    335              size_t key_buffer_size,
    336              psa_algorithm_t alg)
    337          {
   \                     mbedtls_psa_mac_sign_setup: (+1)
   \        0x0   0xB51C             PUSH     {R2-R4,LR}
    338              return psa_mac_setup(operation, attributes,
    339                                   key_buffer, key_buffer_size, alg);
   \        0x2   0x....             B.N      ?Subroutine0
    340          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0x9C04             LDR      R4,[SP, #+16]
   \        0x2   0x9400             STR      R4,[SP, #+0]
   \        0x4   0x.... 0x....      BL       psa_mac_setup
   \        0x8   0xBD16             POP      {R1,R2,R4,PC}
    341          

   \                                 In section .text, align 2, keep-with-next
    342          psa_status_t mbedtls_psa_mac_verify_setup(
    343              mbedtls_psa_mac_operation_t *operation,
    344              const psa_key_attributes_t *attributes,
    345              const uint8_t *key_buffer,
    346              size_t key_buffer_size,
    347              psa_algorithm_t alg)
    348          {
   \                     mbedtls_psa_mac_verify_setup: (+1)
   \        0x0   0xB51C             PUSH     {R2-R4,LR}
    349              return psa_mac_setup(operation, attributes,
    350                                   key_buffer, key_buffer_size, alg);
   \        0x2                      REQUIRE ?Subroutine0
   \        0x2                      ;; // Fall through to label ?Subroutine0
    351          }
    352          

   \                                 In section .text, align 2, keep-with-next
    353          psa_status_t mbedtls_psa_mac_update(
    354              mbedtls_psa_mac_operation_t *operation,
    355              const uint8_t *input,
    356              size_t input_length)
    357          {
   \                     mbedtls_psa_mac_update: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4603             MOV      R3,R0
    358              if (operation->alg == 0) {
   \        0x4   0x681C             LDR      R4,[R3, #+0]
   \        0x6   0xF06F 0x0088      MVN      R0,#+136
   \        0xA   0xB154             CBZ.N    R4,??mbedtls_psa_mac_update_0
    359                  return PSA_ERROR_BAD_STATE;
    360              }
    361          
    362          #if defined(MBEDTLS_PSA_BUILTIN_ALG_CMAC)
    363              if (PSA_ALG_FULL_LENGTH_MAC(operation->alg) == PSA_ALG_CMAC) {
    364                  return mbedtls_to_psa_error(
    365                      mbedtls_cipher_cmac_update(&operation->ctx.cmac,
    366                                                 input, input_length));
    367              } else
    368          #endif /* MBEDTLS_PSA_BUILTIN_ALG_CMAC */
    369          #if defined(MBEDTLS_PSA_BUILTIN_ALG_HMAC)
    370              if (PSA_ALG_IS_HMAC(operation->alg)) {
   \        0xC   0x....             LDR.N    R5,??DataTable3
   \        0xE   0x402C             ANDS     R4,R5,R4
   \       0x10   0xF1B4 0x7F60      CMP      R4,#+58720256
   \       0x14   0xD105             BNE.N    ??mbedtls_psa_mac_update_0
    371                  return psa_hmac_update_internal(&operation->ctx.hmac,
    372                                                  input, input_length);
   \       0x16   0xF103 0x0008      ADD      R0,R3,#+8
   \       0x1A   0xE8BD 0x4038      POP      {R3-R5,LR}
   \       0x1E   0x.... 0x....      B.W      psa_hash_update
    373              } else
    374          #endif /* MBEDTLS_PSA_BUILTIN_ALG_HMAC */
    375              {
    376                  /* This shouldn't happen if `operation` was initialized by
    377                   * a setup function. */
    378                  (void) input;
    379                  (void) input_length;
    380                  return PSA_ERROR_BAD_STATE;
   \                     ??mbedtls_psa_mac_update_0: (+1)
   \       0x22   0xBD32             POP      {R1,R4,R5,PC}
    381              }
    382          }
    383          

   \                                 In section .text, align 2, keep-with-next
    384          static psa_status_t psa_mac_finish_internal(
    385              mbedtls_psa_mac_operation_t *operation,
    386              uint8_t *mac, size_t mac_size)
    387          {
   \                     psa_mac_finish_internal: (+1)
   \        0x0   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \        0x4   0xB089             SUB      SP,SP,#+36
   \        0x6   0x4605             MOV      R5,R0
   \        0x8   0x4688             MOV      R8,R1
    388          #if defined(MBEDTLS_PSA_BUILTIN_ALG_CMAC)
    389              if (PSA_ALG_FULL_LENGTH_MAC(operation->alg) == PSA_ALG_CMAC) {
    390                  uint8_t tmp[PSA_BLOCK_CIPHER_BLOCK_MAX_SIZE];
    391                  int ret = mbedtls_cipher_cmac_finish(&operation->ctx.cmac, tmp);
    392                  if (ret == 0) {
    393                      memcpy(mac, tmp, mac_size);
    394                  }
    395                  mbedtls_platform_zeroize(tmp, sizeof(tmp));
    396                  return mbedtls_to_psa_error(ret);
    397              } else
    398          #endif /* MBEDTLS_PSA_BUILTIN_ALG_CMAC */
    399          #if defined(MBEDTLS_PSA_BUILTIN_ALG_HMAC)
    400              if (PSA_ALG_IS_HMAC(operation->alg)) {
   \        0xA   0x6829             LDR      R1,[R5, #+0]
   \        0xC   0x....             LDR.N    R0,??DataTable3
   \        0xE   0x4691             MOV      R9,R2
   \       0x10   0x4001             ANDS     R1,R0,R1
   \       0x12   0xF1B1 0x7F60      CMP      R1,#+58720256
   \       0x16   0xD160             BNE.N    ??psa_mac_finish_internal_0
    401                  return psa_hmac_finish_internal(&operation->ctx.hmac,
    402                                                  mac, mac_size);
   \       0x18   0x686E             LDR      R6,[R5, #+4]
   \       0x1A   0x2000             MOVS     R0,#+0
   \       0x1C   0x9000             STR      R0,[SP, #+0]
   \       0x1E   0xF006 0x00FF      AND      R0,R6,#0xFF
   \       0x22   0xF040 0x7000      ORR      R0,R0,#0x2000000
   \       0x26   0x....             LDR.N    R2,??DataTable3_1
   \       0x28   0x4290             CMP      R0,R2
   \       0x2A   0xBF1C             ITT      NE
   \       0x2C   0x....             LDRNE.N  R1,??DataTable3_2
   \       0x2E   0x4288             CMPNE    R0,R1
   \       0x30   0xD02A             BEQ.N    ??psa_mac_finish_internal_1
   \       0x32   0x....             LDR.N    R2,??DataTable3_3
   \       0x34   0x4290             CMP      R0,R2
   \       0x36   0xBF1F             ITTTT    NE
   \       0x38   0x....             LDRNE.N  R1,??DataTable3_4
   \       0x3A   0x4288             CMPNE    R0,R1
   \       0x3C   0x....             LDRNE.N  R2,??DataTable3_5
   \       0x3E   0x4290             CMPNE    R0,R2
   \       0x40   0xD022             BEQ.N    ??psa_mac_finish_internal_1
   \       0x42   0x....             LDR.N    R1,??DataTable3_6
   \       0x44   0x4288             CMP      R0,R1
   \       0x46   0xBF1C             ITT      NE
   \       0x48   0x....             LDRNE.N  R2,??DataTable3_7
   \       0x4A   0x4290             CMPNE    R0,R2
   \       0x4C   0xD01A             BEQ.N    ??psa_mac_finish_internal_2
   \       0x4E   0x....             LDR.N    R1,??DataTable3_8
   \       0x50   0x4288             CMP      R0,R1
   \       0x52   0xBF1C             ITT      NE
   \       0x54   0x....             LDRNE.N  R2,??DataTable3_9
   \       0x56   0x4290             CMPNE    R0,R2
   \       0x58   0xD014             BEQ.N    ??psa_mac_finish_internal_2
   \       0x5A   0x....             LDR.N    R1,??DataTable3_10
   \       0x5C   0x4288             CMP      R0,R1
   \       0x5E   0xBF08             IT       EQ
   \       0x60   0x2790             MOVEQ    R7,#+144
   \       0x62   0xD012             BEQ.N    ??psa_mac_finish_internal_3
   \       0x64   0x....             LDR.N    R1,??DataTable3_11
   \       0x66   0x4288             CMP      R0,R1
   \       0x68   0xBF08             IT       EQ
   \       0x6A   0x2788             MOVEQ    R7,#+136
   \       0x6C   0xD00D             BEQ.N    ??psa_mac_finish_internal_3
   \       0x6E   0x....             LDR.N    R1,??DataTable3_12
   \       0x70   0x4288             CMP      R0,R1
   \       0x72   0xBF08             IT       EQ
   \       0x74   0x2768             MOVEQ    R7,#+104
   \       0x76   0xD008             BEQ.N    ??psa_mac_finish_internal_3
   \       0x78   0x....             LDR.N    R1,??DataTable3_13
   \       0x7A   0x4288             CMP      R0,R1
   \       0x7C   0xBF14             ITE      NE
   \       0x7E   0x2700             MOVNE    R7,#+0
   \       0x80   0x2748             MOVEQ    R7,#+72
   \       0x82   0xE002             B.N      ??psa_mac_finish_internal_3
   \                     ??psa_mac_finish_internal_2: (+1)
   \       0x84   0x2780             MOVS     R7,#+128
   \       0x86   0xE000             B.N      ??psa_mac_finish_internal_3
   \                     ??psa_mac_finish_internal_1: (+1)
   \       0x88   0x2740             MOVS     R7,#+64
   \                     ??psa_mac_finish_internal_3: (+1)
   \       0x8A   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_1: (+1)
   \       0x8E   0x0004             MOVS     R4,R0
   \       0x90   0xD121             BNE.N    ??psa_mac_finish_internal_4
   \       0x92   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_2: (+1)
   \       0x96   0x0004             MOVS     R4,R0
   \       0x98   0xD119             BNE.N    ??psa_mac_finish_internal_5
   \       0x9A   0x463A             MOV      R2,R7
   \       0x9C   0xF105 0x01E8      ADD      R1,R5,#+232
   \       0xA0   0xF105 0x0008      ADD      R0,R5,#+8
   \       0xA4   0x.... 0x....      BL       psa_hash_update
   \       0xA8   0x0004             MOVS     R4,R0
   \       0xAA   0xD110             BNE.N    ??psa_mac_finish_internal_5
   \       0xAC   0x9A00             LDR      R2,[SP, #+0]
   \       0xAE   0xA901             ADD      R1,SP,#+4
   \       0xB0   0xF105 0x0008      ADD      R0,R5,#+8
   \       0xB4   0x.... 0x....      BL       psa_hash_update
   \       0xB8   0x0004             MOVS     R4,R0
   \       0xBA   0xD108             BNE.N    ??psa_mac_finish_internal_5
   \       0xBC   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_0: (+1)
   \       0xC0   0x0004             MOVS     R4,R0
   \       0xC2   0xD104             BNE.N    ??psa_mac_finish_internal_5
   \       0xC4   0x464A             MOV      R2,R9
   \       0xC6   0xA901             ADD      R1,SP,#+4
   \       0xC8   0x4640             MOV      R0,R8
   \       0xCA   0x.... 0x....      BL       __aeabi_memcpy
   \                     ??psa_mac_finish_internal_5: (+1)
   \       0xCE   0x9900             LDR      R1,[SP, #+0]
   \       0xD0   0xA801             ADD      R0,SP,#+4
   \       0xD2   0x.... 0x....      BL       mbedtls_platform_zeroize
    403              } else
   \                     ??psa_mac_finish_internal_4: (+1)
   \       0xD6   0x4620             MOV      R0,R4
   \       0xD8   0xE001             B.N      ??psa_mac_finish_internal_6
    404          #endif /* MBEDTLS_PSA_BUILTIN_ALG_HMAC */
    405              {
    406                  /* This shouldn't happen if `operation` was initialized by
    407                   * a setup function. */
    408                  (void) operation;
    409                  (void) mac;
    410                  (void) mac_size;
    411                  return PSA_ERROR_BAD_STATE;
   \                     ??psa_mac_finish_internal_0: (+1)
   \       0xDA   0xF06F 0x0088      MVN      R0,#+136
   \                     ??psa_mac_finish_internal_6: (+1)
   \       0xDE   0xB009             ADD      SP,SP,#+36
   \       0xE0   0xE8BD 0x83F0      POP      {R4-R9,PC}
    412              }
    413          }
    414          

   \                                 In section .text, align 2, keep-with-next
    415          psa_status_t mbedtls_psa_mac_sign_finish(
    416              mbedtls_psa_mac_operation_t *operation,
    417              uint8_t *mac,
    418              size_t mac_size,
    419              size_t *mac_length)
    420          {
   \                     mbedtls_psa_mac_sign_finish: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4615             MOV      R5,R2
    421              psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;
    422          
    423              if (operation->alg == 0) {
   \        0x4   0x6802             LDR      R2,[R0, #+0]
   \        0x6   0x461C             MOV      R4,R3
   \        0x8   0xB912             CBNZ.N   R2,??mbedtls_psa_mac_sign_finish_0
    424                  return PSA_ERROR_BAD_STATE;
   \        0xA   0xF06F 0x0088      MVN      R0,#+136
   \        0xE   0xBD32             POP      {R1,R4,R5,PC}
    425              }
    426          
    427              status = psa_mac_finish_internal(operation, mac, mac_size);
   \                     ??mbedtls_psa_mac_sign_finish_0: (+1)
   \       0x10   0x462A             MOV      R2,R5
   \       0x12   0x.... 0x....      BL       psa_mac_finish_internal
    428              if (status == PSA_SUCCESS) {
   \       0x16   0xB900             CBNZ.N   R0,??mbedtls_psa_mac_sign_finish_1
    429                  *mac_length = mac_size;
   \       0x18   0x6025             STR      R5,[R4, #+0]
    430              }
    431          
    432              return status;
   \                     ??mbedtls_psa_mac_sign_finish_1: (+1)
   \       0x1A   0xBD32             POP      {R1,R4,R5,PC}
    433          }
    434          

   \                                 In section .text, align 2, keep-with-next
    435          psa_status_t mbedtls_psa_mac_verify_finish(
    436              mbedtls_psa_mac_operation_t *operation,
    437              const uint8_t *mac,
    438              size_t mac_length)
    439          {
   \                     mbedtls_psa_mac_verify_finish: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0xB088             SUB      SP,SP,#+32
   \        0x4   0x460E             MOV      R6,R1
    440              uint8_t actual_mac[PSA_MAC_MAX_SIZE];
    441              psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;
    442          
    443              if (operation->alg == 0) {
   \        0x6   0x6801             LDR      R1,[R0, #+0]
   \        0x8   0x4615             MOV      R5,R2
   \        0xA   0xB911             CBNZ.N   R1,??mbedtls_psa_mac_verify_finish_0
    444                  return PSA_ERROR_BAD_STATE;
   \        0xC   0xF06F 0x0088      MVN      R0,#+136
   \       0x10   0xE016             B.N      ??mbedtls_psa_mac_verify_finish_1
    445              }
    446          
    447              /* Consistency check: requested MAC length fits our local buffer */
    448              if (mac_length > sizeof(actual_mac)) {
   \                     ??mbedtls_psa_mac_verify_finish_0: (+1)
   \       0x12   0x2D20             CMP      R5,#+32
   \       0x14   0xBF88             IT       HI
   \       0x16   0xF06F 0x0086      MVNHI    R0,#+134
    449                  return PSA_ERROR_INVALID_ARGUMENT;
   \       0x1A   0xD811             BHI.N    ??mbedtls_psa_mac_verify_finish_1
    450              }
    451          
    452              status = psa_mac_finish_internal(operation, actual_mac, mac_length);
   \       0x1C   0x4669             MOV      R1,SP
   \       0x1E   0x.... 0x....      BL       psa_mac_finish_internal
   \       0x22   0x0004             MOVS     R4,R0
    453              if (status != PSA_SUCCESS) {
   \       0x24   0xD107             BNE.N    ??mbedtls_psa_mac_verify_finish_2
    454                  goto cleanup;
    455              }
    456          
    457              if (mbedtls_ct_memcmp(mac, actual_mac, mac_length) != 0) {
   \       0x26   0x462A             MOV      R2,R5
   \       0x28   0x4669             MOV      R1,SP
   \       0x2A   0x4630             MOV      R0,R6
   \       0x2C   0x.... 0x....      BL       mbedtls_ct_memcmp
   \       0x30   0xB108             CBZ.N    R0,??mbedtls_psa_mac_verify_finish_2
    458                  status = PSA_ERROR_INVALID_SIGNATURE;
   \       0x32   0xF06F 0x0494      MVN      R4,#+148
    459              }
    460          
    461          cleanup:
    462              mbedtls_platform_zeroize(actual_mac, sizeof(actual_mac));
   \                     ??mbedtls_psa_mac_verify_finish_2: (+1)
   \       0x36   0x2120             MOVS     R1,#+32
   \       0x38   0x4668             MOV      R0,SP
   \       0x3A   0x.... 0x....      BL       mbedtls_platform_zeroize
    463          
    464              return status;
   \       0x3E   0x4620             MOV      R0,R4
   \                     ??mbedtls_psa_mac_verify_finish_1: (+1)
   \       0x40   0xB008             ADD      SP,SP,#+32
   \       0x42   0xBD70             POP      {R4-R6,PC}
    465          }
    466          

   \                                 In section .text, align 2, keep-with-next
    467          psa_status_t mbedtls_psa_mac_compute(
    468              const psa_key_attributes_t *attributes,
    469              const uint8_t *key_buffer,
    470              size_t key_buffer_size,
    471              psa_algorithm_t alg,
    472              const uint8_t *input,
    473              size_t input_length,
    474              uint8_t *mac,
    475              size_t mac_size,
    476              size_t *mac_length)
    477          {
   \                     mbedtls_psa_mac_compute: (+1)
   \        0x0   0xB5F0             PUSH     {R4-R7,LR}
   \        0x2   0xB0CB             SUB      SP,SP,#+300
   \        0x4   0x4607             MOV      R7,R0
   \        0x6   0x460E             MOV      R6,R1
   \        0x8   0x4614             MOV      R4,R2
   \        0xA   0x461D             MOV      R5,R3
    478              psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;
    479              mbedtls_psa_mac_operation_t operation = MBEDTLS_PSA_MAC_OPERATION_INIT;
   \        0xC   0xA801             ADD      R0,SP,#+4
   \        0xE   0xF44F 0x7194      MOV      R1,#+296
   \       0x12   0x.... 0x....      BL       __aeabi_memclr4
    480          
    481              status = psa_mac_setup(&operation,
    482                                     attributes, key_buffer, key_buffer_size,
    483                                     alg);
   \       0x16   0x9500             STR      R5,[SP, #+0]
   \       0x18   0x4623             MOV      R3,R4
   \       0x1A   0x4632             MOV      R2,R6
   \       0x1C   0x4639             MOV      R1,R7
   \       0x1E   0xA801             ADD      R0,SP,#+4
   \       0x20   0x.... 0x....      BL       psa_mac_setup
   \       0x24   0x0004             MOVS     R4,R0
    484              if (status != PSA_SUCCESS) {
   \       0x26   0xD111             BNE.N    ??mbedtls_psa_mac_compute_0
   \       0x28   0x9A51             LDR      R2,[SP, #+324]
    485                  goto exit;
    486              }
    487          
    488              if (input_length > 0) {
   \       0x2A   0xB12A             CBZ.N    R2,??mbedtls_psa_mac_compute_1
   \       0x2C   0x9950             LDR      R1,[SP, #+320]
    489                  status = mbedtls_psa_mac_update(&operation, input, input_length);
   \       0x2E   0xA801             ADD      R0,SP,#+4
   \       0x30   0x.... 0x....      BL       mbedtls_psa_mac_update
   \       0x34   0x0004             MOVS     R4,R0
    490                  if (status != PSA_SUCCESS) {
   \       0x36   0xD109             BNE.N    ??mbedtls_psa_mac_compute_0
   \                     ??mbedtls_psa_mac_compute_1: (+1)
   \       0x38   0x9D53             LDR      R5,[SP, #+332]
   \       0x3A   0x9952             LDR      R1,[SP, #+328]
    491                      goto exit;
    492                  }
    493              }
    494          
    495              status = psa_mac_finish_internal(&operation, mac, mac_size);
   \       0x3C   0xA801             ADD      R0,SP,#+4
   \       0x3E   0x462A             MOV      R2,R5
   \       0x40   0x.... 0x....      BL       psa_mac_finish_internal
   \       0x44   0x0004             MOVS     R4,R0
    496              if (status == PSA_SUCCESS) {
   \       0x46   0xBF04             ITT      EQ
   \       0x48   0x9854             LDREQ    R0,[SP, #+336]
   \       0x4A   0x6005             STREQ    R5,[R0, #+0]
    497                  *mac_length = mac_size;
    498              }
    499          
    500          exit:
    501              mbedtls_psa_mac_abort(&operation);
   \                     ??mbedtls_psa_mac_compute_0: (+1)
   \       0x4C   0xA801             ADD      R0,SP,#+4
   \       0x4E   0x.... 0x....      BL       mbedtls_psa_mac_abort
    502          
    503              return status;
   \       0x52   0x4620             MOV      R0,R4
   \       0x54   0xB04B             ADD      SP,SP,#+300
   \       0x56   0xBDF0             POP      {R4-R7,PC}
    504          }

   \                                 In section .rodata, align 4
   \        0x0   0x0000'0000        DC32 0, 0
   \              0x0000'0000
   \        0x8                      DS8 288

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \        0x0   0x7FC0'0000        DC32     0x7fc00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \        0x0   0x0200'0003        DC32     0x2000003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \        0x0   0x0200'0004        DC32     0x2000004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \        0x0   0x0200'0005        DC32     0x2000005

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \        0x0   0x0200'0008        DC32     0x2000008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \        0x0   0x0200'0009        DC32     0x2000009

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \        0x0   0x0200'000A        DC32     0x200000a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \        0x0   0x0200'000B        DC32     0x200000b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \        0x0   0x0200'000C        DC32     0x200000c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \        0x0   0x0200'000D        DC32     0x200000d

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \        0x0   0x0200'0010        DC32     0x2000010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \        0x0   0x0200'0011        DC32     0x2000011

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \        0x0   0x0200'0012        DC32     0x2000012

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_13:
   \        0x0   0x0200'0013        DC32     0x2000013

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \        0x0   0x466B             MOV      R3,SP
   \        0x2   0x2220             MOVS     R2,#+32
   \        0x4   0xA901             ADD      R1,SP,#+4
   \        0x6   0xF105 0x0008      ADD      R0,R5,#+8
   \        0xA   0x.... 0x....      B.W      psa_hash_finish
    505          
    506          #endif /* MBEDTLS_PSA_BUILTIN_ALG_HMAC || MBEDTLS_PSA_BUILTIN_ALG_CMAC */
    507          
    508          #endif /* MBEDTLS_PSA_CRYPTO_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   mbedtls_psa_mac_abort
         8   -> __aeabi_memclr4
         8   -> mbedtls_platform_zeroize
         8   -> psa_hash_abort
     320   mbedtls_psa_mac_compute
       320   -> __aeabi_memclr4
       320   -> mbedtls_psa_mac_abort
       320   -> mbedtls_psa_mac_update
       320   -> psa_mac_finish_internal
       320   -> psa_mac_setup
      16   mbedtls_psa_mac_sign_finish
        16   -> psa_mac_finish_internal
      16   mbedtls_psa_mac_sign_setup
        16   -> psa_mac_setup
      16   mbedtls_psa_mac_update
         0   -> psa_hash_update
      48   mbedtls_psa_mac_verify_finish
        48   -> mbedtls_ct_memcmp
        48   -> mbedtls_platform_zeroize
        48   -> psa_mac_finish_internal
       0   mbedtls_psa_mac_verify_setup
        16   -> psa_mac_setup
      64   psa_mac_finish_internal
        64   -> __aeabi_memcpy
        64   -> mbedtls_platform_zeroize
        64   -> psa_hash_finish
        64   -> psa_hash_setup
        64   -> psa_hash_update
      96   psa_mac_setup
        96   -> __aeabi_memclr4
        96   -> __aeabi_memcpy
        96   -> __aeabi_memset
        96   -> mbedtls_platform_zeroize
        96   -> mbedtls_psa_mac_abort
        96   -> psa_hash_compute
        96   -> psa_hash_setup
        96   -> psa_hash_update


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_13
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
      10  ?Subroutine0
      14  ?Subroutine1
      10  ?Subroutine2
     296  ?_0
      58  mbedtls_psa_mac_abort
      88  mbedtls_psa_mac_compute
      28  mbedtls_psa_mac_sign_finish
       4  mbedtls_psa_mac_sign_setup
      36  mbedtls_psa_mac_update
      68  mbedtls_psa_mac_verify_finish
       2  mbedtls_psa_mac_verify_setup
     228  psa_mac_finish_internal
     374  psa_mac_setup

 
 296 bytes in section .rodata
 976 bytes in section .text
 
 976 bytes of CODE  memory
 296 bytes of CONST memory

Errors: none
Warnings: none
