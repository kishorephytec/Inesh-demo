###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         27/Nov/2024  12:18:04
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\x509_create.c
#    Command line                 =
#        -f
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir\x509_create.o.rsp
#        (C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\x509_create.c
#        -D EFR32FG28B322F1024IM48=1 -D
#        configNUM_SDK_THREAD_LOCAL_STORAGE_POINTERS=2 -D
#        SL_COMPONENT_CATALOG_PRESENT=1 -D
#        MBEDTLS_CONFIG_FILE=<sl_mbedtls_config.h> -D
#        MBEDTLS_PSA_CRYPTO_CONFIG_FILE=<psa_crypto_config.h> -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -D
#        RTT_USE_ASM=0 -D MBED_CONF_MBED_TRACE_ENABLE=1 -D
#        MBED_CONF_NANOSTACK_CONFIGURATION=ws_router -D
#        MBED_TRACE_MAX_LEVEL=TRACE_ACTIVE_LEVEL_ALL -D DEBUG_EFM_USER=1 -D
#        HAVE_LFN=1 -D HAVE_LFN_PARENT=1 -lC
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\lst\library_11823079944874003547.dir
#        --diag_suppress Pa050 -o
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir
#        --debug --endian=little --cpu=Cortex-M33 --cmse --cmse -e
#        --fpu=VFPv5_sp --dlib_config "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\
#        -I C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\autogen\ -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\config\ -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\config\rail\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\Device\SiliconLabs\EFR32FG28\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\common\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\CMSIS\Core\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\CMSIS\RTOS2\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\device_init\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\dmadrv\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\common\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emlib\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\cmsis\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\kernel\include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\kernel\portable\IAR\ARM_CM33_NTZ\non_secure\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\iostream\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\config\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\config\preset\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\nvm3\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\peripheral\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_psa_driver\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\common\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\wmbus\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\sidewalk\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\efr32xg28\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\rail_util_pti\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\src\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\segger\systemview\SEGGER\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\silicon_labs\silabs_core\memory_manager\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\common\toolchain\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\system\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\ns_list\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\nanostack\nanostack-libservice\mbed-client-libservice\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\sleeptimer\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\app\wisun_rcp\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\inc\socket\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\src\
#        -Ohz --use_c++_inline) --dependencies=n
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir\x509_create.o.iar_deps
#    Locale                       =  C
#    List file                    =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\lst\library_11823079944874003547.dir\x509_create.lst
#    Object file                  =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir\x509_create.o
#    Runtime model:                  
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_file_descriptor     =  0
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#
###############################################################################

C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\x509_create.c
      1          /*
      2           *  X.509 base functions for creating certificates / CSRs
      3           *
      4           *  Copyright The Mbed TLS Contributors
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           */
     19          
     20          #include "common.h"
     21          
     22          #if defined(MBEDTLS_X509_CREATE_C)
     23          
     24          #include "mbedtls/x509.h"
     25          #include "mbedtls/asn1write.h"
     26          #include "mbedtls/error.h"
     27          #include "mbedtls/oid.h"
     28          
     29          #include <string.h>
     30          
     31          #include "mbedtls/platform.h"
     32          
     33          #include "mbedtls/asn1.h"
     34          
     35          /* Structure linking OIDs for X.509 DN AttributeTypes to their
     36           * string representations and default string encodings used by Mbed TLS. */
     37          typedef struct {
     38              const char *name; /* String representation of AttributeType, e.g.
     39                                 * "CN" or "emailAddress". */
     40              size_t name_len; /* Length of 'name', without trailing 0 byte. */
     41              const char *oid; /* String representation of OID of AttributeType,
     42                                * as per RFC 5280, Appendix A.1. encoded as per
     43                                * X.690 */
     44              int default_tag; /* The default character encoding used for the
     45                                * given attribute type, e.g.
     46                                * MBEDTLS_ASN1_UTF8_STRING for UTF-8. */
     47          } x509_attr_descriptor_t;
     48          
     49          #define ADD_STRLEN(s)     s, sizeof(s) - 1
     50          
     51          /* X.509 DN attributes from RFC 5280, Appendix A.1. */

   \                                 In section .rodata, align 4
     52          static const x509_attr_descriptor_t x509_attrs[] =
   \                     x509_attrs:
   \        0x0   0x....'....        DC32 ?_0, 2, ?_1, 12, ?_2, 10, ?_1, 12, ?_3, 1, ?_4, 19, ?_5, 11, ?_4
   \              0x0000'0002  
   \              0x....'....  
   \              0x0000'000C  
   \              0x....'....  
   \              0x0000'000A  
   \              0x....'....  
   \              0x0000'000C  
   \              0x....'....  
   \              0x0000'0001  
   \              0x....'....  
   \              0x0000'0013  
   \              0x....'....  
   \              0x0000'000B  
   \              0x....'....
   \       0x3C   0x0000'0013        DC32 19, ?_6, 1, ?_7, 12, ?_8, 16, ?_7, 12, ?_9, 1, ?_10, 12, ?_11, 8
   \              0x....'....  
   \              0x0000'0001  
   \              0x....'....  
   \              0x0000'000C  
   \              0x....'....  
   \              0x0000'0010  
   \              0x....'....  
   \              0x0000'000C  
   \              0x....'....  
   \              0x0000'0001  
   \              0x....'....  
   \              0x0000'000C  
   \              0x....'....  
   \              0x0000'0008
   \       0x78   0x....'....        DC32 ?_10, 12, ?_12, 1, ?_13, 22, ?_14, 2, ?_15, 12, ?_16, 22, ?_15, 12
   \              0x0000'000C  
   \              0x....'....  
   \              0x0000'0001  
   \              0x....'....  
   \              0x0000'0016  
   \              0x....'....  
   \              0x0000'0002  
   \              0x....'....  
   \              0x0000'000C  
   \              0x....'....  
   \              0x0000'0016  
   \              0x....'....  
   \              0x0000'000C
   \       0xB0   0x....'....        DC32 ?_17, 2, ?_18, 12, ?_19, 19, ?_18, 12, ?_20, 12, ?_13, 22, ?_21
   \              0x0000'0002  
   \              0x....'....  
   \              0x0000'000C  
   \              0x....'....  
   \              0x0000'0013  
   \              0x....'....  
   \              0x0000'000C  
   \              0x....'....  
   \              0x0000'000C  
   \              0x....'....  
   \              0x0000'0016  
   \              0x....'....
   \       0xE4   0x0000'000C        DC32 12, ?_22, 19, ?_23, 13, ?_24, 19, ?_25, 10, ?_26, 19, ?_27, 11
   \              0x....'....  
   \              0x0000'0013  
   \              0x....'....  
   \              0x0000'000D  
   \              0x....'....  
   \              0x0000'0013  
   \              0x....'....  
   \              0x0000'000A  
   \              0x....'....  
   \              0x0000'0013  
   \              0x....'....  
   \              0x0000'000B
   \      0x118   0x....'....        DC32 ?_28, 19, ?_29, 5, ?_30, 12, ?_31, 7, ?_32, 12, ?_33, 2, ?_32, 12
   \              0x0000'0013  
   \              0x....'....  
   \              0x0000'0005  
   \              0x....'....  
   \              0x0000'000C  
   \              0x....'....  
   \              0x0000'0007  
   \              0x....'....  
   \              0x0000'000C  
   \              0x....'....  
   \              0x0000'0002  
   \              0x....'....  
   \              0x0000'000C
   \      0x150   0x....'....        DC32 ?_34, 9, ?_35, 12, ?_36, 2, ?_35, 12, ?_37, 8, ?_38, 12, ?_39, 9
   \              0x0000'0009  
   \              0x....'....  
   \              0x0000'000C  
   \              0x....'....  
   \              0x0000'0002  
   \              0x....'....  
   \              0x0000'000C  
   \              0x....'....  
   \              0x0000'0008  
   \              0x....'....  
   \              0x0000'000C  
   \              0x....'....  
   \              0x0000'0009
   \      0x188   0x....'....        DC32 ?_40, 12, ?_41, 19, ?_42, 12, ?_43, 15, ?_44, 22, ?_45, 2, ?_44
   \              0x0000'000C  
   \              0x....'....  
   \              0x0000'0013  
   \              0x....'....  
   \              0x0000'000C  
   \              0x....'....  
   \              0x0000'000F  
   \              0x....'....  
   \              0x0000'0016  
   \              0x....'....  
   \              0x0000'0002  
   \              0x....'....
   \      0x1BC   0x0000'0016        DC32 22, 0x0, 0, 0x0, 5
   \              0x0000'0000  
   \              0x0000'0000  
   \              0x0000'0000  
   \              0x0000'0005
     53          {
     54              { ADD_STRLEN("CN"),
     55                MBEDTLS_OID_AT_CN, MBEDTLS_ASN1_UTF8_STRING },
     56              { ADD_STRLEN("commonName"),
     57                MBEDTLS_OID_AT_CN, MBEDTLS_ASN1_UTF8_STRING },
     58              { ADD_STRLEN("C"),
     59                MBEDTLS_OID_AT_COUNTRY, MBEDTLS_ASN1_PRINTABLE_STRING },
     60              { ADD_STRLEN("countryName"),
     61                MBEDTLS_OID_AT_COUNTRY, MBEDTLS_ASN1_PRINTABLE_STRING },
     62              { ADD_STRLEN("O"),
     63                MBEDTLS_OID_AT_ORGANIZATION, MBEDTLS_ASN1_UTF8_STRING },
     64              { ADD_STRLEN("organizationName"),
     65                MBEDTLS_OID_AT_ORGANIZATION, MBEDTLS_ASN1_UTF8_STRING },
     66              { ADD_STRLEN("L"),
     67                MBEDTLS_OID_AT_LOCALITY, MBEDTLS_ASN1_UTF8_STRING },
     68              { ADD_STRLEN("locality"),
     69                MBEDTLS_OID_AT_LOCALITY, MBEDTLS_ASN1_UTF8_STRING },
     70              { ADD_STRLEN("R"),
     71                MBEDTLS_OID_PKCS9_EMAIL, MBEDTLS_ASN1_IA5_STRING },
     72              { ADD_STRLEN("OU"),
     73                MBEDTLS_OID_AT_ORG_UNIT, MBEDTLS_ASN1_UTF8_STRING },
     74              { ADD_STRLEN("organizationalUnitName"),
     75                MBEDTLS_OID_AT_ORG_UNIT, MBEDTLS_ASN1_UTF8_STRING },
     76              { ADD_STRLEN("ST"),
     77                MBEDTLS_OID_AT_STATE, MBEDTLS_ASN1_UTF8_STRING },
     78              { ADD_STRLEN("stateOrProvinceName"),
     79                MBEDTLS_OID_AT_STATE, MBEDTLS_ASN1_UTF8_STRING },
     80              { ADD_STRLEN("emailAddress"),
     81                MBEDTLS_OID_PKCS9_EMAIL, MBEDTLS_ASN1_IA5_STRING },
     82              { ADD_STRLEN("serialNumber"),
     83                MBEDTLS_OID_AT_SERIAL_NUMBER, MBEDTLS_ASN1_PRINTABLE_STRING },
     84              { ADD_STRLEN("postalAddress"),
     85                MBEDTLS_OID_AT_POSTAL_ADDRESS, MBEDTLS_ASN1_PRINTABLE_STRING },
     86              { ADD_STRLEN("postalCode"),
     87                MBEDTLS_OID_AT_POSTAL_CODE, MBEDTLS_ASN1_PRINTABLE_STRING },
     88              { ADD_STRLEN("dnQualifier"),
     89                MBEDTLS_OID_AT_DN_QUALIFIER, MBEDTLS_ASN1_PRINTABLE_STRING },
     90              { ADD_STRLEN("title"),
     91                MBEDTLS_OID_AT_TITLE, MBEDTLS_ASN1_UTF8_STRING },
     92              { ADD_STRLEN("surName"),
     93                MBEDTLS_OID_AT_SUR_NAME, MBEDTLS_ASN1_UTF8_STRING },
     94              { ADD_STRLEN("SN"),
     95                MBEDTLS_OID_AT_SUR_NAME, MBEDTLS_ASN1_UTF8_STRING },
     96              { ADD_STRLEN("givenName"),
     97                MBEDTLS_OID_AT_GIVEN_NAME, MBEDTLS_ASN1_UTF8_STRING },
     98              { ADD_STRLEN("GN"),
     99                MBEDTLS_OID_AT_GIVEN_NAME, MBEDTLS_ASN1_UTF8_STRING },
    100              { ADD_STRLEN("initials"),
    101                MBEDTLS_OID_AT_INITIALS, MBEDTLS_ASN1_UTF8_STRING },
    102              { ADD_STRLEN("pseudonym"),
    103                MBEDTLS_OID_AT_PSEUDONYM, MBEDTLS_ASN1_UTF8_STRING },
    104              { ADD_STRLEN("generationQualifier"),
    105                MBEDTLS_OID_AT_GENERATION_QUALIFIER, MBEDTLS_ASN1_UTF8_STRING },
    106              { ADD_STRLEN("domainComponent"),
    107                MBEDTLS_OID_DOMAIN_COMPONENT, MBEDTLS_ASN1_IA5_STRING },
    108              { ADD_STRLEN("DC"),
    109                MBEDTLS_OID_DOMAIN_COMPONENT,   MBEDTLS_ASN1_IA5_STRING },
    110              { NULL, 0, NULL, MBEDTLS_ASN1_NULL }
    111          };
    112          
    113          static const x509_attr_descriptor_t *x509_attr_descr_from_name(const char *name, size_t name_len)
    114          {
    115              const x509_attr_descriptor_t *cur;
    116          
    117              for (cur = x509_attrs; cur->name != NULL; cur++) {
    118                  if (cur->name_len == name_len &&
    119                      strncmp(cur->name, name, name_len) == 0) {
    120                      break;
    121                  }
    122              }
    123          
    124              if (cur->name == NULL) {
    125                  return NULL;
    126              }
    127          
    128              return cur;
    129          }
    130          

   \                                 In section .text, align 2, keep-with-next
    131          static int hex_to_int(char c)
    132          {
    133              return ('0' <= c && c <= '9') ? (c - '0') :
    134                     ('a' <= c && c <= 'f') ? (c - 'a' + 10) :
    135                     ('A' <= c && c <= 'F') ? (c - 'A' + 10) : -1;
   \                     hex_to_int: (+1)
   \        0x0   0xF1A0 0x0230      SUB      R2,R0,#+48
   \        0x4   0x2A0A             CMP      R2,#+10
   \        0x6   0xD201             BCS.N    ??hex_to_int_0
   \        0x8   0x3830             SUBS     R0,R0,#+48
   \        0xA   0x4770             BX       LR
   \                     ??hex_to_int_0: (+1)
   \        0xC   0xF1A0 0x0261      SUB      R2,R0,#+97
   \       0x10   0x2A06             CMP      R2,#+6
   \       0x12   0xD201             BCS.N    ??hex_to_int_1
   \       0x14   0x3857             SUBS     R0,R0,#+87
   \       0x16   0x4770             BX       LR
   \                     ??hex_to_int_1: (+1)
   \       0x18   0xF1A0 0x0141      SUB      R1,R0,#+65
   \       0x1C   0x2906             CMP      R1,#+6
   \       0x1E   0xD201             BCS.N    ??hex_to_int_2
   \       0x20   0x3837             SUBS     R0,R0,#+55
   \       0x22   0x4770             BX       LR
   \                     ??hex_to_int_2: (+1)
   \       0x24   0xF04F 0x30FF      MOV      R0,#+4294967295
   \       0x28   0x4770             BX       LR
    136          }
    137          

   \                                 In section .text, align 2, keep-with-next
    138          static int hexpair_to_int(const char *hexpair)
    139          {
   \                     hexpair_to_int: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4605             MOV      R5,R0
    140              int n1 = hex_to_int(*hexpair);
   \        0x4   0x7828             LDRB     R0,[R5, #+0]
   \        0x6   0x.... 0x....      BL       hex_to_int
   \        0xA   0x4604             MOV      R4,R0
    141              int n2 = hex_to_int(*(hexpair + 1));
   \        0xC   0x7868             LDRB     R0,[R5, #+1]
   \        0xE   0x.... 0x....      BL       hex_to_int
    142          
    143              if (n1 != -1 && n2 != -1) {
   \       0x12   0xF114 0x0F01      CMN      R4,#+1
   \       0x16   0xBF18             IT       NE
   \       0x18   0xF110 0x0F01      CMNNE    R0,#+1
   \       0x1C   0xD002             BEQ.N    ??hexpair_to_int_0
    144                  return (n1 << 4) | n2;
   \       0x1E   0xEA40 0x1004      ORR      R0,R0,R4, LSL #+4
   \       0x22   0xBD32             POP      {R1,R4,R5,PC}
    145              } else {
    146                  return -1;
   \                     ??hexpair_to_int_0: (+1)
   \       0x24   0xF04F 0x30FF      MOV      R0,#+4294967295
   \       0x28   0xBD32             POP      {R1,R4,R5,PC}
    147              }
    148          }
    149          
    150          static int parse_attribute_value_string(const char *s,
    151                                                  int len,
    152                                                  unsigned char *data,
    153                                                  size_t *data_len)
    154          {
    155              const char *c;
    156              const char *end = s + len;
    157              unsigned char *d = data;
    158              int n;
    159          
    160              for (c = s; c < end; c++) {
    161                  if (*c == '\\') {
    162                      c++;
    163          
    164                      /* Check for valid escaped characters as per RFC 4514 Section 3 */
    165                      if (c + 1 < end && (n = hexpair_to_int(c)) != -1) {
    166                          if (n == 0) {
    167                              return MBEDTLS_ERR_X509_INVALID_NAME;
    168                          }
    169                          *(d++) = n;
    170                          c++;
    171                      } else if (c < end && strchr(" ,=+<>#;\"\\", *c)) {
    172                          *(d++) = *c;
    173                      } else {
    174                          return MBEDTLS_ERR_X509_INVALID_NAME;
    175                      }
    176                  } else {
    177                      *(d++) = *c;
    178                  }
    179          
    180                  if (d - data == MBEDTLS_X509_MAX_DN_NAME_SIZE) {
    181                      return MBEDTLS_ERR_X509_INVALID_NAME;
    182                  }
    183              }
    184              *data_len = d - data;
    185              return 0;
    186          }
    187          
    188          /** Parse a hexstring containing a DER-encoded string.
    189           *
    190           * \param s         A string of \p len bytes hexadecimal digits.
    191           * \param len       Number of bytes to read from \p s.
    192           * \param data      Output buffer of size \p data_size.
    193           *                  On success, it contains the payload that's DER-encoded
    194           *                  in the input (content without the tag and length).
    195           *                  If the DER tag is a string tag, the payload is guaranteed
    196           *                  not to contain null bytes.
    197           * \param data_size Length of the \p data buffer.
    198           * \param data_len  On success, the length of the parsed string.
    199           *                  It is guaranteed to be less than
    200           *                  #MBEDTLS_X509_MAX_DN_NAME_SIZE.
    201           * \param tag       The ASN.1 tag that the payload in \p data is encoded in.
    202           *
    203           * \retval          0 on success.
    204           * \retval          #MBEDTLS_ERR_X509_INVALID_NAME if \p s does not contain
    205           *                  a valid hexstring,
    206           *                  or if the decoded hexstring is not valid DER,
    207           *                  or if the payload does not fit in \p data,
    208           *                  or if the payload is more than
    209           *                  #MBEDTLS_X509_MAX_DN_NAME_SIZE bytes,
    210           *                  of if \p *tag is an ASN.1 string tag and the payload
    211           *                  contains a null byte.
    212           * \retval          #MBEDTLS_ERR_X509_ALLOC_FAILED on low memory.
    213           */
    214          static int parse_attribute_value_hex_der_encoded(const char *s,
    215                                                           size_t len,
    216                                                           unsigned char *data,
    217                                                           size_t data_size,
    218                                                           size_t *data_len,
    219                                                           int *tag)
    220          {
    221              unsigned char *p = NULL;
    222          
    223              /* Step 1: preliminary length checks. */
    224              /* Each byte is encoded by exactly two hexadecimal digits. */
    225              if (len % 2 != 0) {
    226                  /* Odd number of hex digits */
    227                  return MBEDTLS_ERR_X509_INVALID_NAME;
    228              }
    229              size_t const der_length = len / 2;
    230              if (der_length > MBEDTLS_X509_MAX_DN_NAME_SIZE + 4) {
    231                  /* The payload would be more than MBEDTLS_X509_MAX_DN_NAME_SIZE
    232                   * (after subtracting the ASN.1 tag and length). Reject this early
    233                   * to avoid allocating a large intermediate buffer. */
    234                  return MBEDTLS_ERR_X509_INVALID_NAME;
    235              }
    236              if (der_length < 1) {
    237                  /* Avoid empty-buffer shenanigans. A valid DER encoding is never
    238                   * empty. */
    239                  return MBEDTLS_ERR_X509_INVALID_NAME;
    240              }
    241          
    242              /* Step 2: Decode the hex string into an intermediate buffer. */
    243              unsigned char *der = mbedtls_calloc(1, der_length);
    244              if (der == NULL) {
    245                  return MBEDTLS_ERR_X509_ALLOC_FAILED;
    246              }
    247              /* Beyond this point, der needs to be freed on exit. */
    248              for (size_t i = 0; i < der_length; i++) {
    249                  int c = hexpair_to_int(s + 2 * i);
    250                  if (c < 0) {
    251                      goto error;
    252                  }
    253                  der[i] = c;
    254              }
    255          
    256              /* Step 3: decode the DER. */
    257              /* We've checked that der_length >= 1 above. */
    258              *tag = der[0];
    259              p = der + 1;
    260              if (mbedtls_asn1_get_len(&p, der + der_length, data_len) != 0) {
    261                  goto error;
    262              }
    263              /* Now p points to the first byte of the payload inside der,
    264               * and *data_len is the length of the payload. */
    265          
    266              /* Step 4: payload validation */
    267              if (*data_len > MBEDTLS_X509_MAX_DN_NAME_SIZE) {
    268                  goto error;
    269              }
    270              /* Strings must not contain null bytes. */
    271              if (MBEDTLS_ASN1_IS_STRING_TAG(*tag)) {
    272                  for (size_t i = 0; i < *data_len; i++) {
    273                      if (p[i] == 0) {
    274                          goto error;
    275                      }
    276                  }
    277              }
    278          
    279              /* Step 5: output the payload. */
    280              if (*data_len > data_size) {
    281                  goto error;
    282              }
    283              memcpy(data, p, *data_len);
    284              mbedtls_free(der);
    285          
    286              return 0;
    287          
    288          error:
    289              mbedtls_free(der);
    290              return MBEDTLS_ERR_X509_INVALID_NAME;
    291          }
    292          

   \                                 In section .text, align 4, keep-with-next
    293          int mbedtls_x509_string_to_names(mbedtls_asn1_named_data **head, const char *name)
    294          {
   \                     mbedtls_x509_string_to_names: (+1)
   \        0x0   0xE92D 0x4FF1      PUSH     {R0,R4-R11,LR}
   \        0x4   0xB0C8             SUB      SP,SP,#+288
    295              int ret = MBEDTLS_ERR_X509_INVALID_NAME;
    296              int parse_ret = 0;
    297              const char *s = name, *c = s;
    298              const char *end = s + strlen(s);
   \        0x6   0x.... 0x....      ADR.W    R6,?_47
   \        0xA   0x2700             MOVS     R7,#+0
   \        0xC   0x46BA             MOV      R10,R7
   \        0xE   0x.... 0x....      LDR.W    R11,??DataTable4
   \       0x12   0x460C             MOV      R4,R1
   \       0x14   0x4620             MOV      R0,R4
   \       0x16   0x.... 0x....      BL       strlen
   \       0x1A   0x1820             ADDS     R0,R4,R0
   \       0x1C   0x9007             STR      R0,[SP, #+28]
    299              mbedtls_asn1_buf oid = { .p = NULL, .len = 0, .tag = MBEDTLS_ASN1_NULL };
   \       0x1E   0xE896 0x0007      LDM      R6,{R0-R2}
   \       0x22   0xAB02             ADD      R3,SP,#+8
    300              const x509_attr_descriptor_t *attr_descr = NULL;
    301              int in_attr_type = 1;
    302              int tag;
    303              int numericoid = 0;
    304              unsigned char data[MBEDTLS_X509_MAX_DN_NAME_SIZE];
    305              size_t data_len = 0;
   \       0x24   0xF8CD 0xA004      STR      R10,[SP, #+4]
   \       0x28   0xE883 0x0007      STM      R3,{R0-R2}
    306          
    307              /* Clear existing chain if present */
    308              mbedtls_asn1_free_named_data_list(head);
   \       0x2C   0x9848             LDR      R0,[SP, #+288]
   \       0x2E   0x46D8             MOV      R8,R11
   \       0x30   0x4625             MOV      R5,R4
   \       0x32   0x.... 0x....      BL       mbedtls_asn1_free_named_data_list
   \       0x36   0xA808             ADD      R0,SP,#+32
   \       0x38   0xF04F 0x0901      MOV      R9,#+1
   \       0x3C   0x9005             STR      R0,[SP, #+20]
   \       0x3E   0xE00C             B.N      ??mbedtls_x509_string_to_names_0
    309          
    310              while (c <= end) {
    311                  if (in_attr_type && *c == '=') {
    312                      if ((attr_descr = x509_attr_descr_from_name(s, c - s)) == NULL) {
    313                          if ((mbedtls_oid_from_numeric_string(&oid, s, c - s)) != 0) {
    314                              return MBEDTLS_ERR_X509_INVALID_NAME;
    315                          } else {
    316                              numericoid = 1;
    317                          }
    318                      } else {
    319                          oid.len = strlen(attr_descr->oid);
    320                          oid.p = mbedtls_calloc(1, oid.len);
    321                          memcpy(oid.p, attr_descr->oid, oid.len);
    322                          numericoid = 0;
    323                      }
    324          
    325                      s = c + 1;
    326                      in_attr_type = 0;
    327                  }
    328          
    329                  if (!in_attr_type && ((*c == ',' && *(c-1) != '\\') || c == end)) {
    330                      if (s == c) {
    331                          mbedtls_free(oid.p);
    332                          return MBEDTLS_ERR_X509_INVALID_NAME;
    333                      } else if (*s == '#') {
    334                          /* We know that c >= s (loop invariant) and c != s (in this
    335                           * else branch), hence c - s - 1 >= 0. */
    336                          parse_ret = parse_attribute_value_hex_der_encoded(
    337                              s + 1, c - s - 1,
    338                              data, sizeof(data), &data_len, &tag);
    339                          if (parse_ret != 0) {
    340                              mbedtls_free(oid.p);
    341                              return parse_ret;
    342                          }
    343                      } else {
    344                          if (numericoid) {
    345                              mbedtls_free(oid.p);
    346                              return MBEDTLS_ERR_X509_INVALID_NAME;
    347                          } else {
    348                              if ((parse_ret =
    349                                       parse_attribute_value_string(s, (int) (c - s), data,
    350                                                                    &data_len)) != 0) {
    351                                  mbedtls_free(oid.p);
    352                                  return parse_ret;
    353                              }
    354                              tag = attr_descr->default_tag;
    355                          }
    356                      }
    357          
    358                      mbedtls_asn1_named_data *cur =
    359                          mbedtls_asn1_store_named_data(head, (char *) oid.p, oid.len,
    360                                                        (unsigned char *) data,
    361                                                        data_len);
    362                      mbedtls_free(oid.p);
    363                      oid.p = NULL;
    364                      if (cur == NULL) {
    365                          return MBEDTLS_ERR_X509_ALLOC_FAILED;
    366                      }
    367          
    368                      // set tagType
    369                      cur->val.tag = tag;
    370          
    371                      while (c < end && *(c + 1) == ' ') {
    372                          c++;
   \                     ??mbedtls_x509_string_to_names_1: (+1)
   \       0x40   0x1C6D             ADDS     R5,R5,#+1
    373                      }
   \                     ??mbedtls_x509_string_to_names_2: (+1)
   \       0x42   0x9806             LDR      R0,[SP, #+24]
   \       0x44   0x4285             CMP      R5,R0
   \       0x46   0xD202             BCS.N    ??mbedtls_x509_string_to_names_3
   \       0x48   0x7869             LDRB     R1,[R5, #+1]
   \       0x4A   0x2920             CMP      R1,#+32
   \       0x4C   0xD0F8             BEQ.N    ??mbedtls_x509_string_to_names_1
    374          
    375                      s = c + 1;
   \                     ??mbedtls_x509_string_to_names_3: (+1)
   \       0x4E   0x1C6C             ADDS     R4,R5,#+1
    376                      in_attr_type = 1;
   \       0x50   0xF04F 0x0901      MOV      R9,#+1
    377          
    378                      /* Successfully parsed one name, update ret to success */
    379                      ret = 0;
   \       0x54   0xF04F 0x0800      MOV      R8,#+0
    380                  }
    381                  c++;
   \                     ??mbedtls_x509_string_to_names_4: (+1)
   \       0x58   0x1C6D             ADDS     R5,R5,#+1
   \                     ??mbedtls_x509_string_to_names_0: (+1)
   \       0x5A   0x9807             LDR      R0,[SP, #+28]
   \       0x5C   0x9006             STR      R0,[SP, #+24]
   \       0x5E   0x42A8             CMP      R0,R5
   \       0x60   0xF0C0 0x80E7      BCC.W    ??mbedtls_x509_string_to_names_5
   \       0x64   0xF1B9 0x0F00      CMP      R9,#+0
   \       0x68   0xD022             BEQ.N    ??mbedtls_x509_string_to_names_6
   \       0x6A   0x7828             LDRB     R0,[R5, #+0]
   \       0x6C   0x283D             CMP      R0,#+61
   \       0x6E   0xD1F3             BNE.N    ??mbedtls_x509_string_to_names_4
   \       0x70   0x1B2E             SUBS     R6,R5,R4
   \       0x72   0x....             LDR.N    R7,??DataTable4_1
   \       0x74   0xE000             B.N      ??mbedtls_x509_string_to_names_7
   \                     ??mbedtls_x509_string_to_names_8: (+1)
   \       0x76   0x3710             ADDS     R7,R7,#+16
   \                     ??mbedtls_x509_string_to_names_7: (+1)
   \       0x78   0x6838             LDR      R0,[R7, #+0]
   \       0x7A   0xB140             CBZ.N    R0,??mbedtls_x509_string_to_names_9
   \       0x7C   0x6879             LDR      R1,[R7, #+4]
   \       0x7E   0x42B1             CMP      R1,R6
   \       0x80   0xD1F9             BNE.N    ??mbedtls_x509_string_to_names_8
   \       0x82   0x4632             MOV      R2,R6
   \       0x84   0x4621             MOV      R1,R4
   \       0x86   0x.... 0x....      BL       strncmp
   \       0x8A   0x2800             CMP      R0,#+0
   \       0x8C   0xD1F3             BNE.N    ??mbedtls_x509_string_to_names_8
   \                     ??mbedtls_x509_string_to_names_9: (+1)
   \       0x8E   0x6838             LDR      R0,[R7, #+0]
   \       0x90   0x4621             MOV      R1,R4
   \       0x92   0xB900             CBNZ.N   R0,??mbedtls_x509_string_to_names_10
   \       0x94   0x2700             MOVS     R7,#+0
   \                     ??mbedtls_x509_string_to_names_10: (+1)
   \       0x96   0xBB87             CBNZ.N   R7,??mbedtls_x509_string_to_names_11
   \       0x98   0x4632             MOV      R2,R6
   \       0x9A   0xA802             ADD      R0,SP,#+8
   \       0x9C   0x.... 0x....      BL       mbedtls_oid_from_numeric_string
   \       0xA0   0x2800             CMP      R0,#+0
   \       0xA2   0xF040 0x8082      BNE.W    ??mbedtls_x509_string_to_names_12
   \       0xA6   0xF04F 0x0A01      MOV      R10,#+1
   \                     ??mbedtls_x509_string_to_names_13: (+1)
   \       0xAA   0x1C6C             ADDS     R4,R5,#+1
   \       0xAC   0xF04F 0x0900      MOV      R9,#+0
   \                     ??mbedtls_x509_string_to_names_6: (+1)
   \       0xB0   0x7828             LDRB     R0,[R5, #+0]
   \       0xB2   0x282C             CMP      R0,#+44
   \       0xB4   0xD103             BNE.N    ??mbedtls_x509_string_to_names_14
   \       0xB6   0xF815 0x0C01      LDRB     R0,[R5, #-1]
   \       0xBA   0x285C             CMP      R0,#+92
   \       0xBC   0xD102             BNE.N    ??mbedtls_x509_string_to_names_15
   \                     ??mbedtls_x509_string_to_names_14: (+1)
   \       0xBE   0x9807             LDR      R0,[SP, #+28]
   \       0xC0   0x4285             CMP      R5,R0
   \       0xC2   0xD1C9             BNE.N    ??mbedtls_x509_string_to_names_4
   \                     ??mbedtls_x509_string_to_names_15: (+1)
   \       0xC4   0x42AC             CMP      R4,R5
   \       0xC6   0xD06D             BEQ.N    ??mbedtls_x509_string_to_names_16
   \       0xC8   0x7821             LDRB     R1,[R4, #+0]
   \       0xCA   0x1B2E             SUBS     R6,R5,R4
   \       0xCC   0x2923             CMP      R1,#+35
   \       0xCE   0xD161             BNE.N    ??mbedtls_x509_string_to_names_17
   \       0xD0   0x1E76             SUBS     R6,R6,#+1
   \       0xD2   0x2000             MOVS     R0,#+0
   \       0xD4   0x9000             STR      R0,[SP, #+0]
   \       0xD6   0x07F1             LSLS     R1,R6,#+31
   \       0xD8   0xD464             BMI.N    ??mbedtls_x509_string_to_names_16
   \       0xDA   0x0876             LSRS     R6,R6,#+1
   \       0xDC   0xF240 0x1005      MOVW     R0,#+261
   \       0xE0   0x4286             CMP      R6,R0
   \       0xE2   0xD25F             BCS.N    ??mbedtls_x509_string_to_names_16
   \       0xE4   0x2E00             CMP      R6,#+0
   \       0xE6   0xD05D             BEQ.N    ??mbedtls_x509_string_to_names_16
   \       0xE8   0x4631             MOV      R1,R6
   \       0xEA   0x2001             MOVS     R0,#+1
   \       0xEC   0x.... 0x....      BL       sl_calloc
   \       0xF0   0xB198             CBZ.N    R0,??mbedtls_x509_string_to_names_18
   \       0xF2   0xF04F 0x0900      MOV      R9,#+0
   \       0xF6   0x4680             MOV      R8,R0
   \       0xF8   0xE01D             B.N      ??mbedtls_x509_string_to_names_19
   \                     ??mbedtls_x509_string_to_names_11: (+1)
   \       0xFA   0x68B8             LDR      R0,[R7, #+8]
   \       0xFC   0xF04F 0x0A00      MOV      R10,#+0
   \      0x100   0x.... 0x....      BL       strlen
   \      0x104   0x9003             STR      R0,[SP, #+12]
   \      0x106   0x4601             MOV      R1,R0
   \      0x108   0x2001             MOVS     R0,#+1
   \      0x10A   0x.... 0x....      BL       sl_calloc
   \      0x10E   0x9004             STR      R0,[SP, #+16]
   \      0x110   0x9A03             LDR      R2,[SP, #+12]
   \      0x112   0x68B9             LDR      R1,[R7, #+8]
   \      0x114   0x.... 0x....      BL       __aeabi_memcpy
   \      0x118   0xE7C7             B.N      ??mbedtls_x509_string_to_names_13
   \                     ??mbedtls_x509_string_to_names_18: (+1)
   \      0x11A   0x.... 0x....      LDR.W    R11,??DataTable4_2
   \      0x11E   0xE041             B.N      ??mbedtls_x509_string_to_names_16
   \                     ??mbedtls_x509_string_to_names_20: (+1)
   \      0x120   0x1C60             ADDS     R0,R4,#+1
   \      0x122   0xEB00 0x0049      ADD      R0,R0,R9, LSL #+1
   \      0x126   0x.... 0x....      BL       hexpair_to_int
   \      0x12A   0x2800             CMP      R0,#+0
   \      0x12C   0xD42E             BMI.N    ??mbedtls_x509_string_to_names_21
   \      0x12E   0xF808 0x0009      STRB     R0,[R8, R9]
   \      0x132   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??mbedtls_x509_string_to_names_19: (+1)
   \      0x136   0x45B1             CMP      R9,R6
   \      0x138   0xD3F2             BCC.N    ??mbedtls_x509_string_to_names_20
   \      0x13A   0xF898 0x4000      LDRB     R4,[R8, #+0]
   \      0x13E   0xF108 0x0001      ADD      R0,R8,#+1
   \      0x142   0x9000             STR      R0,[SP, #+0]
   \      0x144   0xAA01             ADD      R2,SP,#+4
   \      0x146   0xEB08 0x0106      ADD      R1,R8,R6
   \      0x14A   0x4668             MOV      R0,SP
   \      0x14C   0x.... 0x....      BL       mbedtls_asn1_get_len
   \      0x150   0xB9E0             CBNZ.N   R0,??mbedtls_x509_string_to_names_21
   \      0x152   0x9801             LDR      R0,[SP, #+4]
   \      0x154   0xF240 0x1101      MOVW     R1,#+257
   \      0x158   0x4288             CMP      R0,R1
   \      0x15A   0xD217             BCS.N    ??mbedtls_x509_string_to_names_21
   \      0x15C   0x2C20             CMP      R4,#+32
   \      0x15E   0xD20C             BCS.N    ??mbedtls_x509_string_to_names_22
   \      0x160   0x....             LDR.N    R0,??DataTable4_3
   \      0x162   0x40E0             LSRS     R0,R0,R4
   \      0x164   0x07C1             LSLS     R1,R0,#+31
   \      0x166   0xD508             BPL.N    ??mbedtls_x509_string_to_names_22
   \      0x168   0x2100             MOVS     R1,#+0
   \      0x16A   0xE003             B.N      ??mbedtls_x509_string_to_names_23
   \                     ??mbedtls_x509_string_to_names_24: (+1)
   \      0x16C   0x9A00             LDR      R2,[SP, #+0]
   \      0x16E   0x5C50             LDRB     R0,[R2, R1]
   \      0x170   0xB160             CBZ.N    R0,??mbedtls_x509_string_to_names_21
   \      0x172   0x1C49             ADDS     R1,R1,#+1
   \                     ??mbedtls_x509_string_to_names_23: (+1)
   \      0x174   0x9801             LDR      R0,[SP, #+4]
   \      0x176   0x4281             CMP      R1,R0
   \      0x178   0xD3F8             BCC.N    ??mbedtls_x509_string_to_names_24
   \                     ??mbedtls_x509_string_to_names_22: (+1)
   \      0x17A   0x9A01             LDR      R2,[SP, #+4]
   \      0x17C   0x9900             LDR      R1,[SP, #+0]
   \      0x17E   0xA808             ADD      R0,SP,#+32
   \      0x180   0x.... 0x....      BL       __aeabi_memcpy
   \      0x184   0x4640             MOV      R0,R8
   \      0x186   0x.... 0x....      BL       sl_free
   \      0x18A   0xE03F             B.N      ??mbedtls_x509_string_to_names_25
   \                     ??mbedtls_x509_string_to_names_21: (+1)
   \      0x18C   0x4640             MOV      R0,R8
   \      0x18E   0x.... 0x....      BL       sl_free
   \      0x192   0xE007             B.N      ??mbedtls_x509_string_to_names_16
   \                     ??mbedtls_x509_string_to_names_17: (+1)
   \      0x194   0xF1BA 0x0F00      CMP      R10,#+0
   \      0x198   0xD104             BNE.N    ??mbedtls_x509_string_to_names_16
   \      0x19A   0xA808             ADD      R0,SP,#+32
   \      0x19C   0xEB04 0x0806      ADD      R8,R4,R6
   \      0x1A0   0x4606             MOV      R6,R0
   \      0x1A2   0xE019             B.N      ??mbedtls_x509_string_to_names_26
   \                     ??mbedtls_x509_string_to_names_16: (+1)
   \      0x1A4   0x9804             LDR      R0,[SP, #+16]
   \      0x1A6   0x.... 0x....      BL       sl_free
   \                     ??mbedtls_x509_string_to_names_12: (+1)
   \      0x1AA   0x4658             MOV      R0,R11
   \      0x1AC   0xE046             B.N      ??mbedtls_x509_string_to_names_27
   \                     ??mbedtls_x509_string_to_names_28: (+1)
   \      0x1AE   0xF806 0x0B01      STRB     R0,[R6], #+1
   \      0x1B2   0xE00B             B.N      ??mbedtls_x509_string_to_names_29
   \                     ??mbedtls_x509_string_to_names_30: (+1)
   \      0x1B4   0x4544             CMP      R4,R8
   \      0x1B6   0xD2F5             BCS.N    ??mbedtls_x509_string_to_names_16
   \      0x1B8   0xF894 0x9000      LDRB     R9,[R4, #+0]
   \      0x1BC   0x....             ADR.N    R0,?_46
   \      0x1BE   0x4649             MOV      R1,R9
   \      0x1C0   0x.... 0x....      BL       strchr
   \      0x1C4   0x2800             CMP      R0,#+0
   \      0x1C6   0xD0ED             BEQ.N    ??mbedtls_x509_string_to_names_16
   \      0x1C8   0xF806 0x9B01      STRB     R9,[R6], #+1
   \                     ??mbedtls_x509_string_to_names_29: (+1)
   \      0x1CC   0x9805             LDR      R0,[SP, #+20]
   \      0x1CE   0x1A30             SUBS     R0,R6,R0
   \      0x1D0   0xF5B0 0x7F80      CMP      R0,#+256
   \      0x1D4   0xD0E6             BEQ.N    ??mbedtls_x509_string_to_names_16
   \      0x1D6   0x1C64             ADDS     R4,R4,#+1
   \                     ??mbedtls_x509_string_to_names_26: (+1)
   \      0x1D8   0x4544             CMP      R4,R8
   \      0x1DA   0xD213             BCS.N    ??mbedtls_x509_string_to_names_31
   \      0x1DC   0x7820             LDRB     R0,[R4, #+0]
   \      0x1DE   0x285C             CMP      R0,#+92
   \      0x1E0   0xD1E5             BNE.N    ??mbedtls_x509_string_to_names_28
   \      0x1E2   0x1C64             ADDS     R4,R4,#+1
   \      0x1E4   0x1C60             ADDS     R0,R4,#+1
   \      0x1E6   0x4540             CMP      R0,R8
   \      0x1E8   0xD2E4             BCS.N    ??mbedtls_x509_string_to_names_30
   \      0x1EA   0x4620             MOV      R0,R4
   \      0x1EC   0x.... 0x....      BL       hexpair_to_int
   \      0x1F0   0xF110 0x0F01      CMN      R0,#+1
   \      0x1F4   0xD0DE             BEQ.N    ??mbedtls_x509_string_to_names_30
   \      0x1F6   0x2800             CMP      R0,#+0
   \      0x1F8   0xBF1C             ITT      NE
   \      0x1FA   0xF806 0x0B01      STRBNE   R0,[R6], #+1
   \      0x1FE   0x1C64             ADDNE    R4,R4,#+1
   \      0x200   0xD1E4             BNE.N    ??mbedtls_x509_string_to_names_29
   \      0x202   0xE7CF             B.N      ??mbedtls_x509_string_to_names_16
   \                     ??mbedtls_x509_string_to_names_31: (+1)
   \      0x204   0x9805             LDR      R0,[SP, #+20]
   \      0x206   0x1A36             SUBS     R6,R6,R0
   \      0x208   0x9601             STR      R6,[SP, #+4]
   \      0x20A   0x68FC             LDR      R4,[R7, #+12]
   \                     ??mbedtls_x509_string_to_names_25: (+1)
   \      0x20C   0x9801             LDR      R0,[SP, #+4]
   \      0x20E   0x9A03             LDR      R2,[SP, #+12]
   \      0x210   0x9904             LDR      R1,[SP, #+16]
   \      0x212   0x9000             STR      R0,[SP, #+0]
   \      0x214   0x9848             LDR      R0,[SP, #+288]
   \      0x216   0xAB08             ADD      R3,SP,#+32
   \      0x218   0x.... 0x....      BL       mbedtls_asn1_store_named_data
   \      0x21C   0x4606             MOV      R6,R0
   \      0x21E   0x9804             LDR      R0,[SP, #+16]
   \      0x220   0x.... 0x....      BL       sl_free
   \      0x224   0x2000             MOVS     R0,#+0
   \      0x226   0x9004             STR      R0,[SP, #+16]
   \      0x228   0xB10E             CBZ.N    R6,??mbedtls_x509_string_to_names_32
   \      0x22A   0x60F4             STR      R4,[R6, #+12]
   \      0x22C   0xE709             B.N      ??mbedtls_x509_string_to_names_2
   \                     ??mbedtls_x509_string_to_names_32: (+1)
   \      0x22E   0x....             LDR.N    R0,??DataTable4_2
   \      0x230   0xE004             B.N      ??mbedtls_x509_string_to_names_27
    382              }
    383              if (oid.p != NULL) {
   \                     ??mbedtls_x509_string_to_names_5: (+1)
   \      0x232   0x9804             LDR      R0,[SP, #+16]
   \      0x234   0xB108             CBZ.N    R0,??mbedtls_x509_string_to_names_33
    384                  mbedtls_free(oid.p);
   \      0x236   0x.... 0x....      BL       sl_free
    385              }
    386              return ret;
   \                     ??mbedtls_x509_string_to_names_33: (+1)
   \      0x23A   0x4640             MOV      R0,R8
   \                     ??mbedtls_x509_string_to_names_27: (+1)
   \      0x23C   0xB049             ADD      SP,SP,#+292
   \      0x23E   0xE8BD 0x8FF0      POP      {R4-R11,PC}
    387          }

   \                                 In section .text, align 4, keep-with-next
   \                     ?_47:
   \        0x0   0x0000'0005        DC32 5, 0, 0x0
   \              0x0000'0000  
   \              0x0000'0000
    388          
    389          /* The first byte of the value in the mbedtls_asn1_named_data structure is reserved
    390           * to store the critical boolean for us
    391           */

   \                                 In section .text, align 2, keep-with-next
    392          int mbedtls_x509_set_extension(mbedtls_asn1_named_data **head, const char *oid, size_t oid_len,
    393                                         int critical, const unsigned char *val, size_t val_len)
    394          {
   \                     mbedtls_x509_set_extension: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x9D07             LDR      R5,[SP, #+28]
   \        0x4   0x461C             MOV      R4,R3
    395              mbedtls_asn1_named_data *cur;
    396          
    397              if ((cur = mbedtls_asn1_store_named_data(head, oid, oid_len,
    398                                                       NULL, val_len + 1)) == NULL) {
   \        0x6   0x2300             MOVS     R3,#+0
   \        0x8   0x1C6E             ADDS     R6,R5,#+1
   \        0xA   0x9600             STR      R6,[SP, #+0]
   \        0xC   0x.... 0x....      BL       mbedtls_asn1_store_named_data
   \       0x10   0xB908             CBNZ.N   R0,??mbedtls_x509_set_extension_0
    399                  return MBEDTLS_ERR_X509_ALLOC_FAILED;
   \       0x12   0x....             LDR.N    R0,??DataTable4_2
   \       0x14   0xBD76             POP      {R1,R2,R4-R6,PC}
    400              }
    401          
    402              cur->val.p[0] = critical;
   \                     ??mbedtls_x509_set_extension_0: (+1)
   \       0x16   0x6941             LDR      R1,[R0, #+20]
    403              memcpy(cur->val.p + 1, val, val_len);
   \       0x18   0x462A             MOV      R2,R5
   \       0x1A   0x700C             STRB     R4,[R1, #+0]
   \       0x1C   0x6940             LDR      R0,[R0, #+20]
   \       0x1E   0x9906             LDR      R1,[SP, #+24]
   \       0x20   0x1C40             ADDS     R0,R0,#+1
   \       0x22   0x.... 0x....      BL       __aeabi_memcpy
    404          
    405              return 0;
   \       0x26   0x2000             MOVS     R0,#+0
   \       0x28   0xBD76             POP      {R1,R2,R4-R6,PC}
    406          }
    407          
    408          /*
    409           *  RelativeDistinguishedName ::=
    410           *    SET OF AttributeTypeAndValue
    411           *
    412           *  AttributeTypeAndValue ::= SEQUENCE {
    413           *    type     AttributeType,
    414           *    value    AttributeValue }
    415           *
    416           *  AttributeType ::= OBJECT IDENTIFIER
    417           *
    418           *  AttributeValue ::= ANY DEFINED BY AttributeType
    419           */
    420          static int x509_write_name(unsigned char **p,
    421                                     unsigned char *start,
    422                                     mbedtls_asn1_named_data *cur_name)
    423          {
    424              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    425              size_t len = 0;
    426              const char *oid             = (const char *) cur_name->oid.p;
    427              size_t oid_len              = cur_name->oid.len;
    428              const unsigned char *name   = cur_name->val.p;
    429              size_t name_len             = cur_name->val.len;
    430          
    431              // Write correct string tag and value
    432              MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_tagged_string(p, start,
    433                                                                         cur_name->val.tag,
    434                                                                         (const char *) name,
    435                                                                         name_len));
    436              // Write OID
    437              //
    438              MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_oid(p, start, oid,
    439                                                               oid_len));
    440          
    441              MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_len(p, start, len));
    442              MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_tag(p, start,
    443                                                               MBEDTLS_ASN1_CONSTRUCTED |
    444                                                               MBEDTLS_ASN1_SEQUENCE));
    445          
    446              MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_len(p, start, len));
    447              MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_tag(p, start,
    448                                                               MBEDTLS_ASN1_CONSTRUCTED |
    449                                                               MBEDTLS_ASN1_SET));
    450          
    451              return (int) len;
    452          }
    453          

   \                                 In section .text, align 2, keep-with-next
    454          int mbedtls_x509_write_names(unsigned char **p, unsigned char *start,
    455                                       mbedtls_asn1_named_data *first)
    456          {
   \                     mbedtls_x509_write_names: (+1)
   \        0x0   0xE92D 0x47FC      PUSH     {R2-R10,LR}
   \        0x4   0x4681             MOV      R9,R0
   \        0x6   0x4688             MOV      R8,R1
   \        0x8   0x4614             MOV      R4,R2
    457              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    458              size_t len = 0;
   \        0xA   0x2500             MOVS     R5,#+0
    459              mbedtls_asn1_named_data *cur = first;
   \        0xC   0xE020             B.N      ??mbedtls_x509_write_names_0
    460          
    461              while (cur != NULL) {
    462                  MBEDTLS_ASN1_CHK_ADD(len, x509_write_name(p, start, cur));
   \                     ??mbedtls_x509_write_names_1: (+1)
   \        0xE   0x4653             MOV      R3,R10
   \       0x10   0x4632             MOV      R2,R6
   \       0x12   0x4641             MOV      R1,R8
   \       0x14   0x4648             MOV      R0,R9
   \       0x16   0x.... 0x....      BL       mbedtls_asn1_write_oid
   \       0x1A   0x2800             CMP      R0,#+0
   \       0x1C   0xD434             BMI.N    ??mbedtls_x509_write_names_2
   \       0x1E   0x19C6             ADDS     R6,R0,R7
   \       0x20   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_0: (+1)
   \       0x24   0x0007             MOVS     R7,R0
   \       0x26   0xD42F             BMI.N    ??mbedtls_x509_write_names_2
   \       0x28   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_6: (+1)
   \       0x2C   0x2800             CMP      R0,#+0
   \       0x2E   0xD42B             BMI.N    ??mbedtls_x509_write_names_2
   \       0x30   0x19BE             ADDS     R6,R7,R6
   \       0x32   0x1986             ADDS     R6,R0,R6
   \       0x34   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_1: (+1)
   \       0x38   0x0007             MOVS     R7,R0
   \       0x3A   0xD425             BMI.N    ??mbedtls_x509_write_names_2
   \       0x3C   0x2231             MOVS     R2,#+49
   \       0x3E   0x.... 0x....      BL       ??Subroutine2_0
   \                     ??CrossCallReturnLabel_7: (+1)
   \       0x42   0x2800             CMP      R0,#+0
   \       0x44   0xD420             BMI.N    ??mbedtls_x509_write_names_2
   \       0x46   0x19BE             ADDS     R6,R7,R6
   \       0x48   0x1980             ADDS     R0,R0,R6
   \       0x4A   0xD41D             BMI.N    ??mbedtls_x509_write_names_2
   \       0x4C   0x1945             ADDS     R5,R0,R5
    463                  cur = cur->next;
   \       0x4E   0x69A4             LDR      R4,[R4, #+24]
   \                     ??mbedtls_x509_write_names_0: (+1)
   \       0x50   0xB16C             CBZ.N    R4,??mbedtls_x509_write_names_3
   \       0x52   0x6920             LDR      R0,[R4, #+16]
   \       0x54   0x68A6             LDR      R6,[R4, #+8]
   \       0x56   0xF8D4 0xA004      LDR      R10,[R4, #+4]
   \       0x5A   0x9000             STR      R0,[SP, #+0]
   \       0x5C   0x6963             LDR      R3,[R4, #+20]
   \       0x5E   0x68E2             LDR      R2,[R4, #+12]
   \       0x60   0x4641             MOV      R1,R8
   \       0x62   0x4648             MOV      R0,R9
   \       0x64   0x.... 0x....      BL       mbedtls_asn1_write_tagged_string
   \       0x68   0x0007             MOVS     R7,R0
   \       0x6A   0xD5D0             BPL.N    ??mbedtls_x509_write_names_1
   \       0x6C   0xE00C             B.N      ??mbedtls_x509_write_names_2
    464              }
    465          
    466              MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_len(p, start, len));
   \                     ??mbedtls_x509_write_names_3: (+1)
   \       0x6E   0x462A             MOV      R2,R5
   \       0x70   0x4641             MOV      R1,R8
   \       0x72   0x4648             MOV      R0,R9
   \       0x74   0x.... 0x....      BL       mbedtls_asn1_write_len
   \       0x78   0x0004             MOVS     R4,R0
   \       0x7A   0xD405             BMI.N    ??mbedtls_x509_write_names_2
    467              MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_tag(p, start, MBEDTLS_ASN1_CONSTRUCTED |
    468                                                               MBEDTLS_ASN1_SEQUENCE));
   \       0x7C   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_5: (+1)
   \       0x80   0x2800             CMP      R0,#+0
   \       0x82   0xBF5C             ITT      PL
   \       0x84   0x1965             ADDPL    R5,R4,R5
   \       0x86   0x1940             ADDPL    R0,R0,R5
    469          
    470              return (int) len;
   \                     ??mbedtls_x509_write_names_2: (+1)
   \       0x88   0xE8BD 0x87F6      POP      {R1,R2,R4-R10,PC}
    471          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \        0x0   0x2230             MOVS     R2,#+48
   \                     ??Subroutine2_0: (+1)
   \        0x2   0x4641             MOV      R1,R8
   \        0x4   0x4648             MOV      R0,R9
   \        0x6   0x.... 0x....      B.W      mbedtls_asn1_write_tag

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0x4632             MOV      R2,R6
   \        0x2   0x4641             MOV      R1,R8
   \        0x4   0x4648             MOV      R0,R9
   \        0x6   0x.... 0x....      B.W      mbedtls_asn1_write_len
    472          

   \                                 In section .text, align 2, keep-with-next
    473          int mbedtls_x509_write_sig(unsigned char **p, unsigned char *start,
    474                                     const char *oid, size_t oid_len,
    475                                     unsigned char *sig, size_t size,
    476                                     mbedtls_pk_type_t pk_alg)
    477          {
   \                     mbedtls_x509_write_sig: (+1)
   \        0x0   0xE92D 0x43FE      PUSH     {R1-R9,LR}
   \        0x4   0x4606             MOV      R6,R0
    478              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    479              int write_null_par;
    480              size_t len = 0;
    481          
    482              if (*p < start || (size_t) (*p - start) < size) {
   \        0x6   0x6830             LDR      R0,[R6, #+0]
   \        0x8   0x460D             MOV      R5,R1
   \        0xA   0x4690             MOV      R8,R2
   \        0xC   0x4699             MOV      R9,R3
   \        0xE   0x42A8             CMP      R0,R5
   \       0x10   0xBF22             ITTT     CS
   \       0x12   0x9C0B             LDRCS    R4,[SP, #+44]
   \       0x14   0x1B41             SUBCS    R1,R0,R5
   \       0x16   0x42A1             CMPCS    R1,R4
   \       0x18   0xD30A             BCC.N    ??mbedtls_x509_write_sig_0
    483                  return MBEDTLS_ERR_ASN1_BUF_TOO_SMALL;
    484              }
    485          
    486              len = size;
    487              (*p) -= len;
    488              memcpy(*p, sig, len);
   \       0x1A   0x4261             RSBS     R1,R4,#+0
   \       0x1C   0x4408             ADD      R0,R0,R1
   \       0x1E   0x6030             STR      R0,[R6, #+0]
   \       0x20   0x990A             LDR      R1,[SP, #+40]
   \       0x22   0x4622             MOV      R2,R4
   \       0x24   0x.... 0x....      BL       __aeabi_memcpy
    489          
    490              if (*p - start < 1) {
   \       0x28   0x6830             LDR      R0,[R6, #+0]
   \       0x2A   0x1B47             SUBS     R7,R0,R5
   \       0x2C   0x2F00             CMP      R7,#+0
   \       0x2E   0xDC02             BGT.N    ??mbedtls_x509_write_sig_1
    491                  return MBEDTLS_ERR_ASN1_BUF_TOO_SMALL;
   \                     ??mbedtls_x509_write_sig_0: (+1)
   \       0x30   0xF06F 0x006B      MVN      R0,#+107
   \       0x34   0xE026             B.N      ??mbedtls_x509_write_sig_2
    492              }
    493          
    494              *--(*p) = 0;
   \                     ??mbedtls_x509_write_sig_1: (+1)
   \       0x36   0x1E41             SUBS     R1,R0,#+1
   \       0x38   0x2000             MOVS     R0,#+0
   \       0x3A   0x7008             STRB     R0,[R1, #+0]
    495              len += 1;
   \       0x3C   0x1C64             ADDS     R4,R4,#+1
    496          
    497              MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_len(p, start, len));
   \       0x3E   0x6031             STR      R1,[R6, #+0]
   \       0x40   0x4622             MOV      R2,R4
   \       0x42   0x4629             MOV      R1,R5
   \       0x44   0x4630             MOV      R0,R6
   \       0x46   0x.... 0x....      BL       mbedtls_asn1_write_len
   \       0x4A   0x4607             MOV      R7,R0
   \       0x4C   0x2F00             CMP      R7,#+0
   \       0x4E   0xD419             BMI.N    ??mbedtls_x509_write_sig_2
    498              MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_tag(p, start, MBEDTLS_ASN1_BIT_STRING));
   \       0x50   0x2203             MOVS     R2,#+3
   \       0x52   0x4629             MOV      R1,R5
   \       0x54   0x4630             MOV      R0,R6
   \       0x56   0x.... 0x....      BL       mbedtls_asn1_write_tag
   \       0x5A   0x2800             CMP      R0,#+0
   \       0x5C   0xD412             BMI.N    ??mbedtls_x509_write_sig_2
   \       0x5E   0x990C             LDR      R1,[SP, #+48]
   \       0x60   0x193C             ADDS     R4,R7,R4
   \       0x62   0x1904             ADDS     R4,R0,R4
    499          
    500              // Write OID
    501              //
    502              if (pk_alg == MBEDTLS_PK_ECDSA) {
   \       0x64   0x2904             CMP      R1,#+4
   \       0x66   0xBF0C             ITE      EQ
   \       0x68   0x2000             MOVEQ    R0,#+0
   \       0x6A   0x2001             MOVNE    R0,#+1
    503                  /*
    504                   * The AlgorithmIdentifier's parameters field must be absent for DSA/ECDSA signature
    505                   * algorithms, see https://www.rfc-editor.org/rfc/rfc5480#page-17 and
    506                   * https://www.rfc-editor.org/rfc/rfc5758#section-3.
    507                   */
    508                  write_null_par = 0;
    509              } else {
    510                  write_null_par = 1;
    511              }
    512              MBEDTLS_ASN1_CHK_ADD(len,
    513                                   mbedtls_asn1_write_algorithm_identifier_ext(p, start, oid, oid_len,
    514                                                                               0, write_null_par));
   \       0x6C   0x9001             STR      R0,[SP, #+4]
   \       0x6E   0x2000             MOVS     R0,#+0
   \       0x70   0x9000             STR      R0,[SP, #+0]
   \       0x72   0x464B             MOV      R3,R9
   \       0x74   0x4642             MOV      R2,R8
   \       0x76   0x4629             MOV      R1,R5
   \       0x78   0x4630             MOV      R0,R6
   \       0x7A   0x.... 0x....      BL       mbedtls_asn1_write_algorithm_identifier_ext
   \       0x7E   0x2800             CMP      R0,#+0
   \       0x80   0xBF58             IT       PL
   \       0x82   0x1900             ADDPL    R0,R0,R4
    515          
    516              return (int) len;
   \                     ??mbedtls_x509_write_sig_2: (+1)
   \       0x84   0xE8BD 0x83FE      POP      {R1-R9,PC}
    517          }
    518          
    519          static int x509_write_extension(unsigned char **p, unsigned char *start,
    520                                          mbedtls_asn1_named_data *ext)
    521          {
    522              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    523              size_t len = 0;
    524          
    525              MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_raw_buffer(p, start, ext->val.p + 1,
    526                                                                      ext->val.len - 1));
    527              MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_len(p, start, ext->val.len - 1));
    528              MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_tag(p, start, MBEDTLS_ASN1_OCTET_STRING));
    529          
    530              if (ext->val.p[0] != 0) {
    531                  MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_bool(p, start, 1));
    532              }
    533          
    534              MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_raw_buffer(p, start, ext->oid.p,
    535                                                                      ext->oid.len));
    536              MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_len(p, start, ext->oid.len));
    537              MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_tag(p, start, MBEDTLS_ASN1_OID));
    538          
    539              MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_len(p, start, len));
    540              MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_tag(p, start, MBEDTLS_ASN1_CONSTRUCTED |
    541                                                               MBEDTLS_ASN1_SEQUENCE));
    542          
    543              return (int) len;
    544          }
    545          
    546          /*
    547           * Extension  ::=  SEQUENCE  {
    548           *     extnID      OBJECT IDENTIFIER,
    549           *     critical    BOOLEAN DEFAULT FALSE,
    550           *     extnValue   OCTET STRING
    551           *                 -- contains the DER encoding of an ASN.1 value
    552           *                 -- corresponding to the extension type identified
    553           *                 -- by extnID
    554           *     }
    555           */

   \                                 In section .text, align 2, keep-with-next
    556          int mbedtls_x509_write_extensions(unsigned char **p, unsigned char *start,
    557                                            mbedtls_asn1_named_data *first)
    558          {
   \                     mbedtls_x509_write_extensions: (+1)
   \        0x0   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \        0x4   0x4680             MOV      R8,R0
   \        0x6   0x4689             MOV      R9,R1
   \        0x8   0x4614             MOV      R4,R2
    559              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    560              size_t len = 0;
   \        0xA   0x2700             MOVS     R7,#+0
    561              mbedtls_asn1_named_data *cur_ext = first;
   \        0xC   0xE048             B.N      ??mbedtls_x509_write_extensions_0
    562          
    563              while (cur_ext != NULL) {
    564                  MBEDTLS_ASN1_CHK_ADD(len, x509_write_extension(p, start, cur_ext));
   \                     ??mbedtls_x509_write_extensions_1: (+1)
   \        0xE   0x6922             LDR      R2,[R4, #+16]
   \       0x10   0x4649             MOV      R1,R9
   \       0x12   0x4640             MOV      R0,R8
   \       0x14   0x1E52             SUBS     R2,R2,#+1
   \       0x16   0x.... 0x....      BL       mbedtls_asn1_write_len
   \       0x1A   0x2800             CMP      R0,#+0
   \       0x1C   0xD44E             BMI.N    ??mbedtls_x509_write_extensions_2
   \       0x1E   0x1946             ADDS     R6,R0,R5
   \       0x20   0x2204             MOVS     R2,#+4
   \       0x22   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_2: (+1)
   \       0x26   0x4605             MOV      R5,R0
   \       0x28   0x2D00             CMP      R5,#+0
   \       0x2A   0xD445             BMI.N    ??mbedtls_x509_write_extensions_3
   \       0x2C   0x6961             LDR      R1,[R4, #+20]
   \       0x2E   0x19AE             ADDS     R6,R5,R6
   \       0x30   0x7808             LDRB     R0,[R1, #+0]
   \       0x32   0xB140             CBZ.N    R0,??mbedtls_x509_write_extensions_4
   \       0x34   0x2201             MOVS     R2,#+1
   \       0x36   0x4649             MOV      R1,R9
   \       0x38   0x4640             MOV      R0,R8
   \       0x3A   0x.... 0x....      BL       mbedtls_asn1_write_bool
   \       0x3E   0x4605             MOV      R5,R0
   \       0x40   0x2D00             CMP      R5,#+0
   \       0x42   0xD439             BMI.N    ??mbedtls_x509_write_extensions_3
   \       0x44   0x19AE             ADDS     R6,R5,R6
   \                     ??mbedtls_x509_write_extensions_4: (+1)
   \       0x46   0x6863             LDR      R3,[R4, #+4]
   \       0x48   0x68A2             LDR      R2,[R4, #+8]
   \       0x4A   0x4649             MOV      R1,R9
   \       0x4C   0x4640             MOV      R0,R8
   \       0x4E   0x.... 0x....      BL       mbedtls_asn1_write_raw_buffer
   \       0x52   0x4605             MOV      R5,R0
   \       0x54   0x2D00             CMP      R5,#+0
   \       0x56   0xD42F             BMI.N    ??mbedtls_x509_write_extensions_3
   \       0x58   0x6862             LDR      R2,[R4, #+4]
   \       0x5A   0x4649             MOV      R1,R9
   \       0x5C   0x4640             MOV      R0,R8
   \       0x5E   0x.... 0x....      BL       mbedtls_asn1_write_len
   \       0x62   0x2800             CMP      R0,#+0
   \       0x64   0xD42A             BMI.N    ??mbedtls_x509_write_extensions_2
   \       0x66   0x19AE             ADDS     R6,R5,R6
   \       0x68   0x1986             ADDS     R6,R0,R6
   \       0x6A   0x2206             MOVS     R2,#+6
   \       0x6C   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_3: (+1)
   \       0x70   0x4605             MOV      R5,R0
   \       0x72   0x2D00             CMP      R5,#+0
   \       0x74   0xD420             BMI.N    ??mbedtls_x509_write_extensions_3
   \       0x76   0x19AE             ADDS     R6,R5,R6
   \       0x78   0x4632             MOV      R2,R6
   \       0x7A   0x4649             MOV      R1,R9
   \       0x7C   0x4640             MOV      R0,R8
   \       0x7E   0x.... 0x....      BL       mbedtls_asn1_write_len
   \       0x82   0x4682             MOV      R10,R0
   \       0x84   0xF1BA 0x0F00      CMP      R10,#+0
   \       0x88   0xD41A             BMI.N    ??mbedtls_x509_write_extensions_5
   \       0x8A   0x2230             MOVS     R2,#+48
   \       0x8C   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_4: (+1)
   \       0x90   0x4605             MOV      R5,R0
   \       0x92   0x2D00             CMP      R5,#+0
   \       0x94   0xD410             BMI.N    ??mbedtls_x509_write_extensions_3
   \       0x96   0x4456             ADD      R6,R10,R6
   \       0x98   0x19AD             ADDS     R5,R5,R6
   \       0x9A   0xD40D             BMI.N    ??mbedtls_x509_write_extensions_3
   \       0x9C   0x19EF             ADDS     R7,R5,R7
    565                  cur_ext = cur_ext->next;
   \       0x9E   0x69A4             LDR      R4,[R4, #+24]
   \                     ??mbedtls_x509_write_extensions_0: (+1)
   \       0xA0   0xB184             CBZ.N    R4,??mbedtls_x509_write_extensions_6
   \       0xA2   0x6960             LDR      R0,[R4, #+20]
   \       0xA4   0x6923             LDR      R3,[R4, #+16]
   \       0xA6   0x4649             MOV      R1,R9
   \       0xA8   0x1C42             ADDS     R2,R0,#+1
   \       0xAA   0x1E5B             SUBS     R3,R3,#+1
   \       0xAC   0x4640             MOV      R0,R8
   \       0xAE   0x.... 0x....      BL       mbedtls_asn1_write_raw_buffer
   \       0xB2   0x4605             MOV      R5,R0
   \       0xB4   0x2D00             CMP      R5,#+0
   \       0xB6   0xD5AA             BPL.N    ??mbedtls_x509_write_extensions_1
   \                     ??mbedtls_x509_write_extensions_3: (+1)
   \       0xB8   0x4628             MOV      R0,R5
   \       0xBA   0xE004             B.N      ??mbedtls_x509_write_extensions_7
    566              }
   \                     ??mbedtls_x509_write_extensions_2: (+1)
   \       0xBC   0x4605             MOV      R5,R0
   \       0xBE   0xE7FB             B.N      ??mbedtls_x509_write_extensions_3
   \                     ??mbedtls_x509_write_extensions_5: (+1)
   \       0xC0   0x4655             MOV      R5,R10
   \       0xC2   0xE7F9             B.N      ??mbedtls_x509_write_extensions_3
    567          
    568              return (int) len;
   \                     ??mbedtls_x509_write_extensions_6: (+1)
   \       0xC4   0x4638             MOV      R0,R7
   \                     ??mbedtls_x509_write_extensions_7: (+1)
   \       0xC6   0xE8BD 0x87F0      POP      {R4-R10,PC}
    569          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \        0x0   0x4649             MOV      R1,R9
   \        0x2   0x4640             MOV      R0,R8
   \        0x4   0x.... 0x....      B.W      mbedtls_asn1_write_tag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \        0x0   0xFFFF'DC80        DC32     0xffffdc80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \        0x0   0x....'....        DC32     x509_attrs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \        0x0   0xFFFF'D780        DC32     0xffffd780

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \        0x0   0x5058'1000        DC32     0x50581000

   \                                 In section .text, align 4, keep-with-next
   \                     ?_46:
   \        0x0   0x20 0x2C          DC8 " ,=+<>#;\"\\"
   \              0x3D 0x2B    
   \              0x3C 0x3E    
   \              0x23 0x3B    
   \              0x22 0x5C    
   \              0x00
   \        0xB                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x43 0x4E          DC8 "CN"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x55 0x04          DC8 "U\004\003"
   \              0x03 0x00

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x63 0x6F          DC8 "commonName"
   \              0x6D 0x6D    
   \              0x6F 0x6E    
   \              0x4E 0x61    
   \              0x6D 0x65    
   \              0x00
   \        0xB                      DS8 1

   \                                 In section .rodata, align 2
   \                     ?_3:
   \        0x0   0x43 0x00          DC8 "C"

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0x55 0x04          DC8 "U\004\006"
   \              0x06 0x00

   \                                 In section .rodata, align 4
   \                     ?_5:
   \        0x0   0x63 0x6F          DC8 "countryName"
   \              0x75 0x6E    
   \              0x74 0x72    
   \              0x79 0x4E    
   \              0x61 0x6D    
   \              0x65 0x00

   \                                 In section .rodata, align 2
   \                     ?_6:
   \        0x0   0x4F 0x00          DC8 "O"

   \                                 In section .rodata, align 4
   \                     ?_7:
   \        0x0   0x55 0x04          DC8 "U\004\012"
   \              0x0A 0x00

   \                                 In section .rodata, align 4
   \                     ?_8:
   \        0x0   0x6F 0x72          DC8 "organizationName"
   \              0x67 0x61    
   \              0x6E 0x69    
   \              0x7A 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x4E 0x61    
   \              0x6D 0x65    
   \              0x00
   \       0x11                      DS8 3

   \                                 In section .rodata, align 2
   \                     ?_9:
   \        0x0   0x4C 0x00          DC8 "L"

   \                                 In section .rodata, align 4
   \                     ?_10:
   \        0x0   0x55 0x04          DC8 "U\004\007"
   \              0x07 0x00

   \                                 In section .rodata, align 4
   \                     ?_11:
   \        0x0   0x6C 0x6F          DC8 "locality"
   \              0x63 0x61    
   \              0x6C 0x69    
   \              0x74 0x79    
   \              0x00
   \        0x9                      DS8 3

   \                                 In section .rodata, align 2
   \                     ?_12:
   \        0x0   0x52 0x00          DC8 "R"

   \                                 In section .rodata, align 4
   \                     ?_13:
   \        0x0   0x2A 0x86          DC8 "*\206H\206\367\015\001\t\001"
   \              0x48 0x86    
   \              0xF7 0x0D    
   \              0x01 0x09    
   \              0x01 0x00
   \        0xA                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_14:
   \        0x0   0x4F 0x55          DC8 "OU"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_15:
   \        0x0   0x55 0x04          DC8 "U\004\013"
   \              0x0B 0x00

   \                                 In section .rodata, align 4
   \                     ?_16:
   \        0x0   0x6F 0x72          DC8 "organizationalUnitName"
   \              0x67 0x61    
   \              0x6E 0x69    
   \              0x7A 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x61 0x6C    
   \              0x55 0x6E    
   \              0x69 0x74    
   \              0x4E 0x61    
   \              0x6D 0x65    
   \              0x00
   \       0x17                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_17:
   \        0x0   0x53 0x54          DC8 "ST"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_18:
   \        0x0   0x55 0x04          DC8 "U\004\010"
   \              0x08 0x00

   \                                 In section .rodata, align 4
   \                     ?_19:
   \        0x0   0x73 0x74          DC8 "stateOrProvinceName"
   \              0x61 0x74    
   \              0x65 0x4F    
   \              0x72 0x50    
   \              0x72 0x6F    
   \              0x76 0x69    
   \              0x6E 0x63    
   \              0x65 0x4E    
   \              0x61 0x6D    
   \              0x65 0x00

   \                                 In section .rodata, align 4
   \                     ?_20:
   \        0x0   0x65 0x6D          DC8 "emailAddress"
   \              0x61 0x69    
   \              0x6C 0x41    
   \              0x64 0x64    
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x00
   \        0xD                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_21:
   \        0x0   0x73 0x65          DC8 "serialNumber"
   \              0x72 0x69    
   \              0x61 0x6C    
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \              0x00
   \        0xD                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_22:
   \        0x0   0x55 0x04          DC8 "U\004\005"
   \              0x05 0x00

   \                                 In section .rodata, align 4
   \                     ?_23:
   \        0x0   0x70 0x6F          DC8 "postalAddress"
   \              0x73 0x74    
   \              0x61 0x6C    
   \              0x41 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x00
   \        0xE                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_24:
   \        0x0   0x55 0x04          DC8 "U\004\020"
   \              0x10 0x00

   \                                 In section .rodata, align 4
   \                     ?_25:
   \        0x0   0x70 0x6F          DC8 "postalCode"
   \              0x73 0x74    
   \              0x61 0x6C    
   \              0x43 0x6F    
   \              0x64 0x65    
   \              0x00
   \        0xB                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_26:
   \        0x0   0x55 0x04          DC8 "U\004\021"
   \              0x11 0x00

   \                                 In section .rodata, align 4
   \                     ?_27:
   \        0x0   0x64 0x6E          DC8 "dnQualifier"
   \              0x51 0x75    
   \              0x61 0x6C    
   \              0x69 0x66    
   \              0x69 0x65    
   \              0x72 0x00

   \                                 In section .rodata, align 4
   \                     ?_28:
   \        0x0   0x55 0x04          DC8 "U\004."
   \              0x2E 0x00

   \                                 In section .rodata, align 4
   \                     ?_29:
   \        0x0   0x74 0x69          DC8 "title"
   \              0x74 0x6C    
   \              0x65 0x00
   \        0x6                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_30:
   \        0x0   0x55 0x04          DC8 "U\004\014"
   \              0x0C 0x00

   \                                 In section .rodata, align 4
   \                     ?_31:
   \        0x0   0x73 0x75          DC8 "surName"
   \              0x72 0x4E    
   \              0x61 0x6D    
   \              0x65 0x00

   \                                 In section .rodata, align 4
   \                     ?_32:
   \        0x0   0x55 0x04          DC8 "U\004\004"
   \              0x04 0x00

   \                                 In section .rodata, align 4
   \                     ?_33:
   \        0x0   0x53 0x4E          DC8 "SN"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_34:
   \        0x0   0x67 0x69          DC8 "givenName"
   \              0x76 0x65    
   \              0x6E 0x4E    
   \              0x61 0x6D    
   \              0x65 0x00
   \        0xA                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_35:
   \        0x0   0x55 0x04          DC8 "U\004*"
   \              0x2A 0x00

   \                                 In section .rodata, align 4
   \                     ?_36:
   \        0x0   0x47 0x4E          DC8 "GN"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_37:
   \        0x0   0x69 0x6E          DC8 "initials"
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x73    
   \              0x00
   \        0x9                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_38:
   \        0x0   0x55 0x04          DC8 "U\004+"
   \              0x2B 0x00

   \                                 In section .rodata, align 4
   \                     ?_39:
   \        0x0   0x70 0x73          DC8 "pseudonym"
   \              0x65 0x75    
   \              0x64 0x6F    
   \              0x6E 0x79    
   \              0x6D 0x00
   \        0xA                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_40:
   \        0x0   0x55 0x04          DC8 "U\004A"
   \              0x41 0x00

   \                                 In section .rodata, align 4
   \                     ?_41:
   \        0x0   0x67 0x65          DC8 "generationQualifier"
   \              0x6E 0x65    
   \              0x72 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x51 0x75    
   \              0x61 0x6C    
   \              0x69 0x66    
   \              0x69 0x65    
   \              0x72 0x00

   \                                 In section .rodata, align 4
   \                     ?_42:
   \        0x0   0x55 0x04          DC8 "U\004,"
   \              0x2C 0x00

   \                                 In section .rodata, align 4
   \                     ?_43:
   \        0x0   0x64 0x6F          DC8 "domainComponent"
   \              0x6D 0x61    
   \              0x69 0x6E    
   \              0x43 0x6F    
   \              0x6D 0x70    
   \              0x6F 0x6E    
   \              0x65 0x6E    
   \              0x74 0x00

   \                                 In section .rodata, align 4
   \                     ?_44:
   \        0x0   0x09 0x92          DC8 "\t\222&\211\223\362,d\001\031"
   \              0x26 0x89    
   \              0x93 0xF2    
   \              0x2C 0x64    
   \              0x01 0x19    
   \              0x00
   \        0xB                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_45:
   \        0x0   0x44 0x43          DC8 "DC"
   \              0x00
   \        0x3                      DS8 1
    570          
    571          #endif /* MBEDTLS_X509_CREATE_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   hex_to_int
      16   hexpair_to_int
        16   -> hex_to_int
      24   mbedtls_x509_set_extension
        24   -> __aeabi_memcpy
        24   -> mbedtls_asn1_store_named_data
     328   mbedtls_x509_string_to_names
       328   -> __aeabi_memcpy
       328   -> hexpair_to_int
       328   -> mbedtls_asn1_free_named_data_list
       328   -> mbedtls_asn1_get_len
       328   -> mbedtls_asn1_store_named_data
       328   -> mbedtls_oid_from_numeric_string
       328   -> sl_calloc
       328   -> sl_free
       328   -> strchr
       328   -> strlen
       328   -> strncmp
      32   mbedtls_x509_write_extensions
        32   -> mbedtls_asn1_write_bool
        32   -> mbedtls_asn1_write_len
        32   -> mbedtls_asn1_write_raw_buffer
        32   -> mbedtls_asn1_write_tag
      40   mbedtls_x509_write_names
        40   -> mbedtls_asn1_write_len
        40   -> mbedtls_asn1_write_oid
        40   -> mbedtls_asn1_write_tag
        40   -> mbedtls_asn1_write_tagged_string
      40   mbedtls_x509_write_sig
        40   -> __aeabi_memcpy
        40   -> mbedtls_asn1_write_algorithm_identifier_ext
        40   -> mbedtls_asn1_write_len
        40   -> mbedtls_asn1_write_tag


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
      10  ?Subroutine0
       8  ?Subroutine1
      10  ?Subroutine2
       4  ?_0
       4  ?_1
       4  ?_10
      12  ?_11
       2  ?_12
      12  ?_13
       4  ?_14
       4  ?_15
      24  ?_16
       4  ?_17
       4  ?_18
      20  ?_19
      12  ?_2
      16  ?_20
      16  ?_21
       4  ?_22
      16  ?_23
       4  ?_24
      12  ?_25
       4  ?_26
      12  ?_27
       4  ?_28
       8  ?_29
       2  ?_3
       4  ?_30
       8  ?_31
       4  ?_32
       4  ?_33
      12  ?_34
       4  ?_35
       4  ?_36
      12  ?_37
       4  ?_38
      12  ?_39
       4  ?_4
       4  ?_40
      20  ?_41
       4  ?_42
      16  ?_43
      12  ?_44
       4  ?_45
      12  ?_46
      12  ?_47
      12  ?_5
       2  ?_6
       4  ?_7
      20  ?_8
       2  ?_9
      42  hex_to_int
      42  hexpair_to_int
      42  mbedtls_x509_set_extension
     578  mbedtls_x509_string_to_names
     202  mbedtls_x509_write_extensions
     140  mbedtls_x509_write_names
     136  mbedtls_x509_write_sig
     464  x509_attrs

 
   844 bytes in section .rodata
 1'250 bytes in section .text
 
 1'250 bytes of CODE  memory
   844 bytes of CONST memory

Errors: none
Warnings: none
