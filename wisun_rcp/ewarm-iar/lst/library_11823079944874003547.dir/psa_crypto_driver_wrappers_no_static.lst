###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         27/Nov/2024  12:17:37
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\psa_crypto_driver_wrappers_no_static.c
#    Command line                 =
#        -f
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir\psa_crypto_driver_wrappers_no_static.o.rsp
#        (C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\psa_crypto_driver_wrappers_no_static.c
#        -D EFR32FG28B322F1024IM48=1 -D
#        configNUM_SDK_THREAD_LOCAL_STORAGE_POINTERS=2 -D
#        SL_COMPONENT_CATALOG_PRESENT=1 -D
#        MBEDTLS_CONFIG_FILE=<sl_mbedtls_config.h> -D
#        MBEDTLS_PSA_CRYPTO_CONFIG_FILE=<psa_crypto_config.h> -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -D
#        RTT_USE_ASM=0 -D MBED_CONF_MBED_TRACE_ENABLE=1 -D
#        MBED_CONF_NANOSTACK_CONFIGURATION=ws_router -D
#        MBED_TRACE_MAX_LEVEL=TRACE_ACTIVE_LEVEL_ALL -D DEBUG_EFM_USER=1 -D
#        HAVE_LFN=1 -D HAVE_LFN_PARENT=1 -lC
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\lst\library_11823079944874003547.dir
#        --diag_suppress Pa050 -o
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir
#        --debug --endian=little --cpu=Cortex-M33 --cmse --cmse -e
#        --fpu=VFPv5_sp --dlib_config "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\
#        -I C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\autogen\ -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\config\ -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\config\rail\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\Device\SiliconLabs\EFR32FG28\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\common\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\CMSIS\Core\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\CMSIS\RTOS2\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\device_init\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\dmadrv\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\common\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emlib\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\cmsis\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\kernel\include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\kernel\portable\IAR\ARM_CM33_NTZ\non_secure\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\iostream\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\config\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\config\preset\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\nvm3\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\peripheral\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_psa_driver\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\common\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\wmbus\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\sidewalk\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\efr32xg28\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\rail_util_pti\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\src\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\segger\systemview\SEGGER\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\silicon_labs\silabs_core\memory_manager\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\common\toolchain\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\system\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\ns_list\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\nanostack\nanostack-libservice\mbed-client-libservice\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\sleeptimer\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\app\wisun_rcp\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\inc\socket\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\src\
#        -Ohz --use_c++_inline) --dependencies=n
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir\psa_crypto_driver_wrappers_no_static.o.iar_deps
#    Locale                       =  C
#    List file                    =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\lst\library_11823079944874003547.dir\psa_crypto_driver_wrappers_no_static.lst
#    Object file                  =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir\psa_crypto_driver_wrappers_no_static.o
#    Runtime model:                  
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_file_descriptor     =  0
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#
###############################################################################

C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\psa_crypto_driver_wrappers_no_static.c
      1          /*
      2           *  Functions to delegate cryptographic operations to an available
      3           *  and appropriate accelerator.
      4           *  Warning: This file is now auto-generated.
      5           */
      6          /*  Copyright The Mbed TLS Contributors
      7           *  SPDX-License-Identifier: Apache-2.0
      8           *
      9           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
     10           *  not use this file except in compliance with the License.
     11           *  You may obtain a copy of the License at
     12           *
     13           *  http://www.apache.org/licenses/LICENSE-2.0
     14           *
     15           *  Unless required by applicable law or agreed to in writing, software
     16           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     17           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     18           *  See the License for the specific language governing permissions and
     19           *  limitations under the License.
     20           */
     21          
     22          
     23          /* BEGIN-common headers */
     24          #include "common.h"
     25          #include "psa_crypto_aead.h"
     26          #include "psa_crypto_cipher.h"
     27          #include "psa_crypto_core.h"
     28          #include "psa_crypto_driver_wrappers_no_static.h"
     29          #include "psa_crypto_hash.h"
     30          #include "psa_crypto_mac.h"
     31          #include "psa_crypto_pake.h"
     32          #include "psa_crypto_rsa.h"
     33          
     34          #include "mbedtls/platform.h"
     35          /* END-common headers */
     36          
     37          #if defined(MBEDTLS_PSA_CRYPTO_C)
     38          
     39          /* BEGIN-driver headers */
     40          /* Headers for mbedtls_test opaque driver */
     41          #if defined(PSA_CRYPTO_DRIVER_TEST)
     42          #include "test/drivers/test_driver.h"
     43          
     44          #endif
     45          /* Headers for mbedtls_test transparent driver */
     46          #if defined(PSA_CRYPTO_DRIVER_TEST)
     47          #include "test/drivers/test_driver.h"
     48          
     49          #endif
     50          /* Headers for p256 transparent driver */
     51          #if defined(MBEDTLS_PSA_P256M_DRIVER_ENABLED)
     52          #include "../3rdparty/p256-m/p256-m_driver_entrypoints.h"
     53          
     54          #endif
     55          
     56          
     57          /* SiLabs Driver Headers */
     58          #include "sli_psa_driver_features.h"
     59          
     60          #include <string.h>
     61          
     62          #if defined(SLI_MBEDTLS_DEVICE_HSE)
     63          #ifndef PSA_CRYPTO_DRIVER_PRESENT
     64          #define PSA_CRYPTO_DRIVER_PRESENT
     65          #endif
     66          #ifndef PSA_CRYPTO_ACCELERATOR_DRIVER_PRESENT
     67          #define PSA_CRYPTO_ACCELERATOR_DRIVER_PRESENT
     68          #endif
     69          #include "sli_se_transparent_types.h"
     70          #include "sli_se_transparent_functions.h"
     71          #endif
     72          
     73          #if defined(SLI_MBEDTLS_DEVICE_HSE) && defined(SLI_PSA_DRIVER_FEATURE_OPAQUE_KEYS)
     74          #ifndef PSA_CRYPTO_DRIVER_PRESENT
     75          #define PSA_CRYPTO_DRIVER_PRESENT
     76          #endif
     77          #ifndef PSA_CRYPTO_ACCELERATOR_DRIVER_PRESENT
     78          #define PSA_CRYPTO_ACCELERATOR_DRIVER_PRESENT
     79          #endif
     80          #include "sli_se_opaque_types.h"
     81          #include "sli_se_opaque_functions.h"
     82          #endif /* SLI_MBEDTLS_DEVICE_HSE  && SLI_PSA_DRIVER_FEATURE_OPAQUE_KEYS */
     83          
     84          #if defined(SLI_MBEDTLS_DEVICE_VSE)
     85          #ifndef PSA_CRYPTO_DRIVER_PRESENT
     86          #define PSA_CRYPTO_DRIVER_PRESENT
     87          #endif
     88          #ifndef PSA_CRYPTO_ACCELERATOR_DRIVER_PRESENT
     89          #define PSA_CRYPTO_ACCELERATOR_DRIVER_PRESENT
     90          #endif
     91          #include "sli_cryptoacc_transparent_types.h"
     92          #include "sli_cryptoacc_transparent_functions.h"
     93          #if defined(SLI_PSA_DRIVER_FEATURE_OPAQUE_KEYS)
     94          #include "sli_cryptoacc_opaque_types.h"
     95          #include "sli_cryptoacc_opaque_functions.h"
     96          #endif /* SLI_PSA_DRIVER_FEATURE_OPAQUE_KEYS */
     97          #endif
     98          
     99          #if defined(SLI_MBEDTLS_DEVICE_S1)
    100          #ifndef PSA_CRYPTO_DRIVER_PRESENT
    101          #define PSA_CRYPTO_DRIVER_PRESENT
    102          #endif
    103          #ifndef PSA_CRYPTO_ACCELERATOR_DRIVER_PRESENT
    104          #define PSA_CRYPTO_ACCELERATOR_DRIVER_PRESENT
    105          #endif
    106          #include "sli_crypto_transparent_types.h"
    107          #include "sli_crypto_transparent_functions.h"
    108          #endif
    109          
    110          #if defined(SLI_MBEDTLS_DEVICE_SI91X)
    111          #ifndef PSA_CRYPTO_DRIVER_PRESENT
    112          #define PSA_CRYPTO_DRIVER_PRESENT
    113          #endif
    114          #ifndef PSA_CRYPTO_ACCELERATOR_DRIVER_PRESENT
    115          #define PSA_CRYPTO_ACCELERATOR_DRIVER_PRESENT
    116          #endif
    117          #include "sli_si91x_crypto_driver_functions.h"
    118          #endif
    119          
    120          #ifdef SLI_SECURE_KEY_STORAGE_DEVICE_SI91X
    121          #include "sl_si91x_psa_wrap.h"
    122          #endif /* Secure key storage driver **/
    123          
    124          /* END-driver headers */
    125          
    126          /* Auto-generated values depending on which drivers are registered.
    127           * ID 0 is reserved for unallocated operations.
    128           * ID 1 is reserved for the Mbed TLS software driver. */
    129          /* BEGIN-driver id definition */
    130          #define PSA_CRYPTO_MBED_TLS_DRIVER_ID (1)
    131          #define MBEDTLS_TEST_OPAQUE_DRIVER_ID (2)
    132          #define MBEDTLS_TEST_TRANSPARENT_DRIVER_ID (3)
    133          #define P256_TRANSPARENT_DRIVER_ID (4)
    134          
    135          
    136          /* SiLabs Driver IDs */
    137          #if defined(PSA_CRYPTO_ACCELERATOR_DRIVER_PRESENT)
    138          #define SLI_SE_TRANSPARENT_DRIVER_ID (4)
    139          #define SLI_SE_OPAQUE_DRIVER_ID (5)
    140          #define SLI_CRYPTOACC_TRANSPARENT_DRIVER_ID (6)
    141          #define SLI_CRYPTO_TRANSPARENT_DRIVER_ID (7)
    142          #endif
    143          
    144          /* END-driver id */
    145          
    146          /* BEGIN-Common Macro definitions */
    147          
    148          /* END-Common Macro definitions */
    149          
    150          /* Support the 'old' SE interface when asked to */
    151          #if defined(MBEDTLS_PSA_CRYPTO_SE_C)
    152          /* PSA_CRYPTO_DRIVER_PRESENT is defined when either a new-style or old-style
    153           * SE driver is present, to avoid unused argument errors at compile time. */
    154          #ifndef PSA_CRYPTO_DRIVER_PRESENT
    155          #define PSA_CRYPTO_DRIVER_PRESENT
    156          #endif
    157          #include "psa_crypto_se.h"
    158          #endif
    159          
    160          /** Get the key buffer size required to store the key material of a key
    161           *  associated with an opaque driver.
    162           *
    163           * \param[in] attributes  The key attributes.
    164           * \param[out] key_buffer_size  Minimum buffer size to contain the key material
    165           *
    166           * \retval #PSA_SUCCESS
    167           *         The minimum size for a buffer to contain the key material has been
    168           *         returned successfully.
    169           * \retval #PSA_ERROR_NOT_SUPPORTED
    170           *         The type and/or the size in bits of the key or the combination of
    171           *         the two is not supported.
    172           * \retval #PSA_ERROR_INVALID_ARGUMENT
    173           *         The key is declared with a lifetime not known to us.
    174           */

   \                                 In section .text, align 2, keep-with-next
    175          psa_status_t psa_driver_wrapper_get_key_buffer_size(
    176              const psa_key_attributes_t *attributes,
    177              size_t *key_buffer_size )
    178          {
   \                     psa_driver_wrapper_get_key_buffer_size: (+1)
   \        0x0   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \        0x4   0x4602             MOV      R2,R0
    179              psa_key_location_t location = PSA_KEY_LIFETIME_GET_LOCATION( attributes->core.lifetime );
    180              psa_key_type_t key_type = attributes->core.type;
    181              size_t key_bits = attributes->core.bits;
   \        0x6   0x8850             LDRH     R0,[R2, #+2]
   \        0x8   0x460B             MOV      R3,R1
   \        0xA   0x8817             LDRH     R7,[R2, #+0]
    182              size_t buffer_size = 0;
    183          
    184              switch( location )
   \        0xC   0x0844             LSRS     R4,R0,#+1
   \        0xE   0x1C64             ADDS     R4,R4,#+1
   \       0x10   0x1DC1             ADDS     R1,R0,#+7
   \       0x12   0x08E4             LSRS     R4,R4,#+3
   \       0x14   0x08C9             LSRS     R1,R1,#+3
   \       0x16   0x08C0             LSRS     R0,R0,#+3
   \       0x18   0x6852             LDR      R2,[R2, #+4]
   \       0x1A   0xEB04 0x04C4      ADD      R4,R4,R4, LSL #+3
   \       0x1E   0x004D             LSLS     R5,R1,#+1
   \       0x20   0xEB00 0x0640      ADD      R6,R0,R0, LSL #+1
   \       0x24   0x343B             ADDS     R4,R4,#+59
   \       0x26   0x1C6D             ADDS     R5,R5,#+1
   \       0x28   0xF106 0x0A4A      ADD      R10,R6,#+74
   \       0x2C   0xF106 0x095A      ADD      R9,R6,#+90
   \       0x30   0x3010             ADDS     R0,R0,#+16
   \       0x32   0xF244 0x0802      MOVW     R8,#+16386
   \       0x36   0xF247 0x0B02      MOVW     R11,#+28674
   \       0x3A   0xF244 0x0C01      MOVW     R12,#+16385
   \       0x3E   0xF247 0x0E01      MOVW     LR,#+28673
   \       0x42   0x....             LDR.N    R6,??DataTable0
   \       0x44   0x0A12             LSRS     R2,R2,#+8
   \       0x46   0xD002             BEQ.N    ??psa_driver_wrapper_get_key_buffer_size_0
   \       0x48   0x2A01             CMP      R2,#+1
   \       0x4A   0xD030             BEQ.N    ??psa_driver_wrapper_get_key_buffer_size_1
   \       0x4C   0xE076             B.N      ??psa_driver_wrapper_get_key_buffer_size_2
    185              {
    186          #if defined(SLI_MBEDTLS_DEVICE_VSE) && defined(SLI_PSA_DRIVER_FEATURE_OPAQUE_KEYS)
    187                  case PSA_KEY_LOCATION_SL_CRYPTOACC_OPAQUE:
    188                      buffer_size = sizeof(sli_cryptoacc_opaque_key_context_t);
    189                      *key_buffer_size = buffer_size;
    190                      return ( PSA_SUCCESS );
    191          #endif
    192          #if defined(PSA_CRYPTO_DRIVER_TEST)
    193                  case PSA_CRYPTO_TEST_DRIVER_LOCATION:
    194          #if defined(MBEDTLS_PSA_CRYPTO_BUILTIN_KEYS)
    195                      /* Emulate property 'builtin_key_size' */
    196                      if( psa_key_id_is_builtin(
    197                              MBEDTLS_SVC_KEY_ID_GET_KEY_ID(
    198                                  psa_get_key_id( attributes ) ) ) )
    199                      {
    200                          *key_buffer_size = sizeof( psa_drv_slot_number_t );
    201                          return( PSA_SUCCESS );
    202                      }
    203          #endif /* MBEDTLS_PSA_CRYPTO_BUILTIN_KEYS */
    204                      *key_buffer_size = mbedtls_test_opaque_size_function( key_type,
    205                                                                            key_bits );
    206                      return( ( *key_buffer_size != 0 ) ?
    207                              PSA_SUCCESS : PSA_ERROR_NOT_SUPPORTED );
    208          #endif /* PSA_CRYPTO_DRIVER_TEST */
    209                  case PSA_KEY_LOCATION_LOCAL_STORAGE:
    210                      buffer_size = PSA_EXPORT_KEY_OUTPUT_SIZE( key_type, key_bits );
   \                     ??psa_driver_wrapper_get_key_buffer_size_0: (+1)
   \       0x4E   0xF407 0x42E0      AND      R2,R7,#0x7000
   \       0x52   0xF5B2 0x5F80      CMP      R2,#+4096
   \       0x56   0xBF1E             ITTT     NE
   \       0x58   0xF5B2 0x5F00      CMPNE    R2,#+8192
   \       0x5C   0x403E             ANDNE    R6,R6,R7
   \       0x5E   0xF5B6 0x4F84      CMPNE    R6,#+16896
   \       0x62   0xD011             BEQ.N    ??psa_driver_wrapper_get_key_buffer_size_3
   \       0x64   0x4577             CMP      R7,LR
   \       0x66   0xBF0C             ITE      EQ
   \       0x68   0x4620             MOVEQ    R0,R4
   \       0x6A   0x4567             CMPNE    R7,R12
   \       0x6C   0xD014             BEQ.N    ??psa_driver_wrapper_get_key_buffer_size_4
   \       0x6E   0x455F             CMP      R7,R11
   \       0x70   0xBF08             IT       EQ
   \       0x72   0x4648             MOVEQ    R0,R9
   \       0x74   0xD010             BEQ.N    ??psa_driver_wrapper_get_key_buffer_size_4
   \       0x76   0x4547             CMP      R7,R8
   \       0x78   0xBF08             IT       EQ
   \       0x7A   0x4650             MOVEQ    R0,R10
   \       0x7C   0xD00C             BEQ.N    ??psa_driver_wrapper_get_key_buffer_size_4
   \       0x7E   0xF027 0x00FF      BIC      R0,R7,#0xFF
   \       0x82   0xF5B0 0x4FE2      CMP      R0,#+28928
   \       0x86   0xD101             BNE.N    ??psa_driver_wrapper_get_key_buffer_size_5
   \                     ??psa_driver_wrapper_get_key_buffer_size_3: (+1)
   \       0x88   0x4608             MOV      R0,R1
   \       0x8A   0xE005             B.N      ??psa_driver_wrapper_get_key_buffer_size_4
   \                     ??psa_driver_wrapper_get_key_buffer_size_5: (+1)
   \       0x8C   0xF027 0x01FF      BIC      R1,R7,#0xFF
   \       0x90   0xF5B1 0x4F82      CMP      R1,#+16640
   \       0x94   0xD108             BNE.N    ??psa_driver_wrapper_get_key_buffer_size_6
   \       0x96   0x4628             MOV      R0,R5
    211                      if( buffer_size == 0 ||
    212                          ( PSA_KEY_TYPE_IS_ECC_PUBLIC_KEY(key_type) && buffer_size == 1 ) )
   \                     ??psa_driver_wrapper_get_key_buffer_size_4: (+1)
   \       0x98   0xB130             CBZ.N    R0,??psa_driver_wrapper_get_key_buffer_size_6
   \       0x9A   0xF027 0x07FF      BIC      R7,R7,#0xFF
   \       0x9E   0xF5B7 0x4F82      CMP      R7,#+16640
   \       0xA2   0xBF08             IT       EQ
   \       0xA4   0x2801             CMPEQ    R0,#+1
   \       0xA6   0xD146             BNE.N    ??psa_driver_wrapper_get_key_buffer_size_7
    213                          return( PSA_ERROR_NOT_SUPPORTED );
   \                     ??psa_driver_wrapper_get_key_buffer_size_6: (+1)
   \       0xA8   0xF06F 0x0085      MVN      R0,#+133
   \       0xAC   0xE04A             B.N      ??psa_driver_wrapper_get_key_buffer_size_8
    214                      *key_buffer_size = buffer_size;
    215                      return( PSA_SUCCESS );
    216          #if defined(SLI_MBEDTLS_DEVICE_HSE) && defined(SLI_PSA_DRIVER_FEATURE_OPAQUE_KEYS)
    217                  case PSA_KEY_LOCATION_SLI_SE_OPAQUE:
    218                      buffer_size = PSA_EXPORT_KEY_OUTPUT_SIZE( key_type, key_bits );
   \                     ??psa_driver_wrapper_get_key_buffer_size_1: (+1)
   \       0xAE   0xF407 0x42E0      AND      R2,R7,#0x7000
   \       0xB2   0xF5B2 0x5F80      CMP      R2,#+4096
   \       0xB6   0xBF1E             ITTT     NE
   \       0xB8   0xF5B2 0x5F00      CMPNE    R2,#+8192
   \       0xBC   0x403E             ANDNE    R6,R6,R7
   \       0xBE   0xF5B6 0x4F84      CMPNE    R6,#+16896
   \       0xC2   0xD011             BEQ.N    ??psa_driver_wrapper_get_key_buffer_size_9
   \       0xC4   0x4577             CMP      R7,LR
   \       0xC6   0xBF0C             ITE      EQ
   \       0xC8   0x4620             MOVEQ    R0,R4
   \       0xCA   0x4567             CMPNE    R7,R12
   \       0xCC   0xD014             BEQ.N    ??psa_driver_wrapper_get_key_buffer_size_10
   \       0xCE   0x455F             CMP      R7,R11
   \       0xD0   0xBF08             IT       EQ
   \       0xD2   0x4648             MOVEQ    R0,R9
   \       0xD4   0xD010             BEQ.N    ??psa_driver_wrapper_get_key_buffer_size_10
   \       0xD6   0x4547             CMP      R7,R8
   \       0xD8   0xBF08             IT       EQ
   \       0xDA   0x4650             MOVEQ    R0,R10
   \       0xDC   0xD00C             BEQ.N    ??psa_driver_wrapper_get_key_buffer_size_10
   \       0xDE   0xF027 0x02FF      BIC      R2,R7,#0xFF
   \       0xE2   0xF5B2 0x4FE2      CMP      R2,#+28928
   \       0xE6   0xD101             BNE.N    ??psa_driver_wrapper_get_key_buffer_size_11
   \                     ??psa_driver_wrapper_get_key_buffer_size_9: (+1)
   \       0xE8   0x4608             MOV      R0,R1
   \       0xEA   0xE005             B.N      ??psa_driver_wrapper_get_key_buffer_size_10
   \                     ??psa_driver_wrapper_get_key_buffer_size_11: (+1)
   \       0xEC   0xF027 0x00FF      BIC      R0,R7,#0xFF
   \       0xF0   0xF5B0 0x4F82      CMP      R0,#+16640
   \       0xF4   0xD10A             BNE.N    ??psa_driver_wrapper_get_key_buffer_size_12
   \       0xF6   0x4628             MOV      R0,R5
    219                      if( buffer_size == 0 ||
    220                          ( PSA_KEY_TYPE_IS_ECC_PUBLIC_KEY(key_type) && buffer_size == 1 ) )
   \                     ??psa_driver_wrapper_get_key_buffer_size_10: (+1)
   \       0xF8   0xB140             CBZ.N    R0,??psa_driver_wrapper_get_key_buffer_size_12
   \       0xFA   0xF027 0x02FF      BIC      R2,R7,#0xFF
   \       0xFE   0xF5B2 0x4F82      CMP      R2,#+16640
   \      0x102   0xD104             BNE.N    ??psa_driver_wrapper_get_key_buffer_size_13
   \      0x104   0x2801             CMP      R0,#+1
   \      0x106   0xD107             BNE.N    ??psa_driver_wrapper_get_key_buffer_size_14
   \      0x108   0x6818             LDR      R0,[R3, #+0]
   \      0x10A   0xE005             B.N      ??psa_driver_wrapper_get_key_buffer_size_14
    221                          buffer_size = *key_buffer_size;
   \                     ??psa_driver_wrapper_get_key_buffer_size_12: (+1)
   \      0x10C   0x6818             LDR      R0,[R3, #+0]
    222                      // Remove public key format byte
    223                      if( PSA_KEY_TYPE_IS_ECC_PUBLIC_KEY( key_type ) ) {
   \                     ??psa_driver_wrapper_get_key_buffer_size_13: (+1)
   \      0x10E   0xF027 0x02FF      BIC      R2,R7,#0xFF
   \      0x112   0xF5B2 0x4F82      CMP      R2,#+16640
   \      0x116   0xD100             BNE.N    ??psa_driver_wrapper_get_key_buffer_size_15
    224                          buffer_size--;
   \                     ??psa_driver_wrapper_get_key_buffer_size_14: (+1)
   \      0x118   0x1E40             SUBS     R0,R0,#+1
    225                      }
    226                      // Compensate for word alignment demands
    227                      buffer_size = sli_se_word_align( buffer_size );
   \                     ??psa_driver_wrapper_get_key_buffer_size_15: (+1)
   \      0x11A   0x1CC0             ADDS     R0,R0,#+3
   \      0x11C   0x0880             LSRS     R0,R0,#+2
   \      0x11E   0x0080             LSLS     R0,R0,#+2
    228                      if( PSA_BITS_TO_BYTES( key_bits ) & 0x3 || PSA_BITS_TO_BYTES( key_bits ) == 0 ) {
   \      0x120   0xF011 0x0F03      TST      R1,#0x3
   \      0x124   0xD100             BNE.N    ??psa_driver_wrapper_get_key_buffer_size_16
   \      0x126   0xB929             CBNZ.N   R1,??psa_driver_wrapper_get_key_buffer_size_17
    229                          if( PSA_KEY_TYPE_IS_ECC_PUBLIC_KEY(key_type) ) {
   \                     ??psa_driver_wrapper_get_key_buffer_size_16: (+1)
   \      0x128   0xF027 0x07FF      BIC      R7,R7,#0xFF
   \      0x12C   0xF5B7 0x4F82      CMP      R7,#+16640
   \      0x130   0xBF08             IT       EQ
   \      0x132   0x1D00             ADDEQ    R0,R0,#+4
    230                              // Allocate extra word for public keys, since alignment constrains
    231                              // May require that
    232                              buffer_size += sizeof(uint32_t);
    233                          }
    234                      }
    235                      // Add wrapped context overhead
    236                      buffer_size += sizeof(sli_se_opaque_wrapped_key_context_t);
    237                      *key_buffer_size = buffer_size;
   \                     ??psa_driver_wrapper_get_key_buffer_size_17: (+1)
   \      0x134   0x302C             ADDS     R0,R0,#+44
   \                     ??psa_driver_wrapper_get_key_buffer_size_7: (+1)
   \      0x136   0x6018             STR      R0,[R3, #+0]
    238                      return ( PSA_SUCCESS );
   \      0x138   0x2000             MOVS     R0,#+0
   \      0x13A   0xE003             B.N      ??psa_driver_wrapper_get_key_buffer_size_8
    239          #endif
    240          #if defined(SLI_SECURE_KEY_STORAGE_DEVICE_SI91X)
    241                  case PSA_KEY_VOLATILE_PERSISTENT_WRAPPED:
    242                    buffer_size = PSA_EXPORT_KEY_OUTPUT_SIZE( key_type, key_bits );
    243                    if( buffer_size == 0 ||
    244                        ( PSA_KEY_TYPE_IS_ECC_PUBLIC_KEY(key_type) && buffer_size == 1 ) )
    245                        return( PSA_ERROR_NOT_SUPPORTED );
    246                    *key_buffer_size = buffer_size;
    247                    return( PSA_SUCCESS );
    248                    break;
    249          #endif
    250          
    251                  default:
    252                      (void)key_type;
    253                      (void)key_bits;
    254                      *key_buffer_size = 0;
   \                     ??psa_driver_wrapper_get_key_buffer_size_2: (+1)
   \      0x13C   0x2000             MOVS     R0,#+0
   \      0x13E   0x6018             STR      R0,[R3, #+0]
    255                      return( PSA_ERROR_INVALID_ARGUMENT );
   \      0x140   0xF06F 0x0086      MVN      R0,#+134
   \                     ??psa_driver_wrapper_get_key_buffer_size_8: (+1)
   \      0x144   0xE8BD 0x8FF0      POP      {R4-R11,PC}
    256              }
    257          }
    258          

   \                                 In section .text, align 2, keep-with-next
    259          psa_status_t psa_driver_wrapper_export_public_key(
    260              const psa_key_attributes_t *attributes,
    261              const uint8_t *key_buffer, size_t key_buffer_size,
    262              uint8_t *data, size_t data_size, size_t *data_length )
    263          
    264          {
   \                     psa_driver_wrapper_export_public_key: (+1)
   \        0x0   0xE92D 0x43FE      PUSH     {R1-R9,LR}
   \        0x4   0x4604             MOV      R4,R0
    265          
    266              psa_status_t status = PSA_ERROR_INVALID_ARGUMENT;
    267              psa_key_location_t location = PSA_KEY_LIFETIME_GET_LOCATION(
    268                                                psa_get_key_lifetime( attributes ) );
    269          
    270              /* Try dynamically-registered SE interface first */
    271          #if defined(MBEDTLS_PSA_CRYPTO_SE_C)
    272              const psa_drv_se_t *drv;
    273              psa_drv_se_context_t *drv_context;
    274          
    275              if( psa_get_se_driver( attributes->core.lifetime, &drv, &drv_context ) )
    276              {
    277                  if( ( drv->key_management == NULL ) ||
    278                      ( drv->key_management->p_export_public == NULL ) )
    279                  {
    280                      return( PSA_ERROR_NOT_SUPPORTED );
    281                  }
    282          
    283                  return( drv->key_management->p_export_public(
    284                              drv_context,
    285                              *( (psa_key_slot_number_t *)key_buffer ),
    286                              data, data_size, data_length ) );
    287              }
    288          #endif /* MBEDTLS_PSA_CRYPTO_SE_C */
    289          
    290              switch( location )
   \        0x6   0x6860             LDR      R0,[R4, #+4]
   \        0x8   0x460D             MOV      R5,R1
   \        0xA   0x4690             MOV      R8,R2
   \        0xC   0x4699             MOV      R9,R3
   \        0xE   0x9E0A             LDR      R6,[SP, #+40]
   \       0x10   0x9F0B             LDR      R7,[SP, #+44]
   \       0x12   0x0A00             LSRS     R0,R0,#+8
   \       0x14   0xD002             BEQ.N    ??psa_driver_wrapper_export_public_key_0
   \       0x16   0x2801             CMP      R0,#+1
   \       0x18   0xD011             BEQ.N    ??psa_driver_wrapper_export_public_key_1
   \       0x1A   0xE016             B.N      ??psa_driver_wrapper_export_public_key_2
    291              {
    292                  case PSA_KEY_LOCATION_LOCAL_STORAGE:
    293                      /* Key is stored in the slot in export representation, so
    294                       * cycle through all known transparent accelerators */
    295          #if defined(PSA_CRYPTO_ACCELERATOR_DRIVER_PRESENT)
    296          
    297          #if (defined(PSA_CRYPTO_DRIVER_TEST) )
    298                      status = mbedtls_test_transparent_export_public_key
    299                          (attributes,
    300                                          key_buffer,
    301                                          key_buffer_size,
    302                                          data,
    303                                          data_size,
    304                                          data_length
    305                      );
    306          
    307                      if( status != PSA_ERROR_NOT_SUPPORTED )
    308                          return( status );
    309          #endif
    310          
    311          #if (defined(MBEDTLS_PSA_P256M_DRIVER_ENABLED) )
    312                      status = p256_transparent_export_public_key
    313                          (attributes,
    314                                          key_buffer,
    315                                          key_buffer_size,
    316                                          data,
    317                                          data_size,
    318                                          data_length
    319                      );
    320          
    321                      if( status != PSA_ERROR_NOT_SUPPORTED )
    322                          return( status );
    323          #endif
    324          
    325          
    326          #if defined(SLI_MBEDTLS_DEVICE_HSE)
    327                      status = sli_se_transparent_export_public_key( attributes,
    328                                                                     key_buffer,
    329                                                                     key_buffer_size,
    330                                                                     data,
    331                                                                     data_size,
    332                                                                     data_length );
   \                     ??psa_driver_wrapper_export_public_key_0: (+1)
   \       0x1C   0x9701             STR      R7,[SP, #+4]
   \       0x1E   0x9600             STR      R6,[SP, #+0]
   \       0x20   0x4620             MOV      R0,R4
   \       0x22   0x.... 0x....      BL       sli_se_transparent_export_public_key
    333                      /* Declared with fallback == true */
    334                      if( status != PSA_ERROR_NOT_SUPPORTED )
   \       0x26   0xF110 0x0F86      CMN      R0,#+134
   \       0x2A   0xD110             BNE.N    ??psa_driver_wrapper_export_public_key_3
    335                          return( status );
    336          #endif // SLI_MBEDTLS_DEVICE_HSE
    337          #if defined(SLI_MBEDTLS_DEVICE_VSE)
    338                      status = sli_cryptoacc_transparent_export_public_key( attributes,
    339                                                                            key_buffer,
    340                                                                            key_buffer_size,
    341                                                                            data,
    342                                                                            data_size,
    343                                                                            data_length );
    344                      /* Declared with fallback == true */
    345                      if( status != PSA_ERROR_NOT_SUPPORTED )
    346                          return( status );
    347          #endif // SLI_MBEDTLS_DEVICE_VSE
    348          #if defined(SLI_ECDH_DEVICE_SI91X)
    349                      status = sli_si91x_psa_export_public_key_ecdh( attributes,
    350                                                                     key_buffer,
    351                                                                     key_buffer_size,
    352                                                                     data,
    353                                                                     data_size,
    354                                                                     data_length );
    355                      /* Declared with fallback == true */
    356                      if( status != PSA_ERROR_NOT_SUPPORTED )
    357                          return( status );
    358          #endif // SLI_ECDH_DEVICE_SI91X
    359          #endif /* PSA_CRYPTO_ACCELERATOR_DRIVER_PRESENT */
    360                      /* Fell through, meaning no accelerator supports this operation */
    361                      return( psa_export_public_key_internal( attributes,
    362                                                              key_buffer,
    363                                                              key_buffer_size,
    364                                                              data,
    365                                                              data_size,
    366                                                              data_length ) );
   \       0x2C   0x9701             STR      R7,[SP, #+4]
   \       0x2E   0x9600             STR      R6,[SP, #+0]
   \       0x30   0x464B             MOV      R3,R9
   \       0x32   0x4642             MOV      R2,R8
   \       0x34   0x4629             MOV      R1,R5
   \       0x36   0x4620             MOV      R0,R4
   \       0x38   0x.... 0x....      BL       psa_export_public_key_internal
   \       0x3C   0xE007             B.N      ??psa_driver_wrapper_export_public_key_3
    367          
    368                  /* Add cases for opaque driver here */
    369          #if defined(PSA_CRYPTO_ACCELERATOR_DRIVER_PRESENT)
    370          
    371          #if (defined(PSA_CRYPTO_DRIVER_TEST) )
    372                  case 0x7fffff:
    373                      return( mbedtls_test_opaque_export_public_key
    374                      (attributes,
    375                                      key_buffer,
    376                                      key_buffer_size,
    377                                      data,
    378                                      data_size,
    379                                      data_length
    380                  ));
    381          #endif
    382          
    383          
    384          #if defined(SLI_MBEDTLS_DEVICE_HSE) && defined(SLI_PSA_DRIVER_FEATURE_OPAQUE_KEYS)
    385                  case PSA_KEY_LOCATION_SLI_SE_OPAQUE:
    386                      return( sli_se_opaque_export_public_key( attributes,
    387                                                               key_buffer,
    388                                                               key_buffer_size,
    389                                                               data,
    390                                                               data_size,
    391                                                               data_length ) );
   \                     ??psa_driver_wrapper_export_public_key_1: (+1)
   \       0x3E   0x9701             STR      R7,[SP, #+4]
   \       0x40   0x9600             STR      R6,[SP, #+0]
   \       0x42   0x4620             MOV      R0,R4
   \       0x44   0x.... 0x....      BL       sli_se_opaque_export_public_key
   \       0x48   0xE001             B.N      ??psa_driver_wrapper_export_public_key_3
    392          #endif
    393          #endif /* PSA_CRYPTO_ACCELERATOR_DRIVER_PRESENT */
    394                  default:
    395                      /* Key is declared with a lifetime not known to us */
    396                      return( status );
   \                     ??psa_driver_wrapper_export_public_key_2: (+1)
   \       0x4A   0xF06F 0x0086      MVN      R0,#+134
   \                     ??psa_driver_wrapper_export_public_key_3: (+1)
   \       0x4E   0xE8BD 0x83FE      POP      {R1-R9,PC}
    397              }
    398          
    399          }
    400          

   \                                 In section .text, align 2, keep-with-next
    401          psa_status_t psa_driver_wrapper_get_builtin_key(
    402              psa_drv_slot_number_t slot_number,
    403              psa_key_attributes_t *attributes,
    404              uint8_t *key_buffer, size_t key_buffer_size, size_t *key_buffer_length )
    405          {
    406          
    407              psa_key_location_t location = PSA_KEY_LIFETIME_GET_LOCATION( attributes->core.lifetime );
    408              switch( location )
    409              {
    410          #if defined(PSA_CRYPTO_ACCELERATOR_DRIVER_PRESENT)
    411          
    412          #if (defined(PSA_CRYPTO_DRIVER_TEST) )
    413                  case 0x7fffff:
    414                      return( mbedtls_test_opaque_get_builtin_key
    415                      (slot_number,
    416                                      attributes,
    417                                      key_buffer,
    418                                      key_buffer_size,
    419                                      key_buffer_length
    420                  ));
    421          #endif
    422          
    423          
    424          #if defined(SLI_MBEDTLS_DEVICE_HSE) && defined(SLI_PSA_DRIVER_FEATURE_BUILTIN_KEYS)
    425                  case PSA_KEY_LOCATION_SLI_SE_OPAQUE:
    426                      return( sli_se_opaque_get_builtin_key(
    427                                  slot_number,
    428                                  attributes,
    429                                  key_buffer, key_buffer_size, key_buffer_length ) );
    430          #endif
    431          #if defined(SLI_MBEDTLS_DEVICE_VSE) && defined(SLI_PSA_DRIVER_FEATURE_BUILTIN_KEYS)
    432                  case PSA_KEY_LOCATION_SL_CRYPTOACC_OPAQUE:
    433                      return( sli_cryptoacc_opaque_get_builtin_key(
    434                                  slot_number,
    435                                  attributes,
    436                                  key_buffer, key_buffer_size, key_buffer_length ) );
    437          #endif
    438          #endif /* PSA_CRYPTO_ACCELERATOR_DRIVER_PRESENT */
    439                  default:
    440                      (void) slot_number;
    441                      (void) key_buffer;
    442                      (void) key_buffer_size;
    443                      (void) key_buffer_length;
    444                      return( PSA_ERROR_DOES_NOT_EXIST );
   \                     psa_driver_wrapper_get_builtin_key: (+1)
   \        0x0   0xF06F 0x008B      MVN      R0,#+139
   \        0x4   0x4770             BX       LR
    445              }
    446          
    447          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \        0x0   0xFFFF'CF00        DC32     0xffffcf00
    448          
    449          #endif /* MBEDTLS_PSA_CRYPTO_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   psa_driver_wrapper_export_public_key
        40   -> psa_export_public_key_internal
        40   -> sli_se_opaque_export_public_key
        40   -> sli_se_transparent_export_public_key
       0   psa_driver_wrapper_get_builtin_key
      36   psa_driver_wrapper_get_key_buffer_size


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
      82  psa_driver_wrapper_export_public_key
       6  psa_driver_wrapper_get_builtin_key
     328  psa_driver_wrapper_get_key_buffer_size

 
 420 bytes in section .text
 
 420 bytes of CODE memory

Errors: none
Warnings: none
