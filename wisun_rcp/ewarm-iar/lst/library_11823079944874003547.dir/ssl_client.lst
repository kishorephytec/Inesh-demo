###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         27/Nov/2024  12:17:43
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\ssl_client.c
#    Command line                 =
#        -f
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir\ssl_client.o.rsp
#        (C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\ssl_client.c
#        -D EFR32FG28B322F1024IM48=1 -D
#        configNUM_SDK_THREAD_LOCAL_STORAGE_POINTERS=2 -D
#        SL_COMPONENT_CATALOG_PRESENT=1 -D
#        MBEDTLS_CONFIG_FILE=<sl_mbedtls_config.h> -D
#        MBEDTLS_PSA_CRYPTO_CONFIG_FILE=<psa_crypto_config.h> -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -D
#        RTT_USE_ASM=0 -D MBED_CONF_MBED_TRACE_ENABLE=1 -D
#        MBED_CONF_NANOSTACK_CONFIGURATION=ws_router -D
#        MBED_TRACE_MAX_LEVEL=TRACE_ACTIVE_LEVEL_ALL -D DEBUG_EFM_USER=1 -D
#        HAVE_LFN=1 -D HAVE_LFN_PARENT=1 -lC
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\lst\library_11823079944874003547.dir
#        --diag_suppress Pa050 -o
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir
#        --debug --endian=little --cpu=Cortex-M33 --cmse --cmse -e
#        --fpu=VFPv5_sp --dlib_config "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\
#        -I C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\autogen\ -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\config\ -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\config\rail\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\Device\SiliconLabs\EFR32FG28\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\common\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\CMSIS\Core\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\CMSIS\RTOS2\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\device_init\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\dmadrv\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\common\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emlib\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\cmsis\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\kernel\include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\kernel\portable\IAR\ARM_CM33_NTZ\non_secure\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\iostream\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\config\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\config\preset\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\nvm3\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\peripheral\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_psa_driver\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\common\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\wmbus\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\sidewalk\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\efr32xg28\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\rail_util_pti\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\src\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\segger\systemview\SEGGER\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\silicon_labs\silabs_core\memory_manager\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\common\toolchain\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\system\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\ns_list\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\nanostack\nanostack-libservice\mbed-client-libservice\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\sleeptimer\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\app\wisun_rcp\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\inc\socket\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\src\
#        -Ohz --use_c++_inline) --dependencies=n
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir\ssl_client.o.iar_deps
#    Locale                       =  C
#    List file                    =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\lst\library_11823079944874003547.dir\ssl_client.lst
#    Object file                  =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir\ssl_client.o
#    Runtime model:                  
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_file_descriptor     =  0
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#
###############################################################################

C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\ssl_client.c
      1          /*
      2           *  TLS 1.2 and 1.3 client-side functions
      3           *
      4           *  Copyright The Mbed TLS Contributors
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of Mbed TLS ( https://tls.mbed.org )
     20           */
     21          
     22          #include "common.h"

   \                                 In section .text, align 2
   \   __vfp void mbedtls_put_unaligned_uint16(void *, uint16_t)
   \                     mbedtls_put_unaligned_uint16: (+1)
   \        0x0   0xB402             PUSH     {R1}
   \        0x2   0xF89D 0x2000      LDRB     R2,[SP, #+0]
   \        0x6   0x7002             STRB     R2,[R0, #+0]
   \        0x8   0xF89D 0x2001      LDRB     R2,[SP, #+1]
   \        0xC   0x7042             STRB     R2,[R0, #+1]
   \        0xE   0xB001             ADD      SP,SP,#+4
   \       0x10   0x4770             BX       LR

   \                                 In section .text, align 4, keep-with-next
   \   static __absolute uint16_t const mbedtls_byte_order_detector
   \                     mbedtls_byte_order_detector:
   \        0x0   0x0100             DC16 256
     23          
     24          #if defined(MBEDTLS_SSL_CLI_C)
     25          #if defined(MBEDTLS_SSL_PROTO_TLS1_3) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
     26          
     27          #include <string.h>
     28          
     29          #include "mbedtls/debug.h"
     30          #include "mbedtls/error.h"
     31          #include "mbedtls/platform.h"
     32          
     33          #include "ssl_client.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __vfp int mbedtls_ssl_chk_buf_ptr(uint8_t const *, uint8_t const *, size_t)
   \                     mbedtls_ssl_chk_buf_ptr: (+1)
   \        0x0   0x4281             CMP      R1,R0
   \        0x2   0xD304             BCC.N    ??mbedtls_ssl_chk_buf_ptr_0
   \        0x4   0x1A08             SUBS     R0,R1,R0
   \        0x6   0x4290             CMP      R0,R2
   \        0x8   0x4180             SBCS     R0,R0,R0
   \        0xA   0x0FC0             LSRS     R0,R0,#+31
   \        0xC   0x4770             BX       LR
   \                     ??mbedtls_ssl_chk_buf_ptr_0: (+1)
   \        0xE   0x2001             MOVS     R0,#+1
   \       0x10   0x4770             BX       LR

      return 0;
      ^
"C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\ssl_misc.h",2433  Warning[Pe111]: 
          statement is unreachable
     34          #include "ssl_misc.h"
     35          #include "ssl_tls13_keys.h"
     36          #include "ssl_debug_helpers.h"
     37          
     38          #if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
     39          MBEDTLS_CHECK_RETURN_CRITICAL
     40          static int ssl_write_hostname_ext(mbedtls_ssl_context *ssl,
     41                                            unsigned char *buf,
     42                                            const unsigned char *end,
     43                                            size_t *olen)
     44          {
     45              unsigned char *p = buf;
     46              size_t hostname_len;
     47          
     48              *olen = 0;
     49          
     50              if (ssl->hostname == NULL) {
     51                  return 0;
     52              }
     53          
     54              MBEDTLS_SSL_DEBUG_MSG(3,
     55                                    ("client hello, adding server name extension: %s",
     56                                     ssl->hostname));
     57          
     58              hostname_len = strlen(ssl->hostname);
     59          
     60              MBEDTLS_SSL_CHK_BUF_PTR(p, end, hostname_len + 9);
     61          
     62              /*
     63               * Sect. 3, RFC 6066 (TLS Extensions Definitions)
     64               *
     65               * In order to provide any of the server names, clients MAY include an
     66               * extension of type "server_name" in the (extended) client hello. The
     67               * "extension_data" field of this extension SHALL contain
     68               * "ServerNameList" where:
     69               *
     70               * struct {
     71               *     NameType name_type;
     72               *     select (name_type) {
     73               *         case host_name: HostName;
     74               *     } name;
     75               * } ServerName;
     76               *
     77               * enum {
     78               *     host_name(0), (255)
     79               * } NameType;
     80               *
     81               * opaque HostName<1..2^16-1>;
     82               *
     83               * struct {
     84               *     ServerName server_name_list<1..2^16-1>
     85               * } ServerNameList;
     86               *
     87               */
     88              MBEDTLS_PUT_UINT16_BE(MBEDTLS_TLS_EXT_SERVERNAME, p, 0);
     89              p += 2;
     90          
     91              MBEDTLS_PUT_UINT16_BE(hostname_len + 5, p, 0);
     92              p += 2;
     93          
     94              MBEDTLS_PUT_UINT16_BE(hostname_len + 3, p, 0);
     95              p += 2;
     96          
     97              *p++ = MBEDTLS_BYTE_0(MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME);
     98          
     99              MBEDTLS_PUT_UINT16_BE(hostname_len, p, 0);
    100              p += 2;
    101          
    102              memcpy(p, ssl->hostname, hostname_len);
    103          
    104              *olen = hostname_len + 9;
    105          
    106          #if defined(MBEDTLS_SSL_PROTO_TLS1_3)
    107              mbedtls_ssl_tls13_set_hs_sent_ext_mask(ssl, MBEDTLS_TLS_EXT_SERVERNAME);
    108          #endif /* MBEDTLS_SSL_PROTO_TLS1_3 */
    109              return 0;
    110          }
    111          #endif /* MBEDTLS_SSL_SERVER_NAME_INDICATION */
    112          
    113          #if defined(MBEDTLS_SSL_ALPN)
    114          /*
    115           * ssl_write_alpn_ext()
    116           *
    117           * Structure of the application_layer_protocol_negotiation extension in
    118           * ClientHello:
    119           *
    120           * opaque ProtocolName<1..2^8-1>;
    121           *
    122           * struct {
    123           *     ProtocolName protocol_name_list<2..2^16-1>
    124           * } ProtocolNameList;
    125           *
    126           */
    127          MBEDTLS_CHECK_RETURN_CRITICAL
    128          static int ssl_write_alpn_ext(mbedtls_ssl_context *ssl,
    129                                        unsigned char *buf,
    130                                        const unsigned char *end,
    131                                        size_t *out_len)
    132          {
    133              unsigned char *p = buf;
    134          
    135              *out_len = 0;
    136          
    137              if (ssl->conf->alpn_list == NULL) {
    138                  return 0;
    139              }
    140          
    141              MBEDTLS_SSL_DEBUG_MSG(3, ("client hello, adding alpn extension"));
    142          
    143          
    144              /* Check we have enough space for the extension type (2 bytes), the
    145               * extension length (2 bytes) and the protocol_name_list length (2 bytes).
    146               */
    147              MBEDTLS_SSL_CHK_BUF_PTR(p, end, 6);
    148              MBEDTLS_PUT_UINT16_BE(MBEDTLS_TLS_EXT_ALPN, p, 0);
    149              /* Skip writing extension and list length for now */
    150              p += 6;
    151          
    152              /*
    153               * opaque ProtocolName<1..2^8-1>;
    154               *
    155               * struct {
    156               *     ProtocolName protocol_name_list<2..2^16-1>
    157               * } ProtocolNameList;
    158               */
    159              for (const char **cur = ssl->conf->alpn_list; *cur != NULL; cur++) {
    160                  /*
    161                   * mbedtls_ssl_conf_set_alpn_protocols() checked that the length of
    162                   * protocol names is less than 255.
    163                   */
    164                  size_t protocol_name_len = strlen(*cur);
    165          
    166                  MBEDTLS_SSL_CHK_BUF_PTR(p, end, 1 + protocol_name_len);
    167                  *p++ = (unsigned char) protocol_name_len;
    168                  memcpy(p, *cur, protocol_name_len);
    169                  p += protocol_name_len;
    170              }
    171          
    172              *out_len = p - buf;
    173          
    174              /* List length = *out_len - 2 (ext_type) - 2 (ext_len) - 2 (list_len) */
    175              MBEDTLS_PUT_UINT16_BE(*out_len - 6, buf, 4);
    176          
    177              /* Extension length = *out_len - 2 (ext_type) - 2 (ext_len) */
    178              MBEDTLS_PUT_UINT16_BE(*out_len - 4, buf, 2);
    179          
    180          #if defined(MBEDTLS_SSL_PROTO_TLS1_3)
    181              mbedtls_ssl_tls13_set_hs_sent_ext_mask(ssl, MBEDTLS_TLS_EXT_ALPN);
    182          #endif /* MBEDTLS_SSL_PROTO_TLS1_3 */
    183              return 0;
    184          }
    185          #endif /* MBEDTLS_SSL_ALPN */
    186          
    187          #if defined(MBEDTLS_SSL_TLS1_2_SOME_ECC) || \
    188              defined(MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_SOME_EPHEMERAL_ENABLED)
    189          /*
    190           * Function for writing a supported groups (TLS 1.3) or supported elliptic
    191           * curves (TLS 1.2) extension.
    192           *
    193           * The "extension_data" field of a supported groups extension contains a
    194           * "NamedGroupList" value (TLS 1.3 RFC8446):
    195           *      enum {
    196           *          secp256r1(0x0017), secp384r1(0x0018), secp521r1(0x0019),
    197           *          x25519(0x001D), x448(0x001E),
    198           *          ffdhe2048(0x0100), ffdhe3072(0x0101), ffdhe4096(0x0102),
    199           *          ffdhe6144(0x0103), ffdhe8192(0x0104),
    200           *          ffdhe_private_use(0x01FC..0x01FF),
    201           *          ecdhe_private_use(0xFE00..0xFEFF),
    202           *          (0xFFFF)
    203           *      } NamedGroup;
    204           *      struct {
    205           *          NamedGroup named_group_list<2..2^16-1>;
    206           *      } NamedGroupList;
    207           *
    208           * The "extension_data" field of a supported elliptic curves extension contains
    209           * a "NamedCurveList" value (TLS 1.2 RFC 8422):
    210           * enum {
    211           *      deprecated(1..22),
    212           *      secp256r1 (23), secp384r1 (24), secp521r1 (25),
    213           *      x25519(29), x448(30),
    214           *      reserved (0xFE00..0xFEFF),
    215           *      deprecated(0xFF01..0xFF02),
    216           *      (0xFFFF)
    217           *  } NamedCurve;
    218           * struct {
    219           *      NamedCurve named_curve_list<2..2^16-1>
    220           *  } NamedCurveList;
    221           *
    222           * The TLS 1.3 supported groups extension was defined to be a compatible
    223           * generalization of the TLS 1.2 supported elliptic curves extension. They both
    224           * share the same extension identifier.
    225           *
    226           */
    227          #define SSL_WRITE_SUPPORTED_GROUPS_EXT_TLS1_2_FLAG 1
    228          #define SSL_WRITE_SUPPORTED_GROUPS_EXT_TLS1_3_FLAG 2
    229          
    230          MBEDTLS_CHECK_RETURN_CRITICAL
    231          static int ssl_write_supported_groups_ext(mbedtls_ssl_context *ssl,
    232                                                    unsigned char *buf,
    233                                                    const unsigned char *end,
    234                                                    int flags,
    235                                                    size_t *out_len)
    236          {
    237              unsigned char *p = buf;
    238              unsigned char *named_group_list; /* Start of named_group_list */
    239              size_t named_group_list_len;     /* Length of named_group_list */
    240              const uint16_t *group_list = mbedtls_ssl_get_groups(ssl);
    241          
    242              *out_len = 0;
    243          
    244              MBEDTLS_SSL_DEBUG_MSG(3, ("client hello, adding supported_groups extension"));
    245          
    246              /* Check if we have space for header and length fields:
    247               * - extension_type            (2 bytes)
    248               * - extension_data_length     (2 bytes)
    249               * - named_group_list_length   (2 bytes)
    250               */
    251              MBEDTLS_SSL_CHK_BUF_PTR(p, end, 6);
    252              p += 6;
    253          
    254              named_group_list = p;
    255          
    256              if (group_list == NULL) {
    257                  return MBEDTLS_ERR_SSL_BAD_CONFIG;
    258              }
    259          
    260              for (; *group_list != 0; group_list++) {
    261                  int propose_group = 0;
    262          
    263                  MBEDTLS_SSL_DEBUG_MSG(3, ("got supported group(%04x)", *group_list));
    264          
    265          #if defined(MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_SOME_EPHEMERAL_ENABLED)
    266                  if (flags & SSL_WRITE_SUPPORTED_GROUPS_EXT_TLS1_3_FLAG) {
    267          #if defined(PSA_WANT_ALG_ECDH)
    268                      if (mbedtls_ssl_tls13_named_group_is_ecdhe(*group_list) &&
    269                          (mbedtls_ssl_get_ecp_group_id_from_tls_id(*group_list) !=
    270                           MBEDTLS_ECP_DP_NONE)) {
    271                          propose_group = 1;
    272                      }
    273          #endif
    274          #if defined(PSA_WANT_ALG_FFDH)
    275                      if (mbedtls_ssl_tls13_named_group_is_ffdh(*group_list)) {
    276                          propose_group = 1;
    277                      }
    278          #endif
    279                  }
    280          #endif /* MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_SOME_EPHEMERAL_ENABLED */
    281          
    282          #if defined(MBEDTLS_SSL_TLS1_2_SOME_ECC)
    283                  if ((flags & SSL_WRITE_SUPPORTED_GROUPS_EXT_TLS1_2_FLAG) &&
    284                      mbedtls_ssl_tls12_named_group_is_ecdhe(*group_list) &&
    285                      (mbedtls_ssl_get_ecp_group_id_from_tls_id(*group_list) !=
    286                       MBEDTLS_ECP_DP_NONE)) {
    287                      propose_group = 1;
    288                  }
    289          #endif /* MBEDTLS_SSL_TLS1_2_SOME_ECC */
    290          
    291                  if (propose_group) {
    292                      MBEDTLS_SSL_CHK_BUF_PTR(p, end, 2);
    293                      MBEDTLS_PUT_UINT16_BE(*group_list, p, 0);
    294                      p += 2;
    295                      MBEDTLS_SSL_DEBUG_MSG(3, ("NamedGroup: %s ( %x )",
    296                                                mbedtls_ssl_named_group_to_str(*group_list),
    297                                                *group_list));
    298                  }
    299              }
    300          
    301              /* Length of named_group_list */
    302              named_group_list_len = p - named_group_list;
    303              if (named_group_list_len == 0) {
    304                  MBEDTLS_SSL_DEBUG_MSG(1, ("No group available."));
    305                  return MBEDTLS_ERR_SSL_INTERNAL_ERROR;
    306              }
    307          
    308              /* Write extension_type */
    309              MBEDTLS_PUT_UINT16_BE(MBEDTLS_TLS_EXT_SUPPORTED_GROUPS, buf, 0);
    310              /* Write extension_data_length */
    311              MBEDTLS_PUT_UINT16_BE(named_group_list_len + 2, buf, 2);
    312              /* Write length of named_group_list */
    313              MBEDTLS_PUT_UINT16_BE(named_group_list_len, buf, 4);
    314          
    315              MBEDTLS_SSL_DEBUG_BUF(3, "Supported groups extension",
    316                                    buf + 4, named_group_list_len + 2);
    317          
    318              *out_len = p - buf;
    319          
    320          #if defined(MBEDTLS_SSL_PROTO_TLS1_3)
    321              mbedtls_ssl_tls13_set_hs_sent_ext_mask(
    322                  ssl, MBEDTLS_TLS_EXT_SUPPORTED_GROUPS);
    323          #endif /* MBEDTLS_SSL_PROTO_TLS1_3 */
    324          
    325              return 0;
    326          }
    327          #endif /* MBEDTLS_SSL_TLS1_2_SOME_ECC ||
    328                    MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_SOME_EPHEMERAL_ENABLED */
    329          
    330          MBEDTLS_CHECK_RETURN_CRITICAL
    331          static int ssl_write_client_hello_cipher_suites(
    332              mbedtls_ssl_context *ssl,
    333              unsigned char *buf,
    334              unsigned char *end,
    335              int *tls12_uses_ec,
    336              size_t *out_len)
    337          {
    338              unsigned char *p = buf;
    339              const int *ciphersuite_list;
    340              unsigned char *cipher_suites; /* Start of the cipher_suites list */
    341              size_t cipher_suites_len;
    342          
    343              *tls12_uses_ec = 0;
    344              *out_len = 0;
    345          
    346              /*
    347               * Ciphersuite list
    348               *
    349               * This is a list of the symmetric cipher options supported by
    350               * the client, specifically the record protection algorithm
    351               * ( including secret key length ) and a hash to be used with
    352               * HKDF, in descending order of client preference.
    353               */
    354              ciphersuite_list = ssl->conf->ciphersuite_list;
    355          
    356              /* Check there is space for the cipher suite list length (2 bytes). */
    357              MBEDTLS_SSL_CHK_BUF_PTR(p, end, 2);
    358              p += 2;
    359          
    360              /* Write cipher_suites
    361               * CipherSuite cipher_suites<2..2^16-2>;
    362               */
    363              cipher_suites = p;
    364              for (size_t i = 0; ciphersuite_list[i] != 0; i++) {
    365                  int cipher_suite = ciphersuite_list[i];
    366                  const mbedtls_ssl_ciphersuite_t *ciphersuite_info;
    367          
    368                  ciphersuite_info = mbedtls_ssl_ciphersuite_from_id(cipher_suite);
    369          
    370                  if (mbedtls_ssl_validate_ciphersuite(ssl, ciphersuite_info,
    371                                                       ssl->handshake->min_tls_version,
    372                                                       ssl->tls_version) != 0) {
    373                      continue;
    374                  }
    375          
    376          #if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
    377                  (defined(MBEDTLS_KEY_EXCHANGE_SOME_ECDH_OR_ECDHE_1_2_ENABLED) || \
    378                  defined(MBEDTLS_KEY_EXCHANGE_ECDSA_CERT_REQ_ALLOWED_ENABLED) || \
    379                  defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED))
    380                  *tls12_uses_ec |= mbedtls_ssl_ciphersuite_uses_ec(ciphersuite_info);
    381          #endif
    382          
    383                  MBEDTLS_SSL_DEBUG_MSG(3, ("client hello, add ciphersuite: %04x, %s",
    384                                            (unsigned int) cipher_suite,
    385                                            ciphersuite_info->name));
    386          
    387                  /* Check there is space for the cipher suite identifier (2 bytes). */
    388                  MBEDTLS_SSL_CHK_BUF_PTR(p, end, 2);
    389                  MBEDTLS_PUT_UINT16_BE(cipher_suite, p, 0);
    390                  p += 2;
    391              }
    392          
    393              /*
    394               * Add TLS_EMPTY_RENEGOTIATION_INFO_SCSV
    395               */
    396              int renegotiating = 0;
    397          #if defined(MBEDTLS_SSL_RENEGOTIATION)
    398              renegotiating = (ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE);
    399          #endif
    400              if (!renegotiating) {
    401                  MBEDTLS_SSL_DEBUG_MSG(3, ("adding EMPTY_RENEGOTIATION_INFO_SCSV"));
    402                  MBEDTLS_SSL_CHK_BUF_PTR(p, end, 2);
    403                  MBEDTLS_PUT_UINT16_BE(MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO, p, 0);
    404                  p += 2;
    405              }
    406          
    407              /* Write the cipher_suites length in number of bytes */
    408              cipher_suites_len = p - cipher_suites;
    409              MBEDTLS_PUT_UINT16_BE(cipher_suites_len, buf, 0);
    410              MBEDTLS_SSL_DEBUG_MSG(3,
    411                                    ("client hello, got %" MBEDTLS_PRINTF_SIZET " cipher suites",
    412                                     cipher_suites_len/2));
    413          
    414              /* Output the total length of cipher_suites field. */
    415              *out_len = p - buf;
    416          
    417              return 0;
    418          }
    419          
    420          /*
    421           * Structure of the TLS 1.3 ClientHello message:
    422           *
    423           *    struct {
    424           *        ProtocolVersion legacy_version = 0x0303;    // TLS v1.2
    425           *        Random random;
    426           *        opaque legacy_session_id<0..32>;
    427           *        CipherSuite cipher_suites<2..2^16-2>;
    428           *        opaque legacy_compression_methods<1..2^8-1>;
    429           *        Extension extensions<8..2^16-1>;
    430           *    } ClientHello;
    431           *
    432           * Structure of the (D)TLS 1.2 ClientHello message:
    433           *
    434           * struct {
    435           *     ProtocolVersion client_version;
    436           *     Random random;
    437           *     SessionID session_id;
    438           *     opaque cookie<0..2^8-1>; // DTLS 1.2 ONLY
    439           *     CipherSuite cipher_suites<2..2^16-2>;
    440           *     CompressionMethod compression_methods<1..2^8-1>;
    441           *     select (extensions_present) {
    442           *         case false:
    443           *             struct {};
    444           *         case true:
    445           *             Extension extensions<0..2^16-1>;
    446           *     };
    447           * } ClientHello;
    448           */
    449          MBEDTLS_CHECK_RETURN_CRITICAL
    450          static int ssl_write_client_hello_body(mbedtls_ssl_context *ssl,
    451                                                 unsigned char *buf,
    452                                                 unsigned char *end,
    453                                                 size_t *out_len,
    454                                                 size_t *binders_len)
    455          {
    456              int ret;
    457              mbedtls_ssl_handshake_params *handshake = ssl->handshake;
    458              unsigned char *p = buf;
    459              unsigned char *p_extensions_len; /* Pointer to extensions length */
    460              size_t output_len;               /* Length of buffer used by function */
    461              size_t extensions_len;           /* Length of the list of extensions*/
    462              int tls12_uses_ec = 0;
    463          
    464              *out_len = 0;
    465              *binders_len = 0;
    466          
    467          #if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    468              unsigned char propose_tls12 =
    469                  (handshake->min_tls_version <= MBEDTLS_SSL_VERSION_TLS1_2)
    470                  &&
    471                  (MBEDTLS_SSL_VERSION_TLS1_2 <= ssl->tls_version);
    472          #endif
    473          #if defined(MBEDTLS_SSL_PROTO_TLS1_3)
    474              unsigned char propose_tls13 =
    475                  (handshake->min_tls_version <= MBEDTLS_SSL_VERSION_TLS1_3)
    476                  &&
    477                  (MBEDTLS_SSL_VERSION_TLS1_3 <= ssl->tls_version);
    478          #endif
    479          
    480              /*
    481               * Write client_version (TLS 1.2) or legacy_version (TLS 1.3)
    482               *
    483               * In all cases this is the TLS 1.2 version.
    484               */
    485              MBEDTLS_SSL_CHK_BUF_PTR(p, end, 2);
    486              mbedtls_ssl_write_version(p, ssl->conf->transport,
    487                                        MBEDTLS_SSL_VERSION_TLS1_2);
    488              p += 2;
    489          
    490              /* ...
    491               * Random random;
    492               * ...
    493               *
    494               * The random bytes have been prepared by ssl_prepare_client_hello() into
    495               * the handshake->randbytes buffer and are copied here into the output
    496               * buffer.
    497               */
    498              MBEDTLS_SSL_CHK_BUF_PTR(p, end, MBEDTLS_CLIENT_HELLO_RANDOM_LEN);
    499              memcpy(p, handshake->randbytes, MBEDTLS_CLIENT_HELLO_RANDOM_LEN);
    500              MBEDTLS_SSL_DEBUG_BUF(3, "client hello, random bytes",
    501                                    p, MBEDTLS_CLIENT_HELLO_RANDOM_LEN);
    502              p += MBEDTLS_CLIENT_HELLO_RANDOM_LEN;
    503          
    504              /* TLS 1.2:
    505               * ...
    506               * SessionID session_id;
    507               * ...
    508               * with
    509               * opaque SessionID<0..32>;
    510               *
    511               * TLS 1.3:
    512               * ...
    513               * opaque legacy_session_id<0..32>;
    514               * ...
    515               *
    516               * The (legacy) session identifier bytes have been prepared by
    517               * ssl_prepare_client_hello() into the ssl->session_negotiate->id buffer
    518               * and are copied here into the output buffer.
    519               */
    520              MBEDTLS_SSL_CHK_BUF_PTR(p, end, ssl->session_negotiate->id_len + 1);
    521              *p++ = (unsigned char) ssl->session_negotiate->id_len;
    522              memcpy(p, ssl->session_negotiate->id, ssl->session_negotiate->id_len);
    523              p += ssl->session_negotiate->id_len;
    524          
    525              MBEDTLS_SSL_DEBUG_BUF(3, "session id", ssl->session_negotiate->id,
    526                                    ssl->session_negotiate->id_len);
    527          
    528              /* DTLS 1.2 ONLY
    529               * ...
    530               * opaque cookie<0..2^8-1>;
    531               * ...
    532               */
    533          #if defined(MBEDTLS_SSL_PROTO_TLS1_2) && defined(MBEDTLS_SSL_PROTO_DTLS)
    534              if (ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM) {
    535          #if !defined(MBEDTLS_SSL_PROTO_TLS1_3)
    536                  uint8_t cookie_len = 0;
    537          #else
    538                  uint16_t cookie_len = 0;
    539          #endif /* !MBEDTLS_SSL_PROTO_TLS1_3 */
    540          
    541                  if (handshake->cookie != NULL) {
    542                      MBEDTLS_SSL_DEBUG_BUF(3, "client hello, cookie",
    543                                            handshake->cookie,
    544                                            handshake->cookie_len);
    545                      cookie_len = handshake->cookie_len;
    546                  }
    547          
    548                  MBEDTLS_SSL_CHK_BUF_PTR(p, end, cookie_len + 1);
    549                  *p++ = (unsigned char) cookie_len;
    550                  if (cookie_len > 0) {
    551                      memcpy(p, handshake->cookie, cookie_len);
    552                      p += cookie_len;
    553                  }
    554              }
    555          #endif /* MBEDTLS_SSL_PROTO_TLS1_2 && MBEDTLS_SSL_PROTO_DTLS */
    556          
    557              /* Write cipher_suites */
    558              ret = ssl_write_client_hello_cipher_suites(ssl, p, end,
    559                                                         &tls12_uses_ec,
    560                                                         &output_len);
    561              if (ret != 0) {
    562                  return ret;
    563              }
    564              p += output_len;
    565          
    566              /* Write legacy_compression_methods (TLS 1.3) or
    567               * compression_methods (TLS 1.2)
    568               *
    569               * For every TLS 1.3 ClientHello, this vector MUST contain exactly
    570               * one byte set to zero, which corresponds to the 'null' compression
    571               * method in prior versions of TLS.
    572               *
    573               * For TLS 1.2 ClientHello, for security reasons we do not support
    574               * compression anymore, thus also just the 'null' compression method.
    575               */
    576              MBEDTLS_SSL_CHK_BUF_PTR(p, end, 2);
    577              *p++ = 1;
    578              *p++ = MBEDTLS_SSL_COMPRESS_NULL;
    579          
    580              /* Write extensions */
    581          
    582          #if defined(MBEDTLS_SSL_PROTO_TLS1_3)
    583              /* Keeping track of the included extensions */
    584              handshake->sent_extensions = MBEDTLS_SSL_EXT_MASK_NONE;
    585          #endif
    586          
    587              /* First write extensions, then the total length */
    588              MBEDTLS_SSL_CHK_BUF_PTR(p, end, 2);
    589              p_extensions_len = p;
    590              p += 2;
    591          
    592          #if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    593              /* Write server name extension */
    594              ret = ssl_write_hostname_ext(ssl, p, end, &output_len);
    595              if (ret != 0) {
    596                  return ret;
    597              }
    598              p += output_len;
    599          #endif /* MBEDTLS_SSL_SERVER_NAME_INDICATION */
    600          
    601          #if defined(MBEDTLS_SSL_ALPN)
    602              ret = ssl_write_alpn_ext(ssl, p, end, &output_len);
    603              if (ret != 0) {
    604                  return ret;
    605              }
    606              p += output_len;
    607          #endif /* MBEDTLS_SSL_ALPN */
    608          
    609          #if defined(MBEDTLS_SSL_PROTO_TLS1_3)
    610              if (propose_tls13) {
    611                  ret = mbedtls_ssl_tls13_write_client_hello_exts(ssl, p, end,
    612                                                                  &output_len);
    613                  if (ret != 0) {
    614                      return ret;
    615                  }
    616                  p += output_len;
    617              }
    618          #endif
    619          
    620          #if defined(MBEDTLS_SSL_TLS1_2_SOME_ECC) || \
    621              defined(MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_SOME_EPHEMERAL_ENABLED)
    622              {
    623                  int ssl_write_supported_groups_ext_flags = 0;
    624          
    625          #if defined(MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_SOME_EPHEMERAL_ENABLED)
    626                  if (propose_tls13 && mbedtls_ssl_conf_tls13_some_ephemeral_enabled(ssl)) {
    627                      ssl_write_supported_groups_ext_flags |=
    628                          SSL_WRITE_SUPPORTED_GROUPS_EXT_TLS1_3_FLAG;
    629                  }
    630          #endif
    631          #if defined(MBEDTLS_SSL_TLS1_2_SOME_ECC)
    632                  if (propose_tls12 && tls12_uses_ec) {
    633                      ssl_write_supported_groups_ext_flags |=
    634                          SSL_WRITE_SUPPORTED_GROUPS_EXT_TLS1_2_FLAG;
    635                  }
    636          #endif
    637                  if (ssl_write_supported_groups_ext_flags != 0) {
    638                      ret = ssl_write_supported_groups_ext(ssl, p, end,
    639                                                           ssl_write_supported_groups_ext_flags,
    640                                                           &output_len);
    641                      if (ret != 0) {
    642                          return ret;
    643                      }
    644                      p += output_len;
    645                  }
    646              }
    647          #endif /* MBEDTLS_SSL_TLS1_2_SOME_ECC ||
    648                    MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_SOME_EPHEMERAL_ENABLED */
    649          
    650          #if defined(MBEDTLS_SSL_HANDSHAKE_WITH_CERT_ENABLED)
    651              int write_sig_alg_ext = 0;
    652          #if defined(MBEDTLS_SSL_PROTO_TLS1_3)
    653              write_sig_alg_ext = write_sig_alg_ext ||
    654                                  (propose_tls13 && mbedtls_ssl_conf_tls13_ephemeral_enabled(ssl));
    655          #endif
    656          #if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    657              write_sig_alg_ext = write_sig_alg_ext || propose_tls12;
    658          #endif
    659          
    660              if (write_sig_alg_ext) {
    661                  ret = mbedtls_ssl_write_sig_alg_ext(ssl, p, end, &output_len);
    662                  if (ret != 0) {
    663                      return ret;
    664                  }
    665                  p += output_len;
    666              }
    667          #endif /* MBEDTLS_SSL_HANDSHAKE_WITH_CERT_ENABLED */
    668          
    669          #if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    670              if (propose_tls12) {
    671                  ret = mbedtls_ssl_tls12_write_client_hello_exts(ssl, p, end,
    672                                                                  tls12_uses_ec,
    673                                                                  &output_len);
    674                  if (ret != 0) {
    675                      return ret;
    676                  }
    677                  p += output_len;
    678              }
    679          #endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
    680          
    681          #if defined(MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_SOME_PSK_ENABLED)
    682              /* The "pre_shared_key" extension (RFC 8446 Section 4.2.11)
    683               * MUST be the last extension in the ClientHello.
    684               */
    685              if (propose_tls13 && mbedtls_ssl_conf_tls13_some_psk_enabled(ssl)) {
    686                  ret = mbedtls_ssl_tls13_write_identities_of_pre_shared_key_ext(
    687                      ssl, p, end, &output_len, binders_len);
    688                  if (ret != 0) {
    689                      return ret;
    690                  }
    691                  p += output_len;
    692              }
    693          #endif /* MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_SOME_PSK_ENABLED */
    694          
    695              /* Write the length of the list of extensions. */
    696              extensions_len = p - p_extensions_len - 2;
    697          
    698              if (extensions_len == 0) {
    699                  p = p_extensions_len;
    700              } else {
    701                  MBEDTLS_PUT_UINT16_BE(extensions_len, p_extensions_len, 0);
    702                  MBEDTLS_SSL_DEBUG_MSG(3, ("client hello, total extension length: %" \
    703                                            MBEDTLS_PRINTF_SIZET, extensions_len));
    704                  MBEDTLS_SSL_DEBUG_BUF(3, "client hello extensions",
    705                                        p_extensions_len, extensions_len);
    706              }
    707          
    708          #if defined(MBEDTLS_SSL_PROTO_TLS1_3)
    709              MBEDTLS_SSL_PRINT_EXTS(
    710                  3, MBEDTLS_SSL_HS_CLIENT_HELLO, handshake->sent_extensions);
    711          #endif
    712          
    713              *out_len = p - buf;
    714              return 0;
    715          }
    716          
    717          MBEDTLS_CHECK_RETURN_CRITICAL
    718          static int ssl_generate_random(mbedtls_ssl_context *ssl)
    719          {
    720              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    721              unsigned char *randbytes = ssl->handshake->randbytes;
    722              size_t gmt_unix_time_len = 0;
    723          
    724              /*
    725               * Generate the random bytes
    726               *
    727               * TLS 1.2 case:
    728               * struct {
    729               *     uint32 gmt_unix_time;
    730               *     opaque random_bytes[28];
    731               * } Random;
    732               *
    733               * TLS 1.3 case:
    734               * opaque Random[32];
    735               */
    736              if (ssl->tls_version == MBEDTLS_SSL_VERSION_TLS1_2) {
    737          #if defined(MBEDTLS_HAVE_TIME)
    738                  mbedtls_time_t gmt_unix_time = mbedtls_time(NULL);
    739                  MBEDTLS_PUT_UINT32_BE(gmt_unix_time, randbytes, 0);
    740                  gmt_unix_time_len = 4;
    741          
    742                  MBEDTLS_SSL_DEBUG_MSG(3,
    743                                        ("client hello, current time: %" MBEDTLS_PRINTF_LONGLONG,
    744                                         (long long) gmt_unix_time));
    745          #endif /* MBEDTLS_HAVE_TIME */
    746              }
    747          
    748              ret = ssl->conf->f_rng(ssl->conf->p_rng,
    749                                     randbytes + gmt_unix_time_len,
    750                                     MBEDTLS_CLIENT_HELLO_RANDOM_LEN - gmt_unix_time_len);
    751              return ret;
    752          }
    753          
    754          MBEDTLS_CHECK_RETURN_CRITICAL
    755          static int ssl_prepare_client_hello(mbedtls_ssl_context *ssl)
    756          {
    757              int ret;
    758              size_t session_id_len;
    759              mbedtls_ssl_session *session_negotiate = ssl->session_negotiate;
    760          
    761              if (session_negotiate == NULL) {
    762                  return MBEDTLS_ERR_SSL_INTERNAL_ERROR;
    763              }
    764          
    765          #if defined(MBEDTLS_SSL_PROTO_TLS1_3) && \
    766              defined(MBEDTLS_SSL_SESSION_TICKETS) && \
    767              defined(MBEDTLS_HAVE_TIME)
    768          
    769              /* Check if a tls13 ticket has been configured. */
    770              if (ssl->handshake->resume != 0 &&
    771                  session_negotiate->tls_version == MBEDTLS_SSL_VERSION_TLS1_3 &&
    772                  session_negotiate->ticket != NULL) {
    773                  mbedtls_time_t now = mbedtls_time(NULL);
    774                  uint64_t age = (uint64_t) (now - session_negotiate->ticket_received);
    775                  if (session_negotiate->ticket_received > now ||
    776                      age > session_negotiate->ticket_lifetime) {
    777                      /* Without valid ticket, disable session resumption.*/
    778                      MBEDTLS_SSL_DEBUG_MSG(
    779                          3, ("Ticket expired, disable session resumption"));
    780                      ssl->handshake->resume = 0;
    781                  }
    782              }
    783          #endif /* MBEDTLS_SSL_PROTO_TLS1_3 &&
    784                    MBEDTLS_SSL_SESSION_TICKETS &&
    785                    MBEDTLS_HAVE_TIME */
    786          
    787              if (ssl->conf->f_rng == NULL) {
    788                  MBEDTLS_SSL_DEBUG_MSG(1, ("no RNG provided"));
    789                  return MBEDTLS_ERR_SSL_NO_RNG;
    790              }
    791          
    792              /* Bet on the highest configured version if we are not in a TLS 1.2
    793               * renegotiation or session resumption.
    794               */
    795          #if defined(MBEDTLS_SSL_RENEGOTIATION)
    796              if (ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE) {
    797                  ssl->handshake->min_tls_version = ssl->tls_version;
    798              } else
    799          #endif
    800              {
    801                  if (ssl->handshake->resume) {
    802                      ssl->tls_version = session_negotiate->tls_version;
    803                      ssl->handshake->min_tls_version = ssl->tls_version;
    804                  } else {
    805                      ssl->handshake->min_tls_version = ssl->conf->min_tls_version;
    806                  }
    807              }
    808          
    809              /*
    810               * Generate the random bytes, except when responding to a verify request
    811               * where we MUST reuse the previously generated random bytes
    812               * (RFC 6347 4.2.1).
    813               */
    814          #if defined(MBEDTLS_SSL_PROTO_DTLS)
    815              if ((ssl->conf->transport != MBEDTLS_SSL_TRANSPORT_DATAGRAM) ||
    816                  (ssl->handshake->cookie == NULL))
    817          #endif
    818              {
    819                  ret = ssl_generate_random(ssl);
    820                  if (ret != 0) {
    821                      MBEDTLS_SSL_DEBUG_RET(1, "Random bytes generation failed", ret);
    822                      return ret;
    823                  }
    824              }
    825          
    826              /*
    827               * Prepare session identifier. At that point, the length of the session
    828               * identifier in the SSL context `ssl->session_negotiate->id_len` is equal
    829               * to zero, except in the case of a TLS 1.2 session renegotiation or
    830               * session resumption.
    831               */
    832              session_id_len = session_negotiate->id_len;
    833          
    834          #if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    835              if (ssl->tls_version == MBEDTLS_SSL_VERSION_TLS1_2) {
    836                  if (session_id_len < 16 || session_id_len > 32 ||
    837          #if defined(MBEDTLS_SSL_RENEGOTIATION)
    838                      ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
    839          #endif
    840                      ssl->handshake->resume == 0) {
    841                      session_id_len = 0;
    842                  }
    843          
    844          #if defined(MBEDTLS_SSL_SESSION_TICKETS)
    845                  /*
    846                   * RFC 5077 section 3.4: "When presenting a ticket, the client MAY
    847                   * generate and include a Session ID in the TLS ClientHello."
    848                   */
    849                  int renegotiating = 0;
    850          #if defined(MBEDTLS_SSL_RENEGOTIATION)
    851                  if (ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE) {
    852                      renegotiating = 1;
    853                  }
    854          #endif
    855                  if (!renegotiating) {
    856                      if ((session_negotiate->ticket != NULL) &&
    857                          (session_negotiate->ticket_len != 0)) {
    858                          session_id_len = 32;
    859                      }
    860                  }
    861          #endif /* MBEDTLS_SSL_SESSION_TICKETS */
    862              }
    863          #endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
    864          
    865          #if defined(MBEDTLS_SSL_TLS1_3_COMPATIBILITY_MODE)
    866              if (ssl->tls_version == MBEDTLS_SSL_VERSION_TLS1_3) {
    867                  /*
    868                   * Create a legacy session identifier for the purpose of middlebox
    869                   * compatibility only if one has not been created already, which is
    870                   * the case if we are here for the TLS 1.3 second ClientHello.
    871                   *
    872                   * Versions of TLS before TLS 1.3 supported a "session resumption"
    873                   * feature which has been merged with pre-shared keys in TLS 1.3
    874                   * version. A client which has a cached session ID set by a pre-TLS 1.3
    875                   * server SHOULD set this field to that value. In compatibility mode,
    876                   * this field MUST be non-empty, so a client not offering a pre-TLS 1.3
    877                   * session MUST generate a new 32-byte value. This value need not be
    878                   * random but SHOULD be unpredictable to avoid implementations fixating
    879                   * on a specific value (also known as ossification). Otherwise, it MUST
    880                   * be set as a zero-length vector ( i.e., a zero-valued single byte
    881                   * length field ).
    882                   */
    883                  session_id_len = 32;
    884              }
    885          #endif /* MBEDTLS_SSL_TLS1_3_COMPATIBILITY_MODE */
    886          
    887              if (session_id_len != session_negotiate->id_len) {
    888                  session_negotiate->id_len = session_id_len;
    889                  if (session_id_len > 0) {
    890                      ret = ssl->conf->f_rng(ssl->conf->p_rng,
    891                                             session_negotiate->id,
    892                                             session_id_len);
    893                      if (ret != 0) {
    894                          MBEDTLS_SSL_DEBUG_RET(1, "creating session id failed", ret);
    895                          return ret;
    896                      }
    897                  }
    898              }
    899          
    900          #if defined(MBEDTLS_SSL_PROTO_TLS1_3) && \
    901              defined(MBEDTLS_SSL_SESSION_TICKETS) && \
    902              defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    903              if (ssl->tls_version == MBEDTLS_SSL_VERSION_TLS1_3  &&
    904                  ssl->handshake->resume) {
    905                  int hostname_mismatch = ssl->hostname != NULL ||
    906                                          session_negotiate->hostname != NULL;
    907                  if (ssl->hostname != NULL && session_negotiate->hostname != NULL) {
    908                      hostname_mismatch = strcmp(
    909                          ssl->hostname, session_negotiate->hostname) != 0;
    910                  }
    911          
    912                  if (hostname_mismatch) {
    913                      MBEDTLS_SSL_DEBUG_MSG(
    914                          1, ("Hostname mismatch the session ticket, "
    915                              "disable session resumption."));
    916                      return MBEDTLS_ERR_SSL_BAD_INPUT_DATA;
    917                  }
    918              } else {
    919                  return mbedtls_ssl_session_set_hostname(session_negotiate,
    920                                                          ssl->hostname);
    921              }
    922          #endif /* MBEDTLS_SSL_PROTO_TLS1_3 &&
    923                    MBEDTLS_SSL_SESSION_TICKETS &&
    924                    MBEDTLS_SSL_SERVER_NAME_INDICATION */
    925          
    926              return 0;
    927          }
    928          /*
    929           * Write ClientHello handshake message.
    930           * Handler for MBEDTLS_SSL_CLIENT_HELLO
    931           */

   \                                 In section .text, align 2, keep-with-next
    932          int mbedtls_ssl_write_client_hello(mbedtls_ssl_context *ssl)
    933          {
   \                     mbedtls_ssl_write_client_hello: (+1)
   \        0x0   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \        0x4   0xB089             SUB      SP,SP,#+36
   \        0x6   0x4607             MOV      R7,R0
    934              int ret = 0;
    935              unsigned char *buf;
    936              size_t buf_len, msg_len, binders_len;
    937          
    938              MBEDTLS_SSL_DEBUG_MSG(2, ("=> write client hello"));
    939          
    940              MBEDTLS_SSL_PROC_CHK(ssl_prepare_client_hello(ssl));
   \        0x8   0x6B7C             LDR      R4,[R7, #+52]
   \        0xA   0xB914             CBNZ.N   R4,??mbedtls_ssl_write_client_hello_0
   \        0xC   0x.... 0x....      LDR.W    R0,??DataTable2
   \       0x10   0xE1CE             B.N      ??mbedtls_ssl_write_client_hello_1
   \                     ??mbedtls_ssl_write_client_hello_0: (+1)
   \       0x12   0x683B             LDR      R3,[R7, #+0]
   \       0x14   0x6998             LDR      R0,[R3, #+24]
   \       0x16   0xB910             CBNZ.N   R0,??mbedtls_ssl_write_client_hello_2
   \       0x18   0x.... 0x....      LDR.W    R0,??DataTable2_1
   \                     ??mbedtls_ssl_write_client_hello_3: (+1)
   \       0x1C   0xE1C8             B.N      ??mbedtls_ssl_write_client_hello_1
   \                     ??mbedtls_ssl_write_client_hello_2: (+1)
   \       0x1E   0x6BB9             LDR      R1,[R7, #+56]
   \       0x20   0x7808             LDRB     R0,[R1, #+0]
   \       0x22   0x2800             CMP      R0,#+0
   \       0x24   0xBF1A             ITTE     NE
   \       0x26   0xF9B4 0x0002      LDRSHNE  R0,[R4, #+2]
   \       0x2A   0x8138             STRHNE   R0,[R7, #+8]
   \       0x2C   0x8858             LDRHEQ   R0,[R3, #+2]
   \       0x2E   0x8048             STRH     R0,[R1, #+2]
   \       0x30   0x69D8             LDR      R0,[R3, #+28]
   \       0x32   0x699B             LDR      R3,[R3, #+24]
   \       0x34   0x2220             MOVS     R2,#+32
   \       0x36   0xF501 0x71FC      ADD      R1,R1,#+504
   \       0x3A   0x4798             BLX      R3
   \       0x3C   0x2800             CMP      R0,#+0
   \       0x3E   0xD1ED             BNE.N    ??mbedtls_ssl_write_client_hello_3
   \       0x40   0x68A1             LDR      R1,[R4, #+8]
   \       0x42   0xF9B7 0x3008      LDRSH    R3,[R7, #+8]
   \       0x46   0xF240 0x3503      MOVW     R5,#+771
   \       0x4A   0x460A             MOV      R2,R1
   \       0x4C   0x42AB             CMP      R3,R5
   \       0x4E   0xD107             BNE.N    ??mbedtls_ssl_write_client_hello_4
   \       0x50   0xF1A2 0x0010      SUB      R0,R2,#+16
   \       0x54   0x2811             CMP      R0,#+17
   \       0x56   0xD202             BCS.N    ??mbedtls_ssl_write_client_hello_5
   \       0x58   0x6BBB             LDR      R3,[R7, #+56]
   \       0x5A   0x7818             LDRB     R0,[R3, #+0]
   \       0x5C   0xB900             CBNZ.N   R0,??mbedtls_ssl_write_client_hello_4
   \                     ??mbedtls_ssl_write_client_hello_5: (+1)
   \       0x5E   0x2200             MOVS     R2,#+0
   \                     ??mbedtls_ssl_write_client_hello_4: (+1)
   \       0x60   0x428A             CMP      R2,R1
   \       0x62   0xBF1C             ITT      NE
   \       0x64   0x60A2             STRNE    R2,[R4, #+8]
   \       0x66   0x2A00             CMPNE    R2,#+0
   \       0x68   0xD007             BEQ.N    ??mbedtls_ssl_write_client_hello_6
   \       0x6A   0x683B             LDR      R3,[R7, #+0]
   \       0x6C   0xF104 0x010C      ADD      R1,R4,#+12
   \       0x70   0x69D8             LDR      R0,[R3, #+28]
   \       0x72   0x699B             LDR      R3,[R3, #+24]
   \       0x74   0x4798             BLX      R3
   \       0x76   0x2800             CMP      R0,#+0
   \       0x78   0xD1D0             BNE.N    ??mbedtls_ssl_write_client_hello_3
    941          
    942              MBEDTLS_SSL_PROC_CHK(mbedtls_ssl_start_handshake_msg(
    943                                       ssl, MBEDTLS_SSL_HS_CLIENT_HELLO,
    944                                       &buf, &buf_len));
   \                     ??mbedtls_ssl_write_client_hello_6: (+1)
   \       0x7A   0xAB03             ADD      R3,SP,#+12
   \       0x7C   0xAA02             ADD      R2,SP,#+8
   \       0x7E   0x2101             MOVS     R1,#+1
   \       0x80   0x4638             MOV      R0,R7
   \       0x82   0x.... 0x....      BL       mbedtls_ssl_start_handshake_msg
   \       0x86   0x2800             CMP      R0,#+0
   \       0x88   0xD1C8             BNE.N    ??mbedtls_ssl_write_client_hello_3
    945          
    946              MBEDTLS_SSL_PROC_CHK(ssl_write_client_hello_body(ssl, buf,
    947                                                               buf + buf_len,
    948                                                               &msg_len,
    949                                                               &binders_len));
   \       0x8A   0x9802             LDR      R0,[SP, #+8]
   \       0x8C   0x9903             LDR      R1,[SP, #+12]
   \       0x8E   0xF04F 0x0A00      MOV      R10,#+0
   \       0x92   0x9004             STR      R0,[SP, #+16]
   \       0x94   0xF8D7 0x8038      LDR      R8,[R7, #+56]
   \       0x98   0x1846             ADDS     R6,R0,R1
   \       0x9A   0xF8CD 0xA018      STR      R10,[SP, #+24]
   \       0x9E   0xF9B8 0x1002      LDRSH    R1,[R8, #+2]
   \       0xA2   0x42A9             CMP      R1,R5
   \       0xA4   0xDC05             BGT.N    ??mbedtls_ssl_write_client_hello_7
   \       0xA6   0xF9B7 0x0008      LDRSH    R0,[R7, #+8]
   \       0xAA   0x42A8             CMP      R0,R5
   \       0xAC   0xBFA8             IT       GE
   \       0xAE   0x2401             MOVGE    R4,#+1
   \       0xB0   0xDA00             BGE.N    ??mbedtls_ssl_write_client_hello_8
   \                     ??mbedtls_ssl_write_client_hello_7: (+1)
   \       0xB2   0x2400             MOVS     R4,#+0
   \                     ??mbedtls_ssl_write_client_hello_8: (+1)
   \       0xB4   0x9804             LDR      R0,[SP, #+16]
   \       0xB6   0x2202             MOVS     R2,#+2
   \       0xB8   0x4631             MOV      R1,R6
   \       0xBA   0x.... 0x....      BL       mbedtls_ssl_chk_buf_ptr
   \       0xBE   0x2800             CMP      R0,#+0
   \       0xC0   0xD11D             BNE.N    ??mbedtls_ssl_write_client_hello_9
   \       0xC2   0x6838             LDR      R0,[R7, #+0]
   \       0xC4   0x462A             MOV      R2,R5
   \       0xC6   0x7941             LDRB     R1,[R0, #+5]
   \       0xC8   0x9804             LDR      R0,[SP, #+16]
   \       0xCA   0x.... 0x....      BL       mbedtls_ssl_write_version
   \       0xCE   0x9804             LDR      R0,[SP, #+16]
   \       0xD0   0x2220             MOVS     R2,#+32
   \       0xD2   0x4631             MOV      R1,R6
   \       0xD4   0x1C80             ADDS     R0,R0,#+2
   \       0xD6   0x.... 0x....      BL       mbedtls_ssl_chk_buf_ptr
   \       0xDA   0x2800             CMP      R0,#+0
   \       0xDC   0xD10F             BNE.N    ??mbedtls_ssl_write_client_hello_9
   \       0xDE   0x9804             LDR      R0,[SP, #+16]
   \       0xE0   0x2220             MOVS     R2,#+32
   \       0xE2   0xF508 0x71FC      ADD      R1,R8,#+504
   \       0xE6   0x1C80             ADDS     R0,R0,#+2
   \       0xE8   0x.... 0x....      BL       __aeabi_memcpy
   \       0xEC   0x6B78             LDR      R0,[R7, #+52]
   \       0xEE   0x4631             MOV      R1,R6
   \       0xF0   0x6882             LDR      R2,[R0, #+8]
   \       0xF2   0x9804             LDR      R0,[SP, #+16]
   \       0xF4   0x1C52             ADDS     R2,R2,#+1
   \       0xF6   0x3022             ADDS     R0,R0,#+34
   \       0xF8   0x.... 0x....      BL       mbedtls_ssl_chk_buf_ptr
   \       0xFC   0x2800             CMP      R0,#+0
   \                     ??mbedtls_ssl_write_client_hello_9: (+1)
   \       0xFE   0xF040 0x815A      BNE.W    ??mbedtls_ssl_write_client_hello_10
   \      0x102   0x6B78             LDR      R0,[R7, #+52]
   \      0x104   0x6881             LDR      R1,[R0, #+8]
   \      0x106   0x9804             LDR      R0,[SP, #+16]
   \      0x108   0xF880 0x1022      STRB     R1,[R0, #+34]
   \      0x10C   0x6B78             LDR      R0,[R7, #+52]
   \      0x10E   0x6882             LDR      R2,[R0, #+8]
   \      0x110   0xF100 0x010C      ADD      R1,R0,#+12
   \      0x114   0x9804             LDR      R0,[SP, #+16]
   \      0x116   0x3023             ADDS     R0,R0,#+35
   \      0x118   0x.... 0x....      BL       __aeabi_memcpy
   \      0x11C   0x9904             LDR      R1,[SP, #+16]
   \      0x11E   0x6B7A             LDR      R2,[R7, #+52]
   \      0x120   0xF101 0x0023      ADD      R0,R1,#+35
   \      0x124   0x6891             LDR      R1,[R2, #+8]
   \      0x126   0xF8CD 0xA004      STR      R10,[SP, #+4]
   \      0x12A   0x2202             MOVS     R2,#+2
   \      0x12C   0x4401             ADD      R1,R0,R1
   \      0x12E   0x9100             STR      R1,[SP, #+0]
   \      0x130   0x6839             LDR      R1,[R7, #+0]
   \      0x132   0x9800             LDR      R0,[SP, #+0]
   \      0x134   0x68CD             LDR      R5,[R1, #+12]
   \      0x136   0x4631             MOV      R1,R6
   \      0x138   0x.... 0x....      BL       mbedtls_ssl_chk_buf_ptr
   \      0x13C   0x2800             CMP      R0,#+0
   \      0x13E   0xD126             BNE.N    ??mbedtls_ssl_write_client_hello_11
   \      0x140   0x9800             LDR      R0,[SP, #+0]
   \      0x142   0x46D0             MOV      R8,R10
   \      0x144   0x.... 0x....      ADR.W    R11,mbedtls_byte_order_detector
   \      0x148   0xF100 0x0902      ADD      R9,R0,#+2
   \      0x14C   0xF8CD 0x901C      STR      R9,[SP, #+28]
   \      0x150   0x9605             STR      R6,[SP, #+20]
   \      0x152   0x9508             STR      R5,[SP, #+32]
   \      0x154   0xE029             B.N      ??mbedtls_ssl_write_client_hello_12
   \                     ??mbedtls_ssl_write_client_hello_13: (+1)
   \      0x156   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_5: (+1)
   \      0x15A   0xE01F             B.N      ??mbedtls_ssl_write_client_hello_14
   \                     ??mbedtls_ssl_write_client_hello_15: (+1)
   \      0x15C   0x4628             MOV      R0,R5
   \      0x15E   0x.... 0x....      BL       mbedtls_ssl_ciphersuite_from_id
   \      0x162   0x4606             MOV      R6,R0
   \      0x164   0x6BB8             LDR      R0,[R7, #+56]
   \      0x166   0xF9B7 0x3008      LDRSH    R3,[R7, #+8]
   \      0x16A   0x4631             MOV      R1,R6
   \      0x16C   0xF9B0 0x2002      LDRSH    R2,[R0, #+2]
   \      0x170   0x4638             MOV      R0,R7
   \      0x172   0x.... 0x....      BL       mbedtls_ssl_validate_ciphersuite
   \      0x176   0xB9B0             CBNZ.N   R0,??mbedtls_ssl_write_client_hello_16
   \      0x178   0x4630             MOV      R0,R6
   \      0x17A   0x.... 0x....      BL       mbedtls_ssl_ciphersuite_uses_ec
   \      0x17E   0x9905             LDR      R1,[SP, #+20]
   \      0x180   0xEA40 0x0A0A      ORR      R10,R0,R10
   \      0x184   0x2202             MOVS     R2,#+2
   \      0x186   0x4648             MOV      R0,R9
   \      0x188   0x.... 0x....      BL       mbedtls_ssl_chk_buf_ptr
   \      0x18C   0x2800             CMP      R0,#+0
   \                     ??mbedtls_ssl_write_client_hello_11: (+1)
   \      0x18E   0xF040 0x80EB      BNE.W    ??mbedtls_ssl_write_client_hello_17
   \      0x192   0xF89B 0x0000      LDRB     R0,[R11, #+0]
   \      0x196   0x2801             CMP      R0,#+1
   \      0x198   0xD1DD             BNE.N    ??mbedtls_ssl_write_client_hello_13
   \      0x19A   0xB2A9             UXTH     R1,R5
   \                     ??mbedtls_ssl_write_client_hello_14: (+1)
   \      0x19C   0x4648             MOV      R0,R9
   \      0x19E   0x.... 0x....      BL       mbedtls_put_unaligned_uint16
   \      0x1A2   0xF109 0x0902      ADD      R9,R9,#+2
   \                     ??mbedtls_ssl_write_client_hello_16: (+1)
   \      0x1A6   0xF108 0x0801      ADD      R8,R8,#+1
   \                     ??mbedtls_ssl_write_client_hello_12: (+1)
   \      0x1AA   0x9808             LDR      R0,[SP, #+32]
   \      0x1AC   0xF850 0x5028      LDR      R5,[R0, R8, LSL #+2]
   \      0x1B0   0x2D00             CMP      R5,#+0
   \      0x1B2   0xD1D3             BNE.N    ??mbedtls_ssl_write_client_hello_15
   \      0x1B4   0xF8DD 0x8014      LDR      R8,[SP, #+20]
   \      0x1B8   0x2202             MOVS     R2,#+2
   \      0x1BA   0x4648             MOV      R0,R9
   \      0x1BC   0x4641             MOV      R1,R8
   \      0x1BE   0x.... 0x....      BL       mbedtls_ssl_chk_buf_ptr
   \      0x1C2   0x2800             CMP      R0,#+0
   \      0x1C4   0xD171             BNE.N    ??mbedtls_ssl_write_client_hello_18
   \      0x1C6   0xF89B 0x0000      LDRB     R0,[R11, #+0]
   \      0x1CA   0x2801             CMP      R0,#+1
   \      0x1CC   0xBF0C             ITE      EQ
   \      0x1CE   0x21FF             MOVEQ    R1,#+255
   \      0x1D0   0xF44F 0x417F      MOVNE    R1,#+65280
   \      0x1D4   0x4648             MOV      R0,R9
   \      0x1D6   0x.... 0x....      BL       mbedtls_put_unaligned_uint16
   \      0x1DA   0x9907             LDR      R1,[SP, #+28]
   \      0x1DC   0xF89B 0x0000      LDRB     R0,[R11, #+0]
   \      0x1E0   0xF109 0x0502      ADD      R5,R9,#+2
   \      0x1E4   0x1A69             SUBS     R1,R5,R1
   \      0x1E6   0x2801             CMP      R0,#+1
   \      0x1E8   0xBF08             IT       EQ
   \      0x1EA   0xB289             UXTHEQ   R1,R1
   \      0x1EC   0xD004             BEQ.N    ??mbedtls_ssl_write_client_hello_19
   \      0x1EE   0x0408             LSLS     R0,R1,#+16
   \      0x1F0   0x0E00             LSRS     R0,R0,#+24
   \      0x1F2   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
   \      0x1F6   0xB281             UXTH     R1,R0
   \                     ??mbedtls_ssl_write_client_hello_19: (+1)
   \      0x1F8   0x9800             LDR      R0,[SP, #+0]
   \      0x1FA   0x.... 0x....      BL       mbedtls_put_unaligned_uint16
   \      0x1FE   0x9800             LDR      R0,[SP, #+0]
   \      0x200   0x9900             LDR      R1,[SP, #+0]
   \      0x202   0x2202             MOVS     R2,#+2
   \      0x204   0x1A2D             SUBS     R5,R5,R0
   \      0x206   0x9501             STR      R5,[SP, #+4]
   \      0x208   0x194D             ADDS     R5,R1,R5
   \      0x20A   0x.... 0x....      BL       ??Subroutine1_0
   \                     ??CrossCallReturnLabel_2: (+1)
   \      0x20E   0x2800             CMP      R0,#+0
   \      0x210   0xD107             BNE.N    ??mbedtls_ssl_write_client_hello_20
   \      0x212   0x2001             MOVS     R0,#+1
   \      0x214   0x2100             MOVS     R1,#+0
   \      0x216   0x7028             STRB     R0,[R5, #+0]
   \      0x218   0x7069             STRB     R1,[R5, #+1]
   \      0x21A   0x1CAD             ADDS     R5,R5,#+2
   \      0x21C   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_3: (+1)
   \      0x220   0x2800             CMP      R0,#+0
   \                     ??mbedtls_ssl_write_client_hello_20: (+1)
   \      0x222   0xF040 0x80C8      BNE.W    ??mbedtls_ssl_write_client_hello_10
   \      0x226   0x1CAE             ADDS     R6,R5,#+2
   \      0x228   0x9505             STR      R5,[SP, #+20]
   \      0x22A   0x46D9             MOV      R9,R11
   \      0x22C   0x2C00             CMP      R4,#+0
   \      0x22E   0xBF18             IT       NE
   \      0x230   0xF1BA 0x0F00      CMPNE    R10,#+0
   \      0x234   0xD07A             BEQ.N    ??mbedtls_ssl_write_client_hello_21
   \      0x236   0x6BB8             LDR      R0,[R7, #+56]
   \      0x238   0x2800             CMP      R0,#+0
   \      0x23A   0xBF19             ITTEE    NE
   \      0x23C   0x6C45             LDRNE    R5,[R0, #+68]
   \      0x23E   0x2D00             CMPNE    R5,#+0
   \      0x240   0x6838             LDREQ    R0,[R7, #+0]
   \      0x242   0x6D05             LDREQ    R5,[R0, #+80]
   \      0x244   0x2000             MOVS     R0,#+0
   \      0x246   0x9001             STR      R0,[SP, #+4]
   \      0x248   0x2206             MOVS     R2,#+6
   \      0x24A   0x4641             MOV      R1,R8
   \      0x24C   0x4630             MOV      R0,R6
   \      0x24E   0x.... 0x....      BL       mbedtls_ssl_chk_buf_ptr
   \      0x252   0x2800             CMP      R0,#+0
   \      0x254   0xD129             BNE.N    ??mbedtls_ssl_write_client_hello_18
   \      0x256   0x1DB0             ADDS     R0,R6,#+6
   \      0x258   0x9000             STR      R0,[SP, #+0]
   \      0x25A   0xB925             CBNZ.N   R5,??mbedtls_ssl_write_client_hello_22
   \      0x25C   0x....             LDR.N    R0,??DataTable2_2
   \                     ??mbedtls_ssl_write_client_hello_23: (+1)
   \      0x25E   0x2800             CMP      R0,#+0
   \      0x260   0xF040 0x80A6      BNE.W    ??mbedtls_ssl_write_client_hello_1
   \      0x264   0xE08F             B.N      ??mbedtls_ssl_write_client_hello_24
   \                     ??mbedtls_ssl_write_client_hello_22: (+1)
   \      0x266   0x46AB             MOV      R11,R5
   \      0x268   0x4605             MOV      R5,R0
   \      0x26A   0xE030             B.N      ??mbedtls_ssl_write_client_hello_25
   \                     ??mbedtls_ssl_write_client_hello_26: (+1)
   \      0x26C   0x281D             CMP      R0,#+29
   \      0x26E   0xBF18             IT       NE
   \      0x270   0x281A             CMPNE    R0,#+26
   \      0x272   0xD014             BEQ.N    ??mbedtls_ssl_write_client_hello_27
   \      0x274   0x281B             CMP      R0,#+27
   \      0x276   0xBF18             IT       NE
   \      0x278   0x281C             CMPNE    R0,#+28
   \      0x27A   0xD010             BEQ.N    ??mbedtls_ssl_write_client_hello_27
   \      0x27C   0x281E             CMP      R0,#+30
   \      0x27E   0xBF18             IT       NE
   \      0x280   0x2812             CMPNE    R0,#+18
   \      0x282   0xD00C             BEQ.N    ??mbedtls_ssl_write_client_hello_27
   \      0x284   0x2813             CMP      R0,#+19
   \      0x286   0xBF18             IT       NE
   \      0x288   0x2814             CMPNE    R0,#+20
   \      0x28A   0xD008             BEQ.N    ??mbedtls_ssl_write_client_hello_27
   \      0x28C   0x2815             CMP      R0,#+21
   \      0x28E   0xBF18             IT       NE
   \      0x290   0x2816             CMPNE    R0,#+22
   \      0x292   0xD004             BEQ.N    ??mbedtls_ssl_write_client_hello_27
   \      0x294   0x2817             CMP      R0,#+23
   \      0x296   0xBF1C             ITT      NE
   \      0x298   0x2818             CMPNE    R0,#+24
   \      0x29A   0x2819             CMPNE    R0,#+25
   \      0x29C   0xD115             BNE.N    ??mbedtls_ssl_write_client_hello_28
   \                     ??mbedtls_ssl_write_client_hello_27: (+1)
   \      0x29E   0x.... 0x....      BL       mbedtls_ssl_get_ecp_group_id_from_tls_id
   \      0x2A2   0xB190             CBZ.N    R0,??mbedtls_ssl_write_client_hello_28
   \      0x2A4   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_4: (+1)
   \      0x2A8   0x2800             CMP      R0,#+0
   \                     ??mbedtls_ssl_write_client_hello_18: (+1)
   \      0x2AA   0xD15D             BNE.N    ??mbedtls_ssl_write_client_hello_17
   \      0x2AC   0xF899 0x1000      LDRB     R1,[R9, #+0]
   \      0x2B0   0xF8BB 0x0000      LDRH     R0,[R11, #+0]
   \      0x2B4   0x2901             CMP      R1,#+1
   \      0x2B6   0xBF1D             ITTTE    NE
   \      0x2B8   0x0A01             LSRNE    R1,R0,#+8
   \      0x2BA   0xEA41 0x2100      ORRNE    R1,R1,R0, LSL #+8
   \      0x2BE   0xB289             UXTHNE   R1,R1
   \      0x2C0   0x4601             MOVEQ    R1,R0
   \      0x2C2   0x4628             MOV      R0,R5
   \      0x2C4   0x.... 0x....      BL       mbedtls_put_unaligned_uint16
   \      0x2C8   0x1CAD             ADDS     R5,R5,#+2
   \                     ??mbedtls_ssl_write_client_hello_28: (+1)
   \      0x2CA   0xF10B 0x0B02      ADD      R11,R11,#+2
   \                     ??mbedtls_ssl_write_client_hello_25: (+1)
   \      0x2CE   0xF8BB 0x0000      LDRH     R0,[R11, #+0]
   \      0x2D2   0x2800             CMP      R0,#+0
   \      0x2D4   0xD1CA             BNE.N    ??mbedtls_ssl_write_client_hello_26
   \      0x2D6   0x46AB             MOV      R11,R5
   \      0x2D8   0x9D00             LDR      R5,[SP, #+0]
   \      0x2DA   0xEBBB 0x0505      SUBS     R5,R11,R5
   \      0x2DE   0xBF08             IT       EQ
   \      0x2E0   0x....             LDREQ.N  R0,??DataTable2
   \      0x2E2   0xD0BC             BEQ.N    ??mbedtls_ssl_write_client_hello_23
   \      0x2E4   0xF899 0x0000      LDRB     R0,[R9, #+0]
   \      0x2E8   0x2801             CMP      R0,#+1
   \      0x2EA   0xBF0C             ITE      EQ
   \      0x2EC   0x210A             MOVEQ    R1,#+10
   \      0x2EE   0xF44F 0x6120      MOVNE    R1,#+2560
   \      0x2F2   0x4630             MOV      R0,R6
   \      0x2F4   0x.... 0x....      BL       mbedtls_put_unaligned_uint16
   \      0x2F8   0xF899 0x1000      LDRB     R1,[R9, #+0]
   \      0x2FC   0x1CA8             ADDS     R0,R5,#+2
   \      0x2FE   0x2901             CMP      R1,#+1
   \      0x300   0xBF08             IT       EQ
   \      0x302   0xB281             UXTHEQ   R1,R0
   \      0x304   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_0: (+1)
   \      0x308   0x1CB0             ADDS     R0,R6,#+2
   \      0x30A   0x.... 0x....      BL       mbedtls_put_unaligned_uint16
   \      0x30E   0xF899 0x0000      LDRB     R0,[R9, #+0]
   \      0x312   0x2801             CMP      R0,#+1
   \      0x314   0xBF08             IT       EQ
   \      0x316   0xB2A9             UXTHEQ   R1,R5
   \      0x318   0xD001             BEQ.N    ??CrossCallReturnLabel_6
   \      0x31A   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_6: (+1)
   \      0x31E   0x1D30             ADDS     R0,R6,#+4
   \      0x320   0x.... 0x....      BL       mbedtls_put_unaligned_uint16
   \      0x324   0xEBAB 0x0006      SUB      R0,R11,R6
   \      0x328   0x9001             STR      R0,[SP, #+4]
   \      0x32A   0x4406             ADD      R6,R6,R0
   \                     ??mbedtls_ssl_write_client_hello_21: (+1)
   \      0x32C   0xB1B4             CBZ.N    R4,??mbedtls_ssl_write_client_hello_29
   \      0x32E   0xAB01             ADD      R3,SP,#+4
   \      0x330   0x4642             MOV      R2,R8
   \      0x332   0x4631             MOV      R1,R6
   \      0x334   0x4638             MOV      R0,R7
   \      0x336   0x.... 0x....      BL       mbedtls_ssl_write_sig_alg_ext
   \      0x33A   0x2800             CMP      R0,#+0
   \      0x33C   0xD18F             BNE.N    ??mbedtls_ssl_write_client_hello_23
   \      0x33E   0x9801             LDR      R0,[SP, #+4]
   \      0x340   0x1836             ADDS     R6,R6,R0
   \      0x342   0xB15C             CBZ.N    R4,??mbedtls_ssl_write_client_hello_29
   \      0x344   0xA801             ADD      R0,SP,#+4
   \      0x346   0x9000             STR      R0,[SP, #+0]
   \      0x348   0x4653             MOV      R3,R10
   \      0x34A   0x4642             MOV      R2,R8
   \      0x34C   0x4631             MOV      R1,R6
   \      0x34E   0x4638             MOV      R0,R7
   \      0x350   0x.... 0x....      BL       mbedtls_ssl_tls12_write_client_hello_exts
   \      0x354   0x2800             CMP      R0,#+0
   \      0x356   0xD182             BNE.N    ??mbedtls_ssl_write_client_hello_23
   \      0x358   0x9801             LDR      R0,[SP, #+4]
   \      0x35A   0x1836             ADDS     R6,R6,R0
   \                     ??mbedtls_ssl_write_client_hello_29: (+1)
   \      0x35C   0x9805             LDR      R0,[SP, #+20]
   \      0x35E   0x1A30             SUBS     R0,R6,R0
   \      0x360   0x1E80             SUBS     R0,R0,#+2
   \      0x362   0xD103             BNE.N    ??mbedtls_ssl_write_client_hello_30
   \      0x364   0x9E05             LDR      R6,[SP, #+20]
   \      0x366   0xE00B             B.N      ??mbedtls_ssl_write_client_hello_31
   \                     ??mbedtls_ssl_write_client_hello_17: (+1)
   \      0x368   0x....             LDR.N    R0,??DataTable2_3
   \      0x36A   0xE778             B.N      ??mbedtls_ssl_write_client_hello_23
   \                     ??mbedtls_ssl_write_client_hello_30: (+1)
   \      0x36C   0xF899 0x1000      LDRB     R1,[R9, #+0]
   \      0x370   0x2901             CMP      R1,#+1
   \      0x372   0xBF08             IT       EQ
   \      0x374   0xB281             UXTHEQ   R1,R0
   \      0x376   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_1: (+1)
   \      0x37A   0x9805             LDR      R0,[SP, #+20]
   \      0x37C   0x.... 0x....      BL       mbedtls_put_unaligned_uint16
   \                     ??mbedtls_ssl_write_client_hello_31: (+1)
   \      0x380   0x9804             LDR      R0,[SP, #+16]
   \      0x382   0x1A36             SUBS     R6,R6,R0
   \      0x384   0x9606             STR      R6,[SP, #+24]
    950          
    951          #if defined(MBEDTLS_SSL_PROTO_TLS1_2) && defined(MBEDTLS_SSL_PROTO_DTLS)
    952              if (ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM) {
    953                  ssl->out_msglen = msg_len + 4;
    954                  mbedtls_ssl_send_flight_completed(ssl);
    955          
    956                  /*
    957                   * The two functions below may try to send data on the network and
    958                   * can return with the MBEDTLS_ERR_SSL_WANT_READ error code when they
    959                   * fail to do so and the transmission has to be retried later. In that
    960                   * case as in fatal error cases, we return immediately. But we must have
    961                   * set the handshake state to the next state at that point to ensure
    962                   * that we will not write and send again a ClientHello when we
    963                   * eventually succeed in sending the pending data.
    964                   */
    965                  mbedtls_ssl_handshake_set_state(ssl, MBEDTLS_SSL_SERVER_HELLO);
    966          
    967                  if ((ret = mbedtls_ssl_write_handshake_msg(ssl)) != 0) {
    968                      MBEDTLS_SSL_DEBUG_RET(1, "mbedtls_ssl_write_handshake_msg", ret);
    969                      return ret;
    970                  }
    971          
    972                  if ((ret = mbedtls_ssl_flight_transmit(ssl)) != 0) {
    973                      MBEDTLS_SSL_DEBUG_RET(1, "mbedtls_ssl_flight_transmit", ret);
    974                      return ret;
    975                  }
    976              } else
    977          #endif /* MBEDTLS_SSL_PROTO_TLS1_2 && MBEDTLS_SSL_PROTO_DTLS */
    978              {
    979          
    980                  ret = mbedtls_ssl_add_hs_hdr_to_checksum(ssl,
    981                                                           MBEDTLS_SSL_HS_CLIENT_HELLO,
    982                                                           msg_len);
   \                     ??mbedtls_ssl_write_client_hello_24: (+1)
   \      0x386   0x9A06             LDR      R2,[SP, #+24]
   \      0x388   0x2101             MOVS     R1,#+1
   \      0x38A   0x4638             MOV      R0,R7
   \      0x38C   0x.... 0x....      BL       mbedtls_ssl_add_hs_hdr_to_checksum
    983                  if (ret != 0) {
   \      0x390   0xB970             CBNZ.N   R0,??mbedtls_ssl_write_client_hello_1
    984                      MBEDTLS_SSL_DEBUG_RET(1, "mbedtls_ssl_add_hs_hdr_to_checksum", ret);
    985                      return ret;
    986                  }
    987                  ret = ssl->handshake->update_checksum(ssl, buf, msg_len - binders_len);
   \      0x392   0x6BBC             LDR      R4,[R7, #+56]
   \      0x394   0x9A06             LDR      R2,[SP, #+24]
   \      0x396   0x9902             LDR      R1,[SP, #+8]
   \      0x398   0x68E3             LDR      R3,[R4, #+12]
   \      0x39A   0x4638             MOV      R0,R7
   \      0x39C   0x4798             BLX      R3
    988                  if (ret != 0) {
   \      0x39E   0xB938             CBNZ.N   R0,??mbedtls_ssl_write_client_hello_1
    989                      MBEDTLS_SSL_DEBUG_RET(1, "update_checksum", ret);
    990                      return ret;
    991                  }
    992          #if defined(MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_SOME_PSK_ENABLED)
    993                  if (binders_len > 0) {
    994                      MBEDTLS_SSL_PROC_CHK(
    995                          mbedtls_ssl_tls13_write_binders_of_pre_shared_key_ext(
    996                              ssl, buf + msg_len - binders_len, buf + msg_len));
    997                      ret = ssl->handshake->update_checksum(ssl, buf + msg_len - binders_len,
    998                                                            binders_len);
    999                      if (ret != 0) {
   1000                          MBEDTLS_SSL_DEBUG_RET(1, "update_checksum", ret);
   1001                          return ret;
   1002                      }
   1003                  }
   1004          #endif /* MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_SOME_PSK_ENABLED */
   1005          
   1006                  MBEDTLS_SSL_PROC_CHK(mbedtls_ssl_finish_handshake_msg(ssl,
   1007                                                                        buf_len,
   1008                                                                        msg_len));
   \      0x3A0   0x9A06             LDR      R2,[SP, #+24]
   \      0x3A2   0x9903             LDR      R1,[SP, #+12]
   \      0x3A4   0x4638             MOV      R0,R7
   \      0x3A6   0x.... 0x....      BL       mbedtls_ssl_finish_handshake_msg
   \      0x3AA   0xB908             CBNZ.N   R0,??mbedtls_ssl_write_client_hello_1
   1009          
   1010                  /*
   1011                   * Set next state. Note that if TLS 1.3 is proposed, this may be
   1012                   * overwritten by mbedtls_ssl_tls13_finalize_client_hello().
   1013                   */
   1014                  mbedtls_ssl_handshake_set_state(ssl, MBEDTLS_SSL_SERVER_HELLO);
   \      0x3AC   0x2102             MOVS     R1,#+2
   \      0x3AE   0x6079             STR      R1,[R7, #+4]
   1015          
   1016          #if defined(MBEDTLS_SSL_PROTO_TLS1_3)
   1017                  if (ssl->handshake->min_tls_version <=  MBEDTLS_SSL_VERSION_TLS1_3 &&
   1018                      MBEDTLS_SSL_VERSION_TLS1_3 <= ssl->tls_version) {
   1019                      ret = mbedtls_ssl_tls13_finalize_client_hello(ssl);
   1020                  }
   1021          #endif
   1022              }
   1023          
   1024          cleanup:
   1025          
   1026              MBEDTLS_SSL_DEBUG_MSG(2, ("<= write client hello"));
   1027              return ret;
   \                     ??mbedtls_ssl_write_client_hello_1: (+1)
   \      0x3B0   0xB009             ADD      SP,SP,#+36
   \      0x3B2   0xE8BD 0x8FF0      POP      {R4-R11,PC}
   \                     ??mbedtls_ssl_write_client_hello_10: (+1)
   \      0x3B6   0x....             LDR.N    R0,??DataTable2_3
   \      0x3B8   0xE7FA             B.N      ??mbedtls_ssl_write_client_hello_1
   1028          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \        0x0   0x0429             LSLS     R1,R5,#+16
   \        0x2   0x0E09             LSRS     R1,R1,#+24
   \        0x4   0xEA41 0x2105      ORR      R1,R1,R5, LSL #+8
   \        0x8   0xB289             UXTH     R1,R1
   \        0xA   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \        0x0   0x2202             MOVS     R2,#+2
   \                     ??Subroutine1_0: (+1)
   \        0x2   0x4641             MOV      R1,R8
   \        0x4   0x4628             MOV      R0,R5
   \        0x6   0x....             B.N      mbedtls_ssl_chk_buf_ptr

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0xD004             BEQ.N    ??Subroutine0_0
   \        0x2   0x0401             LSLS     R1,R0,#+16
   \        0x4   0x0E09             LSRS     R1,R1,#+24
   \        0x6   0xEA41 0x2100      ORR      R1,R1,R0, LSL #+8
   \        0xA   0xB289             UXTH     R1,R1
   \                     ??Subroutine0_0: (+1)
   \        0xC   0x4770             BX       LR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \        0x0   0xFFFF'9400        DC32     0xffff9400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \        0x0   0xFFFF'8C00        DC32     0xffff8c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \        0x0   0xFFFF'A180        DC32     0xffffa180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \        0x0   0xFFFF'9600        DC32     0xffff9600
   1029          
   1030          #endif /* MBEDTLS_SSL_PROTO_TLS1_3 || MBEDTLS_SSL_PROTO_TLS1_2 */
   1031          #endif /* MBEDTLS_SSL_CLI_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   mbedtls_put_unaligned_uint16
       0   mbedtls_ssl_chk_buf_ptr
      72   mbedtls_ssl_write_client_hello
        72   -- Indirect call
        72   -> __aeabi_memcpy
        72   -> mbedtls_put_unaligned_uint16
        72   -> mbedtls_ssl_add_hs_hdr_to_checksum
        72   -> mbedtls_ssl_chk_buf_ptr
        72   -> mbedtls_ssl_ciphersuite_from_id
        72   -> mbedtls_ssl_ciphersuite_uses_ec
        72   -> mbedtls_ssl_finish_handshake_msg
        72   -> mbedtls_ssl_get_ecp_group_id_from_tls_id
        72   -> mbedtls_ssl_start_handshake_msg
        72   -> mbedtls_ssl_tls12_write_client_hello_exts
        72   -> mbedtls_ssl_validate_ciphersuite
        72   -> mbedtls_ssl_write_sig_alg_ext
        72   -> mbedtls_ssl_write_version


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
      14  ?Subroutine0
       8  ?Subroutine1
      12  ?Subroutine2
       2  mbedtls_byte_order_detector
      18  mbedtls_put_unaligned_uint16
      18  mbedtls_ssl_chk_buf_ptr
     954  mbedtls_ssl_write_client_hello

 
 1'042 bytes in section .text
 
 1'024 bytes of CODE memory (+ 18 bytes shared)

Errors: none
Warnings: 1
