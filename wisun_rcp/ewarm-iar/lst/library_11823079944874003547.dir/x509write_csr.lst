###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         27/Nov/2024  12:18:01
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\x509write_csr.c
#    Command line                 =
#        -f
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir\x509write_csr.o.rsp
#        (C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\x509write_csr.c
#        -D EFR32FG28B322F1024IM48=1 -D
#        configNUM_SDK_THREAD_LOCAL_STORAGE_POINTERS=2 -D
#        SL_COMPONENT_CATALOG_PRESENT=1 -D
#        MBEDTLS_CONFIG_FILE=<sl_mbedtls_config.h> -D
#        MBEDTLS_PSA_CRYPTO_CONFIG_FILE=<psa_crypto_config.h> -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -D
#        RTT_USE_ASM=0 -D MBED_CONF_MBED_TRACE_ENABLE=1 -D
#        MBED_CONF_NANOSTACK_CONFIGURATION=ws_router -D
#        MBED_TRACE_MAX_LEVEL=TRACE_ACTIVE_LEVEL_ALL -D DEBUG_EFM_USER=1 -D
#        HAVE_LFN=1 -D HAVE_LFN_PARENT=1 -lC
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\lst\library_11823079944874003547.dir
#        --diag_suppress Pa050 -o
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir
#        --debug --endian=little --cpu=Cortex-M33 --cmse --cmse -e
#        --fpu=VFPv5_sp --dlib_config "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\
#        -I C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\autogen\ -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\config\ -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\config\rail\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\Device\SiliconLabs\EFR32FG28\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\common\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\CMSIS\Core\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\CMSIS\RTOS2\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\device_init\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\dmadrv\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\common\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emlib\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\cmsis\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\kernel\include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\kernel\portable\IAR\ARM_CM33_NTZ\non_secure\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\iostream\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\config\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\config\preset\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\nvm3\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\peripheral\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_psa_driver\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\common\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\wmbus\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\sidewalk\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\efr32xg28\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\rail_util_pti\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\src\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\segger\systemview\SEGGER\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\silicon_labs\silabs_core\memory_manager\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\common\toolchain\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\system\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\ns_list\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\nanostack\nanostack-libservice\mbed-client-libservice\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\sleeptimer\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\app\wisun_rcp\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\inc\socket\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\src\
#        -Ohz --use_c++_inline) --dependencies=n
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir\x509write_csr.o.iar_deps
#    Locale                       =  C
#    List file                    =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\lst\library_11823079944874003547.dir\x509write_csr.lst
#    Object file                  =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\library_11823079944874003547.dir\x509write_csr.o
#    Runtime model:                  
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_file_descriptor     =  0
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#
###############################################################################

C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\x509write_csr.c
      1          /*
      2           *  X.509 Certificate Signing Request writing
      3           *
      4           *  Copyright The Mbed TLS Contributors
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           */
     19          /*
     20           * References:
     21           * - CSRs: PKCS#10 v1.7 aka RFC 2986
     22           * - attributes: PKCS#9 v2.0 aka RFC 2985
     23           */
     24          
     25          #include "common.h"
     26          
     27          #if defined(MBEDTLS_X509_CSR_WRITE_C)
     28          
     29          #include "mbedtls/x509.h"
     30          #include "mbedtls/x509_csr.h"
     31          #include "mbedtls/asn1write.h"
     32          #include "mbedtls/error.h"
     33          #include "mbedtls/oid.h"
     34          #include "mbedtls/platform_util.h"
     35          
     36          #if defined(MBEDTLS_USE_PSA_CRYPTO)
     37          #include "psa/crypto.h"
     38          #include "psa_util_internal.h"
     39          #include "md_psa.h"
     40          #endif /* MBEDTLS_USE_PSA_CRYPTO */
     41          
     42          #include <string.h>
     43          #include <stdlib.h>
     44          
     45          #if defined(MBEDTLS_PEM_WRITE_C)
     46          #include "mbedtls/pem.h"
     47          #endif
     48          
     49          #include "mbedtls/platform.h"
     50          

   \                                 In section .text, align 2, keep-with-next
     51          void mbedtls_x509write_csr_init(mbedtls_x509write_csr *ctx)
     52          {
   \                     mbedtls_x509write_csr_init: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
     53              memset(ctx, 0, sizeof(mbedtls_x509write_csr));
   \        0x2   0x2400             MOVS     R4,#+0
   \        0x4   0x2100             MOVS     R1,#+0
   \        0x6   0x2200             MOVS     R2,#+0
   \        0x8   0x2300             MOVS     R3,#+0
   \        0xA   0xE880 0x001E      STM      R0,{R1-R4}
     54          }
   \        0xE   0xBD10             POP      {R4,PC}
     55          

   \                                 In section .text, align 2, keep-with-next
     56          void mbedtls_x509write_csr_free(mbedtls_x509write_csr *ctx)
     57          {
   \                     mbedtls_x509write_csr_free: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
     58              mbedtls_asn1_free_named_data_list(&ctx->subject);
   \        0x4   0x1D20             ADDS     R0,R4,#+4
   \        0x6   0x.... 0x....      BL       mbedtls_asn1_free_named_data_list
     59              mbedtls_asn1_free_named_data_list(&ctx->extensions);
   \        0xA   0xF104 0x000C      ADD      R0,R4,#+12
   \        0xE   0x.... 0x....      BL       mbedtls_asn1_free_named_data_list
     60          
     61              mbedtls_platform_zeroize(ctx, sizeof(mbedtls_x509write_csr));
   \       0x12   0x4620             MOV      R0,R4
   \       0x14   0x2110             MOVS     R1,#+16
   \       0x16   0xE8BD 0x4010      POP      {R4,LR}
   \       0x1A   0x.... 0x....      B.W      mbedtls_platform_zeroize
     62          }
     63          

   \                                 In section .text, align 2, keep-with-next
     64          void mbedtls_x509write_csr_set_md_alg(mbedtls_x509write_csr *ctx, mbedtls_md_type_t md_alg)
     65          {
     66              ctx->md_alg = md_alg;
   \                     mbedtls_x509write_csr_set_md_alg: (+1)
   \        0x0   0x7201             STRB     R1,[R0, #+8]
     67          }
   \        0x2   0x4770             BX       LR
     68          

   \                                 In section .text, align 2, keep-with-next
     69          void mbedtls_x509write_csr_set_key(mbedtls_x509write_csr *ctx, mbedtls_pk_context *key)
     70          {
     71              ctx->key = key;
   \                     mbedtls_x509write_csr_set_key: (+1)
   \        0x0   0x6001             STR      R1,[R0, #+0]
     72          }
   \        0x2   0x4770             BX       LR
     73          

   \                                 In section .text, align 2, keep-with-next
     74          int mbedtls_x509write_csr_set_subject_name(mbedtls_x509write_csr *ctx,
     75                                                     const char *subject_name)
     76          {
     77              return mbedtls_x509_string_to_names(&ctx->subject, subject_name);
   \                     mbedtls_x509write_csr_set_subject_name: (+1)
   \        0x0   0x1D00             ADDS     R0,R0,#+4
   \        0x2   0x.... 0x....      B.W      mbedtls_x509_string_to_names
     78          }
     79          

   \                                 In section .text, align 2, keep-with-next
     80          int mbedtls_x509write_csr_set_extension(mbedtls_x509write_csr *ctx,
     81                                                  const char *oid, size_t oid_len,
     82                                                  int critical,
     83                                                  const unsigned char *val, size_t val_len)
     84          {
   \                     mbedtls_x509write_csr_set_extension: (+1)
   \        0x0   0xB53E             PUSH     {R1-R5,LR}
     85              return mbedtls_x509_set_extension(&ctx->extensions, oid, oid_len,
     86                                                critical, val, val_len);
   \        0x2   0x9D07             LDR      R5,[SP, #+28]
   \        0x4   0x9C06             LDR      R4,[SP, #+24]
   \        0x6   0x300C             ADDS     R0,R0,#+12
   \        0x8   0x9501             STR      R5,[SP, #+4]
   \        0xA   0x9400             STR      R4,[SP, #+0]
   \        0xC   0x.... 0x....      BL       mbedtls_x509_set_extension
   \       0x10   0xBD3E             POP      {R1-R5,PC}
     87          }
     88          

   \                                 In section .text, align 2, keep-with-next
     89          int mbedtls_x509write_csr_set_subject_alternative_name(mbedtls_x509write_csr *ctx,
     90                                                                 const mbedtls_x509_san_list *san_list)
     91          {
     92              return mbedtls_x509_write_set_san_common(&ctx->extensions, san_list);
   \                     mbedtls_x509write_csr_set_subject_alternative_name: (+1)
   \        0x0   0x300C             ADDS     R0,R0,#+12
   \        0x2   0x.... 0x....      B.W      mbedtls_x509_write_set_san_common
     93          }
     94          

   \                                 In section .text, align 2, keep-with-next
     95          int mbedtls_x509write_csr_set_key_usage(mbedtls_x509write_csr *ctx, unsigned char key_usage)
     96          {
   \                     mbedtls_x509write_csr_set_key_usage: (+1)
   \        0x0   0xB513             PUSH     {R0,R1,R4,LR}
   \        0x2   0xB084             SUB      SP,SP,#+16
   \        0x4   0x.... 0x....      BL       ?Subroutine0
     97              unsigned char buf[4] = { 0 };
     98              unsigned char *c;
     99              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    100          
    101              c = buf + 4;
    102          
    103              ret = mbedtls_asn1_write_named_bitstring(&c, buf, &key_usage, 8);
    104              if (ret < 3 || ret > 4) {
   \                     ??CrossCallReturnLabel_1: (+1)
   \        0x8   0x1EC1             SUBS     R1,R0,#+3
   \        0xA   0x2902             CMP      R1,#+2
   \        0xC   0xD208             BCS.N    ??mbedtls_x509write_csr_set_key_usage_0
    105                  return ret;
    106              }
    107          
    108              ret = mbedtls_x509write_csr_set_extension(ctx, MBEDTLS_OID_KEY_USAGE,
    109                                                        MBEDTLS_OID_SIZE(MBEDTLS_OID_KEY_USAGE),
    110                                                        0, c, (size_t) ret);
    111              if (ret != 0) {
    112                  return ret;
   \        0xE   0x9001             STR      R0,[SP, #+4]
   \       0x10   0x9803             LDR      R0,[SP, #+12]
   \       0x12   0x2300             MOVS     R3,#+0
   \       0x14   0x2203             MOVS     R2,#+3
   \       0x16   0x9000             STR      R0,[SP, #+0]
   \       0x18   0x....             ADR.N    R1,??DataTable6
   \       0x1A   0x4620             MOV      R0,R4
   \       0x1C   0x.... 0x....      BL       mbedtls_x509write_csr_set_extension
   \                     ??mbedtls_x509write_csr_set_key_usage_0: (+1)
   \       0x20   0xB006             ADD      SP,SP,#+24
   \       0x22   0xBD10             POP      {R4,PC}
    113              }
    114          
    115              return 0;
    116          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0x4604             MOV      R4,R0
   \        0x2   0xA902             ADD      R1,SP,#+8
   \        0x4   0x2000             MOVS     R0,#+0
   \        0x6   0x6008             STR      R0,[R1, #+0]
   \        0x8   0xA803             ADD      R0,SP,#+12
   \        0xA   0x9003             STR      R0,[SP, #+12]
   \        0xC   0x2308             MOVS     R3,#+8
   \        0xE   0xAA05             ADD      R2,SP,#+20
   \       0x10   0x.... 0x....      B.W      mbedtls_asn1_write_named_bitstring
    117          

   \                                 In section .text, align 4, keep-with-next
    118          int mbedtls_x509write_csr_set_ns_cert_type(mbedtls_x509write_csr *ctx,
    119                                                     unsigned char ns_cert_type)
    120          {
   \                     mbedtls_x509write_csr_set_ns_cert_type: (+1)
   \        0x0   0xB513             PUSH     {R0,R1,R4,LR}
   \        0x2   0xB084             SUB      SP,SP,#+16
   \        0x4   0x.... 0x....      BL       ?Subroutine0
    121              unsigned char buf[4] = { 0 };
    122              unsigned char *c;
    123              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    124          
    125              c = buf + 4;
    126          
    127              ret = mbedtls_asn1_write_named_bitstring(&c, buf, &ns_cert_type, 8);
    128              if (ret < 3 || ret > 4) {
   \                     ??CrossCallReturnLabel_0: (+1)
   \        0x8   0x1EC1             SUBS     R1,R0,#+3
   \        0xA   0x2902             CMP      R1,#+2
   \        0xC   0xD208             BCS.N    ??mbedtls_x509write_csr_set_ns_cert_type_0
    129                  return ret;
    130              }
    131          
    132              ret = mbedtls_x509write_csr_set_extension(ctx, MBEDTLS_OID_NS_CERT_TYPE,
    133                                                        MBEDTLS_OID_SIZE(MBEDTLS_OID_NS_CERT_TYPE),
    134                                                        0, c, (size_t) ret);
    135              if (ret != 0) {
    136                  return ret;
   \        0xE   0x9001             STR      R0,[SP, #+4]
   \       0x10   0x9803             LDR      R0,[SP, #+12]
   \       0x12   0x2300             MOVS     R3,#+0
   \       0x14   0x2209             MOVS     R2,#+9
   \       0x16   0x9000             STR      R0,[SP, #+0]
   \       0x18   0x....             ADR.N    R1,?_3
   \       0x1A   0x4620             MOV      R0,R4
   \       0x1C   0x.... 0x....      BL       mbedtls_x509write_csr_set_extension
   \                     ??mbedtls_x509write_csr_set_ns_cert_type_0: (+1)
   \       0x20   0xB006             ADD      SP,SP,#+24
   \       0x22   0xBD10             POP      {R4,PC}
    137              }
    138          
    139              return 0;
    140          }
    141          
    142          static int x509write_csr_der_internal(mbedtls_x509write_csr *ctx,
    143                                                unsigned char *buf,
    144                                                size_t size,
    145                                                unsigned char *sig, size_t sig_size,
    146                                                int (*f_rng)(void *, unsigned char *, size_t),
    147                                                void *p_rng)
    148          {
    149              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    150              const char *sig_oid;
    151              size_t sig_oid_len = 0;
    152              unsigned char *c, *c2;
    153              unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    154              size_t pub_len = 0, sig_and_oid_len = 0, sig_len;
    155              size_t len = 0;
    156              mbedtls_pk_type_t pk_alg;
    157          #if defined(MBEDTLS_USE_PSA_CRYPTO)
    158              size_t hash_len;
    159              psa_algorithm_t hash_alg = mbedtls_md_psa_alg_from_type(ctx->md_alg);
    160          #endif /* MBEDTLS_USE_PSA_CRYPTO */
    161          
    162              /* Write the CSR backwards starting from the end of buf */
    163              c = buf + size;
    164          
    165              MBEDTLS_ASN1_CHK_ADD(len, mbedtls_x509_write_extensions(&c, buf,
    166                                                                      ctx->extensions));
    167          
    168              if (len) {
    169                  MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_len(&c, buf, len));
    170                  MBEDTLS_ASN1_CHK_ADD(len,
    171                                       mbedtls_asn1_write_tag(
    172                                           &c, buf,
    173                                           MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE));
    174          
    175                  MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_len(&c, buf, len));
    176                  MBEDTLS_ASN1_CHK_ADD(len,
    177                                       mbedtls_asn1_write_tag(
    178                                           &c, buf,
    179                                           MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SET));
    180          
    181                  MBEDTLS_ASN1_CHK_ADD(len,
    182                                       mbedtls_asn1_write_oid(
    183                                           &c, buf, MBEDTLS_OID_PKCS9_CSR_EXT_REQ,
    184                                           MBEDTLS_OID_SIZE(MBEDTLS_OID_PKCS9_CSR_EXT_REQ)));
    185          
    186                  MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_len(&c, buf, len));
    187                  MBEDTLS_ASN1_CHK_ADD(len,
    188                                       mbedtls_asn1_write_tag(
    189                                           &c, buf,
    190                                           MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE));
    191              }
    192          
    193              MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_len(&c, buf, len));
    194              MBEDTLS_ASN1_CHK_ADD(len,
    195                                   mbedtls_asn1_write_tag(
    196                                       &c, buf,
    197                                       MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_CONTEXT_SPECIFIC));
    198          
    199              MBEDTLS_ASN1_CHK_ADD(pub_len, mbedtls_pk_write_pubkey_der(ctx->key,
    200                                                                        buf, c - buf));
    201              c -= pub_len;
    202              len += pub_len;
    203          
    204              /*
    205               *  Subject  ::=  Name
    206               */
    207              MBEDTLS_ASN1_CHK_ADD(len, mbedtls_x509_write_names(&c, buf,
    208                                                                 ctx->subject));
    209          
    210              /*
    211               *  Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  }
    212               */
    213              MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_int(&c, buf, 0));
    214          
    215              MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_len(&c, buf, len));
    216              MBEDTLS_ASN1_CHK_ADD(len,
    217                                   mbedtls_asn1_write_tag(
    218                                       &c, buf,
    219                                       MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE));
    220          
    221              /*
    222               * Sign the written CSR data into the sig buffer
    223               * Note: hash errors can happen only after an internal error
    224               */
    225          #if defined(MBEDTLS_USE_PSA_CRYPTO)
    226              if (psa_hash_compute(hash_alg,
    227                                   c,
    228                                   len,
    229                                   hash,
    230                                   sizeof(hash),
    231                                   &hash_len) != PSA_SUCCESS) {
    232                  return MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED;
    233              }
    234          #else /* MBEDTLS_USE_PSA_CRYPTO */
    235              ret = mbedtls_md(mbedtls_md_info_from_type(ctx->md_alg), c, len, hash);
    236              if (ret != 0) {
    237                  return ret;
    238              }
    239          #endif
    240              if ((ret = mbedtls_pk_sign(ctx->key, ctx->md_alg, hash, 0,
    241                                         sig, sig_size, &sig_len,
    242                                         f_rng, p_rng)) != 0) {
    243                  return ret;
    244              }
    245          
    246              if (mbedtls_pk_can_do(ctx->key, MBEDTLS_PK_RSA)) {
    247                  pk_alg = MBEDTLS_PK_RSA;
    248              } else if (mbedtls_pk_can_do(ctx->key, MBEDTLS_PK_ECDSA)) {
    249                  pk_alg = MBEDTLS_PK_ECDSA;
    250              } else {
    251                  return MBEDTLS_ERR_X509_INVALID_ALG;
    252              }
    253          
    254              if ((ret = mbedtls_oid_get_oid_by_sig_alg(pk_alg, ctx->md_alg,
    255                                                        &sig_oid, &sig_oid_len)) != 0) {
    256                  return ret;
    257              }
    258          
    259              /*
    260               * Move the written CSR data to the start of buf to create space for
    261               * writing the signature into buf.
    262               */
    263              memmove(buf, c, len);
    264          
    265              /*
    266               * Write sig and its OID into buf backwards from the end of buf.
    267               * Note: mbedtls_x509_write_sig will check for c2 - ( buf + len ) < sig_len
    268               * and return MBEDTLS_ERR_ASN1_BUF_TOO_SMALL if needed.
    269               */
    270              c2 = buf + size;
    271              MBEDTLS_ASN1_CHK_ADD(sig_and_oid_len,
    272                                   mbedtls_x509_write_sig(&c2, buf + len, sig_oid, sig_oid_len,
    273                                                          sig, sig_len, pk_alg));
    274          
    275              /*
    276               * Compact the space between the CSR data and signature by moving the
    277               * CSR data to the start of the signature.
    278               */
    279              c2 -= len;
    280              memmove(c2, buf, len);
    281          
    282              /* ASN encode the total size and tag the CSR data with it. */
    283              len += sig_and_oid_len;
    284              MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_len(&c2, buf, len));
    285              MBEDTLS_ASN1_CHK_ADD(len,
    286                                   mbedtls_asn1_write_tag(
    287                                       &c2, buf,
    288                                       MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE));
    289          
    290              /* Zero the unused bytes at the start of buf */
    291              memset(buf, 0, c2 - buf);
    292          
    293              return (int) len;
    294          }
    295          

   \                                 In section .text, align 4, keep-with-next
    296          int mbedtls_x509write_csr_der(mbedtls_x509write_csr *ctx, unsigned char *buf,
    297                                        size_t size,
    298                                        int (*f_rng)(void *, unsigned char *, size_t),
    299                                        void *p_rng)
    300          {
   \                     mbedtls_x509write_csr_der: (+1)
   \        0x0   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x468B             MOV      R11,R1
   \        0x8   0xB093             SUB      SP,SP,#+76
   \        0xA   0x4614             MOV      R4,R2
   \        0xC   0x461E             MOV      R6,R3
    301              int ret;
    302              unsigned char *sig;
    303          
    304              if ((sig = mbedtls_calloc(1, MBEDTLS_PK_SIGNATURE_MAX_SIZE)) == NULL) {
   \        0xE   0x214B             MOVS     R1,#+75
   \       0x10   0x2001             MOVS     R0,#+1
   \       0x12   0x.... 0x....      BL       sl_calloc
   \       0x16   0xEA5F 0x0A00      MOVS     R10,R0
   \       0x1A   0xBF08             IT       EQ
   \       0x1C   0x....             LDREQ.N  R0,??DataTable6_1
    305                  return MBEDTLS_ERR_X509_ALLOC_FAILED;
   \       0x1E   0xF000 0x80E3      BEQ.W    ??mbedtls_x509write_csr_der_0
    306              }
    307          
    308              ret = x509write_csr_der_internal(ctx, buf, size,
    309                                               sig, MBEDTLS_PK_SIGNATURE_MAX_SIZE,
    310                                               f_rng, p_rng);
   \       0x22   0x2000             MOVS     R0,#+0
   \       0x24   0x9008             STR      R0,[SP, #+32]
   \       0x26   0x7A28             LDRB     R0,[R5, #+8]
   \       0x28   0xEB0B 0x0904      ADD      R9,R11,R4
   \       0x2C   0xF8CD 0x9014      STR      R9,[SP, #+20]
   \       0x30   0x68EA             LDR      R2,[R5, #+12]
   \       0x32   0xF040 0x7800      ORR      R8,R0,#0x2000000
   \       0x36   0x4659             MOV      R1,R11
   \       0x38   0xA805             ADD      R0,SP,#+20
   \       0x3A   0x.... 0x....      BL       mbedtls_x509_write_extensions
   \       0x3E   0x0004             MOVS     R4,R0
   \       0x40   0xD430             BMI.N    ??mbedtls_x509write_csr_der_1
   \       0x42   0xD028             BEQ.N    ??mbedtls_x509write_csr_der_2
   \       0x44   0x4622             MOV      R2,R4
   \       0x46   0x.... 0x....      BL       ??Subroutine1_1
   \                     ??CrossCallReturnLabel_3: (+1)
   \       0x4A   0x4607             MOV      R7,R0
   \       0x4C   0x2F00             CMP      R7,#+0
   \       0x4E   0xD428             BMI.N    ??mbedtls_x509write_csr_der_3
   \       0x50   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_11: (+1)
   \       0x54   0x2800             CMP      R0,#+0
   \       0x56   0xD452             BMI.N    ??mbedtls_x509write_csr_der_4
   \       0x58   0x193C             ADDS     R4,R7,R4
   \       0x5A   0x1907             ADDS     R7,R0,R4
   \       0x5C   0x.... 0x....      BL       ??Subroutine1_0
   \                     ??CrossCallReturnLabel_4: (+1)
   \       0x60   0x0004             MOVS     R4,R0
   \       0x62   0xD41F             BMI.N    ??mbedtls_x509write_csr_der_1
   \       0x64   0x2231             MOVS     R2,#+49
   \       0x66   0x.... 0x....      BL       ??Subroutine2_0
   \                     ??CrossCallReturnLabel_8: (+1)
   \       0x6A   0x2800             CMP      R0,#+0
   \       0x6C   0xD447             BMI.N    ??mbedtls_x509write_csr_der_4
   \       0x6E   0x19E7             ADDS     R7,R4,R7
   \       0x70   0x19C7             ADDS     R7,R0,R7
   \       0x72   0x2309             MOVS     R3,#+9
   \       0x74   0x....             ADR.N    R2,?_4
   \       0x76   0x4659             MOV      R1,R11
   \       0x78   0xA805             ADD      R0,SP,#+20
   \       0x7A   0x.... 0x....      BL       mbedtls_asn1_write_oid
   \       0x7E   0x0004             MOVS     R4,R0
   \       0x80   0xD410             BMI.N    ??mbedtls_x509write_csr_der_1
   \       0x82   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_6: (+1)
   \       0x86   0x0004             MOVS     R4,R0
   \       0x88   0xD40C             BMI.N    ??mbedtls_x509write_csr_der_1
   \       0x8A   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_10: (+1)
   \       0x8E   0x2800             CMP      R0,#+0
   \       0x90   0xD435             BMI.N    ??mbedtls_x509write_csr_der_4
   \       0x92   0x19E7             ADDS     R7,R4,R7
   \       0x94   0x19C4             ADDS     R4,R0,R7
   \                     ??mbedtls_x509write_csr_der_2: (+1)
   \       0x96   0x4622             MOV      R2,R4
   \       0x98   0x.... 0x....      BL       ??Subroutine1_1
   \                     ??CrossCallReturnLabel_2: (+1)
   \       0x9C   0x4607             MOV      R7,R0
   \       0x9E   0x2F00             CMP      R7,#+0
   \       0xA0   0xD501             BPL.N    ??mbedtls_x509write_csr_der_5
   \                     ??mbedtls_x509write_csr_der_3: (+1)
   \       0xA2   0x463C             MOV      R4,R7
   \                     ??mbedtls_x509write_csr_der_1: (+1)
   \       0xA4   0xE09C             B.N      ??mbedtls_x509write_csr_der_6
   \                     ??mbedtls_x509write_csr_der_5: (+1)
   \       0xA6   0x22A0             MOVS     R2,#+160
   \       0xA8   0x.... 0x....      BL       ??Subroutine2_0
   \                     ??CrossCallReturnLabel_7: (+1)
   \       0xAC   0x2800             CMP      R0,#+0
   \       0xAE   0xD426             BMI.N    ??mbedtls_x509write_csr_der_4
   \       0xB0   0x193C             ADDS     R4,R7,R4
   \       0xB2   0x1907             ADDS     R7,R0,R4
   \       0xB4   0x9A05             LDR      R2,[SP, #+20]
   \       0xB6   0x6828             LDR      R0,[R5, #+0]
   \       0xB8   0x4659             MOV      R1,R11
   \       0xBA   0xEBA2 0x020B      SUB      R2,R2,R11
   \       0xBE   0x.... 0x....      BL       mbedtls_pk_write_pubkey_der
   \       0xC2   0x0004             MOVS     R4,R0
   \       0xC4   0xD4EE             BMI.N    ??mbedtls_x509write_csr_der_1
   \       0xC6   0x9805             LDR      R0,[SP, #+20]
   \       0xC8   0x4261             RSBS     R1,R4,#+0
   \       0xCA   0x4408             ADD      R0,R0,R1
   \       0xCC   0x9005             STR      R0,[SP, #+20]
   \       0xCE   0x686A             LDR      R2,[R5, #+4]
   \       0xD0   0x4659             MOV      R1,R11
   \       0xD2   0xA805             ADD      R0,SP,#+20
   \       0xD4   0x.... 0x....      BL       mbedtls_x509_write_names
   \       0xD8   0x2800             CMP      R0,#+0
   \       0xDA   0xD410             BMI.N    ??mbedtls_x509write_csr_der_4
   \       0xDC   0x19E7             ADDS     R7,R4,R7
   \       0xDE   0x19C7             ADDS     R7,R0,R7
   \       0xE0   0x2200             MOVS     R2,#+0
   \       0xE2   0x4659             MOV      R1,R11
   \       0xE4   0xA805             ADD      R0,SP,#+20
   \       0xE6   0x.... 0x....      BL       mbedtls_asn1_write_int
   \       0xEA   0x0004             MOVS     R4,R0
   \       0xEC   0xD478             BMI.N    ??mbedtls_x509write_csr_der_6
   \       0xEE   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_5: (+1)
   \       0xF2   0x0004             MOVS     R4,R0
   \       0xF4   0xD474             BMI.N    ??mbedtls_x509write_csr_der_6
   \       0xF6   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_9: (+1)
   \       0xFA   0x2800             CMP      R0,#+0
   \       0xFC   0xD501             BPL.N    ??mbedtls_x509write_csr_der_7
   \                     ??mbedtls_x509write_csr_der_4: (+1)
   \       0xFE   0x4604             MOV      R4,R0
   \      0x100   0xE06E             B.N      ??mbedtls_x509write_csr_der_6
   \                     ??mbedtls_x509write_csr_der_7: (+1)
   \      0x102   0x19E7             ADDS     R7,R4,R7
   \      0x104   0x2120             MOVS     R1,#+32
   \      0x106   0x19C7             ADDS     R7,R0,R7
   \      0x108   0x9100             STR      R1,[SP, #+0]
   \      0x10A   0xA80A             ADD      R0,SP,#+40
   \      0x10C   0x9905             LDR      R1,[SP, #+20]
   \      0x10E   0x9001             STR      R0,[SP, #+4]
   \      0x110   0xAB0B             ADD      R3,SP,#+44
   \      0x112   0x463A             MOV      R2,R7
   \      0x114   0x4640             MOV      R0,R8
   \      0x116   0x.... 0x....      BL       psa_hash_compute
   \      0x11A   0xB110             CBZ.N    R0,??mbedtls_x509write_csr_der_8
   \      0x11C   0xF06F 0x046F      MVN      R4,#+111
   \      0x120   0xE05E             B.N      ??mbedtls_x509write_csr_der_6
   \                     ??mbedtls_x509write_csr_der_8: (+1)
   \      0x122   0x981C             LDR      R0,[SP, #+112]
   \      0x124   0x214B             MOVS     R1,#+75
   \      0x126   0x9603             STR      R6,[SP, #+12]
   \      0x128   0x9004             STR      R0,[SP, #+16]
   \      0x12A   0x9101             STR      R1,[SP, #+4]
   \      0x12C   0xF8CD 0xA000      STR      R10,[SP, #+0]
   \      0x130   0xAA07             ADD      R2,SP,#+28
   \      0x132   0x9202             STR      R2,[SP, #+8]
   \      0x134   0x7A29             LDRB     R1,[R5, #+8]
   \      0x136   0x6828             LDR      R0,[R5, #+0]
   \      0x138   0x2300             MOVS     R3,#+0
   \      0x13A   0xAA0B             ADD      R2,SP,#+44
   \      0x13C   0x.... 0x....      BL       mbedtls_pk_sign
   \      0x140   0x0004             MOVS     R4,R0
   \      0x142   0xD14D             BNE.N    ??mbedtls_x509write_csr_der_6
   \      0x144   0x6828             LDR      R0,[R5, #+0]
   \      0x146   0x2101             MOVS     R1,#+1
   \      0x148   0x.... 0x....      BL       mbedtls_pk_can_do
   \      0x14C   0xB108             CBZ.N    R0,??mbedtls_x509write_csr_der_9
   \      0x14E   0x2601             MOVS     R6,#+1
   \      0x150   0xE006             B.N      ??mbedtls_x509write_csr_der_10
   \                     ??mbedtls_x509write_csr_der_9: (+1)
   \      0x152   0x6828             LDR      R0,[R5, #+0]
   \      0x154   0x2104             MOVS     R1,#+4
   \      0x156   0x.... 0x....      BL       mbedtls_pk_can_do
   \      0x15A   0x2800             CMP      R0,#+0
   \      0x15C   0xD03F             BEQ.N    ??mbedtls_x509write_csr_der_11
   \      0x15E   0x2604             MOVS     R6,#+4
   \                     ??mbedtls_x509write_csr_der_10: (+1)
   \      0x160   0x7A29             LDRB     R1,[R5, #+8]
   \      0x162   0xAB08             ADD      R3,SP,#+32
   \      0x164   0xAA09             ADD      R2,SP,#+36
   \      0x166   0x4630             MOV      R0,R6
   \      0x168   0x.... 0x....      BL       mbedtls_oid_get_oid_by_sig_alg
   \      0x16C   0x0004             MOVS     R4,R0
   \      0x16E   0xD137             BNE.N    ??mbedtls_x509write_csr_der_6
   \      0x170   0x9905             LDR      R1,[SP, #+20]
   \      0x172   0x463A             MOV      R2,R7
   \      0x174   0x4658             MOV      R0,R11
   \      0x176   0x.... 0x....      BL       __aeabi_memmove
   \      0x17A   0x9807             LDR      R0,[SP, #+28]
   \      0x17C   0x9B08             LDR      R3,[SP, #+32]
   \      0x17E   0x9A09             LDR      R2,[SP, #+36]
   \      0x180   0x9001             STR      R0,[SP, #+4]
   \      0x182   0xF8CD 0x9018      STR      R9,[SP, #+24]
   \      0x186   0x9602             STR      R6,[SP, #+8]
   \      0x188   0xF8CD 0xA000      STR      R10,[SP, #+0]
   \      0x18C   0xEB0B 0x0107      ADD      R1,R11,R7
   \      0x190   0xA806             ADD      R0,SP,#+24
   \      0x192   0x.... 0x....      BL       mbedtls_x509_write_sig
   \      0x196   0x0004             MOVS     R4,R0
   \      0x198   0xD422             BMI.N    ??mbedtls_x509write_csr_der_6
   \      0x19A   0x9906             LDR      R1,[SP, #+24]
   \      0x19C   0x4278             RSBS     R0,R7,#+0
   \      0x19E   0x463A             MOV      R2,R7
   \      0x1A0   0x4408             ADD      R0,R1,R0
   \      0x1A2   0x9006             STR      R0,[SP, #+24]
   \      0x1A4   0x4659             MOV      R1,R11
   \      0x1A6   0x.... 0x....      BL       __aeabi_memmove
   \      0x1AA   0x19E7             ADDS     R7,R4,R7
   \      0x1AC   0x463A             MOV      R2,R7
   \      0x1AE   0x4659             MOV      R1,R11
   \      0x1B0   0xA806             ADD      R0,SP,#+24
   \      0x1B2   0x.... 0x....      BL       mbedtls_asn1_write_len
   \      0x1B6   0x0006             MOVS     R6,R0
   \      0x1B8   0xBF48             IT       MI
   \      0x1BA   0x4634             MOVMI    R4,R6
   \      0x1BC   0xD410             BMI.N    ??mbedtls_x509write_csr_der_6
   \      0x1BE   0x2230             MOVS     R2,#+48
   \      0x1C0   0x4659             MOV      R1,R11
   \      0x1C2   0xA806             ADD      R0,SP,#+24
   \      0x1C4   0x.... 0x....      BL       mbedtls_asn1_write_tag
   \      0x1C8   0x0004             MOVS     R4,R0
   \      0x1CA   0xD409             BMI.N    ??mbedtls_x509write_csr_der_6
   \      0x1CC   0x9906             LDR      R1,[SP, #+24]
   \      0x1CE   0x4658             MOV      R0,R11
   \      0x1D0   0x19F7             ADDS     R7,R6,R7
   \      0x1D2   0xEBA1 0x010B      SUB      R1,R1,R11
   \      0x1D6   0x.... 0x....      BL       __aeabi_memclr
   \      0x1DA   0x19E4             ADDS     R4,R4,R7
   \      0x1DC   0xE000             B.N      ??mbedtls_x509write_csr_der_6
   \                     ??mbedtls_x509write_csr_der_11: (+1)
   \      0x1DE   0x....             LDR.N    R4,??DataTable6_2
    311          
    312              mbedtls_free(sig);
   \                     ??mbedtls_x509write_csr_der_6: (+1)
   \      0x1E0   0x4650             MOV      R0,R10
   \      0x1E2   0x.... 0x....      BL       sl_free
    313          
    314              return ret;
   \      0x1E6   0x4620             MOV      R0,R4
   \                     ??mbedtls_x509write_csr_der_0: (+1)
   \      0x1E8   0xB013             ADD      SP,SP,#+76
   \      0x1EA   0xE8BD 0x8FF0      POP      {R4-R11,PC}
    315          }
    316          
    317          #define PEM_BEGIN_CSR           "-----BEGIN CERTIFICATE REQUEST-----\n"
    318          #define PEM_END_CSR             "-----END CERTIFICATE REQUEST-----\n"
    319          
    320          #if defined(MBEDTLS_PEM_WRITE_C)

   \                                 In section .text, align 2, keep-with-next
    321          int mbedtls_x509write_csr_pem(mbedtls_x509write_csr *ctx, unsigned char *buf, size_t size,
    322                                        int (*f_rng)(void *, unsigned char *, size_t),
    323                                        void *p_rng)
    324          {
   \                     mbedtls_x509write_csr_pem: (+1)
   \        0x0   0xB57F             PUSH     {R0-R6,LR}
   \        0x2   0x460D             MOV      R5,R1
    325              int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    326              size_t olen = 0;
    327          
    328              if ((ret = mbedtls_x509write_csr_der(ctx, buf, size,
    329                                                   f_rng, p_rng)) < 0) {
   \        0x4   0x9908             LDR      R1,[SP, #+32]
   \        0x6   0x2400             MOVS     R4,#+0
   \        0x8   0x4616             MOV      R6,R2
   \        0xA   0x9100             STR      R1,[SP, #+0]
   \        0xC   0x9403             STR      R4,[SP, #+12]
   \        0xE   0x4629             MOV      R1,R5
   \       0x10   0x.... 0x....      BL       mbedtls_x509write_csr_der
   \       0x14   0x2800             CMP      R0,#+0
   \       0x16   0xD40D             BMI.N    ??mbedtls_x509write_csr_pem_0
    330                  return ret;
    331              }
    332          
    333              if ((ret = mbedtls_pem_write_buffer(PEM_BEGIN_CSR, PEM_END_CSR,
    334                                                  buf + size - ret,
    335                                                  ret, buf, size, &olen)) != 0) {
    336                  return ret;
   \       0x18   0xA903             ADD      R1,SP,#+12
   \       0x1A   0x9102             STR      R1,[SP, #+8]
   \       0x1C   0x4603             MOV      R3,R0
   \       0x1E   0x19A9             ADDS     R1,R5,R6
   \       0x20   0x4240             RSBS     R0,R0,#+0
   \       0x22   0x....             LDR.N    R4,??DataTable6_3
   \       0x24   0x180A             ADDS     R2,R1,R0
   \       0x26   0x9601             STR      R6,[SP, #+4]
   \       0x28   0x9500             STR      R5,[SP, #+0]
   \       0x2A   0xF104 0x0128      ADD      R1,R4,#+40
   \       0x2E   0x4620             MOV      R0,R4
   \       0x30   0x.... 0x....      BL       mbedtls_pem_write_buffer
   \                     ??mbedtls_x509write_csr_pem_0: (+1)
   \       0x34   0xB004             ADD      SP,SP,#+16
   \       0x36   0xBD70             POP      {R4-R6,PC}
    337              }
    338          
    339              return 0;
    340          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \        0x0   0x2230             MOVS     R2,#+48
   \                     ??Subroutine2_0: (+1)
   \        0x2   0x4659             MOV      R1,R11
   \        0x4   0xA805             ADD      R0,SP,#+20
   \        0x6   0x.... 0x....      B.W      mbedtls_asn1_write_tag

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \        0x0   0x19E7             ADDS     R7,R4,R7
   \                     ??Subroutine1_0: (+1)
   \        0x2   0x463A             MOV      R2,R7
   \                     ??Subroutine1_1: (+1)
   \        0x4   0x4659             MOV      R1,R11
   \        0x6   0xA805             ADD      R0,SP,#+20
   \        0x8   0x.... 0x....      B.W      mbedtls_asn1_write_len

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \        0x0   0x55 0x1D          DC8      "U\035\017"    
   \              0x0F 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \        0x0   0xFFFF'D780        DC32     0xffffd780

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \        0x0   0xFFFF'DD00        DC32     0xffffdd00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x2D 0x2D          DC8 "-----BEGIN CERTIFICATE REQUEST-----\012"
   \              0x2D 0x2D    
   \              0x2D 0x42    
   \              0x45 0x47    
   \              0x49 0x4E    
   \              0x20 0x43    
   \              0x45 0x52    
   \              0x54 0x49    
   \              0x46 0x49    
   \              0x43 0x41    
   \              0x54 0x45    
   \              0x20 0x52    
   \              0x45 0x51    
   \              0x55 0x45    
   \              0x53 0x54    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x0A    
   \              0x00
   \       0x25                      DS8 3
   \       0x28   0x2D 0x2D          DC8 "-----END CERTIFICATE REQUEST-----\012"
   \              0x2D 0x2D    
   \              0x2D 0x45    
   \              0x4E 0x44    
   \              0x20 0x43    
   \              0x45 0x52    
   \              0x54 0x49    
   \              0x46 0x49    
   \              0x43 0x41    
   \              0x54 0x45    
   \              0x20 0x52    
   \              0x45 0x51    
   \              0x55 0x45    
   \              0x53 0x54    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x0A    
   \              0x00
   \       0x4B                      DS8 1

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_2:
   \        0x0   0x55 0x1D          DC8 "U\035\017"
   \              0x0F 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \        0x0   0x60 0x86          DC8 "`\206H\001\206\370B\001\001"
   \              0x48 0x01    
   \              0x86 0xF8    
   \              0x42 0x01    
   \              0x01 0x00
   \        0xA                      DS8 2

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \        0x0   0x2A 0x86          DC8 "*\206H\206\367\015\001\t\016"
   \              0x48 0x86    
   \              0xF7 0x0D    
   \              0x01 0x09    
   \              0x0E 0x00
   \        0xA                      DS8 2
    341          #endif /* MBEDTLS_PEM_WRITE_C */
    342          
    343          #endif /* MBEDTLS_X509_CSR_WRITE_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     112   mbedtls_x509write_csr_der
       112   -> __aeabi_memclr
       112   -> __aeabi_memmove
       112   -> mbedtls_asn1_write_int
       112   -> mbedtls_asn1_write_len
       112   -> mbedtls_asn1_write_oid
       112   -> mbedtls_asn1_write_tag
       112   -> mbedtls_oid_get_oid_by_sig_alg
       112   -> mbedtls_pk_can_do
       112   -> mbedtls_pk_sign
       112   -> mbedtls_pk_write_pubkey_der
       112   -> mbedtls_x509_write_extensions
       112   -> mbedtls_x509_write_names
       112   -> mbedtls_x509_write_sig
       112   -> psa_hash_compute
       112   -> sl_calloc
       112   -> sl_free
       8   mbedtls_x509write_csr_free
         8   -> mbedtls_asn1_free_named_data_list
         0   -> mbedtls_platform_zeroize
       8   mbedtls_x509write_csr_init
      32   mbedtls_x509write_csr_pem
        32   -> mbedtls_pem_write_buffer
        32   -> mbedtls_x509write_csr_der
      24   mbedtls_x509write_csr_set_extension
        24   -> mbedtls_x509_set_extension
       0   mbedtls_x509write_csr_set_key
      32   mbedtls_x509write_csr_set_key_usage
        32   -> mbedtls_asn1_write_named_bitstring
        32   -> mbedtls_x509write_csr_set_extension
       0   mbedtls_x509write_csr_set_md_alg
      32   mbedtls_x509write_csr_set_ns_cert_type
        32   -> mbedtls_asn1_write_named_bitstring
        32   -> mbedtls_x509write_csr_set_extension
       0   mbedtls_x509write_csr_set_subject_alternative_name
         0   -> mbedtls_x509_write_set_san_common
       0   mbedtls_x509write_csr_set_subject_name
         0   -> mbedtls_x509_string_to_names


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
      20  ?Subroutine0
      12  ?Subroutine1
      10  ?Subroutine2
      76  ?_0
       4  ?_2
      12  ?_3
      12  ?_4
     494  mbedtls_x509write_csr_der
      30  mbedtls_x509write_csr_free
      16  mbedtls_x509write_csr_init
      56  mbedtls_x509write_csr_pem
      18  mbedtls_x509write_csr_set_extension
       4  mbedtls_x509write_csr_set_key
      36  mbedtls_x509write_csr_set_key_usage
       4  mbedtls_x509write_csr_set_md_alg
      36  mbedtls_x509write_csr_set_ns_cert_type
       6  mbedtls_x509write_csr_set_subject_alternative_name
       6  mbedtls_x509write_csr_set_subject_name

 
  80 bytes in section .rodata
 788 bytes in section .text
 
 788 bytes of CODE  memory
  80 bytes of CONST memory

Errors: none
Warnings: none
