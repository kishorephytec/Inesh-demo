###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         27/Nov/2024  12:17:50
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode                 =  thumb
#    Endian                   =  little
#    Source file              =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\nanostack\nanostack-libservice\source\libip6string\ip6tos.c
#    Command line             =
#        -f
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\libip6string_14883348783170439957.dir\ip6tos.o.rsp
#        (C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\nanostack\nanostack-libservice\source\libip6string\ip6tos.c
#        -D EFR32FG28B322F1024IM48=1 -D
#        configNUM_SDK_THREAD_LOCAL_STORAGE_POINTERS=2 -D
#        SL_COMPONENT_CATALOG_PRESENT=1 -D
#        MBEDTLS_CONFIG_FILE=<sl_mbedtls_config.h> -D
#        MBEDTLS_PSA_CRYPTO_CONFIG_FILE=<psa_crypto_config.h> -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -D
#        RTT_USE_ASM=0 -D MBED_CONF_MBED_TRACE_ENABLE=1 -D
#        MBED_CONF_NANOSTACK_CONFIGURATION=ws_router -D
#        MBED_TRACE_MAX_LEVEL=TRACE_ACTIVE_LEVEL_ALL -D DEBUG_EFM_USER=1 -D
#        HAVE_LFN=1 -D HAVE_LFN_PARENT=1 -lC
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\lst\libip6string_14883348783170439957.dir
#        --diag_suppress Pa050 -o
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\libip6string_14883348783170439957.dir
#        --debug --endian=little --cpu=Cortex-M33 --cmse --cmse -e
#        --fpu=VFPv5_sp --dlib_config "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\nanostack\nanostack-libservice\source\libip6string\
#        -I C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\autogen\ -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\config\ -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\config\rail\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\Device\SiliconLabs\EFR32FG28\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\common\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\CMSIS\Core\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\CMSIS\RTOS2\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\device_init\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\dmadrv\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\common\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emlib\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\cmsis\Include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\kernel\include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\freertos\kernel\portable\IAR\ARM_CM33_NTZ\non_secure\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\iostream\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\config\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\config\preset\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_mbedtls_support\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\include\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\mbedtls\library\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\emdrv\nvm3\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\peripheral\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\sl_psa_driver\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\common\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\ble\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\wmbus\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\zwave\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\protocol\sidewalk\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\pa-conversions\efr32xg28\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\radio\rail_lib\plugin\rail_util_pti\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\security\sl_component\se_manager\src\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\third_party\segger\systemview\SEGGER\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\util\silicon_labs\silabs_core\memory_manager\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\common\toolchain\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\system\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\ns_list\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\nanostack\nanostack-libservice\mbed-client-libservice\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\platform\service\sleeptimer\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\inc\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\app\wisun_rcp\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\inc\socket\
#        -I
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\protocol\wisun\stack\src\
#        -Ohz --use_c++_inline) --dependencies=n
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\libip6string_14883348783170439957.dir\ip6tos.o.iar_deps
#    Locale                   =  C
#    List file                =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\lst\libip6string_14883348783170439957.dir\ip6tos.lst
#    Object file              =
#        C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\ewarm-iar\obj\libip6string_14883348783170439957.dir\ip6tos.o
#    Runtime model:              
#      __CPP_Runtime          =  1
#      __SystemLibrary        =  DLib
#      __dlib_file_descriptor =  0
#      __dlib_version         =  6
#      __iar_require _Printf  =  int_specials
#
###############################################################################

C:\Users\DELL\SimplicityStudio\v5_workspace\wisun_rcp_7\gecko_sdk_4.4.3\app\wisun\component\trace_util\nanostack\nanostack-libservice\source\libip6string\ip6tos.c
      1          /*
      2           * Copyright (c) 2014-2015 ARM Limited. All rights reserved.
      3           * SPDX-License-Identifier: Apache-2.0
      4           * Licensed under the Apache License, Version 2.0 (the License); you may
      5           * not use this file except in compliance with the License.
      6           * You may obtain a copy of the License at
      7           *
      8           * http://www.apache.org/licenses/LICENSE-2.0
      9           *
     10           * Unless required by applicable law or agreed to in writing, software
     11           * distributed under the License is distributed on an AS IS BASIS, WITHOUT
     12           * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     13           * See the License for the specific language governing permissions and
     14           * limitations under the License.
     15           */
     16          #include <stdio.h>
     17          #include <string.h>
     18          #include "common_functions.h"
     19          #include "common_inlined_functions.h"
     20          #include "ip6string.h"
     21          
     22          /**
     23           * Print binary IPv6 address to a string.
     24           * String must contain enough room for full address, 40 bytes exact.
     25           * IPv4 tunneling addresses are not covered.
     26           * \param addr IPv6 address.
     27           * \p buffer to write string to.
     28           */

   \                                 In section .text, align 2, keep-with-next
     29          uint_fast8_t ip6tos(const void *ip6addr, char *p)
     30          {
   \                     ip6tos: (+1)
   \        0x0   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \        0x4   0x4603             MOV      R3,R0
   \        0x6   0x460A             MOV      R2,R1
     31            char *p_orig = p;
   \        0x8   0x4616             MOV      R6,R2
     32            uint_fast8_t zero_start = 255;
   \        0xA   0xF04F 0x0AFF      MOV      R10,#+255
     33            uint_fast8_t zero_len = 1;
   \        0xE   0xF04F 0x0901      MOV      R9,#+1
     34            const uint8_t *addr = ip6addr;
   \       0x12   0x461C             MOV      R4,R3
     35            uint_fast16_t part;
     36          
     37            /* Follow RFC 5952 - pre-scan for longest run of zeros */
     38            for (uint_fast8_t n = 0; n < 8; n++) {
   \       0x14   0x2500             MOVS     R5,#+0
     39              part = *addr++;
     40              part = (part << 8) | *addr++;
   \                     ??ip6tos_0: (+1)
   \       0x16   0x7821             LDRB     R1,[R4, #+0]
   \       0x18   0x7860             LDRB     R0,[R4, #+1]
   \       0x1A   0x1CA4             ADDS     R4,R4,#+2
   \       0x1C   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
     41              if (part != 0) {
   \       0x20   0xB988             CBNZ.N   R0,??ip6tos_1
     42                continue;
     43              }
     44          
     45              /* We're at the start of a run of zeros - scan to non-zero (or end) */
     46              uint_fast8_t n0 = n;
   \       0x22   0x4629             MOV      R1,R5
     47              for (n = n0 + 1; n < 8; n++) {
   \       0x24   0x1C4D             ADDS     R5,R1,#+1
   \       0x26   0xE000             B.N      ??ip6tos_2
   \                     ??ip6tos_3: (+1)
   \       0x28   0x1C6D             ADDS     R5,R5,#+1
   \                     ??ip6tos_2: (+1)
   \       0x2A   0x2D08             CMP      R5,#+8
   \       0x2C   0xD206             BCS.N    ??ip6tos_4
     48                part = *addr++;
     49                part = (part << 8) | *addr++;
   \       0x2E   0x7827             LDRB     R7,[R4, #+0]
   \       0x30   0x7860             LDRB     R0,[R4, #+1]
   \       0x32   0x1CA4             ADDS     R4,R4,#+2
   \       0x34   0xEA40 0x2007      ORR      R0,R0,R7, LSL #+8
     50                if (part != 0) {
   \       0x38   0x2800             CMP      R0,#+0
   \       0x3A   0xD0F5             BEQ.N    ??ip6tos_3
     51                  break;
     52                }
     53              }
     54          
     55              /* Now n0->initial zero of run, n->after final zero in run. Is this the
     56               * longest run yet? If equal, we stick with the previous one - RFC 5952
     57               * S4.2.3. Note that zero_len being initialised to 1 stops us
     58               * shortening a 1-part run (S4.2.2.)
     59               */
     60              if (n - n0 > zero_len) {
   \                     ??ip6tos_4: (+1)
   \       0x3C   0x1A68             SUBS     R0,R5,R1
   \       0x3E   0x4581             CMP      R9,R0
   \       0x40   0xBF3C             ITT      CC
   \       0x42   0x468A             MOVCC    R10,R1
   \       0x44   0x4681             MOVCC    R9,R0
     61                zero_start = n0;
     62                zero_len = n - n0;
     63              }
     64          
     65              /* Continue scan for initial zeros from part n+1 - we've already
     66               * consumed part n, and know it's non-zero. */
     67            }
   \                     ??ip6tos_1: (+1)
   \       0x46   0x1C6D             ADDS     R5,R5,#+1
   \       0x48   0x2D08             CMP      R5,#+8
   \       0x4A   0xD3E4             BCC.N    ??ip6tos_0
     68          
     69            /* Now go back and print, jumping over any zero run */
     70            addr = ip6addr;
     71            for (uint_fast8_t n = 0; n < 8; ) {
   \       0x4C   0x2400             MOVS     R4,#+0
   \       0x4E   0x.... 0x....      ADR.W    R8,??DataTable3
   \       0x52   0x4615             MOV      R5,R2
   \       0x54   0x461F             MOV      R7,R3
     72              if (n == zero_start) {
   \                     ??ip6tos_5: (+1)
   \       0x56   0x4554             CMP      R4,R10
   \       0x58   0xD10A             BNE.N    ??ip6tos_6
     73                if (n == 0) {
   \       0x5A   0xB914             CBNZ.N   R4,??ip6tos_7
     74                  *p++ = ':';
   \       0x5C   0x203A             MOVS     R0,#+58
   \       0x5E   0xF805 0x0B01      STRB     R0,[R5], #+1
     75                }
     76                *p++ = ':';
   \                     ??ip6tos_7: (+1)
   \       0x62   0x213A             MOVS     R1,#+58
   \       0x64   0xF805 0x1B01      STRB     R1,[R5], #+1
     77                addr += 2 * zero_len;
   \       0x68   0xEB07 0x0749      ADD      R7,R7,R9, LSL #+1
     78                n += zero_len;
   \       0x6C   0x444C             ADD      R4,R9,R4
     79                continue;
   \       0x6E   0xE00F             B.N      ??ip6tos_8
     80              }
     81          
     82              part = *addr++;
     83              part = (part << 8) | *addr++;
   \                     ??ip6tos_6: (+1)
   \       0x70   0x7838             LDRB     R0,[R7, #+0]
   \       0x72   0x787A             LDRB     R2,[R7, #+1]
     84              n++;
     85          
     86              p += sprintf(p, "%" PRIxFAST16, part);
   \       0x74   0x4641             MOV      R1,R8
   \       0x76   0x1CBF             ADDS     R7,R7,#+2
   \       0x78   0xEA42 0x2200      ORR      R2,R2,R0, LSL #+8
   \       0x7C   0x4628             MOV      R0,R5
   \       0x7E   0x1C64             ADDS     R4,R4,#+1
   \       0x80   0x.... 0x....      BL       sprintf
   \       0x84   0x4405             ADD      R5,R5,R0
     87          
     88              /* One iteration writes "part:" rather than ":part", and has the
     89               * explicit check for n == 8 below, to allow easy extension for
     90               * IPv4-in-IPv6-type addresses ("xxxx::xxxx:a.b.c.d"): we'd just
     91               * run the same loop for 6 parts, and output would then finish with the
     92               * required : or ::, ready for "a.b.c.d" to be tacked on.
     93               */
     94              if (n != 8) {
   \       0x86   0x2C08             CMP      R4,#+8
   \       0x88   0xD004             BEQ.N    ??ip6tos_9
     95                *p++ = ':';
   \       0x8A   0x203A             MOVS     R0,#+58
   \       0x8C   0xF805 0x0B01      STRB     R0,[R5], #+1
     96              }
     97            }
   \                     ??ip6tos_8: (+1)
   \       0x90   0x2C08             CMP      R4,#+8
   \       0x92   0xD3E0             BCC.N    ??ip6tos_5
     98            *p = '\0';
   \                     ??ip6tos_9: (+1)
   \       0x94   0x2100             MOVS     R1,#+0
   \       0x96   0x7029             STRB     R1,[R5, #+0]
     99          
    100            // Return length of generated string, excluding the terminating null character
    101            return p - p_orig;
   \       0x98   0x1BA8             SUBS     R0,R5,R6
   \       0x9A   0xE8BD 0x87F0      POP      {R4-R10,PC}
    102          }
    103          

   \                                 In section .text, align 2, keep-with-next
    104          uint_fast8_t ip6_prefix_tos(const void *prefix, uint_fast8_t prefix_len, char *p)
    105          {
   \                     ip6_prefix_tos: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0xB084             SUB      SP,SP,#+16
   \        0x4   0x460C             MOV      R4,R1
   \        0x6   0x4615             MOV      R5,R2
    106            char *wptr = p;
   \        0x8   0x466F             MOV      R7,SP
   \        0xA   0x2100             MOVS     R1,#+0
   \        0xC   0x2200             MOVS     R2,#+0
   \        0xE   0x2300             MOVS     R3,#+0
   \       0x10   0x2600             MOVS     R6,#+0
   \       0x12   0xE887 0x004E      STM      R7,{R1-R3,R6}
    107            uint8_t addr[16] = { 0 };
    108          
    109            if (prefix_len > 128) {
   \       0x16   0x2C81             CMP      R4,#+129
   \       0x18   0xBF28             IT       CS
   \       0x1A   0x2000             MOVCS    R0,#+0
    110              return 0;
   \       0x1C   0xD210             BCS.N    ??ip6_prefix_tos_0
    111            }
    112          
    113            // Generate prefix part of the string
    114            bitcopy(addr, prefix, prefix_len);
   \       0x1E   0x4601             MOV      R1,R0
   \       0x20   0x4622             MOV      R2,R4
   \       0x22   0x4668             MOV      R0,SP
   \       0x24   0x.... 0x....      BL       bitcopy
    115            wptr += ip6tos(addr, wptr);
   \       0x28   0x4629             MOV      R1,R5
   \       0x2A   0x4668             MOV      R0,SP
   \       0x2C   0x.... 0x....      BL       ip6tos
   \       0x30   0x182E             ADDS     R6,R5,R0
    116            // Add the prefix length part of the string
    117            wptr += sprintf(wptr, "/%" PRIuFAST8, prefix_len);
    118          
    119            // Return total length of generated string
    120            return wptr - p;
   \       0x32   0x4622             MOV      R2,R4
   \       0x34   0x....             ADR.N    R1,??DataTable3_1
   \       0x36   0x4630             MOV      R0,R6
   \       0x38   0x.... 0x....      BL       sprintf
   \       0x3C   0x4430             ADD      R0,R6,R0
   \       0x3E   0x1B40             SUBS     R0,R0,R5
   \                     ??ip6_prefix_tos_0: (+1)
   \       0x40   0xB005             ADD      SP,SP,#+20
   \       0x42   0xBDF0             POP      {R4-R7,PC}
    121          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \        0x0   0x25 0x78          DC8      0x25, 0x78, 0x00, 0x00
   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \        0x0   0x2F 0x25          DC8      "/%u"          
   \              0x75 0x00

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_0:
   \        0x0   0x25 0x78          DC8 "%x"
   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_1:
   \        0x0   0x2F 0x25          DC8 "/%u"
   \              0x75 0x00

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   ip6_prefix_tos
        40   -> bitcopy
        40   -> ip6tos
        40   -> sprintf
      32   ip6tos
        32   -> sprintf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ?_0
       4  ?_1
      68  ip6_prefix_tos
     158  ip6tos

 
   8 bytes in section .rodata
 234 bytes in section .text
 
 234 bytes of CODE  memory
   8 bytes of CONST memory

Errors: none
Warnings: none
